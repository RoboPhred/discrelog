{"version":3,"sources":["webpack://discrelog/./src/elements/definitions/element-and.ts","webpack://discrelog/./src/elements/definitions/element-buffer.ts","webpack://discrelog/./src/elements/definitions/element-led.ts","webpack://discrelog/./src/elements/definitions/element-nor.ts","webpack://discrelog/./src/elements/definitions/element-not.ts","webpack://discrelog/./src/elements/definitions/element-or.ts","webpack://discrelog/./src/elements/definitions/element-seg7.ts","webpack://discrelog/./src/elements/definitions/element-toggle.ts","webpack://discrelog/./src/elements/definitions/element-xor.ts","webpack://discrelog/./src/services/circuits/constants.ts","webpack://discrelog/./src/services/circuit-editor-ui/state.ts","webpack://discrelog/./src/services/circuits/state.ts","webpack://discrelog/./src/geometry.ts","webpack://discrelog/./src/services/clipboard/state.ts","webpack://discrelog/./src/services/dialog/state.ts","webpack://discrelog/./src/services/node-graph/state.ts","webpack://discrelog/./src/services/node-layout/state.ts","webpack://discrelog/./src/services/selection/state.ts","webpack://discrelog/./src/services/simulator/state.ts","webpack://discrelog/./src/services/simulator-graph/state.ts","webpack://discrelog/./src/store/state.ts","webpack://discrelog/./src/actions/init.ts","webpack://discrelog/./src/actions/field-drag-continue.ts","webpack://discrelog/./src/actions/field-mouse-leave.ts","webpack://discrelog/./src/actions/sim-tick.ts","webpack://discrelog/./src/actions/view-zoom.ts","webpack://discrelog/./src/arrays.ts","webpack://discrelog/./src/actions/wire-joint-move.ts","webpack://discrelog/./src/store/devtool-sanitizer.ts","webpack://discrelog/./src/actions/project-load.ts","webpack://discrelog/./src/actions/project-receive.ts","webpack://discrelog/./src/services/savedata/saga/project-load.ts","webpack://discrelog/./src/actions/project-save.ts","webpack://discrelog/./src/actions/dialog-show.ts","webpack://discrelog/./src/actions/dialog-response-accept.ts","webpack://discrelog/./src/actions/dialog-response-cancel.ts","webpack://discrelog/./src/services/dialog/api.ts","webpack://discrelog/./src/services/node-graph/types.ts","webpack://discrelog/./src/services/savedata/types.ts","webpack://discrelog/./src/store/utils.ts","webpack://discrelog/./src/actions/circuit-delete.ts","webpack://discrelog/./src/utils.ts","webpack://discrelog/./src/services/service-state-utils.ts","webpack://discrelog/./src/services/circuit-editor-ui/utils.ts","webpack://discrelog/./src/services/circuit-editor-ui/reducer/circuit-delete.ts","webpack://discrelog/./src/actions/circuit-edit.ts","webpack://discrelog/./src/services/circuit-editor-ui/reducer/circuit-edit.ts","webpack://discrelog/./src/actions/circuit-add.ts","webpack://discrelog/./src/services/circuit-editor-ui/reducer/circuit-new.ts","webpack://discrelog/./src/services/circuit-editor-ui/reducer/drag-continue.ts","webpack://discrelog/./src/actions/field-drag-end.ts","webpack://discrelog/./src/actions/select-region.ts","webpack://discrelog/./src/actions/selection-move.ts","webpack://discrelog/./src/actions/node-add.ts","webpack://discrelog/./src/actions/wire-attach.ts","webpack://discrelog/./src/services/circuit-editor-ui/selectors/snap.ts","webpack://discrelog/./src/services/node-graph/utils.ts","webpack://discrelog/./src/services/node-graph/selectors/nodes.ts","webpack://discrelog/./src/services/circuits/utils.ts","webpack://discrelog/./src/services/circuits/selectors/nodes.ts","webpack://discrelog/./src/services/node-layout/utils.ts","webpack://discrelog/./src/services/node-layout/selectors/node-positions.ts","webpack://discrelog/./src/hooks/useSelector.ts","webpack://discrelog/./src/services/circuits/selectors/circuits.ts","webpack://discrelog/./src/services/node-types/definition-sources/integrated-circuits/IntegratedCircuitVisual.tsx","webpack://discrelog/./src/services/node-types/definition-sources/integrated-circuits/utils.ts","webpack://discrelog/./src/services/node-types/definition-sources/integrated-circuits/index.tsx","webpack://discrelog/./src/services/node-types/definition-sources/index.ts","webpack://discrelog/./src/services/node-types/definition-sources/interaction/index.ts","webpack://discrelog/./src/services/node-types/definition-sources/logic/index.ts","webpack://discrelog/./src/services/node-types/definition-sources/output/index.ts","webpack://discrelog/./src/services/node-types/definition-sources/pins/index.ts","webpack://discrelog/./src/services/node-types/selectors/node-types.ts","webpack://discrelog/./src/services/node-layout/selectors/node-pin-positions.ts","webpack://discrelog/./src/services/circuit-editor-ui/selectors/drag.ts","webpack://discrelog/./src/actions/field-drag-start-newnode.ts","webpack://discrelog/./src/services/circuit-editor-ui/reducer/drag-start-newnode.ts","webpack://discrelog/./src/actions/field-drag-start-node.ts","webpack://discrelog/./src/actions/select-nodes.ts","webpack://discrelog/./src/services/selection/utils.ts","webpack://discrelog/./src/services/selection/selectors/selection.ts","webpack://discrelog/./src/actions/field-drag-start-select.ts","webpack://discrelog/./src/services/circuit-editor-ui/reducer/drag-start-select.ts","webpack://discrelog/./src/actions/field-drag-start-wire.ts","webpack://discrelog/./src/services/circuit-editor-ui/reducer/index.ts","webpack://discrelog/./src/services/circuit-editor-ui/reducer/drag-end.ts","webpack://discrelog/./src/services/circuit-editor-ui/reducer/drag-start-node.ts","webpack://discrelog/./src/services/circuit-editor-ui/reducer/drag-start-wire.ts","webpack://discrelog/./src/services/circuit-editor-ui/reducer/mouse-leave.ts","webpack://discrelog/./src/services/circuit-editor-ui/reducer/view-zoom.ts","webpack://discrelog/./src/services/circuits/reducer/circuit-add.ts","webpack://discrelog/./src/services/circuits/reducer/circuit-delete.ts","webpack://discrelog/./src/actions/circuit-rename.ts","webpack://discrelog/./src/services/circuits/reducer/circuit-rename.ts","webpack://discrelog/./src/services/circuit-editor-ui/selectors/circuit.ts","webpack://discrelog/./src/services/circuits/reducer/node-add.ts","webpack://discrelog/./src/actions/node-delete.ts","webpack://discrelog/./src/services/circuits/reducer/node-delete.ts","webpack://discrelog/./src/actions/project-new.ts","webpack://discrelog/./src/services/circuits/reducer/project-new.ts","webpack://discrelog/./src/services/circuits/reducer/index.ts","webpack://discrelog/./src/actions/clipboard-copy.ts","webpack://discrelog/./src/services/node-graph/selectors/connections.ts","webpack://discrelog/./src/services/node-graph/selectors/node-def.ts","webpack://discrelog/./src/services/node-graph/selectors/pins.ts","webpack://discrelog/./src/services/clipboard/utils.ts","webpack://discrelog/./src/services/clipboard/reducer/clipboard-copy.ts","webpack://discrelog/./src/actions/clipboard-paste.ts","webpack://discrelog/./src/services/clipboard/reducer/clipboard-paste.ts","webpack://discrelog/./src/services/clipboard/reducer/index.ts","webpack://discrelog/./src/services/dialog/utils.ts","webpack://discrelog/./src/services/dialog/reducer/index.ts","webpack://discrelog/./src/services/dialog/reducer/dialog-response-accept.ts","webpack://discrelog/./src/services/dialog/reducer/dialog-response-cancel.ts","webpack://discrelog/./src/services/dialog/reducer/dialog-show.ts","webpack://discrelog/./src/store/priorities.ts","webpack://discrelog/./src/services/node-graph/reducer/operations/node-delete.ts","webpack://discrelog/./src/services/node-graph/reducer/circuit-delete.ts","webpack://discrelog/./src/services/node-graph/reducer/node-add.ts","webpack://discrelog/./src/services/node-graph/reducer/node-delete.ts","webpack://discrelog/./src/services/node-graph/reducer/project-new.ts","webpack://discrelog/./src/services/node-graph/reducer/wire-attach.ts","webpack://discrelog/./src/actions/wire-detatch.ts","webpack://discrelog/./src/services/node-graph/reducer/wire-detatch.ts","webpack://discrelog/./src/services/node-graph/reducer/index.ts","webpack://discrelog/./src/services/node-layout/reducer/operations/node-delete.ts","webpack://discrelog/./src/services/node-layout/reducer/circuit-delete.ts","webpack://discrelog/./src/services/node-layout/reducer/node-add.ts","webpack://discrelog/./src/services/node-layout/reducer/node-delete.ts","webpack://discrelog/./src/actions/node-move.ts","webpack://discrelog/./src/services/node-layout/reducer/node-move.ts","webpack://discrelog/./src/services/node-layout/reducer/project-new.ts","webpack://discrelog/./src/services/node-layout/reducer/wire-attach.ts","webpack://discrelog/./src/services/node-layout/reducer/wire-detatch.ts","webpack://discrelog/./src/actions/wire-joint-add.ts","webpack://discrelog/./src/services/node-layout/reducer/wire-joint-add.ts","webpack://discrelog/./src/actions/wire-joint-delete.ts","webpack://discrelog/./src/services/node-layout/reducer/index.ts","webpack://discrelog/./src/services/node-layout/reducer/wire-joint-delete.ts","webpack://discrelog/./src/services/node-layout/reducer/wire-joint-move.ts","webpack://discrelog/./src/services/savedata/reducer/autosave.ts","webpack://discrelog/./src/services/savedata/reducer/index.ts","webpack://discrelog/./src/services/savedata/utils.ts","webpack://discrelog/./src/services/savedata/reducer/project-new.ts","webpack://discrelog/./src/services/savedata/reducer/init.ts","webpack://discrelog/./src/services/savedata/reducer/project-receive.ts","webpack://discrelog/./src/services/selection/reducer/node-delete.ts","webpack://discrelog/./src/services/selection/reducer/project-new.ts","webpack://discrelog/./src/actions/select-all.ts","webpack://discrelog/./src/services/circuits/selectors/connections.ts","webpack://discrelog/./src/services/circuit-editor-ui/selectors/nodes.ts","webpack://discrelog/./src/services/node-layout/selectors/wires.ts","webpack://discrelog/./src/services/selection/reducer/select-all.ts","webpack://discrelog/./src/actions/select-clear.ts","webpack://discrelog/./src/services/selection/reducer/select-clear.ts","webpack://discrelog/./src/actions/select-wire-joints.ts","webpack://discrelog/./src/services/selection/reducer/select-joints.ts","webpack://discrelog/./src/services/selection/reducer/select-nodes.ts","webpack://discrelog/./src/services/node-layout/selectors/node-bounds.ts","webpack://discrelog/./src/services/selection/reducer/select-region.ts","webpack://discrelog/./src/actions/select-wires.ts","webpack://discrelog/./src/services/selection/reducer/select-wires.ts","webpack://discrelog/./src/actions/selection-copy.ts","webpack://discrelog/./src/actions/selection-delete.ts","webpack://discrelog/./src/services/selection/reducer/index.ts","webpack://discrelog/./src/services/selection/reducer/selection-copy.ts","webpack://discrelog/./src/services/selection/reducer/selection-delete.ts","webpack://discrelog/./src/services/selection/reducer/selection-move.ts","webpack://discrelog/./src/services/selection/reducer/wire-detatch.ts","webpack://discrelog/./src/services/simulator/utils.ts","webpack://discrelog/./src/services/simulator/reducer/element-graph-invalidated.ts","webpack://discrelog/./src/elements/definitions/index.ts","webpack://discrelog/./src/actions/node-interact.ts","webpack://discrelog/./src/services/simulator-graph/utils.ts","webpack://discrelog/./src/services/simulator-graph/selectors/nodes.ts","webpack://discrelog/./src/services/simulator-graph/selectors/connections.ts","webpack://discrelog/./src/services/simulator/reducer/utils.ts","webpack://discrelog/./src/services/simulator/reducer/node-interact.ts","webpack://discrelog/./src/actions/sim-fastforward.ts","webpack://discrelog/./src/services/simulator/reducer/sim-tick.ts","webpack://discrelog/./src/actions/sim-pause.ts","webpack://discrelog/./src/services/simulator/selectors/run.ts","webpack://discrelog/./src/services/simulator/reducer/sim-pause.ts","webpack://discrelog/./src/actions/sim-start.ts","webpack://discrelog/./src/services/simulator/reducer/sim-start.ts","webpack://discrelog/./src/actions/sim-stop.ts","webpack://discrelog/./src/services/simulator/reducer/sim-stop.ts","webpack://discrelog/./src/services/simulator/reducer/index.ts","webpack://discrelog/./src/services/simulator/reducer/sim-fastforward.ts","webpack://discrelog/./src/services/simulator-graph/reducer/sim-start.ts","webpack://discrelog/./src/services/simulator-graph/reducer/sim-stop.ts","webpack://discrelog/./src/services/simulator-graph/reducer/index.ts","webpack://discrelog/./src/store/reducer.ts","webpack://discrelog/./src/services/savedata/errors.ts","webpack://discrelog/./src/services/savedata/saga/project-save.ts","webpack://discrelog/./src/services/savedata/saga/index.ts","webpack://discrelog/./src/services/simulator/saga/mode-run.ts","webpack://discrelog/./src/services/simulator/saga/index.ts","webpack://discrelog/./src/store/store.ts","webpack://discrelog/./src/store/saga.ts","webpack://discrelog/./src/styles/flex.module.css?69d1","webpack://discrelog/./src/styles/sizing.module.css?bdee","webpack://discrelog/./src/services/simulator/selectors/performance.ts","webpack://discrelog/./src/services/circuit-editor-ui/selectors/view.ts","webpack://discrelog/./src/runtime-env.ts","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/keymap.ts","webpack://discrelog/./src/services/node-layout/selectors/field.ts","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/contexts/fieldSvgElement.tsx","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/hooks/useMouseCoords.ts","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/utils.ts","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/NodeVisual.tsx","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/DragNewNodeLayer.tsx","webpack://discrelog/./src/services/simulator/selectors/nodes.ts","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/DragNodePreviewLayer.tsx","webpack://discrelog/./src/selection-mode.ts","webpack://discrelog/./src/hooks/useMouseTracking.ts","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/DragSelectLayer.tsx","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/GridBackground.tsx","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/Node/index.ts","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/Node/node.tsx","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/NodesLayer.tsx","webpack://discrelog/./src/services/simulator/selectors/wires.ts","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/WireSegment.tsx","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/WireJoint/index.ts","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/WireJoint/WireJoint.tsx","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/WireJoint/WireJoint.module.css?7a67","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/Wire/index.ts","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/Wire/Wire.tsx","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/Wire/Wire.module.css?6531","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/WiresLayer.tsx","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/NodePin/NodePin.module.css?a4c3","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/NodePin/NodePin.tsx","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/NodePin/index.ts","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/NodePins.tsx","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/NodePinsLayer.tsx","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/DragAttachWirePreviewLayer.tsx","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/index.ts","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/CircuitField.tsx","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/CircuitField.module.css?efe4","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/index.ts","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/CircuitFieldView.tsx","webpack://discrelog/./src/hooks/useNativeEvent.ts","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/CircuitFieldView.module.css?8af4","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitsTree/CircuitsTree.module.css?54d4","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitsTree/CircuitsTree.tsx","webpack://discrelog/./src/pages/CircuitEditor/components/NodeTray/NodeTray.tsx","webpack://discrelog/./src/pages/CircuitEditor/CircuitEditor.tsx","webpack://discrelog/./src/pages/CircuitEditor/components/NodeTray/NodeTray.module.css?7416","webpack://discrelog/./src/pages/CircuitEditor/index.ts","webpack://discrelog/./src/hooks/useAction.ts","webpack://discrelog/./src/components/Icons/Play.tsx","webpack://discrelog/./src/components/Icons/Stop.tsx","webpack://discrelog/./src/components/Icons/Pause.tsx","webpack://discrelog/./src/components/SimControls/SimControls.module.css?f276","webpack://discrelog/./src/components/SimControls/index.ts","webpack://discrelog/./src/components/SimControls/SimControls.tsx","webpack://discrelog/./src/components/FileMenu.tsx","webpack://discrelog/./src/components/TitleBar.tsx","webpack://discrelog/./src/services/dialog/selectors/dialog.ts","webpack://discrelog/./src/components/DialogManager/dialogs/SaveProjectDialog.tsx","webpack://discrelog/./src/components/DialogManager/index.ts","webpack://discrelog/./src/components/DialogManager/DialogManager.tsx","webpack://discrelog/./src/index.tsx","webpack://discrelog/./src/components/App/App.tsx","webpack://discrelog/./src/services/node-types/components/ShapePathNode.tsx","webpack://discrelog/./src/services/node-types/definition-sources/interaction/toggle.ts","webpack://discrelog/./src/services/node-types/definition-sources/logic/and.tsx","webpack://discrelog/./src/services/node-types/definition-sources/logic/buffer.tsx","webpack://discrelog/./src/services/node-types/definition-sources/logic/nor.tsx","webpack://discrelog/./src/services/node-types/definition-sources/logic/not.tsx","webpack://discrelog/./src/services/node-types/definition-sources/logic/or.tsx","webpack://discrelog/./src/services/node-types/definition-sources/logic/xor.tsx","webpack://discrelog/./src/services/node-types/definition-sources/output/led.ts","webpack://discrelog/./src/services/node-types/definition-sources/output/seg7.ts","webpack://discrelog/./src/services/node-types/definition-sources/pins/input.tsx","webpack://discrelog/./src/services/node-types/definition-sources/pins/output.tsx"],"names":["inputPins","outputPins","evolve","state","inputs","tick","transitions","tickOffset","valuesByPin","OUT","A","B","IN","value","defaultToggleState","toggleState","interact","ROOT_CIRCUIT_ID","_defaultState","editingCircuitId","viewScale","dragMode","dragStart","dragEnd","dragNewNodeType","dragWireSource","defaultCircuitEditorUiState","Object","freeze","circuitNamesByCircuitId","nodeIdsByCircuitId","defaultCircuitsState","pointSchema","shape","x","required","y","ZeroPoint","magnitude","v","Math","sqrt","normalizeRectangle","args","p1","p2","length","r","min","max","pointAdd","pointSubtract","calcSize","width","height","union","r1","r2","defaultClipboardState","clipboardNodes","clipboardPasteOrigin","defaultDialogState","dialogType","data","defaultNodeGraphState","nodesById","connectionsById","defaultNodeLayoutState","nodePositionsById","wireJointIdsByConnectionId","wireJointPositionsByJointId","defaultSelectionState","selectedNodeIds","selectedConnectionIds","selectedJointIds","defaultSimulatorState","mode","ticksPerSecond","nodeStatesByNodeId","nodeOutputValuesByNodeId","transitionsById","transitionWindows","profilerLogicUpdateMsecs","defaultSimulatorGraphState","simulatorNodesById","simulatorNodeIdsByCircuitNodeId","_defaultAppState","services","circuitEditorUi","nodeGraph","nodeLayout","circuits","clipboard","dialog","selection","simulator","simulatorGraph","defaultAppState","ACTION_INIT","ACTION_FIELD_DRAG_CONTINUE","fieldDragContinue","p","type","payload","ACTION_FIELD_MOUSE_LEAVE","ACTION_SIM_TICK","tickSim","tickCount","ACTION_VIEW_ZOOM","asArray","Array","isArray","ACTION_WIRE_JOINT_MOVE","moveWireJoint","jointId","position","relative","jointIds","ACTION_WIRE_JOINT_MOVE_END","moveWireJointEnd","actionsBlacklist","ACTION_PROJECT_LOAD","loadProject","ACTION_PROJECT_RECEIVE","projectLoadSaga","file","accept","contents","text","bind","saveData","JSON","parse","receiveProject","e","console","warn","ACTION_PROJECT_SAVE","saveProject","ACTION_DIALOG_SHOW","ACTION_DIALOG_RESPONSE_ACCEPT","acceptDialog","result","ACTION_DIALOG_RESPONSE_CANCEL","cancelDialog","displayDialogSaga","showDialog","response","nodePinSchema","nodeId","pinId","nodePinEquals","a","b","saveCircuitSchema","circuitId","circuitName","saveNodeSchema","nodeType","saveWireSchema","output","input","joints","of","saveDataSchema","nodes","wires","concatReducers","reducers","concat","ACTION_CIRCUIT_DELETE","isDeleteCircuitAction","action","cls","values","filter","Boolean","join","fpSet","target","firstPaths","slice","map","String","lastPath","newData","clone","seg","obj","createServiceReducerCreator","service","reducer","newState","createServiceSelectorCreator","selector","appSelector","s","local","createCircuitEditorUiReducer","createCircuitEditorUiSelector","ACTION_CIRCUIT_EDIT","isEditCircuitAction","ACTION_CIRCUIT_ADD","addCircuit","edit","isAddCircuitAction","isFieldDragContinueAction","ACTION_FIELD_DRAG_END","fieldDragEnd","point","selectionMode","ACTION_SELECT_REGION","ACTION_SELECTION_MOVE","ACTION_NODE_ADD","addNode","opts","isAddNodeAction","ACTION_WIRE_ATTACH","attachWire","connectionId","isAttachWireAction","gridSnapSelector","applyGridSnapSelector","snap","round","createNodeGraphReducer","createNodeGraphSelector","nodesByNodeIdSelector","nodeIdsSelector","createSelector","keys","nodeTypesByNodeIdSelector","nodeFromNodeIdSelector","nodeIdsFromTypeSelector","desiredType","nodeIds","push","nodeTypeFromNodeIdSelector","node","createCircuitsReducer","createCircuitsSelector","nodeIdsByCircuitIdSelector","nodeIdsFromCircuitIdSelector","circuitIdFromNodeIdSelector","indexOf","createNodeLayoutReducer","createNodeLayoutSelector","nodePositionsByNodeIdSelector","nodePositionFromNodeIdSelector","useSelector","circuitIdsSelector","circuitNamesByIdSelector","circuitNameFromIdSelector","getBorderPath","inputPinCount","outputPinCount","IntegratedCircuitVisual","borderPath","i","key","className","stroke","strokeWidth","x1","y1","x2","y2","fill","d","textAnchor","circuitToNodeVisual","hitPath","component","props","circuitPinPosition","pinIndex","direction","circuitIdToNodeType","nodeTypesByNodeId","nodePositionsByNodeId","pinNodeIds","circuitNodeId","startsWith","pins","pinNodeId","elementProduction","visual","cachedNodeDefinitionsSelector","nodeDefinitionsSelector","nodeDefinitions","source","resolved","resolveSources","every","def","index","nodeDefinitionsByTypeSelector","defs","defsByType","nodeDefinitionFromTypeSelector","definitions","nodePinPositionsByPinIdByNodeIdSelector","nodeDefsByType","nodePinPositionsByPinIdByNodeId","nodePinPositionsByPinId","nodePosition","elementType","pinIds","pinPosition","dragModeSelector","dragStartSelector","dragEndSelector","selectionRectSelector","dragMoveOffsetSelector","gridSnap","isDraggingNewNodeSelector","dragNewNodeTypeSelector","dragWireTargetPinSelector","pinPositionsByPinIdByNodeId","pinPositionsByPinId","ACTION_FIELD_DRAG_START_NEWNODE","isFieldDragStartNewNodeAction","ACTION_FIELD_DRAG_START_NODE","ACTION_SELECT_NODES","selectNodes","createSelectionReducer","createSelectionSelector","combineSelection","selectedIds","chosenIds","selectedNodeIdsSelector","isNodeSelectedFromNodeIdSelector","isWireSelectedFromConnectionIdSelector","selectedJointIdsSelector","isJointSelectedFromJointIdSelector","ACTION_FIELD_DRAG_START_SELECT","isFieldDragStartSelectAction","ACTION_FIELD_DRAG_START_WIRE","isFieldDragEndAction","rect","region","selectRegion","moveBy","offsetX","offsetY","endPin","isFieldDragStartNodeAction","isFieldDragStartWireAction","pin","isFieldMouseLeaveAction","isViewZoomAction","scale","delta","rootState","remainingCircuitIds","circuitTypeNodeIds","ACTION_CIRCUIT_RENAME","isRenameCircuitAction","trimmedName","trim","editingCircuitIdSelector","targetCircuitId","ACTION_NODE_DELETE","isDeleteNodeAction","circuitNodeIds","ACTION_PROJECT_NEW","newProject","isNewProjectAction","ACTION_COPY_NODES","connectionsByIdSelector","connectionIdsSelector","connectionFromConnectionIdSelector","connectionsSelector","nodeInputConnectionIdsFromNodeIdSelector","inputPin","nodeOutputConnectionIdsFromNodeIdSelector","outputPin","nodeDefFromNodeIdSelector","nodePinsFromPinNodeSelector","icNodeType","icNodeId","createClipboardReducer","appState","isCopyNodesAction","copyIds","rootPosition","copyNodes","outputs","connections","nodeDef","outputConnections","connection","nodeOutputSourcesByPinIdFromNodeIdSelector","id","offset","conns","nodeIsSelected","c","ACTION_PASTE","CLIPBOARD_PASTE_OFFSET","isPasteAction","pastePosition","pasteIds","sourceId","targetCopyId","targetPin","targetId","createDialogReducer","createDialogSelector","isAcceptDialogAction","isCancelDialogAction","isShowDialogAction","reducerPriority","priority","weight","priorityBefore","nodeDelete","remainingNodeIds","removedIcPins","some","conn","p1Node","p2Node","p1Def","p2Def","p1Pin","p2Pin","pinsToConnection","ACTION_WIRE_DETATCH","isDetatchWireAction","remainingIds","removingNodeConnectionIds","reduce","connectionIds","removingPinConnectionIds","removedPin","removingJointIds","remainingConnectionIds","remainingJointIds","ACTION_NODE_MOVE","isMoveNodeAction","movedNodePositions","ACTION_WIRE_JOINT_ADD","isAddWireJointAction","addAfterJointId","wireJoints","insertionIndex","ACTION_WIRE_JOINT_DELETE","isDeleteWireJointAction","wireJointsByJointId","isMoveWireJointAction","movedJoints","AUTOSAVE_TRIGGERS","save","createSave","localStorage","setItem","stringify","removeItem","isInitAction","str","getItem","loadAutosave","loadSave","isReceiveProjectAction","ACTION_SELECT_CLEAR","connectionIdsByCircuitIdSelector","includes","nodeIdsForEditingCircuitSelector","connectionIdsForEditingCircuitSelector","startPositionCacheByConnectionId","endPositionCacheByConnectionId","wireJointIdsByConnectionIdSelector","wireJointIdsFromConnectionIdSelector","wireJointPositionFromJointIdSelector","wireJointPositionsByJointIdSelector","isSelectAllAction","wireJointIdsFromConnectionId","connId","isClearSelectionAction","ACTION_SELECT_WIRE_JOINTS","isSelectWireJointsAction","isSelectNodesAction","nodeBoundsByIdSelector","elementTypesByNodeId","nodeRectsByIdSelector","positionsById","boundsById","bounds","isSelectRegionAction","rects","chosenNodeIds","chosenJointIds","jointPositions","pointIntersects","ACTION_SELECT_WIRES","isSelectWiresAction","ACTION_SELECTION_COPY","ACTION_SELECTION_DELETE","isSelectionCopyAction","selectedNodes","isSelectionDeleteAction","detatchWire","deleteWireJoint","isMoveSelectionAction","moveNode","createSimulatorReducer","createSimulatorSelector","SIM_INVALIDATE_ACTIONS","ElementDefinitionsByType","and","or","nor","not","buffer","led","toggle","seg7","xor","ACTION_NODE_INTERACT","createSimulatorGraphReducer","createSimulatorGraphSelector","simulatorNodeIdFromCircuitNodeIdSelector","simulatorNodeIdsSelector","elementTypeFromSimulatorNodeId","simulatorNodeId","simulatorNode","outputSimulatorNodeIdsFromSimulatorNodeIdSelector","outputsByPin","inputPinsByPinIdFromSimulatorNodeIdSelector","inputsByPin","collectNodeTransitions","inputSourcesByPin","inputConn","sourceNodeId","sourcePinId","transition","transitionMerger","transitionTick","removeTransitionsByNodeId","addTransition","valuesByOutputPin","transitionId","newTransition","newWindow","transitionIds","splice","transitionWindowIndex","transitionWindow","tickWindowTransitionIndex","removeTransitionById","isInteractNodeAction","nodeState","ACTION_SIM_FASTFORWARD","isTickSimAction","start","performance","now","endTick","saftyCount","Error","window","shift","tickWindow","updateTime","updatedNodes","tid","outputNodeIds","ACTION_SIM_PAUSE","pauseSim","isSimActiveSelector","isSimRunningSelector","isSimPausedSelector","ticksPerSecondSelector","isPauseSimAction","runMode","ACTION_SIM_START","startSim","isStartSimAction","outputValues","initNode","simInit","ACTION_SIM_STOP","stopSim","isStopSimAction","isFastForwardSimAction","nextWindowTick","produceCircuit","EMPTY_PRODUCTION","inputElementPinsByCircuitPinId","outputElementPinsByCircuitPinId","topLevel","inputCircuitNodeIds","outputCircuitNodeIds","circuitNodeInputPinsByPinIdByNodeId","circuitNodeOutputPinsByPinIdByNodeId","productionResult","produceNode","circuitConnectionsById","outputSimPin","inputSimPins","outputSimNode","outputsByOutputPin","inputSimPin","production","produceElementNode","produceCircuitNode","finalizedList","finalizeReducerList","SaveFormatError","message","super","this","code","wire","validateSync","error","projectSaveSaga","fileName","blob","Blob","saveAs","saveDataSaga","runModeSaga","handleRunSim","tps","timeToWait","ceil","simulatorSaga","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","actionSanitizer","stateSanitizer","sagaMiddleware","store","run","dispatch","averageMsecsPerTickSelector","viewScaleSelector","keyboardIsMac","test","os","toString","keyboardCommandModifier","KEYMAP_SIM_STEP","KEYMAP_SIM_FASTFORWARD","KEYMAP_SELECT_ALL","KEYMAP_COPY","KEYMAP_PASTE","KEYMAP_DELETE","MinFieldRect","fieldRectSelector","nodeRectsById","wireJointsById","ContextProvider","Provider","FieldSvgElementProvider","children","svgElement","setSvgElement","current","useEventMouseCoords","fieldRef","pageX","pageY","field","ctm","getScreenCTM","pt","createSVGPoint","translated","matrixTransform","inverse","isSelected","onClick","onMouseDown","onMouseOver","onMouseUp","onMouseLeave","body","ElementComponent","elementState","transform","undefined","getMouseCoords","fieldRect","isDraggingNewNode","draggingNodeType","onMouseMove","opacity","nodeStatesByNodeIdSelector","cachedSimulatorNodeIdsByCircuitNodeId","cachedNodeStatesBySimulatorNodeId","cachedNodeStatesByNodeIdSelector","nodeStatesBySimulatorNodeId","selectedNodePositionsByIdSelector","selectedNodeTypesByIdSelector","nodeTypesById","selectedNodeStatesByIdSelector","nodeStatesById","selectedNodePositionsById","selectedNodeTypesById","selectedNodeStatesById","dragMoveOffset","elements","getModifiers","ctrlKey","altKey","shiftKey","metaKey","ctrlMetaKey","getSelectMode","modifiers","useMouseTracking","dragThreshold","onDragStart","onDragMove","onDragEnd","isTracking","setTracking","isTrackingRef","isDraggingRef","mouseDownRef","startTracking","cancelTracking","document","addEventListener","removeEventListener","abs","selectionRect","getCoords","fieldDragStartSelect","defaultPrevented","preventDefault","strokeDasharray","xmlns","patternUnits","isSimActive","pos","nodeStateFromNodeIdSelector","interactNode","fieldDragStartNode","nodeElements","wireValueFromConnectionIdSelector","outputVauesByNodeId","_","startJointId","endJointId","cacheData","inputNodeDef","inputNodePosition","outputPosition","wireStartPositionFromConnectionIdSelector","end","wireEndPositionFromConnectionIdSelector","mousePos","setMousePos","addedJointRef","addWireJoint","selectWires","onJointInsertMouseDown","insertJointPos","lineDir","m","normalize","scaler","cx","cy","mouseOver","setMouseOver","onJointDragMove","onJointDragEnd","selectWireJoints","startMoveJointTracking","onMouseOut","mouseDown","isPowered","segmentElements","jointElements","connectorElements","describeArc","radius","startAngle","endAngle","polarToCartesian","largeArcFlag","centerX","centerY","angleInDegrees","angleInRadians","PI","cos","sin","nodePinPositions","nodePinPositionFromNodePinSelector","pinDef","pinDirectionFromNodePinSelector","dragTargetPin","stopPropagation","isDragTarget","svgRef","focus","style","tabIndex","ref","viewRef","keyHandlers","createEventDispatcher","onWheel","deltaY","listener","options","passive","listenTarget","HotKeys","keyMap","handlers","CircuitTreeNodeCircuitLabel","isRenaming","setIsRenaming","onStartRename","onCancelRename","onRename","newName","renameCircuit","onDelete","deleteCircuit","onContextMenu","left","top","isEditing","defaultValue","onConfirm","onCancel","onDoubleClick","CircuitTreeContextMenu","onNewCircuit","TrayNode","fieldDragStartNewNode","NodeComponent","wrapInDummyWindow","Component","path","title","WindowMap","circuitNamesById","onNodeClick","treeItems","label","renderTile","initialValue","first","second","splitPercentage","useAction","actionCreator","preBind","isActive","isPaused","onPlayClick","onStopClick","onPauseClick","Stop","Play","Pause","onNewProject","onSaveProject","onLoadProject","icon","align","content","minimal","dialogTypeSelector","onCancelDialog","onAcceptDialog","projectName","setProjectName","onSetProjectName","onAccept","isOpen","onClose","canEscapeKeyClose","canOutsideClickClose","placeholder","onChange","intent","disabled","rootEl","getElementById","ShapePathNode","shapePath","createShapePathNode","fillRule","OFFSET","createSeg","name","points","C","D","E","F","G"],"mappings":"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","file":"client.6e42c61dde3d14224be9.bundle.js","sourcesContent":["import { ElementDefinition } from \"../types\";\r\n\r\nconst andElementDefinition: ElementDefinition = {\r\n  inputPins: [\"A\", \"B\"],\r\n  outputPins: [\"OUT\"],\r\n  evolve(state, inputs, tick) {\r\n    return {\r\n      transitions: {\r\n        tickOffset: 4,\r\n        valuesByPin: { OUT: inputs.A && inputs.B },\r\n      },\r\n    };\r\n  },\r\n};\r\nexport default andElementDefinition;\r\n","import { ElementDefinition } from \"../types\";\r\n\r\nconst bufferElementDefinition: ElementDefinition = {\r\n  inputPins: [\"IN\"],\r\n  outputPins: [\"OUT\"],\r\n  evolve(state, inputs, tick) {\r\n    return {\r\n      transitions: {\r\n        tickOffset: 4,\r\n        valuesByPin: { OUT: inputs.IN },\r\n      },\r\n    };\r\n  },\r\n};\r\nexport default bufferElementDefinition;\r\n","import { ElementDefinition } from \"../types\";\r\n\r\nexport interface LedElementState {\r\n  value: boolean;\r\n}\r\n\r\nconst ledElementDefinition: ElementDefinition = {\r\n  inputPins: [\"IN\"],\r\n  outputPins: [],\r\n  evolve(state: LedElementState, inputs, tick) {\r\n    return {\r\n      state: {\r\n        value: inputs.IN,\r\n      },\r\n    };\r\n  },\r\n};\r\nexport default ledElementDefinition;\r\n","import { ElementDefinition } from \"../types\";\r\n\r\nconst norElementDefinition: ElementDefinition = {\r\n  inputPins: [\"A\", \"B\"],\r\n  outputPins: [\"OUT\"],\r\n  evolve(state, inputs, tick) {\r\n    return {\r\n      transitions: {\r\n        tickOffset: 4,\r\n        valuesByPin: { OUT: !(inputs.A || inputs.B) },\r\n      },\r\n    };\r\n  },\r\n};\r\nexport default norElementDefinition;\r\n","import { ElementDefinition } from \"../types\";\r\n\r\nconst notElementDefinition: ElementDefinition = {\r\n  inputPins: [\"IN\"],\r\n  outputPins: [\"OUT\"],\r\n  evolve(state, inputs, tick) {\r\n    return {\r\n      transitions: {\r\n        tickOffset: 4,\r\n        valuesByPin: { OUT: !inputs.IN },\r\n      },\r\n    };\r\n  },\r\n};\r\nexport default notElementDefinition;\r\n","import { ElementDefinition } from \"../types\";\r\n\r\nconst orElementDefinition: ElementDefinition = {\r\n  inputPins: [\"A\", \"B\"],\r\n  outputPins: [\"OUT\"],\r\n  evolve(state, inputs, tick) {\r\n    return {\r\n      transitions: {\r\n        tickOffset: 4,\r\n        valuesByPin: { OUT: inputs.A || inputs.B },\r\n      },\r\n    };\r\n  },\r\n};\r\nexport default orElementDefinition;\r\n","import { ElementDefinition } from \"../types\";\r\n\r\nconst seg7ElementDefinition: ElementDefinition = {\r\n  inputPins: [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"],\r\n  outputPins: [],\r\n  evolve(state, inputs, tick) {\r\n    return {\r\n      state: { ...inputs },\r\n    };\r\n  },\r\n};\r\nexport default seg7ElementDefinition;\r\n","import { ElementDefinition } from \"../types\";\r\n\r\nexport interface ToggleElementState {\r\n  toggleState: boolean;\r\n}\r\nconst defaultToggleState: ToggleElementState = {\r\n  toggleState: false,\r\n};\r\n\r\nconst toggleElementDefinition: ElementDefinition = {\r\n  inputPins: [],\r\n  outputPins: [\"OUT\"],\r\n  interact(state: ToggleElementState = defaultToggleState) {\r\n    return {\r\n      ...state,\r\n      toggleState: !state.toggleState,\r\n    };\r\n  },\r\n  evolve(state = defaultToggleState, inputs, tick) {\r\n    return {\r\n      state,\r\n      transitions: {\r\n        tickOffset: 1,\r\n        valuesByPin: { OUT: state.toggleState },\r\n      },\r\n    };\r\n  },\r\n};\r\nexport default toggleElementDefinition;\r\n","import { ElementDefinition } from \"../types\";\r\n\r\nconst xorElementDefinition: ElementDefinition = {\r\n  inputPins: [\"A\", \"B\"],\r\n  outputPins: [\"OUT\"],\r\n  evolve(state, inputs, tick) {\r\n    return {\r\n      transitions: {\r\n        tickOffset: 4,\r\n        valuesByPin: { OUT: (inputs.A || inputs.B) && inputs.A != inputs.B },\r\n      },\r\n    };\r\n  },\r\n};\r\nexport default xorElementDefinition;\r\n","export const ROOT_CIRCUIT_ID = \"root\";\r\n","import { Point } from \"@/geometry\";\r\nimport { NodePin } from \"../node-graph/types\";\r\nimport { ROOT_CIRCUIT_ID } from \"../circuits/constants\";\r\n\r\nexport interface CircuitEditorUiState {\r\n  /**\r\n   * The id of the circuit currently being edited.\r\n   */\r\n  editingCircuitId: string;\r\n\r\n  /**\r\n   * The scaling for rendering the circuit in the UI.\r\n   */\r\n  viewScale: number;\r\n\r\n  // TODO: Drag stuff should probably be its own service.\r\n  /**\r\n   * The current drag operation being performed by the ui.\r\n   */\r\n  dragMode: \"move\" | \"select\" | \"new-node\" | \"wire\" | null;\r\n  /**\r\n   * The start of the drag operation, if applicable for the current operation.\r\n   */\r\n  dragStart: Point | null;\r\n  /**\r\n   * The current end point for the drag operation.  This does not indicate the final\r\n   * drag position, but the cumulative position.\r\n   */\r\n  dragEnd: Point | null;\r\n  /**\r\n   * If dragMode is \"new-node\", this holds the node type being created.\r\n   */\r\n  dragNewNodeType: string | null;\r\n  /**\r\n   * If drag mode is \"wire\", this is the source pin being wired by the drag.\r\n   */\r\n  dragWireSource: NodePin | null;\r\n}\r\n\r\nconst _defaultState: CircuitEditorUiState = {\r\n  editingCircuitId: ROOT_CIRCUIT_ID,\r\n  viewScale: 1,\r\n  dragMode: null,\r\n  dragStart: null,\r\n  dragEnd: null,\r\n  dragNewNodeType: null,\r\n  dragWireSource: null,\r\n};\r\n\r\nexport const defaultCircuitEditorUiState = Object.freeze(_defaultState);\r\n","import { ROOT_CIRCUIT_ID } from \"./constants\";\r\n\r\nexport interface CircuitsState {\r\n  /**\r\n   * The user-provided names for circuits by circuit id.\r\n   */\r\n  circuitNamesByCircuitId: Record<string, string>;\r\n\r\n  /**\r\n   * Arrays of node ids contained in a circuit by the containing circuit id.\r\n   */\r\n  nodeIdsByCircuitId: Record<string, string[]>;\r\n}\r\n\r\nconst _defaultState: CircuitsState = {\r\n  circuitNamesByCircuitId: {\r\n    [ROOT_CIRCUIT_ID]: \"Root\",\r\n  },\r\n  nodeIdsByCircuitId: {\r\n    [ROOT_CIRCUIT_ID]: [],\r\n  },\r\n};\r\n\r\nexport const defaultCircuitsState = Object.freeze(_defaultState);\r\n","import * as yup from \"yup\";\r\n\r\nexport interface Point {\r\n  x: number;\r\n  y: number;\r\n}\r\nexport const pointSchema = yup.object().shape({\r\n  x: yup.number().required(),\r\n  y: yup.number().required(),\r\n});\r\n\r\nexport interface Size {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport interface Rectangle {\r\n  p1: Point;\r\n  p2: Point;\r\n}\r\n\r\nexport const ZeroPoint = Object.freeze({ x: 0, y: 0 });\r\nexport const ZeroRect = Object.freeze({ p1: ZeroPoint, p2: ZeroPoint });\r\n\r\nexport function magnitude(v: Point): number {\r\n  return Math.sqrt(v.x * v.x + v.y * v.y);\r\n}\r\nexport function normalize(p: Point): Point {\r\n  const m = magnitude(p);\r\n  return {\r\n    x: p.x / m,\r\n    y: p.y / m,\r\n  };\r\n}\r\n\r\nexport function dotProduct(a: Point, b: Point): number {\r\n  return a.x * b.x + a.y * b.y;\r\n}\r\n\r\nexport function scale(p: Point, scaler: number) {\r\n  return { x: p.x * scaler, y: p.y * scaler };\r\n}\r\n\r\nexport function normalizeRectangle(p1: Point, p2: Point): Rectangle;\r\nexport function normalizeRectangle(r: Rectangle): Rectangle;\r\nexport function normalizeRectangle(...args: any[]): Rectangle {\r\n  let p1: Point;\r\n  let p2: Point;\r\n  if (args.length === 1) {\r\n    const r = args[0] as Rectangle;\r\n    p1 = r.p1;\r\n    p2 = r.p2;\r\n  } else {\r\n    p1 = args[0] as Point;\r\n    p2 = args[1] as Point;\r\n  }\r\n  return {\r\n    p1: {\r\n      x: Math.min(p1.x, p2.x),\r\n      y: Math.min(p1.y, p2.y),\r\n    },\r\n    p2: {\r\n      x: Math.max(p1.x, p2.x),\r\n      y: Math.max(p1.y, p2.y),\r\n    },\r\n  };\r\n}\r\n\r\nexport function pointAdd(p1: Point, p2: Point): Point {\r\n  return {\r\n    x: p1.x + p2.x,\r\n    y: p1.y + p2.y,\r\n  };\r\n}\r\nexport function pointSubtract(p1: Point, p2: Point): Point {\r\n  return {\r\n    x: p1.x - p2.x,\r\n    y: p1.y - p2.y,\r\n  };\r\n}\r\n\r\nexport function pointIntersects(p: Point, r: Rectangle): boolean {\r\n  r = normalizeRectangle(r);\r\n\r\n  if (r.p1.x > p.x || r.p2.x < p.x) {\r\n    return false;\r\n  }\r\n\r\n  if (r.p1.y > p.y || r.p2.y < p.y) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nexport function calcSize(r: Rectangle): Size {\r\n  r = normalizeRectangle(r);\r\n  return {\r\n    width: r.p2.x - r.p1.x,\r\n    height: r.p2.y - r.p1.y,\r\n  };\r\n}\r\n\r\nexport function union(r1: Rectangle, r2: Rectangle): Rectangle {\r\n  r1 = normalizeRectangle(r1);\r\n  r2 = normalizeRectangle(r2);\r\n  return {\r\n    p1: {\r\n      x: Math.min(r1.p1.x, r2.p1.x),\r\n      y: Math.min(r1.p1.y, r2.p1.y),\r\n    },\r\n    p2: {\r\n      x: Math.max(r1.p2.x, r2.p2.x),\r\n      y: Math.max(r1.p2.y, r2.p2.y),\r\n    },\r\n  };\r\n}\r\n\r\nexport function intersects(r1: Rectangle, r2: Rectangle): boolean {\r\n  r1 = normalizeRectangle(r1);\r\n  r2 = normalizeRectangle(r2);\r\n\r\n  // r1 starts after p2's extent, or does not reach r2's start.\r\n  if (r1.p1.x > r2.p2.x || r1.p2.x < r2.p1.x) {\r\n    return false;\r\n  }\r\n\r\n  // r1 starts after p2's extent, or does not reach r2's start.\r\n  if (r1.p1.y > r2.p2.y || r1.p2.y < r2.p1.y) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n","import { Point, ZeroPoint } from \"@/geometry\";\r\n\r\nimport { ClipboardNode } from \"./types\";\r\n\r\nexport interface ClipboardState {\r\n  clipboardNodes: ClipboardNode[];\r\n  clipboardPasteOrigin: Point;\r\n}\r\n\r\nexport const defaultClipboardState: Readonly<ClipboardState> = Object.freeze({\r\n  clipboardNodes: [],\r\n  clipboardPasteOrigin: ZeroPoint,\r\n});\r\n","export interface DialogBaseState {\r\n  dialogType: string | null;\r\n  data: any;\r\n}\r\n\r\nexport interface NoDialogState extends DialogBaseState {\r\n  dialogType: null;\r\n  data: null;\r\n}\r\n\r\nexport interface SaveFileDialogState extends DialogBaseState {\r\n  dialogType: \"save-project\";\r\n  data: null;\r\n}\r\n\r\nexport type DialogState = NoDialogState | SaveFileDialogState;\r\nexport type DialogType = DialogState[\"dialogType\"];\r\n\r\nconst _defaultState: NoDialogState = {\r\n  dialogType: null,\r\n  data: null,\r\n};\r\n\r\nexport const defaultDialogState: Readonly<NoDialogState> = Object.freeze(\r\n  _defaultState\r\n);\r\n","import { Node, Connection } from \"./types\";\r\n\r\nexport interface NodeGraphState {\r\n  /**\r\n   * A map of nodes by node id.\r\n   */\r\n  nodesById: Record<string, Node>;\r\n\r\n  /**\r\n   * A map of connections between nodes, by connection id.\r\n   */\r\n  connectionsById: Record<string, Connection>;\r\n}\r\n\r\nconst _defaultState: NodeGraphState = {\r\n  nodesById: {},\r\n  connectionsById: {},\r\n};\r\n\r\nexport const defaultNodeGraphState = Object.freeze(_defaultState);\r\n","import { Point } from \"@/geometry\";\r\n\r\nexport interface NodeLayoutState {\r\n  nodePositionsById: Record<string, Point>;\r\n  wireJointIdsByConnectionId: Record<string, string[]>;\r\n  wireJointPositionsByJointId: Record<string, Point>;\r\n}\r\n\r\nconst _defaultState: NodeLayoutState = {\r\n  nodePositionsById: {},\r\n  wireJointIdsByConnectionId: {},\r\n  wireJointPositionsByJointId: {},\r\n};\r\n\r\nexport const defaultNodeLayoutState: Readonly<NodeLayoutState> = Object.freeze(\r\n  _defaultState\r\n);\r\n","export interface SelectionState {\r\n  selectedNodeIds: string[];\r\n  selectedConnectionIds: string[];\r\n  selectedJointIds: string[];\r\n}\r\n\r\nconst _defaultState: SelectionState = {\r\n  selectedNodeIds: [],\r\n  selectedConnectionIds: [],\r\n  selectedJointIds: [],\r\n};\r\n\r\nexport const defaultSelectionState = Object.freeze(_defaultState);\r\n","import { SimNodePinTransition, SimTransitionWindow } from \"./types\";\r\n\r\nexport interface SimulatorState {\r\n  /**\r\n   * The overall application mode.\r\n   * Might not belong in simulator state?\r\n   *\r\n   * - edit: User is editing, no simulator is running\r\n   * - step: Sim is paused and only ticks on user command\r\n   * - run: Sim is actively running and ticking forwards on its own.\r\n   */\r\n  mode: \"edit\" | \"pause\" | \"run\";\r\n\r\n  /**\r\n   * Tick speed in ticks per second when running.\r\n   */\r\n  ticksPerSecond: number;\r\n\r\n  /**\r\n   * The current tick the simulator is on.\r\n   */\r\n  tick: number;\r\n\r\n  /**\r\n   * A map of node states by node id.\r\n   */\r\n  nodeStatesByNodeId: Record<string, any>;\r\n\r\n  /**\r\n   * A map of output-to-value maps by node id.\r\n   */\r\n  nodeOutputValuesByNodeId: Record<string, Record<string, boolean>>;\r\n\r\n  /**\r\n   * A map of pending transitions by id.\r\n   */\r\n  transitionsById: Record<string, SimNodePinTransition>;\r\n\r\n  /**\r\n   * Transition windows in ascending order of tick.\r\n   */\r\n  transitionWindows: SimTransitionWindow[];\r\n\r\n  /**\r\n   * A collection of the most recent milliseconds it has taken to run logic updates.\r\n   */\r\n  profilerLogicUpdateMsecs: number;\r\n}\r\n\r\nconst _defaultState: SimulatorState = {\r\n  mode: \"edit\",\r\n  ticksPerSecond: 1000,\r\n  tick: 0,\r\n  nodeStatesByNodeId: {},\r\n  nodeOutputValuesByNodeId: {},\r\n  transitionsById: {},\r\n  transitionWindows: [],\r\n  profilerLogicUpdateMsecs: 0,\r\n};\r\n\r\nexport const defaultSimulatorState = Object.freeze(_defaultState);\r\n","import { SimulatorNode } from \"./types\";\r\n\r\nexport interface SimulatorGraphState {\r\n  /**\r\n   * A map of all simulator nodes by simulator node id.\r\n   */\r\n  simulatorNodesById: Record<string, SimulatorNode>;\r\n\r\n  /**\r\n   * A map of simulator node ids by the circuit node id that generated them.\r\n   */\r\n  simulatorNodeIdsByCircuitNodeId: Record<string, string>;\r\n}\r\n\r\nconst _defaultState: SimulatorGraphState = {\r\n  simulatorNodesById: {},\r\n  simulatorNodeIdsByCircuitNodeId: {},\r\n};\r\n\r\nexport const defaultSimulatorGraphState = Object.freeze(_defaultState);\r\n","import {\r\n  CircuitEditorUiState,\r\n  defaultCircuitEditorUiState,\r\n} from \"@/services/circuit-editor-ui/state\";\r\nimport { CircuitsState, defaultCircuitsState } from \"@/services/circuits/state\";\r\nimport {\r\n  ClipboardState,\r\n  defaultClipboardState,\r\n} from \"@/services/clipboard/state\";\r\nimport { DialogState, defaultDialogState } from \"@/services/dialog/state\";\r\nimport {\r\n  NodeGraphState,\r\n  defaultNodeGraphState,\r\n} from \"@/services/node-graph/state\";\r\nimport {\r\n  NodeLayoutState,\r\n  defaultNodeLayoutState,\r\n} from \"@/services/node-layout/state\";\r\nimport {\r\n  SelectionState,\r\n  defaultSelectionState,\r\n} from \"@/services/selection/state\";\r\nimport {\r\n  SimulatorState,\r\n  defaultSimulatorState,\r\n} from \"@/services/simulator/state\";\r\nimport {\r\n  SimulatorGraphState,\r\n  defaultSimulatorGraphState,\r\n} from \"@/services/simulator-graph/state\";\r\n\r\nexport interface AppState {\r\n  services: {\r\n    circuitEditorUi: CircuitEditorUiState;\r\n    circuits: CircuitsState;\r\n    clipboard: ClipboardState;\r\n    dialog: DialogState;\r\n    nodeGraph: NodeGraphState;\r\n    nodeLayout: NodeLayoutState;\r\n    selection: SelectionState;\r\n    simulator: SimulatorState;\r\n    simulatorGraph: SimulatorGraphState;\r\n  };\r\n}\r\n\r\nconst _defaultAppState: AppState = {\r\n  services: {\r\n    circuitEditorUi: defaultCircuitEditorUiState,\r\n    nodeGraph: defaultNodeGraphState,\r\n    nodeLayout: defaultNodeLayoutState,\r\n    circuits: defaultCircuitsState,\r\n    clipboard: defaultClipboardState,\r\n    dialog: defaultDialogState,\r\n    selection: defaultSelectionState,\r\n    simulator: defaultSimulatorState,\r\n    simulatorGraph: defaultSimulatorGraphState,\r\n  },\r\n};\r\n\r\nexport const defaultAppState = Object.freeze(_defaultAppState);\r\n","import { AnyAction } from \"redux\";\r\n\r\nexport const ACTION_INIT = \"@init\";\r\nexport const doInit = () => ({ type: ACTION_INIT });\r\nexport type InitAction = ReturnType<typeof doInit>;\r\nexport function isInitAction(action: AnyAction): action is InitAction {\r\n  return action.type === ACTION_INIT;\r\n}\r\n","import { AnyAction } from \"redux\";\r\nimport { Point } from \"@/geometry\";\r\n\r\nexport const ACTION_FIELD_DRAG_CONTINUE = \"@field/drag/continue\" as const;\r\nexport const fieldDragContinue = (p: Point) => ({\r\n  type: ACTION_FIELD_DRAG_CONTINUE,\r\n  payload: p,\r\n});\r\nexport type FieldDragContinueAction = ReturnType<typeof fieldDragContinue>;\r\nexport function isFieldDragContinueAction(\r\n  action: AnyAction\r\n): action is FieldDragContinueAction {\r\n  return action.type === ACTION_FIELD_DRAG_CONTINUE;\r\n}\r\n","import { AnyAction } from \"redux\";\r\n\r\nexport const ACTION_FIELD_MOUSE_LEAVE = \"@field/mouse/leave\" as const;\r\nexport const fieldMouseLeave = () => ({\r\n  type: ACTION_FIELD_MOUSE_LEAVE,\r\n});\r\nexport type FieldMouseLeaveAction = ReturnType<typeof fieldMouseLeave>;\r\nexport function isFieldMouseLeaveAction(\r\n  action: AnyAction\r\n): action is FieldMouseLeaveAction {\r\n  return action.type === ACTION_FIELD_MOUSE_LEAVE;\r\n}\r\n","import { AnyAction } from \"redux\";\r\n\r\nexport const ACTION_SIM_TICK = \"@sim/tick\" as const;\r\nexport const tickSim = (tickCount: number) => ({\r\n  type: ACTION_SIM_TICK,\r\n  payload: { tickCount },\r\n});\r\nexport type TickSimAction = ReturnType<typeof tickSim>;\r\nexport function isTickSimAction(action: AnyAction): action is TickSimAction {\r\n  return action.type === ACTION_SIM_TICK;\r\n}\r\n","import { AnyAction } from \"redux\";\r\n\r\nexport const ACTION_VIEW_ZOOM = \"@view/zoom\" as const;\r\nexport const viewZoom = (delta: number) => ({\r\n  type: ACTION_VIEW_ZOOM,\r\n  payload: { delta },\r\n});\r\nexport type ViewZoomAction = ReturnType<typeof viewZoom>;\r\nexport function isViewZoomAction(action: AnyAction): action is ViewZoomAction {\r\n  return action.type === ACTION_VIEW_ZOOM;\r\n}\r\n","export type MaybeArray<T> = T | T[];\r\nexport function asArray<T>(value: MaybeArray<T>): T[] {\r\n  return Array.isArray(value) ? value : [value];\r\n}\r\n","import { AnyAction } from \"redux\";\r\n\r\nimport { Point } from \"@/geometry\";\r\nimport { asArray, MaybeArray } from \"@/arrays\";\r\n\r\nexport const ACTION_WIRE_JOINT_MOVE = \"@wire/joint/move\" as const;\r\nexport const moveWireJoint = (\r\n  jointId: MaybeArray<string>,\r\n  position: Point,\r\n  relative = false\r\n) => ({\r\n  type: ACTION_WIRE_JOINT_MOVE,\r\n  payload: {\r\n    jointIds: asArray(jointId),\r\n    position,\r\n    relative,\r\n  },\r\n});\r\nexport type MoveWireJointAction = ReturnType<typeof moveWireJoint>;\r\nexport function isMoveWireJointAction(\r\n  action: AnyAction\r\n): action is MoveWireJointAction {\r\n  return action.type === ACTION_WIRE_JOINT_MOVE;\r\n}\r\n\r\nexport const ACTION_WIRE_JOINT_MOVE_END = \"@wire/joint/end-move\" as const;\r\nexport const moveWireJointEnd = () => ({\r\n  type: ACTION_WIRE_JOINT_MOVE_END,\r\n});\r\n","import { AnyAction } from \"redux\";\r\n\r\nimport { AppState } from \"@/store\";\r\n\r\nimport { ACTION_FIELD_DRAG_CONTINUE } from \"@/actions/field-drag-continue\";\r\nimport { ACTION_FIELD_MOUSE_LEAVE } from \"@/actions/field-mouse-leave\";\r\nimport { ACTION_SIM_TICK } from \"@/actions/sim-tick\";\r\nimport { ACTION_VIEW_ZOOM } from \"@/actions/view-zoom\";\r\nimport { ACTION_WIRE_JOINT_MOVE } from \"@/actions/wire-joint-move\";\r\n\r\nexport const actionsBlacklist: string[] = [\r\n  ACTION_FIELD_DRAG_CONTINUE,\r\n  ACTION_FIELD_MOUSE_LEAVE,\r\n  ACTION_WIRE_JOINT_MOVE,\r\n  ACTION_SIM_TICK,\r\n  ACTION_VIEW_ZOOM,\r\n];\r\n\r\nexport function actionSanitizer(action: AnyAction): AnyAction {\r\n  return action;\r\n}\r\n\r\nexport function stateSanitizer(state: AppState): any {\r\n  return state;\r\n}\r\n","import { AnyAction } from \"redux\";\r\n\r\nexport const ACTION_PROJECT_LOAD = \"@project/load\" as const;\r\nexport const loadProject = () => ({\r\n  type: ACTION_PROJECT_LOAD,\r\n});\r\nexport type LoadProjectAction = ReturnType<typeof loadProject>;\r\nexport function isLoadProjectAction(\r\n  action: AnyAction\r\n): action is LoadProjectAction {\r\n  return action.type === ACTION_PROJECT_LOAD;\r\n}\r\n","import { AnyAction } from \"redux\";\r\n\r\nimport { SaveData } from \"@/services/savedata/types\";\r\n\r\nexport const ACTION_PROJECT_RECEIVE = \"@project/receive\" as const;\r\nexport const receiveProject = (saveData: SaveData) => ({\r\n  type: ACTION_PROJECT_RECEIVE,\r\n  payload: { saveData },\r\n});\r\nexport type ReceiveProjectAction = ReturnType<typeof receiveProject>;\r\nexport function isReceiveProjectAction(\r\n  action: AnyAction\r\n): action is ReceiveProjectAction {\r\n  return action.type === ACTION_PROJECT_RECEIVE;\r\n}\r\n","import { call, put, takeEvery } from \"redux-saga/effects\";\r\nimport fileDialog from \"file-dialog\";\r\n\r\nimport { ACTION_PROJECT_LOAD } from \"@/actions/project-load\";\r\nimport { receiveProject } from \"@/actions/project-receive\";\r\n\r\nimport { SaveData } from \"../types\";\r\n\r\nexport default function* projectLoadSaga() {\r\n  yield takeEvery(ACTION_PROJECT_LOAD, loadProject);\r\n}\r\n\r\nfunction* loadProject() {\r\n  try {\r\n    const [file]: File[] = yield call(fileDialog, {\r\n      accept: \"application/json\",\r\n    });\r\n    const contents = yield call(file.text.bind(file));\r\n    const saveData: SaveData = JSON.parse(contents);\r\n    yield put(receiveProject(saveData));\r\n  } catch (e) {\r\n    // TODO: Handle error\r\n    console.warn(\"Failed to load project:\", e);\r\n  }\r\n}\r\n","import { AnyAction } from \"redux\";\r\n\r\nexport const ACTION_PROJECT_SAVE = \"@project/save\" as const;\r\nexport const saveProject = () => ({\r\n  type: ACTION_PROJECT_SAVE,\r\n});\r\nexport type SaveProjectAction = ReturnType<typeof saveProject>;\r\nexport function isSaveProjectAction(\r\n  action: AnyAction\r\n): action is SaveProjectAction {\r\n  return action.type === ACTION_PROJECT_SAVE;\r\n}\r\n","import { AnyAction } from \"redux\";\r\n\r\nimport { DialogType } from \"@/services/dialog/state\";\r\n\r\nexport const ACTION_DIALOG_SHOW = \"@dialog/show\" as const;\r\nexport const showDialog = (dialogType: DialogType, data: any) => ({\r\n  type: ACTION_DIALOG_SHOW,\r\n  payload: { dialogType, data },\r\n});\r\nexport type ShowDialogAction = ReturnType<typeof showDialog>;\r\nexport function isShowDialogAction(\r\n  action: AnyAction\r\n): action is ShowDialogAction {\r\n  return action.type === ACTION_DIALOG_SHOW;\r\n}\r\n","import { AnyAction } from \"redux\";\r\n\r\nexport const ACTION_DIALOG_RESPONSE_ACCEPT = \"@dialog/response/accept\" as const;\r\nexport const acceptDialog = (result: any) => ({\r\n  type: ACTION_DIALOG_RESPONSE_ACCEPT,\r\n  payload: { result },\r\n});\r\nexport type AcceptDialogAction = ReturnType<typeof acceptDialog>;\r\nexport function isAcceptDialogAction(\r\n  action: AnyAction\r\n): action is AcceptDialogAction {\r\n  return action.type === ACTION_DIALOG_RESPONSE_ACCEPT;\r\n}\r\n","import { AnyAction } from \"redux\";\r\n\r\nexport const ACTION_DIALOG_RESPONSE_CANCEL = \"@dialog/response/cancel\" as const;\r\nexport const cancelDialog = () => ({\r\n  type: ACTION_DIALOG_RESPONSE_CANCEL,\r\n});\r\nexport type CancelDialogAction = ReturnType<typeof cancelDialog>;\r\nexport function isCancelDialogAction(\r\n  action: AnyAction\r\n): action is CancelDialogAction {\r\n  return action.type === ACTION_DIALOG_RESPONSE_CANCEL;\r\n}\r\n","import { SagaIterator } from \"redux-saga\";\r\nimport { put, take } from \"redux-saga/effects\";\r\n\r\nimport { showDialog } from \"@/actions/dialog-show\";\r\n\r\nimport { DialogType } from \"./state\";\r\nimport {\r\n  AcceptDialogAction,\r\n  ACTION_DIALOG_RESPONSE_ACCEPT,\r\n} from \"@/actions/dialog-response-accept\";\r\nimport {\r\n  CancelDialogAction,\r\n  ACTION_DIALOG_RESPONSE_CANCEL,\r\n} from \"@/actions/dialog-response-cancel\";\r\n\r\nexport function* displayDialogSaga(\r\n  dialogType: DialogType,\r\n  data?: any\r\n): SagaIterator<any> {\r\n  yield put(showDialog(dialogType, data));\r\n  const response: AcceptDialogAction | CancelDialogAction = yield take([\r\n    ACTION_DIALOG_RESPONSE_ACCEPT,\r\n    ACTION_DIALOG_RESPONSE_CANCEL,\r\n  ]);\r\n\r\n  if (response.type === ACTION_DIALOG_RESPONSE_ACCEPT) {\r\n    return response.payload.result;\r\n  }\r\n\r\n  return null;\r\n}\r\n","import * as yup from \"yup\";\r\n\r\nexport interface Node {\r\n  nodeType: string;\r\n}\r\n\r\n/**\r\n * Identifies a pin on a specific node.\r\n */\r\nexport interface NodePin {\r\n  nodeId: string;\r\n  pinId: string;\r\n}\r\nexport const nodePinSchema = yup.object().shape({\r\n  nodeId: yup.string().required().min(1),\r\n  pinId: yup.string().required().min(1),\r\n});\r\nexport function nodePinEquals(a: NodePin, b: NodePin) {\r\n  return a.nodeId === b.nodeId && a.pinId === b.pinId;\r\n}\r\n\r\n/**\r\n * A connection from a node output to a node input.\r\n */\r\nexport interface Connection {\r\n  /**\r\n   * The output pin on a node, sending a value outwards.\r\n   */\r\n  outputPin: NodePin;\r\n\r\n  /**\r\n   * The input pin on a node to receive the value.\r\n   */\r\n  inputPin: NodePin;\r\n}\r\n","import * as yup from \"yup\";\r\n\r\nimport { Point, pointSchema } from \"@/geometry\";\r\n\r\nimport { NodePin, nodePinSchema } from \"../node-graph/types\";\r\n\r\nexport interface SaveCircuit {\r\n  circuitId: string;\r\n  circuitName: string;\r\n}\r\nexport const saveCircuitSchema = yup.object().shape({\r\n  circuitId: yup.string().required().min(1),\r\n  circuitName: yup.string().required().min(1),\r\n});\r\n\r\nexport interface SaveNode {\r\n  nodeId: string;\r\n  nodeType: string;\r\n  circuitId: string;\r\n  x: number;\r\n  y: number;\r\n}\r\nexport const saveNodeSchema = yup.object().shape({\r\n  nodeId: yup.string().required().min(1),\r\n  nodeType: yup.string().required().min(1), // TODO: Check for valid element types\r\n  circuitId: yup.string().required().min(1),\r\n  x: yup.number().required(),\r\n  y: yup.number().required(),\r\n});\r\n\r\nexport interface SaveWire {\r\n  output: NodePin;\r\n  input: NodePin;\r\n  joints: Point[];\r\n}\r\nexport const saveWireSchema = yup.object().shape({\r\n  output: nodePinSchema.required(),\r\n  input: nodePinSchema.required(),\r\n  // Cannot make this required, as yup says required on an array is min length 1...\r\n  joints: yup.array().of(pointSchema),\r\n});\r\n\r\nexport interface SaveData {\r\n  circuits: SaveCircuit[];\r\n  nodes: SaveNode[];\r\n  wires: SaveWire[];\r\n}\r\nexport const saveDataSchema = yup.object().shape({\r\n  circuits: yup.array().of(saveCircuitSchema).min(0),\r\n  nodes: yup.array().of(saveNodeSchema).min(0),\r\n  wires: yup.array().of(saveWireSchema).min(0),\r\n});\r\n","import { AnyAction } from \"redux\";\r\nimport sortBy from \"lodash/sortBy\";\r\n\r\nimport { MaybeArray } from \"@/arrays\";\r\n\r\nimport { AppState, defaultAppState } from \"./state\";\r\nimport { AppReducer } from \"./types\";\r\n\r\nexport function concatReducers(\r\n  ...reducers: MaybeArray<AppReducer>[]\r\n): AppReducer[] {\r\n  // Previously, this was reduceReducers and generated a reducer\r\n  //  that invokes each child reducer.\r\n  // However, we need to be able to order reducers across services,\r\n  //  so we must now aggregate a list of reducers and do a final ordering\r\n  //  step after all are collected.\r\n  return ([] as AppReducer[]).concat(...reducers);\r\n}\r\n\r\nexport function finalizeReducerList(reducers: AppReducer[]): AppReducer {\r\n  // Order the list by weight ascending.\r\n  const finalizedList = sortBy(reducers, (x: AppReducer) => x.weight || 0);\r\n\r\n  return (state: AppState = defaultAppState, action: AnyAction) => {\r\n    return finalizedList.reduce(\r\n      (state, reducer) => reducer(state, action),\r\n      state\r\n    );\r\n  };\r\n}\r\n","import { AnyAction } from \"redux\";\r\n\r\nexport const ACTION_CIRCUIT_DELETE = \"@circuit/delete\" as const;\r\nexport const deleteCircuit = (circuitId: string) => ({\r\n  type: ACTION_CIRCUIT_DELETE,\r\n  payload: { circuitId },\r\n});\r\nexport type DeleteCircuitAction = ReturnType<typeof deleteCircuit>;\r\nexport function isDeleteCircuitAction(\r\n  action: AnyAction\r\n): action is DeleteCircuitAction {\r\n  return action.type === ACTION_CIRCUIT_DELETE;\r\n}\r\n","export function cls(...values: (string | false | undefined)[]): string {\r\n  return values.filter((x) => Boolean(x) && x != \"\").join(\" \");\r\n}\r\n\r\nexport function typedKeys<T extends object>(obj: T): (keyof T)[] {\r\n  return Object.keys(obj) as (keyof T)[];\r\n}\r\n\r\nexport type ValueSetter<T> = T | ((old: T) => T);\r\n\r\nexport function fpSet<\r\n  Target extends Record<string, any> | any[],\r\n  P1 extends keyof Target,\r\n  T extends Target[P1]\r\n>(target: Target, p1: P1, value: ValueSetter<T>): Target;\r\nexport function fpSet<\r\n  Target extends Record<string, any> | any[],\r\n  P1 extends keyof Target,\r\n  P2 extends keyof Target[P1],\r\n  T extends Target[P1][P2]\r\n>(target: Target, p1: P1, p2: P2, value: ValueSetter<T>): Target;\r\nexport function fpSet<\r\n  Target extends Record<string, any> | any[],\r\n  P1 extends keyof Target,\r\n  P2 extends keyof Target[P1],\r\n  P3 extends keyof Target[P1][P2],\r\n  T extends Target[P1][P2][P3]\r\n>(target: Target, p1: P1, p2: P2, p3: P3, value: ValueSetter<T>): Target;\r\nexport function fpSet(...args: any[]) {\r\n  let target = args[0];\r\n  const firstPaths = args.slice(1, args.length - 2).map(String);\r\n  const lastPath = args[args.length - 2];\r\n  const value = args[args.length - 1];\r\n\r\n  const newData = clone(target);\r\n  target = newData;\r\n\r\n  for (const seg of firstPaths) {\r\n    target[seg] = clone(target[seg]);\r\n    target = target[seg];\r\n  }\r\n\r\n  if (typeof value === \"function\") {\r\n    target[lastPath] = value(target[lastPath]);\r\n  } else {\r\n    target[lastPath] = value;\r\n  }\r\n\r\n  return newData;\r\n}\r\n\r\nfunction clone<T extends object | any[]>(obj: T): T {\r\n  if (Array.isArray(obj)) {\r\n    return [...obj] as T;\r\n  }\r\n  return { ...obj };\r\n}\r\n","import { AnyAction, Reducer } from \"redux\";\r\n\r\nimport { AppState, defaultAppState } from \"@/store\";\r\nimport { fpSet } from \"@/utils\";\r\n\r\nexport type ServiceKey = keyof AppState[\"services\"];\r\nexport type ServiceState<\r\n  TServiceKey extends ServiceKey\r\n> = AppState[\"services\"][TServiceKey];\r\n\r\nexport interface ServiceReducer<TServiceState> {\r\n  (\r\n    state: Readonly<TServiceState>,\r\n    action: AnyAction,\r\n    appState: AppState\r\n  ): TServiceState;\r\n}\r\n\r\nexport function createServiceReducerCreator<TServiceKey extends ServiceKey>(\r\n  service: TServiceKey\r\n): (\r\n  reducer: ServiceReducer<AppState[\"services\"][TServiceKey]>\r\n) => Reducer<AppState, AnyAction> {\r\n  return (reducer: ServiceReducer<AppState[\"services\"][TServiceKey]>) => {\r\n    return (state: AppState = defaultAppState, action: AnyAction) => {\r\n      const newState = reducer(state.services[service], action, state);\r\n      if (state.services[service] != newState) {\r\n        return fpSet(state, \"services\", service, newState);\r\n      }\r\n      return state;\r\n    };\r\n  };\r\n}\r\n\r\nexport interface ServiceSelectorA0<TServiceKey extends ServiceKey, TReturn> {\r\n  (s: AppState): TReturn;\r\n  local(s: ServiceState<TServiceKey>): TReturn;\r\n}\r\n\r\nexport interface ServiceSelectorA1<\r\n  TServiceKey extends ServiceKey,\r\n  TA1,\r\n  TReturn\r\n> {\r\n  (s: AppState, a1: TA1): TReturn;\r\n  local(s: ServiceState<TServiceKey>, a1: TA1): TReturn;\r\n}\r\n\r\nexport interface ServiceSelectorA2<\r\n  TServiceKey extends ServiceKey,\r\n  TA1,\r\n  TA2,\r\n  TReturn\r\n> {\r\n  (s: AppState, a1: TA1, a2: TA2): TReturn;\r\n  local(s: ServiceState<TServiceKey>, a1: TA1, a2: TA2): TReturn;\r\n}\r\n\r\nexport interface ServiceSelectorCreator<TServiceKey extends ServiceKey> {\r\n  <TReturn>(\r\n    selector: (s: ServiceState<TServiceKey>) => TReturn\r\n  ): ServiceSelectorA0<TServiceKey, TReturn>;\r\n  <TA1, TReturn>(\r\n    selector: (s: ServiceState<TServiceKey>, a1: TA1) => TReturn\r\n  ): ServiceSelectorA1<TServiceKey, TA1, TReturn>;\r\n  <TA1, TA2, TReturn>(\r\n    selector: (s: ServiceState<TServiceKey>, a1: TA1, a2: TA2) => TReturn\r\n  ): ServiceSelectorA2<TServiceKey, TA1, TA2, TReturn>;\r\n}\r\n\r\nexport function createServiceSelectorCreator<TServiceKey extends ServiceKey>(\r\n  service: TServiceKey\r\n): ServiceSelectorCreator<TServiceKey> {\r\n  return <TArgs, TReturn>(\r\n    selector: (s: ServiceState<TServiceKey>, ...args: TArgs[]) => TReturn\r\n  ) => {\r\n    const appSelector: any = (s: AppState, ...args: TArgs[]) =>\r\n      selector(s.services[service], ...args);\r\n    appSelector.local = selector;\r\n    return appSelector;\r\n  };\r\n}\r\n","import {\r\n  createServiceReducerCreator,\r\n  createServiceSelectorCreator,\r\n} from \"../service-state-utils\";\r\n\r\nexport const createCircuitEditorUiReducer = createServiceReducerCreator(\r\n  \"circuitEditorUi\"\r\n);\r\nexport const createCircuitEditorUiSelector = createServiceSelectorCreator(\r\n  \"circuitEditorUi\"\r\n);\r\n","import { isDeleteCircuitAction } from \"@/actions/circuit-delete\";\r\nimport { createCircuitEditorUiReducer } from \"../utils\";\r\n\r\nexport default createCircuitEditorUiReducer((state, action) => {\r\n  if (!isDeleteCircuitAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  const { circuitId } = action.payload;\r\n\r\n  if (state.editingCircuitId !== circuitId) {\r\n    return state;\r\n  }\r\n\r\n  return {\r\n    ...state,\r\n    editingCircuitId: \"root\",\r\n  };\r\n});\r\n","import { AnyAction } from \"redux\";\r\n\r\nexport const ACTION_CIRCUIT_EDIT = \"@circuit/edit\" as const;\r\nexport const editCircuit = (circuitId: string) => ({\r\n  type: ACTION_CIRCUIT_EDIT,\r\n  payload: { circuitId },\r\n});\r\nexport type EditCircuitAction = ReturnType<typeof editCircuit>;\r\nexport function isEditCircuitAction(\r\n  action: AnyAction\r\n): action is EditCircuitAction {\r\n  return action.type === ACTION_CIRCUIT_EDIT;\r\n}\r\n","import { isEditCircuitAction } from \"@/actions/circuit-edit\";\r\n\r\nimport { createCircuitEditorUiReducer } from \"../utils\";\r\n\r\nexport default createCircuitEditorUiReducer((state, action) => {\r\n  if (!isEditCircuitAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  return {\r\n    ...state,\r\n    editingCircuitId: action.payload.circuitId,\r\n  };\r\n});\r\n","import { AnyAction } from \"redux\";\r\nimport { v4 as uuidV4 } from \"uuid\";\r\n\r\nexport const ACTION_CIRCUIT_ADD = \"@circuit/add\" as const;\r\nexport interface NewCircuitOpts {\r\n  circuitName?: string;\r\n  circuitId?: string;\r\n  edit?: boolean;\r\n}\r\nexport const addCircuit = ({\r\n  circuitName,\r\n  circuitId,\r\n  edit,\r\n}: NewCircuitOpts = {}) => ({\r\n  type: ACTION_CIRCUIT_ADD,\r\n  payload: { circuitId: circuitId ?? uuidV4(), circuitName, edit },\r\n});\r\nexport type AddCircuitAction = ReturnType<typeof addCircuit>;\r\nexport function isAddCircuitAction(\r\n  action: AnyAction\r\n): action is AddCircuitAction {\r\n  return action.type === ACTION_CIRCUIT_ADD;\r\n}\r\n","import { isAddCircuitAction } from \"@/actions/circuit-add\";\r\n\r\nimport { createCircuitEditorUiReducer } from \"../utils\";\r\n\r\nexport default createCircuitEditorUiReducer((state, action) => {\r\n  if (!isAddCircuitAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  const { circuitId, edit } = action.payload;\r\n\r\n  if (!edit) {\r\n    return state;\r\n  }\r\n\r\n  return {\r\n    ...state,\r\n    editingCircuitId: circuitId,\r\n  };\r\n});\r\n","import { isFieldDragContinueAction } from \"@/actions/field-drag-continue\";\r\n\r\nimport { createCircuitEditorUiReducer } from \"../utils\";\r\n\r\nexport default createCircuitEditorUiReducer((state, action) => {\r\n  if (!isFieldDragContinueAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  return {\r\n    ...state,\r\n    dragEnd: action.payload,\r\n  };\r\n});\r\n","import { AnyAction } from \"redux\";\r\n\r\nimport { Point } from \"@/geometry\";\r\nimport { SelectionMode } from \"@/selection-mode\";\r\n\r\nexport const ACTION_FIELD_DRAG_END = \"@field/drag/end\" as const;\r\nexport const fieldDragEnd = (point: Point, selectionMode: SelectionMode) => ({\r\n  type: ACTION_FIELD_DRAG_END,\r\n  payload: { ...point, selectionMode },\r\n});\r\nexport type FieldDragEndAction = ReturnType<typeof fieldDragEnd>;\r\nexport function isFieldDragEndAction(\r\n  action: AnyAction\r\n): action is FieldDragEndAction {\r\n  return action.type === ACTION_FIELD_DRAG_END;\r\n}\r\n","import { AnyAction } from \"redux\";\r\n\r\nimport { Rectangle } from \"@/geometry\";\r\nimport { SelectionMode } from \"@/selection-mode\";\r\n\r\nexport const ACTION_SELECT_REGION = \"@select/region\" as const;\r\nexport const selectRegion = (\r\n  region: Rectangle,\r\n  mode: SelectionMode = \"set\"\r\n) => ({\r\n  type: ACTION_SELECT_REGION,\r\n  payload: {\r\n    region,\r\n    mode,\r\n  },\r\n});\r\nexport type SelectRegionAction = ReturnType<typeof selectRegion>;\r\nexport function isSelectRegionAction(\r\n  action: AnyAction\r\n): action is SelectRegionAction {\r\n  return action.type === ACTION_SELECT_REGION;\r\n}\r\n","import { AnyAction } from \"redux\";\r\n\r\nexport const ACTION_SELECTION_MOVE = \"@selection/move\" as const;\r\nexport const moveSelection = (offsetX: number, offsetY: number) => ({\r\n  type: ACTION_SELECTION_MOVE,\r\n  payload: { offsetX, offsetY },\r\n});\r\nexport type MoveSelectionAction = ReturnType<typeof moveSelection>;\r\nexport function isMoveSelectionAction(\r\n  action: AnyAction\r\n): action is MoveSelectionAction {\r\n  return action.type === ACTION_SELECTION_MOVE;\r\n}\r\n","import { v4 as uuidV4 } from \"uuid\";\r\nimport { AnyAction } from \"redux\";\r\n\r\nimport { Point } from \"@/geometry\";\r\n\r\nexport interface AddNodeOptions {\r\n  nodeId?: string;\r\n  circuitId?: string;\r\n  position?: Point;\r\n}\r\nexport const ACTION_NODE_ADD = \"@node/add\" as const;\r\nexport const addNode = (nodeType: string, opts?: AddNodeOptions) => ({\r\n  type: ACTION_NODE_ADD,\r\n  payload: { nodeId: uuidV4(), nodeType, ...(opts || {}) },\r\n});\r\nexport type AddNodeAction = ReturnType<typeof addNode>;\r\nexport function isAddNodeAction(action: AnyAction): action is AddNodeAction {\r\n  return action.type === ACTION_NODE_ADD;\r\n}\r\n","import { AnyAction } from \"redux\";\r\nimport { v4 as uuidV4 } from \"uuid\";\r\n\r\nimport { Point } from \"@/geometry\";\r\n\r\nimport { NodePin } from \"@/services/node-graph/types\";\r\n\r\nexport interface AttachWireOptions {\r\n  joints?: Point[];\r\n}\r\nexport const ACTION_WIRE_ATTACH = \"@wire/attach\" as const;\r\nexport const attachWire = (\r\n  p1: NodePin,\r\n  p2: NodePin,\r\n  opts?: AttachWireOptions\r\n) => ({\r\n  type: ACTION_WIRE_ATTACH,\r\n  payload: {\r\n    connectionId: uuidV4(),\r\n    p1,\r\n    p2,\r\n    joints: opts?.joints || [],\r\n  },\r\n});\r\nexport type AttachWireAction = ReturnType<typeof attachWire>;\r\nexport function isAttachWireAction(\r\n  action: AnyAction\r\n): action is AttachWireAction {\r\n  return action.type === ACTION_WIRE_ATTACH;\r\n}\r\n","import { Point } from \"@/geometry\";\r\nimport { AppState } from \"@/store\";\r\nimport { createCircuitEditorUiSelector } from \"../utils\";\r\n\r\nexport const gridSnapSelector = createCircuitEditorUiSelector((s) => 50);\r\n\r\nexport const applyGridSnapSelector = (s: AppState, p: Point) => {\r\n  const snap = gridSnapSelector(s);\r\n  return {\r\n    x: Math.round(p.x / snap) * snap,\r\n    y: Math.round(p.y / snap) * snap,\r\n  };\r\n};\r\n","import { AppState } from \"@/store\";\r\n\r\nimport {\r\n  createServiceReducerCreator,\r\n  createServiceSelectorCreator,\r\n} from \"../service-state-utils\";\r\n\r\nexport const createNodeGraphReducer = createServiceReducerCreator(\"nodeGraph\");\r\nexport const createNodeGraphSelector = createServiceSelectorCreator(\r\n  \"nodeGraph\"\r\n);\r\n","import { createSelector } from \"reselect\";\r\nimport mapValues from \"lodash/mapValues\";\r\n\r\nimport { createNodeGraphSelector } from \"../utils\";\r\nimport { NodeGraphState } from \"../state\";\r\nimport { Node } from \"../types\";\r\n\r\nexport const nodesByNodeIdSelector = createNodeGraphSelector(\r\n  (s) => s.nodesById\r\n);\r\n\r\nexport const nodeIdsSelector = createNodeGraphSelector(\r\n  createSelector(\r\n    nodesByNodeIdSelector.local,\r\n    (nodesById: Record<string, Node>) => Object.keys(nodesById)\r\n  )\r\n);\r\n\r\nexport const nodeTypesByNodeIdSelector = createNodeGraphSelector(\r\n  createSelector(\r\n    nodesByNodeIdSelector.local,\r\n    (nodesById: Record<string, Node>) => mapValues(nodesById, (x) => x.nodeType)\r\n  )\r\n);\r\n\r\nexport const nodeFromNodeIdSelector = createNodeGraphSelector(\r\n  (s: NodeGraphState, nodeId: string) => s.nodesById[nodeId] || null\r\n);\r\n\r\nexport const nodeIdsFromTypeSelector = createNodeGraphSelector(\r\n  (s: NodeGraphState, desiredType: string) => {\r\n    const nodeIds: string[] = [];\r\n    for (const nodeId of Object.keys(s.nodesById)) {\r\n      const { nodeType } = s.nodesById[nodeId];\r\n      if (nodeType === desiredType) {\r\n        nodeIds.push(nodeId);\r\n      }\r\n    }\r\n    return nodeIds;\r\n  }\r\n);\r\n\r\nexport const nodeTypeFromNodeIdSelector = createNodeGraphSelector(\r\n  (s: NodeGraphState, nodeId: string) => {\r\n    const node = nodeFromNodeIdSelector.local(s, nodeId);\r\n    if (!node) {\r\n      return null;\r\n    }\r\n    return node.nodeType;\r\n  }\r\n);\r\n","import {\r\n  createServiceReducerCreator,\r\n  createServiceSelectorCreator,\r\n} from \"../service-state-utils\";\r\n\r\nexport const createCircuitsReducer = createServiceReducerCreator(\"circuits\");\r\nexport const createCircuitsSelector = createServiceSelectorCreator(\"circuits\");\r\n","import { createCircuitsSelector } from \"../utils\";\r\n\r\nexport const nodeIdsByCircuitIdSelector = createCircuitsSelector(\r\n  (state) => state.nodeIdsByCircuitId\r\n);\r\n\r\nexport const nodeIdsFromCircuitIdSelector = createCircuitsSelector<\r\n  string,\r\n  string[]\r\n>((state, circuitId: string) => state.nodeIdsByCircuitId[circuitId]);\r\n\r\nexport const circuitIdFromNodeIdSelector = createCircuitsSelector<\r\n  string,\r\n  string | null\r\n>((state, nodeId) => {\r\n  for (const circuitId of Object.keys(state.nodeIdsByCircuitId)) {\r\n    const nodeIds = state.nodeIdsByCircuitId[circuitId];\r\n    if (nodeIds.indexOf(nodeId) !== -1) {\r\n      return circuitId;\r\n    }\r\n  }\r\n  return null;\r\n});\r\n","import {\r\n  createServiceReducerCreator,\r\n  createServiceSelectorCreator,\r\n} from \"../service-state-utils\";\r\n\r\nexport const createNodeLayoutReducer = createServiceReducerCreator(\r\n  \"nodeLayout\"\r\n);\r\nexport const createNodeLayoutSelector = createServiceSelectorCreator(\r\n  \"nodeLayout\"\r\n);\r\n","import { createNodeLayoutSelector } from \"../utils\";\r\nimport { NodeLayoutState } from \"../state\";\r\n\r\nexport const nodePositionsByNodeIdSelector = createNodeLayoutSelector(\r\n  (state) => state.nodePositionsById\r\n);\r\n\r\nexport const nodePositionFromNodeIdSelector = createNodeLayoutSelector(\r\n  (state: NodeLayoutState, nodeId: string) => state.nodePositionsById[nodeId]\r\n);\r\n","import { useSelector as useSelectorRedux } from \"react-redux\";\r\n\r\nimport { AppState } from \"@/store\";\r\n\r\nexport default function useSelector<T>(selector: (s: AppState) => T) {\r\n  return useSelectorRedux<AppState, T>(selector);\r\n}\r\n","import { CircuitsState } from \"../state\";\r\nimport { createCircuitsSelector } from \"../utils\";\r\n\r\nexport const circuitIdsSelector = createCircuitsSelector((state) =>\r\n  Object.keys(state.circuitNamesByCircuitId)\r\n);\r\n\r\nexport const circuitNamesByIdSelector = createCircuitsSelector(\r\n  (state) => state.circuitNamesByCircuitId\r\n);\r\n\r\nexport const circuitNameFromIdSelector = createCircuitsSelector(\r\n  (state: CircuitsState, circuitId: string) =>\r\n    state.circuitNamesByCircuitId[circuitId]\r\n);\r\n","import * as React from \"react\";\r\n\r\nimport { Point } from \"@/geometry\";\r\nimport { PinDirection } from \"@/logic\";\r\n\r\nimport { NodeComponentProps, NodeVisualDefinition } from \"../../types\";\r\nimport useSelector from \"@/hooks/useSelector\";\r\nimport { circuitNameFromIdSelector } from \"@/services/circuits/selectors/circuits\";\r\n\r\nexport interface IntegratedCircuitVisualProps extends NodeComponentProps {\r\n  circuitId: string;\r\n  inputPinCount: number;\r\n  outputPinCount: number;\r\n}\r\n\r\nfunction getBorderPath(inputPinCount: number, outputPinCount: number) {\r\n  const height = Math.max(inputPinCount, outputPinCount, 1) * 50 - 20;\r\n  return `M10,10 h80 v${height} h-80 z`;\r\n}\r\n\r\nconst IntegratedCircuitVisual: React.FC<IntegratedCircuitVisualProps> = ({\r\n  circuitId,\r\n  inputPinCount,\r\n  outputPinCount,\r\n}) => {\r\n  const circuitName = useSelector((state) =>\r\n    circuitNameFromIdSelector(state, circuitId)\r\n  );\r\n  const borderPath = getBorderPath(inputPinCount, outputPinCount);\r\n\r\n  const inputPins: JSX.Element[] = [];\r\n  for (let i = 0; i < inputPinCount; i++) {\r\n    const y = i * 50 + 25;\r\n    inputPins.push(\r\n      <line\r\n        key={i}\r\n        className=\"node-select-highlight--stroke\"\r\n        stroke=\"black\"\r\n        strokeWidth={2}\r\n        x1={0}\r\n        y1={y}\r\n        x2={10}\r\n        y2={y}\r\n      />\r\n    );\r\n  }\r\n\r\n  const outputPins: JSX.Element[] = [];\r\n  for (let i = 0; i < outputPinCount; i++) {\r\n    const y = i * 50 + 25;\r\n    outputPins.push(\r\n      <line\r\n        key={i}\r\n        className=\"node-select-highlight--stroke\"\r\n        stroke=\"black\"\r\n        strokeWidth={2}\r\n        x1={90}\r\n        y1={y}\r\n        x2={100}\r\n        y2={y}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <g>\r\n      <path\r\n        className=\"node-select-highlight--stroke\"\r\n        stroke=\"black\"\r\n        fill=\"none\"\r\n        d={borderPath}\r\n      />\r\n      <text textAnchor=\"middle\" x={50} y={30}>\r\n        {circuitName}\r\n      </text>\r\n      {inputPins}\r\n      {outputPins}\r\n    </g>\r\n  );\r\n};\r\n\r\nexport default IntegratedCircuitVisual;\r\n\r\nexport function circuitToNodeVisual(\r\n  circuitId: string,\r\n  inputPinCount: number,\r\n  outputPinCount: number\r\n): NodeVisualDefinition {\r\n  return {\r\n    hitPath: getBorderPath(inputPinCount, outputPinCount),\r\n    component: (props) => (\r\n      <IntegratedCircuitVisual\r\n        circuitId={circuitId}\r\n        inputPinCount={inputPinCount}\r\n        outputPinCount={outputPinCount}\r\n        {...props}\r\n      />\r\n    ),\r\n  };\r\n}\r\n\r\nexport function circuitPinPosition(\r\n  pinIndex: number,\r\n  direction: PinDirection\r\n): Point {\r\n  return {\r\n    x: direction === \"input\" ? 0 : 100,\r\n    y: pinIndex * 50 + 25,\r\n  };\r\n}\r\n","export function circuitIdToNodeType(circuitId: string) {\r\n  return `ic-${circuitId}`;\r\n}\r\n","import { createSelector } from \"reselect\";\r\nimport sortBy from \"lodash/sortBy\";\r\n\r\nimport { nodeIdsByCircuitIdSelector } from \"@/services/circuits/selectors/nodes\";\r\nimport { nodeTypesByNodeIdSelector } from \"@/services/node-graph/selectors/nodes\";\r\nimport { nodePositionsByNodeIdSelector } from \"@/services/node-layout/selectors/node-positions\";\r\n\r\nimport {\r\n  NodeDefinition,\r\n  NodeDefinitionSource,\r\n  NodePinDefinition,\r\n} from \"../../types\";\r\n\r\nimport {\r\n  circuitPinPosition,\r\n  circuitToNodeVisual,\r\n} from \"./IntegratedCircuitVisual\";\r\n\r\nimport { circuitIdToNodeType } from \"./utils\";\r\n\r\nconst IntegratedCircuitDefinitionSource: NodeDefinitionSource = createSelector(\r\n  nodeIdsByCircuitIdSelector,\r\n  nodeTypesByNodeIdSelector,\r\n  nodePositionsByNodeIdSelector,\r\n  (nodeIdsByCircuitId, nodeTypesByNodeId, nodePositionsByNodeId) => {\r\n    return Object.keys(nodeIdsByCircuitId)\r\n      .filter((x) => x !== \"root\")\r\n      .map((circuitId) => {\r\n        const circuitNodeIds = nodeIdsByCircuitId[circuitId] ?? [];\r\n\r\n        // Sort by y axis position to get consistent pin locations.\r\n        let pinNodeIds = circuitNodeIds.filter((circuitNodeId) =>\r\n          nodeTypesByNodeId[circuitNodeId].startsWith(\"pin-\")\r\n        );\r\n        pinNodeIds = sortBy(\r\n          pinNodeIds,\r\n          (nodeId) => nodePositionsByNodeId[nodeId].y,\r\n          (nodeId) => nodePositionsByNodeId[nodeId].x\r\n        );\r\n\r\n        const pins: Record<string, NodePinDefinition> = {};\r\n        let inputPinCount = 0;\r\n        let outputPinCount = 0;\r\n        for (const pinNodeId of pinNodeIds) {\r\n          const type = nodeTypesByNodeId[pinNodeId];\r\n          if (type === \"pin-input\") {\r\n            pins[pinNodeId] = {\r\n              direction: \"input\",\r\n              ...circuitPinPosition(inputPinCount, \"input\"),\r\n            };\r\n            inputPinCount++;\r\n          } else if (type === \"pin-output\") {\r\n            pins[pinNodeId] = {\r\n              direction: \"output\",\r\n              ...circuitPinPosition(outputPinCount, \"output\"),\r\n            };\r\n            outputPinCount++;\r\n          }\r\n        }\r\n\r\n        const def: NodeDefinition = {\r\n          type: circuitIdToNodeType(circuitId),\r\n          elementProduction: {\r\n            type: \"circuit\",\r\n            circuitId,\r\n          },\r\n          visual: circuitToNodeVisual(circuitId, inputPinCount, outputPinCount),\r\n          pins,\r\n        };\r\n        return def;\r\n      });\r\n  }\r\n);\r\n\r\nexport default [IntegratedCircuitDefinitionSource];\r\n","import { NodeDefinitionSource } from \"../types\";\r\n\r\nimport IntegratedCircuitDefinitionSources from \"./integrated-circuits\";\r\nimport InteractionNodeDefinitionSources from \"./interaction\";\r\nimport LogicNodeDefinitionSources from \"./logic\";\r\nimport OutputNodeDefinitionSources from \"./output\";\r\nimport PinNodeDefinitionSources from \"./pins\";\r\n\r\nconst nodeDefinitionSources: NodeDefinitionSource[] = [\r\n  ...IntegratedCircuitDefinitionSources,\r\n  ...InteractionNodeDefinitionSources,\r\n  ...LogicNodeDefinitionSources,\r\n  ...OutputNodeDefinitionSources,\r\n  ...PinNodeDefinitionSources,\r\n];\r\n\r\nexport default nodeDefinitionSources;\r\n","import { NodeDefinitionSource } from \"../../types\";\r\n\r\nconst InteractionNodeDefinitionSources: NodeDefinitionSource[] = [\r\n  require(\"./toggle\").default,\r\n];\r\n\r\nexport default InteractionNodeDefinitionSources;\r\n","import { NodeDefinitionSource } from \"../../types\";\r\n\r\nconst LogicNodeDefinitionSources: NodeDefinitionSource[] = [\r\n  require(\"./and\").default,\r\n  require(\"./buffer\").default,\r\n  require(\"./nor\").default,\r\n  require(\"./not\").default,\r\n  require(\"./or\").default,\r\n  require(\"./xor\").default,\r\n];\r\n\r\nexport default LogicNodeDefinitionSources;\r\n","import { NodeDefinitionSource } from \"../../types\";\r\n\r\nconst OutputNodeDefinitionSources: NodeDefinitionSource[] = [\r\n  require(\"./led\").default,\r\n  require(\"./seg7\").default,\r\n];\r\n\r\nexport default OutputNodeDefinitionSources;\r\n","import { NodeDefinitionSource } from \"../../types\";\r\n\r\nconst PinNodeDefinitionSources: NodeDefinitionSource[] = [\r\n  require(\"./input\").default,\r\n  require(\"./output\").default,\r\n];\r\n\r\nexport default PinNodeDefinitionSources;\r\n","import flatMap from \"lodash/flatMap\";\r\nimport find from \"lodash/find\";\r\n\r\nimport { asArray, MaybeArray } from \"@/arrays\";\r\nimport { AppState } from \"@/store\";\r\n\r\nimport nodeDefinitionSources from \"../definition-sources\";\r\nimport { NodeDefinition, NodeDefinitionSource } from \"../types\";\r\nimport { createSelector } from \"reselect\";\r\n\r\n/**\r\n * Gets an array of node definitions from the current state.\r\n * WARN: Returns an unstable reference, not react safe.\r\n */\r\nlet cachedNodeDefinitionsSelector: NodeDefinition[] = [];\r\nexport const nodeDefinitionsSelector = (state: AppState) => {\r\n  const nodeDefinitions = flatMap(nodeDefinitionSources, (source) =>\r\n    resolveSources(source, state)\r\n  );\r\n\r\n  if (\r\n    nodeDefinitions.every(\r\n      (def, index) => def === cachedNodeDefinitionsSelector[index]\r\n    )\r\n  ) {\r\n    return cachedNodeDefinitionsSelector;\r\n  }\r\n\r\n  cachedNodeDefinitionsSelector = nodeDefinitions;\r\n  return nodeDefinitions;\r\n};\r\n\r\nexport const nodeDefinitionsByTypeSelector = createSelector(\r\n  nodeDefinitionsSelector,\r\n  (defs) => {\r\n    const defsByType: Record<string, NodeDefinition> = {};\r\n    for (const def of defs) {\r\n      defsByType[def.type] = def;\r\n    }\r\n    return defsByType;\r\n  }\r\n);\r\n\r\nexport const nodeDefinitionFromTypeSelector = (\r\n  state: AppState,\r\n  nodeType: string\r\n) => {\r\n  const definitions = nodeDefinitionsSelector(state);\r\n  return find(definitions, (x) => x.type === nodeType) ?? null;\r\n};\r\n\r\nfunction resolveSources(\r\n  source: NodeDefinitionSource,\r\n  state: AppState\r\n): NodeDefinition[] {\r\n  let resolved: MaybeArray<NodeDefinition>;\r\n  if (typeof source === \"function\") {\r\n    resolved = source(state);\r\n  } else {\r\n    resolved = source;\r\n  }\r\n\r\n  return asArray(resolved);\r\n}\r\n","import { createSelector } from \"reselect\";\r\n\r\nimport { AppState } from \"@/store\";\r\n\r\nimport { Point, pointAdd, ZeroPoint } from \"@/geometry\";\r\n\r\nimport { nodeTypesByNodeIdSelector } from \"@/services/node-graph/selectors/nodes\";\r\nimport { nodeDefinitionsByTypeSelector } from \"@/services/node-types/selectors/node-types\";\r\n\r\nimport { nodePositionsByNodeIdSelector } from \"./node-positions\";\r\n\r\nexport const nodePinPositionsByPinIdByNodeIdSelector = createSelector(\r\n  nodeDefinitionsByTypeSelector,\r\n  nodePositionsByNodeIdSelector,\r\n  nodeTypesByNodeIdSelector,\r\n  (nodeDefsByType, nodePositionsByNodeId, nodeTypesByNodeId) => {\r\n    const nodePinPositionsByPinIdByNodeId: Record<\r\n      string,\r\n      Record<string, Point>\r\n    > = {};\r\n\r\n    const nodeIds = Object.keys(nodeTypesByNodeId);\r\n    for (const nodeId of nodeIds) {\r\n      const nodePinPositionsByPinId: Record<string, Point> = {};\r\n      nodePinPositionsByPinIdByNodeId[nodeId] = nodePinPositionsByPinId;\r\n\r\n      const nodePosition = nodePositionsByNodeId[nodeId] ?? ZeroPoint;\r\n\r\n      const elementType = nodeTypesByNodeId[nodeId];\r\n      if (!elementType) {\r\n        continue;\r\n      }\r\n      const def = nodeDefsByType[elementType];\r\n      if (!def) {\r\n        continue;\r\n      }\r\n\r\n      const pinIds = Object.keys(def.pins);\r\n      for (const pinId of pinIds) {\r\n        const relPinPosition = def.pins[pinId];\r\n        const pinPosition = pointAdd(nodePosition, relPinPosition);\r\n        nodePinPositionsByPinId[pinId] = pinPosition;\r\n      }\r\n    }\r\n\r\n    return nodePinPositionsByPinIdByNodeId;\r\n  }\r\n);\r\n\r\nexport const nodePinPositionFromNodePinSelector = (\r\n  state: AppState,\r\n  nodeId: string,\r\n  pinId: string\r\n) => {\r\n  const positonsByPinIdByNodeId = nodePinPositionsByPinIdByNodeIdSelector(\r\n    state\r\n  );\r\n  const nodePinPositions = positonsByPinIdByNodeId[nodeId];\r\n  if (!nodePinPositions) {\r\n    return ZeroPoint;\r\n  }\r\n  return nodePinPositions[pinId] ?? ZeroPoint;\r\n};\r\n","import { createSelector } from \"reselect\";\r\n\r\nimport { magnitude, normalizeRectangle, pointSubtract } from \"@/geometry\";\r\n\r\nimport { nodePinPositionsByPinIdByNodeIdSelector } from \"@/services/node-layout/selectors/node-pin-positions\";\r\n\r\nimport { createCircuitEditorUiSelector } from \"../utils\";\r\n\r\nimport { gridSnapSelector } from \"./snap\";\r\n\r\nexport const dragModeSelector = createCircuitEditorUiSelector(\r\n  (s) => s.dragMode\r\n);\r\nexport const dragStartSelector = createCircuitEditorUiSelector(\r\n  (s) => s.dragStart\r\n);\r\nexport const dragEndSelector = createCircuitEditorUiSelector((s) => s.dragEnd);\r\n\r\nexport const selectionRectSelector = createCircuitEditorUiSelector(\r\n  createSelector(\r\n    dragModeSelector.local,\r\n    dragStartSelector.local,\r\n    dragEndSelector.local,\r\n    (dragMode, dragStart, dragEnd) =>\r\n      dragMode === \"select\" && dragStart && dragEnd\r\n        ? normalizeRectangle(dragStart, dragEnd)\r\n        : null\r\n  )\r\n);\r\n\r\nexport const dragMoveOffsetSelector = createCircuitEditorUiSelector(\r\n  createSelector(\r\n    dragModeSelector.local,\r\n    dragStartSelector.local,\r\n    dragEndSelector.local,\r\n    gridSnapSelector.local,\r\n    (dragMode, dragStart, dragEnd, gridSnap) =>\r\n      dragMode === \"move\" && dragStart && dragEnd\r\n        ? {\r\n            x: Math.round((dragEnd.x - dragStart.x) / gridSnap) * gridSnap,\r\n            y: Math.round((dragEnd.y - dragStart.y) / gridSnap) * gridSnap,\r\n          }\r\n        : null\r\n  )\r\n);\r\n\r\nexport const isDraggingNewNodeSelector = createCircuitEditorUiSelector(\r\n  (s) => s.dragMode === \"new-node\"\r\n);\r\n\r\nexport const dragNewNodeTypeSelector = createCircuitEditorUiSelector((s) =>\r\n  s.dragMode === \"new-node\" ? s.dragNewNodeType : null\r\n);\r\n\r\nexport const dragWireTargetPinSelector = createSelector(\r\n  dragModeSelector,\r\n  dragEndSelector,\r\n  nodePinPositionsByPinIdByNodeIdSelector,\r\n  (dragMode, dragEnd, pinPositionsByPinIdByNodeId) => {\r\n    if (dragMode !== \"wire\" || !dragEnd) {\r\n      return null;\r\n    }\r\n\r\n    const nodeIds = Object.keys(pinPositionsByPinIdByNodeId);\r\n    for (const nodeId of nodeIds) {\r\n      const pinPositionsByPinId = pinPositionsByPinIdByNodeId[nodeId];\r\n      const pinIds = Object.keys(pinPositionsByPinId);\r\n      for (const pinId of pinIds) {\r\n        const pinPosition = pinPositionsByPinId[pinId];\r\n        const offset = pointSubtract(dragEnd, pinPosition);\r\n        const length = magnitude(offset);\r\n        if (length <= 6) {\r\n          return { nodeId, pinId };\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n);\r\n","import { AnyAction } from \"redux\";\r\n\r\nexport const ACTION_FIELD_DRAG_START_NEWNODE = \"@field/drag/start/new-element\" as const;\r\nexport const fieldDragStartNewNode = (nodeType: string) => ({\r\n  type: ACTION_FIELD_DRAG_START_NEWNODE,\r\n  payload: {\r\n    nodeType,\r\n  },\r\n});\r\nexport type FieldDragStartNewNodeAction = ReturnType<\r\n  typeof fieldDragStartNewNode\r\n>;\r\nexport function isFieldDragStartNewNodeAction(\r\n  action: AnyAction\r\n): action is FieldDragStartNewNodeAction {\r\n  return action.type === ACTION_FIELD_DRAG_START_NEWNODE;\r\n}\r\n","import { isFieldDragStartNewNodeAction } from \"@/actions/field-drag-start-newnode\";\r\n\r\nimport { createCircuitEditorUiReducer } from \"../utils\";\r\n\r\nexport default createCircuitEditorUiReducer((state, action) => {\r\n  if (!isFieldDragStartNewNodeAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  const { nodeType } = action.payload;\r\n\r\n  return {\r\n    ...state,\r\n    dragMode: \"new-node\" as const,\r\n    dragNewNodeType: nodeType,\r\n  };\r\n});\r\n","import { AnyAction } from \"redux\";\r\n\r\nimport { Point } from \"@/geometry\";\r\nimport { SelectionMode } from \"@/selection-mode\";\r\n\r\nexport const ACTION_FIELD_DRAG_START_NODE = \"@field/drag/start/node\" as const;\r\nexport const fieldDragStartNode = (\r\n  nodeId: string,\r\n  p: Point,\r\n  selectionMode: SelectionMode\r\n) => ({\r\n  type: ACTION_FIELD_DRAG_START_NODE,\r\n  payload: {\r\n    ...p,\r\n    nodeId,\r\n    selectionMode,\r\n  },\r\n});\r\nexport type FieldDragStartNodeAction = ReturnType<typeof fieldDragStartNode>;\r\nexport function isFieldDragStartNodeAction(\r\n  action: AnyAction\r\n): action is FieldDragStartNodeAction {\r\n  return action.type === ACTION_FIELD_DRAG_START_NODE;\r\n}\r\n","import { AnyAction } from \"redux\";\r\n\r\nimport { SelectionMode } from \"@/selection-mode\";\r\n\r\nexport const ACTION_SELECT_NODES = \"@select/nodes\" as const;\r\nexport const selectNodes = (\r\n  nodeId: string | string[],\r\n  mode: SelectionMode = \"set\"\r\n) => ({\r\n  type: ACTION_SELECT_NODES,\r\n  payload: {\r\n    nodeIds: Array.isArray(nodeId) ? nodeId : [nodeId],\r\n    mode,\r\n  },\r\n});\r\nexport type SelectNodesAction = ReturnType<typeof selectNodes>;\r\nexport function isSelectNodesAction(\r\n  action: AnyAction\r\n): action is SelectNodesAction {\r\n  return action.type === ACTION_SELECT_NODES;\r\n}\r\n","import union from \"lodash/union\";\r\nimport difference from \"lodash/difference\";\r\n\r\nimport { SelectionMode } from \"@/selection-mode\";\r\n\r\nimport {\r\n  createServiceReducerCreator,\r\n  createServiceSelectorCreator,\r\n} from \"../service-state-utils\";\r\n\r\nexport const createSelectionReducer = createServiceReducerCreator(\"selection\");\r\nexport const createSelectionSelector = createServiceSelectorCreator(\r\n  \"selection\"\r\n);\r\n\r\nexport function combineSelection(\r\n  selectedIds: string[],\r\n  chosenIds: string[],\r\n  mode: SelectionMode\r\n) {\r\n  switch (mode) {\r\n    case \"set\":\r\n      return chosenIds;\r\n    case \"append\":\r\n      return union(selectedIds, chosenIds);\r\n    case \"remove\":\r\n      return difference(selectedIds, chosenIds);\r\n    case \"toggle\": {\r\n      return difference(selectedIds, chosenIds).concat(\r\n        difference(chosenIds, selectedIds)\r\n      );\r\n    }\r\n  }\r\n\r\n  return chosenIds;\r\n}\r\n","import { createSelector } from \"reselect\";\r\n\r\nimport pick from \"lodash/pick\";\r\n\r\nimport { nodesByNodeIdSelector } from \"@/services/node-graph/selectors/nodes\";\r\n\r\nimport { createSelectionSelector } from \"../utils\";\r\nimport { SelectionState } from \"../state\";\r\n\r\nexport const selectedNodeIdsSelector = createSelectionSelector(\r\n  (state) => state.selectedNodeIds\r\n);\r\n\r\nexport const isNodeSelectedFromNodeIdSelector = createSelectionSelector(\r\n  (s: SelectionState, nodeId: string) =>\r\n    s.selectedNodeIds.indexOf(nodeId) !== -1\r\n);\r\n\r\nexport const selectedNodesByIdSelector = createSelector(\r\n  nodesByNodeIdSelector,\r\n  selectedNodeIdsSelector,\r\n  (nodesById, selectedNodeIds) => pick(nodesById, selectedNodeIds)\r\n);\r\n\r\nexport const selectedConnectionIdsSelector = createSelectionSelector(\r\n  (state) => state.selectedConnectionIds\r\n);\r\n\r\nexport const isWireSelectedFromConnectionIdSelector = createSelectionSelector(\r\n  (s: SelectionState, connectionId: string) =>\r\n    s.selectedConnectionIds.indexOf(connectionId) !== -1\r\n);\r\n\r\nexport const selectedJointIdsSelector = createSelectionSelector(\r\n  (state) => state.selectedJointIds\r\n);\r\n\r\nexport const isJointSelectedFromJointIdSelector = createSelectionSelector(\r\n  (s: SelectionState, jointId: string) =>\r\n    s.selectedJointIds.indexOf(jointId) !== -1\r\n);\r\n","import { AnyAction } from \"redux\";\r\n\r\nimport { Point } from \"@/geometry\";\r\n\r\nexport const ACTION_FIELD_DRAG_START_SELECT = \"@field/drag/start/select\" as const;\r\nexport const fieldDragStartSelect = (p: Point) => ({\r\n  type: ACTION_FIELD_DRAG_START_SELECT,\r\n  payload: {\r\n    ...p,\r\n  },\r\n});\r\nexport type FieldDragStartSelectAction = ReturnType<\r\n  typeof fieldDragStartSelect\r\n>;\r\nexport function isFieldDragStartSelectAction(\r\n  action: AnyAction\r\n): action is FieldDragStartSelectAction {\r\n  return action.type === ACTION_FIELD_DRAG_START_SELECT;\r\n}\r\n","import { isFieldDragStartSelectAction } from \"@/actions/field-drag-start-select\";\r\n\r\nimport { createCircuitEditorUiReducer } from \"../utils\";\r\n\r\nexport default createCircuitEditorUiReducer((state, action) => {\r\n  if (!isFieldDragStartSelectAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  const { x, y } = action.payload;\r\n\r\n  return {\r\n    ...state,\r\n    dragMode: \"select\",\r\n    dragStart: {\r\n      x,\r\n      y,\r\n    },\r\n  };\r\n});\r\n","import { AnyAction } from \"redux\";\r\n\r\nimport { Point } from \"@/geometry\";\r\nimport { NodePin } from \"@/services/node-graph/types\";\r\n\r\nexport const ACTION_FIELD_DRAG_START_WIRE = \"@field/drag/start/wire\" as const;\r\nexport const fieldDragStartWire = (dragStart: Point, pin: NodePin) => ({\r\n  type: ACTION_FIELD_DRAG_START_WIRE,\r\n  payload: {\r\n    dragStart,\r\n    pin,\r\n  },\r\n});\r\nexport type FieldDragStartWireAction = ReturnType<typeof fieldDragStartWire>;\r\nexport function isFieldDragStartWireAction(\r\n  action: AnyAction\r\n): action is FieldDragStartWireAction {\r\n  return action.type === ACTION_FIELD_DRAG_START_WIRE;\r\n}\r\n","import { concatReducers } from \"@/store/utils\";\r\n\r\nimport circuitDeleteReducer from \"./circuit-delete\";\r\nimport circuitEditReducer from \"./circuit-edit\";\r\nimport circuitNewReducer from \"./circuit-new\";\r\nimport dragContinueReducer from \"./drag-continue\";\r\nimport dragEndReducer from \"./drag-end\";\r\nimport dragStartNewNodeReducer from \"./drag-start-newnode\";\r\nimport dragStartNodeReducer from \"./drag-start-node\";\r\nimport dragStartSelectReducer from \"./drag-start-select\";\r\nimport dragStartWireReducer from \"./drag-start-wire\";\r\nimport mouseLeaveReducer from \"./mouse-leave\";\r\nimport viewZoomReducer from \"./view-zoom\";\r\n\r\nexport default concatReducers(\r\n  circuitDeleteReducer,\r\n  circuitEditReducer,\r\n  circuitNewReducer,\r\n  dragContinueReducer,\r\n  dragEndReducer,\r\n  dragStartNewNodeReducer,\r\n  dragStartNodeReducer,\r\n  dragStartSelectReducer,\r\n  dragStartWireReducer,\r\n  mouseLeaveReducer,\r\n  viewZoomReducer\r\n);\r\n","import { AnyAction } from \"redux\";\r\n\r\nimport { normalizeRectangle, pointSubtract } from \"@/geometry\";\r\n\r\nimport { fpSet } from \"@/utils\";\r\n\r\nimport { AppState, defaultAppState } from \"@/store\";\r\nimport rootReducer from \"@/store/reducer\";\r\n\r\nimport { isFieldDragEndAction } from \"@/actions/field-drag-end\";\r\nimport { selectRegion } from \"@/actions/select-region\";\r\nimport { moveSelection } from \"@/actions/selection-move\";\r\nimport { addNode } from \"@/actions/node-add\";\r\nimport { attachWire } from \"@/actions/wire-attach\";\r\n\r\nimport { applyGridSnapSelector } from \"../selectors/snap\";\r\nimport { dragWireTargetPinSelector } from \"../selectors/drag\";\r\n\r\nexport default function dragEndReducer(\r\n  state: AppState = defaultAppState,\r\n  action: AnyAction\r\n) {\r\n  if (!isFieldDragEndAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  const { x, y, selectionMode } = action.payload;\r\n\r\n  const {\r\n    dragMode,\r\n    dragStart,\r\n    dragEnd,\r\n    dragNewNodeType,\r\n    dragWireSource,\r\n  } = state.services.circuitEditorUi;\r\n\r\n  switch (dragMode) {\r\n    case \"select\": {\r\n      if (dragStart) {\r\n        const rect = normalizeRectangle(dragStart, { x, y });\r\n        state = rootReducer(state, selectRegion(rect, selectionMode));\r\n      }\r\n      break;\r\n    }\r\n    case \"move\": {\r\n      if (dragStart) {\r\n        let moveBy = pointSubtract({ x, y }, dragStart);\r\n        moveBy = applyGridSnapSelector(state, moveBy);\r\n        state = rootReducer(state, moveSelection(moveBy.x, moveBy.y));\r\n      }\r\n      break;\r\n    }\r\n    case \"new-node\": {\r\n      if (dragEnd) {\r\n        const position = applyGridSnapSelector(state, dragEnd);\r\n        state = rootReducer(state, addNode(dragNewNodeType!, { position }));\r\n      }\r\n      break;\r\n    }\r\n    case \"wire\": {\r\n      const endPin = dragWireTargetPinSelector(state);\r\n      if (dragWireSource && dragEnd && endPin) {\r\n        state = rootReducer(state, attachWire(dragWireSource, endPin));\r\n      }\r\n      break;\r\n    }\r\n  }\r\n\r\n  state = fpSet(state, \"services\", \"circuitEditorUi\", (value) => ({\r\n    ...value,\r\n    dragMode: null,\r\n    dragStart: null,\r\n    dragEnd: null,\r\n    dragNewNodeType: null,\r\n    dragWireSource: null,\r\n  }));\r\n\r\n  return state;\r\n}\r\n","import { AnyAction } from \"redux\";\r\n\r\nimport { fpSet } from \"@/utils\";\r\n\r\nimport { AppState, defaultAppState } from \"@/store\";\r\nimport rootReducer from \"@/store/reducer\";\r\n\r\nimport { isFieldDragStartNodeAction } from \"@/actions/field-drag-start-node\";\r\nimport { selectNodes } from \"@/actions/select-nodes\";\r\n\r\nimport { isNodeSelectedFromNodeIdSelector } from \"@/services/selection/selectors/selection\";\r\n\r\nexport default function dragNodesStartReducer(\r\n  state: AppState = defaultAppState,\r\n  action: AnyAction\r\n) {\r\n  if (!isFieldDragStartNodeAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  const { nodeId, x, y, selectionMode } = action.payload;\r\n\r\n  state = fpSet(state, \"services\", \"circuitEditorUi\", (value) => ({\r\n    ...value,\r\n    dragMode: \"move\" as const,\r\n    dragStart: {\r\n      x,\r\n      y,\r\n    },\r\n  }));\r\n\r\n  if (!isNodeSelectedFromNodeIdSelector(state, nodeId)) {\r\n    // Dragging a node that was not previously selected.  Perform a selection on the node.\r\n    state = rootReducer(state, selectNodes(nodeId, selectionMode));\r\n  }\r\n\r\n  return state;\r\n}\r\n","import { isFieldDragStartWireAction } from \"@/actions/field-drag-start-wire\";\r\n\r\nimport { createCircuitEditorUiReducer } from \"../utils\";\r\n\r\nexport default createCircuitEditorUiReducer((state, action) => {\r\n  if (!isFieldDragStartWireAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  const { dragStart, pin } = action.payload;\r\n\r\n  return {\r\n    ...state,\r\n    dragMode: \"wire\",\r\n    dragStart,\r\n    dragWireSource: pin,\r\n  };\r\n});\r\n","import { isFieldMouseLeaveAction } from \"@/actions/field-mouse-leave\";\r\n\r\nimport { createCircuitEditorUiReducer } from \"../utils\";\r\n\r\nexport default createCircuitEditorUiReducer((state, action) => {\r\n  if (!isFieldMouseLeaveAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  if (state.dragMode == null) {\r\n    return state;\r\n  }\r\n\r\n  return {\r\n    ...state,\r\n    dragEnd: null,\r\n  };\r\n});\r\n","import { isViewZoomAction } from \"@/actions/view-zoom\";\r\nimport { createCircuitEditorUiReducer } from \"../utils\";\r\n\r\nconst SCALE_FACTOR = 1.03;\r\n\r\nexport default createCircuitEditorUiReducer((state, action) => {\r\n  if (!isViewZoomAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  const { viewScale: scale } = state;\r\n  const { delta } = action.payload;\r\n\r\n  return {\r\n    ...state,\r\n    viewScale:\r\n      delta > 0\r\n        ? scale * delta * SCALE_FACTOR\r\n        : scale / (-delta * SCALE_FACTOR),\r\n  };\r\n});\r\n","import { isAddCircuitAction } from \"@/actions/circuit-add\";\r\nimport { createCircuitsReducer } from \"../utils\";\r\n\r\nexport default createCircuitsReducer((state, action) => {\r\n  if (!isAddCircuitAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  let { circuitId, circuitName } = action.payload;\r\n\r\n  if (!circuitName) {\r\n    circuitName = `Circuit ${\r\n      Object.keys(state.circuitNamesByCircuitId).length + 1\r\n    }`;\r\n  }\r\n\r\n  return {\r\n    ...state,\r\n    circuitNamesByCircuitId: {\r\n      ...state.circuitNamesByCircuitId,\r\n      [circuitId]: circuitName,\r\n    },\r\n    nodeIdsByCircuitId: {\r\n      ...state.nodeIdsByCircuitId,\r\n      [circuitId]: [],\r\n    },\r\n  };\r\n});\r\n","import pick from \"lodash/pick\";\r\nimport mapValues from \"lodash/mapValues\";\r\nimport difference from \"lodash/difference\";\r\n\r\nimport { isDeleteCircuitAction } from \"@/actions/circuit-delete\";\r\nimport { nodeIdsFromTypeSelector } from \"@/services/node-graph/selectors/nodes\";\r\nimport { circuitIdToNodeType } from \"@/services/node-types/definition-sources/integrated-circuits/utils\";\r\n\r\nimport { createCircuitsReducer } from \"../utils\";\r\n\r\nexport default createCircuitsReducer((state, action, rootState) => {\r\n  if (!isDeleteCircuitAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  const { circuitId } = action.payload;\r\n\r\n  const remainingCircuitIds = Object.keys(state.circuitNamesByCircuitId).filter(\r\n    (x) => x !== circuitId\r\n  );\r\n\r\n  const circuitTypeNodeIds = nodeIdsFromTypeSelector(\r\n    rootState,\r\n    circuitIdToNodeType(circuitId)\r\n  );\r\n\r\n  let nodeIdsByCircuitId = pick(state.nodeIdsByCircuitId, remainingCircuitIds);\r\n\r\n  nodeIdsByCircuitId = mapValues(nodeIdsByCircuitId, (nodeIds) =>\r\n    difference(nodeIds, circuitTypeNodeIds)\r\n  );\r\n\r\n  return {\r\n    ...state,\r\n    nodeIdsByCircuitId: nodeIdsByCircuitId,\r\n    circuitNamesByCircuitId: pick(\r\n      state.circuitNamesByCircuitId,\r\n      remainingCircuitIds\r\n    ),\r\n  };\r\n});\r\n","import { AnyAction } from \"redux\";\r\n\r\nexport const ACTION_CIRCUIT_RENAME = \"@circuit/rename\" as const;\r\nexport const renameCircuit = (circuitId: string, circuitName: string) => ({\r\n  type: ACTION_CIRCUIT_RENAME,\r\n  payload: { circuitId, circuitName },\r\n});\r\nexport type RenameCircuitAction = ReturnType<typeof renameCircuit>;\r\nexport function isRenameCircuitAction(\r\n  action: AnyAction\r\n): action is RenameCircuitAction {\r\n  return action.type === ACTION_CIRCUIT_RENAME;\r\n}\r\n","import { isRenameCircuitAction } from \"@/actions/circuit-rename\";\r\nimport { createCircuitsReducer } from \"../utils\";\r\n\r\nexport default createCircuitsReducer((state, action) => {\r\n  if (!isRenameCircuitAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  const { circuitId, circuitName } = action.payload;\r\n\r\n  let trimmedName = circuitName.trim();\r\n\r\n  if (trimmedName === \"\") {\r\n    return state;\r\n  }\r\n\r\n  return {\r\n    ...state,\r\n    circuitNamesByCircuitId: {\r\n      ...state.circuitNamesByCircuitId,\r\n      [circuitId]: trimmedName,\r\n    },\r\n  };\r\n});\r\n","import { createCircuitEditorUiSelector } from \"../utils\";\r\n\r\nexport const editingCircuitIdSelector = createCircuitEditorUiSelector(\r\n  (state) => state.editingCircuitId\r\n);\r\n","import { isAddNodeAction } from \"@/actions/node-add\";\r\nimport { editingCircuitIdSelector } from \"@/services/circuit-editor-ui/selectors/circuit\";\r\n\r\nimport { createCircuitsReducer } from \"../utils\";\r\n\r\nexport default createCircuitsReducer((state, action, rootState) => {\r\n  if (!isAddNodeAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  const { nodeId, circuitId } = action.payload;\r\n\r\n  const targetCircuitId = circuitId ?? editingCircuitIdSelector(rootState);\r\n\r\n  return {\r\n    ...state,\r\n    nodeIdsByCircuitId: {\r\n      ...state.nodeIdsByCircuitId,\r\n      [targetCircuitId]: [...state.nodeIdsByCircuitId[targetCircuitId], nodeId],\r\n    },\r\n  };\r\n});\r\n","import { AnyAction } from \"redux\";\r\n\r\nimport { asArray, MaybeArray } from \"@/arrays\";\r\n\r\nexport const ACTION_NODE_DELETE = \"@node/delete\" as const;\r\nexport const deleteNode = (nodeId: MaybeArray<string>) => ({\r\n  type: ACTION_NODE_DELETE,\r\n  payload: { nodeIds: asArray(nodeId) },\r\n});\r\nexport type DeleteNodeAction = ReturnType<typeof deleteNode>;\r\nexport function isDeleteNodeAction(\r\n  action: AnyAction\r\n): action is DeleteNodeAction {\r\n  return action.type === ACTION_NODE_DELETE;\r\n}\r\n","import { isDeleteNodeAction } from \"@/actions/node-delete\";\r\nimport mapValues from \"lodash/mapValues\";\r\n\r\nimport { createCircuitsReducer } from \"../utils\";\r\n\r\nexport default createCircuitsReducer((state, action) => {\r\n  if (!isDeleteNodeAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  const { nodeIds } = action.payload;\r\n\r\n  return {\r\n    ...state,\r\n    nodeIdsByCircuitId: mapValues(state.nodeIdsByCircuitId, (circuitNodeIds) =>\r\n      circuitNodeIds.filter(\r\n        (circuitNodeId) => nodeIds.indexOf(circuitNodeId) === -1\r\n      )\r\n    ),\r\n  };\r\n});\r\n","import { AnyAction } from \"redux\";\r\n\r\nexport const ACTION_PROJECT_NEW = \"@project/new\" as const;\r\nexport const newProject = () => ({\r\n  type: ACTION_PROJECT_NEW,\r\n});\r\nexport type NewProjectAction = ReturnType<typeof newProject>;\r\nexport function isNewProjectAction(\r\n  action: AnyAction\r\n): action is NewProjectAction {\r\n  return action.type === ACTION_PROJECT_NEW;\r\n}\r\n","import { isNewProjectAction } from \"@/actions/project-new\";\r\n\r\nimport { ROOT_CIRCUIT_ID } from \"../constants\";\r\nimport { createCircuitsReducer } from \"../utils\";\r\n\r\nexport default createCircuitsReducer((state, action) => {\r\n  if (!isNewProjectAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  return {\r\n    ...state,\r\n    circuitNamesByCircuitId: {\r\n      [ROOT_CIRCUIT_ID]: \"Root\",\r\n    },\r\n    nodeIdsByCircuitId: {\r\n      [ROOT_CIRCUIT_ID]: [],\r\n    },\r\n  };\r\n});\r\n","import { concatReducers } from \"@/store/utils\";\r\n\r\nimport circuitAddReducer from \"./circuit-add\";\r\nimport circuitDeleteReducer from \"./circuit-delete\";\r\nimport circuitRenameReducer from \"./circuit-rename\";\r\nimport nodeAddReducer from \"./node-add\";\r\nimport nodeDeleteReducer from \"./node-delete\";\r\nimport projectNewReducer from \"./project-new\";\r\n\r\nexport default concatReducers(\r\n  circuitAddReducer,\r\n  circuitDeleteReducer,\r\n  circuitRenameReducer,\r\n  nodeAddReducer,\r\n  nodeDeleteReducer,\r\n  projectNewReducer\r\n);\r\n","import { AnyAction } from \"redux\";\r\n\r\nexport const ACTION_COPY_NODES = \"@clipboard/copy\" as const;\r\nexport const copyNodes = (nodeId: string | string[]) => ({\r\n  type: ACTION_COPY_NODES,\r\n  payload: {\r\n    nodeIds: Array.isArray(nodeId) ? nodeId : [nodeId],\r\n  },\r\n});\r\nexport type CopyNodesAction = ReturnType<typeof copyNodes>;\r\nexport function isCopyNodesAction(\r\n  action: AnyAction\r\n): action is CopyNodesAction {\r\n  return action.type === ACTION_COPY_NODES;\r\n}\r\n","import values from \"lodash/values\";\r\nimport { createSelector } from \"reselect\";\r\n\r\nimport { NodeGraphState } from \"../state\";\r\nimport { createNodeGraphSelector } from \"../utils\";\r\n\r\nexport const connectionsByIdSelector = createNodeGraphSelector(\r\n  (s) => s.connectionsById\r\n);\r\n\r\nexport const connectionIdsSelector = createNodeGraphSelector(\r\n  createSelector(\r\n    (s) => s.connectionsById,\r\n    (connectionsById) => Object.keys(connectionsById)\r\n  )\r\n);\r\n\r\nexport const connectionFromConnectionIdSelector = createNodeGraphSelector(\r\n  (s: NodeGraphState, connectionId: string) => s.connectionsById[connectionId]\r\n);\r\n\r\nexport const connectionsSelector = createNodeGraphSelector(\r\n  createSelector(\r\n    (state: NodeGraphState) => state.connectionsById,\r\n    (connectionsById) => values(connectionsById)\r\n  )\r\n);\r\n\r\n/**\r\n * Gets all wire ids supplying input to the specified node.\r\n * WARN: Not react safe.  For reducer use only.\r\n */\r\nexport const nodeInputConnectionIdsFromNodeIdSelector = createNodeGraphSelector(\r\n  (state: NodeGraphState, nodeId: string) =>\r\n    Object.keys(state.connectionsById).filter(\r\n      (connectionId) =>\r\n        state.connectionsById[connectionId].inputPin.nodeId === nodeId\r\n    )\r\n);\r\n\r\n/**\r\n * Gets an array of wire ids leaving the given node.\r\n * WARN: Not react safe.  For reducer use only.\r\n */\r\nexport const nodeOutputConnectionIdsFromNodeIdSelector = createNodeGraphSelector(\r\n  (state: NodeGraphState, nodeId: string) =>\r\n    Object.keys(state.connectionsById).filter(\r\n      (connectionId) =>\r\n        state.connectionsById[connectionId].outputPin.nodeId === nodeId\r\n    )\r\n);\r\n","import { AppState } from \"@/store\";\r\n\r\nimport { nodeDefinitionFromTypeSelector } from \"@/services/node-types/selectors/node-types\";\r\n\r\nimport { nodeTypeFromNodeIdSelector } from \"./nodes\";\r\n\r\nexport const nodeDefFromNodeIdSelector = (state: AppState, nodeId: string) => {\r\n  const nodeType = nodeTypeFromNodeIdSelector(state, nodeId);\r\n  if (!nodeType) {\r\n    return null;\r\n  }\r\n\r\n  const def = nodeDefinitionFromTypeSelector(state, nodeType);\r\n\r\n  return def;\r\n};\r\n","import { PinDirection } from \"@/logic\";\r\nimport { circuitIdFromNodeIdSelector } from \"@/services/circuits/selectors/nodes\";\r\nimport { circuitIdToNodeType } from \"@/services/node-types/definition-sources/integrated-circuits/utils\";\r\nimport { AppState } from \"@/store\";\r\n\r\nimport { NodePin } from \"../types\";\r\n\r\nimport { connectionsSelector } from \"./connections\";\r\nimport { nodeDefFromNodeIdSelector } from \"./node-def\";\r\nimport { nodeIdsFromTypeSelector, nodeTypeFromNodeIdSelector } from \"./nodes\";\r\n\r\nexport const pinDirectionFromNodePinSelector = (\r\n  state: AppState,\r\n  nodeId: string,\r\n  pinId: string\r\n) => {\r\n  const def = nodeDefFromNodeIdSelector(state, nodeId);\r\n  if (!def) {\r\n    return null;\r\n  }\r\n\r\n  const pinDef = def.pins[pinId];\r\n  if (!pinDef) {\r\n    return null;\r\n  }\r\n  return pinDef.direction;\r\n};\r\n\r\n/**\r\n * Gets a map of node input pins to their output sources given a node id.\r\n *\r\n * WARN: Not react safe.  For reducer use only\r\n */\r\nexport const nodeOutputSourcesByPinIdFromNodeIdSelector = (\r\n  state: AppState,\r\n  nodeId: string\r\n) => {\r\n  const connections = connectionsSelector(state);\r\n  const nodeDef = nodeDefFromNodeIdSelector(state, nodeId);\r\n\r\n  if (!nodeDef) {\r\n    return {};\r\n  }\r\n\r\n  let outputPins: string[] = [];\r\n  outputPins = Object.keys(nodeDef.pins).filter(\r\n    (x) => nodeDef.pins[x].direction === \"output\"\r\n  );\r\n\r\n  const outputConnections = connections.filter(\r\n    (x) => x.outputPin.nodeId === nodeId\r\n  );\r\n\r\n  const result: Record<string, NodePin[]> = {};\r\n  for (const pin of outputPins) {\r\n    result[pin] = [];\r\n  }\r\n\r\n  for (const connection of outputConnections) {\r\n    const { outputPin, inputPin } = connection;\r\n    result[outputPin.pinId].push(inputPin);\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexport const nodePinsFromPinNodeSelector = (\r\n  state: AppState,\r\n  nodeId: string\r\n): NodePin[] => {\r\n  const nodeType = nodeTypeFromNodeIdSelector(state, nodeId);\r\n  let direction: PinDirection;\r\n  if (nodeType === \"pin-input\") {\r\n    direction = \"input\";\r\n  } else if (nodeType === \"pin-output\") {\r\n    direction = \"output\";\r\n  } else {\r\n    return [];\r\n  }\r\n\r\n  const circuitId = circuitIdFromNodeIdSelector(state, nodeId);\r\n  if (!circuitId) {\r\n    return [];\r\n  }\r\n\r\n  const icNodeType = circuitIdToNodeType(circuitId);\r\n  const icNodeIds = nodeIdsFromTypeSelector(state, icNodeType);\r\n\r\n  return icNodeIds.map((icNodeId) => ({ nodeId: icNodeId, pinId: nodeId }));\r\n};\r\n","import {\r\n  createServiceReducerCreator,\r\n  createServiceSelectorCreator,\r\n} from \"../service-state-utils\";\r\n\r\nexport const createClipboardReducer = createServiceReducerCreator(\"clipboard\");\r\nexport const createClipboardSelector = createServiceSelectorCreator(\r\n  \"clipboard\"\r\n);\r\n","import { v4 as uuidV4 } from \"uuid\";\r\nimport map from \"lodash/map\";\r\nimport mapValues from \"lodash/mapValues\";\r\nimport findIndex from \"lodash/findIndex\";\r\nimport zipObject from \"lodash/zipObject\";\r\n\r\nimport { pointSubtract } from \"@/geometry\";\r\n\r\nimport { isCopyNodesAction } from \"@/actions/clipboard-copy\";\r\n\r\nimport { nodeFromNodeIdSelector } from \"@/services/node-graph/selectors/nodes\";\r\nimport { nodeOutputSourcesByPinIdFromNodeIdSelector } from \"@/services/node-graph/selectors/pins\";\r\nimport { nodePositionsByNodeIdSelector } from \"@/services/node-layout/selectors/node-positions\";\r\n\r\nimport { ClipboardNode } from \"../types\";\r\nimport { createClipboardReducer } from \"../utils\";\r\n\r\nexport default createClipboardReducer((state, action, appState) => {\r\n  if (!isCopyNodesAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  const { nodeIds } = action.payload;\r\n  if (nodeIds.length === 0) {\r\n    return state;\r\n  }\r\n\r\n  const nodePositionsById = nodePositionsByNodeIdSelector(appState);\r\n\r\n  const copyIds = zipObject(\r\n    nodeIds,\r\n    map(nodeIds, () => uuidV4())\r\n  );\r\n\r\n  function nodeIsSelected(id: string): boolean {\r\n    return findIndex(nodeIds, (x) => x === id) !== -1;\r\n  }\r\n\r\n  const rootPosition = nodePositionsById[nodeIds[0]];\r\n\r\n  const copyNodes: ClipboardNode[] = nodeIds.map((nodeId) => {\r\n    const node = nodeFromNodeIdSelector(appState, nodeId);\r\n    const outputs = nodeOutputSourcesByPinIdFromNodeIdSelector(\r\n      appState,\r\n      nodeId\r\n    );\r\n    const copyNode: ClipboardNode = {\r\n      id: copyIds[nodeId],\r\n      nodeType: node.nodeType,\r\n      offset: pointSubtract(nodePositionsById[nodeId], rootPosition),\r\n      outputs: mapValues(outputs, (conns) =>\r\n        conns\r\n          .filter((x) => nodeIsSelected(x.nodeId))\r\n          .map((c) => ({ nodeId: copyIds[c.nodeId], pinId: c.pinId }))\r\n      ),\r\n    };\r\n    return copyNode;\r\n  });\r\n\r\n  return {\r\n    ...state,\r\n    clipboardNodes: copyNodes,\r\n    clipboardPasteOrigin: rootPosition,\r\n  };\r\n});\r\n","import { AnyAction } from \"redux\";\r\n\r\nexport const ACTION_PASTE = \"@clipboard/paste\" as const;\r\nexport const paste = () => ({\r\n  type: ACTION_PASTE,\r\n});\r\nexport type PasteAction = ReturnType<typeof paste>;\r\nexport function isPasteAction(action: AnyAction): action is PasteAction {\r\n  return action.type === ACTION_PASTE;\r\n}\r\n","import { AnyAction } from \"redux\";\r\nimport zipObject from \"lodash/zipObject\";\r\nimport map from \"lodash/map\";\r\nimport values from \"lodash/values\";\r\nimport { v4 as uuidV4 } from \"uuid\";\r\n\r\nimport { Point, pointAdd } from \"@/geometry\";\r\nimport { AppState, defaultAppState } from \"@/store\";\r\nimport { fpSet } from \"@/utils\";\r\n\r\nimport rootReducer from \"@/store/reducer\";\r\n\r\nimport { addNode } from \"@/actions/node-add\";\r\nimport { attachWire } from \"@/actions/wire-attach\";\r\nimport { isPasteAction } from \"@/actions/clipboard-paste\";\r\nimport { selectNodes } from \"@/actions/select-nodes\";\r\n\r\nexport const CLIPBOARD_PASTE_OFFSET: Point = { x: 10, y: 10 };\r\n\r\nexport default function clipboardPasteReducer(\r\n  state: AppState = defaultAppState,\r\n  action: AnyAction\r\n): AppState {\r\n  if (!isPasteAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  const { clipboardNodes, clipboardPasteOrigin } = state.services.clipboard;\r\n  const pastePosition = pointAdd(clipboardPasteOrigin, CLIPBOARD_PASTE_OFFSET);\r\n\r\n  const pasteIds = zipObject(\r\n    clipboardNodes.map((x) => x.id),\r\n    map(clipboardNodes, () => uuidV4())\r\n  );\r\n\r\n  // Two passes: Create and Wire.\r\n\r\n  // Create the nodes.\r\n  for (let node of clipboardNodes) {\r\n    const { id, nodeType, offset } = node;\r\n    const p = pointAdd(pastePosition, offset);\r\n    state = rootReducer(\r\n      state,\r\n      addNode(nodeType, { position: p, nodeId: pasteIds[id] })\r\n    );\r\n  }\r\n\r\n  // Wire the nodes\r\n  for (let node of clipboardNodes) {\r\n    const { id, outputs } = node;\r\n    const sourceId = pasteIds[id];\r\n    for (let outputPin of Object.keys(outputs)) {\r\n      for (let output of outputs[outputPin]) {\r\n        const { nodeId: targetCopyId, pinId: targetPin } = output;\r\n        const targetId = pasteIds[targetCopyId];\r\n        state = rootReducer(\r\n          state,\r\n          attachWire(\r\n            { nodeId: sourceId, pinId: outputPin },\r\n            { nodeId: targetId, pinId: targetPin }\r\n          )\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  state = fpSet(\r\n    state,\r\n    \"services\",\r\n    \"clipboard\",\r\n    \"clipboardPasteOrigin\",\r\n    pastePosition\r\n  );\r\n  state = rootReducer(state, selectNodes(values(pasteIds)));\r\n\r\n  return state;\r\n}\r\n","import { concatReducers } from \"@/store/utils\";\r\n\r\nimport clipboardCopyReducer from \"./clipboard-copy\";\r\nimport clipboardPasteReducer from \"./clipboard-paste\";\r\n\r\nconst clipboardReducer = concatReducers(\r\n  clipboardCopyReducer,\r\n  clipboardPasteReducer\r\n);\r\n\r\nexport default clipboardReducer;\r\n","import {\r\n  createServiceReducerCreator,\r\n  createServiceSelectorCreator,\r\n} from \"../service-state-utils\";\r\n\r\nexport const createDialogReducer = createServiceReducerCreator(\"dialog\");\r\nexport const createDialogSelector = createServiceSelectorCreator(\"dialog\");\r\n","import { concatReducers } from \"@/store/utils\";\r\n\r\nimport dialogResponseAcceptReducer from \"./dialog-response-accept\";\r\nimport dialogResponseCancelReducer from \"./dialog-response-cancel\";\r\nimport dialogShowReducer from \"./dialog-show\";\r\n\r\nexport default concatReducers(\r\n  dialogResponseAcceptReducer,\r\n  dialogResponseCancelReducer,\r\n  dialogShowReducer\r\n);\r\n","import { isAcceptDialogAction } from \"@/actions/dialog-response-accept\";\r\n\r\nimport { defaultDialogState } from \"../state\";\r\nimport { createDialogReducer } from \"../utils\";\r\n\r\nexport default createDialogReducer((state, action) => {\r\n  if (!isAcceptDialogAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  return defaultDialogState;\r\n});\r\n","import { isCancelDialogAction } from \"@/actions/dialog-response-cancel\";\r\n\r\nimport { defaultDialogState } from \"../state\";\r\nimport { createDialogReducer } from \"../utils\";\r\n\r\nexport default createDialogReducer((state, action) => {\r\n  if (!isCancelDialogAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  return defaultDialogState;\r\n});\r\n","import { isShowDialogAction } from \"@/actions/dialog-show\";\r\nimport { createDialogReducer } from \"../utils\";\r\n\r\nexport default createDialogReducer((state, action) => {\r\n  if (!isShowDialogAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  const { dialogType, data } = action.payload;\r\n\r\n  return {\r\n    ...state,\r\n    dialogType,\r\n    data,\r\n  };\r\n});\r\n","import { AppReducer } from \"./types\";\r\n\r\nexport const PRIORITY_PRE = -10;\r\nexport const PRIORITY_POST = 10;\r\nexport const PRIORITY_SAVE = 50;\r\n\r\nexport function reducerPriority(\r\n  priority: number,\r\n  reducer: AppReducer\r\n): AppReducer {\r\n  reducer.weight = priority;\r\n  return reducer;\r\n}\r\n\r\nexport function priorityBefore(reducer: AppReducer) {\r\n  return (reducer.weight ?? 0) - 1;\r\n}\r\n","import pick from \"lodash/pick\";\r\nimport difference from \"lodash/difference\";\r\nimport pickBy from \"lodash/pickBy\";\r\nimport flatMap from \"lodash/flatMap\";\r\n\r\nimport { AppState } from \"@/store\";\r\n\r\nimport { NodeGraphState } from \"../../state\";\r\nimport { Connection, nodePinEquals } from \"../../types\";\r\nimport { nodePinsFromPinNodeSelector } from \"../../selectors/pins\";\r\n\r\nexport default function nodeDelete(\r\n  state: NodeGraphState,\r\n  nodeIds: string[],\r\n  rootState: AppState\r\n): NodeGraphState {\r\n  const remainingNodeIds = difference(Object.keys(state.nodesById), nodeIds);\r\n\r\n  const removedIcPins = flatMap(nodeIds, (nodeId) =>\r\n    nodePinsFromPinNodeSelector(rootState, nodeId)\r\n  );\r\n\r\n  function isRemainingConnection({ inputPin, outputPin }: Connection) {\r\n    if (\r\n      nodeIds.indexOf(inputPin.nodeId) !== -1 ||\r\n      nodeIds.indexOf(outputPin.nodeId) !== -1\r\n    ) {\r\n      // Connection went to a removed node\r\n      return false;\r\n    }\r\n\r\n    // Connection was to a removed node pin\r\n    if (\r\n      removedIcPins.some(\r\n        (pin) => nodePinEquals(pin, inputPin) || nodePinEquals(pin, outputPin)\r\n      )\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  return {\r\n    ...state,\r\n    nodesById: pick(state.nodesById, remainingNodeIds),\r\n    connectionsById: pickBy(state.connectionsById, isRemainingConnection),\r\n  };\r\n}\r\n","import { priorityBefore, reducerPriority } from \"@/store/priorities\";\r\n\r\nimport { isDeleteCircuitAction } from \"@/actions/circuit-delete\";\r\n\r\nimport { nodeIdsFromCircuitIdSelector } from \"@/services/circuits/selectors/nodes\";\r\nimport circuitsCircuitDeleteReducer from \"@/services/circuits/reducer/circuit-delete\";\r\nimport { circuitIdToNodeType } from \"@/services/node-types/definition-sources/integrated-circuits/utils\";\r\n\r\nimport { createNodeGraphReducer } from \"../utils\";\r\nimport { nodeIdsFromTypeSelector } from \"../selectors/nodes\";\r\n\r\nimport nodeDelete from \"./operations/node-delete\";\r\n\r\nexport default reducerPriority(\r\n  priorityBefore(circuitsCircuitDeleteReducer),\r\n  createNodeGraphReducer((state, action, rootState) => {\r\n    if (!isDeleteCircuitAction(action)) {\r\n      return state;\r\n    }\r\n\r\n    const { circuitId } = action.payload;\r\n\r\n    const inCircuitNodeIds = nodeIdsFromCircuitIdSelector(rootState, circuitId);\r\n\r\n    const circuitTypeNodeIds = nodeIdsFromTypeSelector(\r\n      rootState,\r\n      circuitIdToNodeType(circuitId)\r\n    );\r\n\r\n    const nodeIds = [...inCircuitNodeIds, ...circuitTypeNodeIds];\r\n\r\n    return nodeDelete(state, nodeIds, rootState);\r\n  })\r\n);\r\n","import { AnyAction } from \"redux\";\r\n\r\nimport { reducerPriority, PRIORITY_PRE } from \"@/store/priorities\";\r\n\r\nimport { isAddNodeAction } from \"@/actions/node-add\";\r\n\r\nimport { createNodeGraphReducer } from \"../utils\";\r\n\r\nexport default reducerPriority(\r\n  PRIORITY_PRE,\r\n  createNodeGraphReducer((state, action: AnyAction) => {\r\n    if (!isAddNodeAction(action)) {\r\n      return state;\r\n    }\r\n\r\n    const { nodeId: id, nodeType } = action.payload;\r\n    return {\r\n      ...state,\r\n      nodesById: {\r\n        ...state.nodesById,\r\n        [id]: {\r\n          nodeType,\r\n        },\r\n      },\r\n    };\r\n  })\r\n);\r\n","import { isDeleteNodeAction } from \"@/actions/node-delete\";\r\n\r\nimport { priorityBefore, reducerPriority } from \"@/store/priorities\";\r\n\r\nimport circuitsNodeDeleteReducer from \"@/services/circuits/reducer/node-delete\";\r\n\r\nimport { createNodeGraphReducer } from \"../utils\";\r\n\r\nimport nodeDelete from \"./operations/node-delete\";\r\n\r\n// We need to know what circuit the node was a part of\r\nexport default reducerPriority(\r\n  priorityBefore(circuitsNodeDeleteReducer),\r\n  createNodeGraphReducer((state, action, rootState) => {\r\n    if (!isDeleteNodeAction(action)) {\r\n      return state;\r\n    }\r\n\r\n    const { nodeIds } = action.payload;\r\n\r\n    return nodeDelete(state, nodeIds, rootState);\r\n  })\r\n);\r\n","import { isNewProjectAction } from \"@/actions/project-new\";\r\n\r\nimport { createNodeGraphReducer } from \"../utils\";\r\nimport { defaultNodeGraphState } from \"../state\";\r\n\r\nexport default createNodeGraphReducer((state, action) => {\r\n  if (!isNewProjectAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  return defaultNodeGraphState;\r\n});\r\n","import find from \"lodash/find\";\r\n\r\nimport { AppState } from \"@/store\";\r\n\r\nimport { isAttachWireAction } from \"@/actions/wire-attach\";\r\n\r\nimport { nodeDefinitionFromTypeSelector } from \"@/services/node-types/selectors/node-types\";\r\n\r\nimport { createNodeGraphReducer } from \"../utils\";\r\nimport { Connection, NodePin, nodePinEquals } from \"../types\";\r\nimport { NodeGraphState } from \"../state\";\r\n\r\nexport default createNodeGraphReducer((state, action, rootState) => {\r\n  if (!isAttachWireAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  const { connectionId, p1, p2 } = action.payload;\r\n  const conn = pinsToConnection(state, p1, p2, rootState);\r\n  if (!conn) {\r\n    return state;\r\n  }\r\n\r\n  const { inputPin } = conn;\r\n\r\n  // Only one source per input.\r\n  if (find(state.connectionsById, (c) => nodePinEquals(c.inputPin, inputPin))) {\r\n    return state;\r\n  }\r\n\r\n  return {\r\n    ...state,\r\n    connectionsById: {\r\n      ...state.connectionsById,\r\n      [connectionId]: {\r\n        id: connectionId,\r\n        ...conn,\r\n      },\r\n    },\r\n  };\r\n});\r\n\r\n/**\r\n * Check two pins to see if they can form a valid connection.\r\n * Returns null if no connection can be made (both inputs or both outputs)\r\n *\r\n * Does not check to see if the pins are already connected, or other connections prevent this connection from forming.\r\n */\r\nexport function pinsToConnection(\r\n  state: NodeGraphState,\r\n  p1: NodePin,\r\n  p2: NodePin,\r\n  rootState: AppState\r\n): Connection | null {\r\n  const p1Node = state.nodesById[p1.nodeId];\r\n  const p2Node = state.nodesById[p2.nodeId];\r\n\r\n  if (!p1Node || !p2Node) {\r\n    return null;\r\n  }\r\n\r\n  const p1Def = nodeDefinitionFromTypeSelector(rootState, p1Node.nodeType);\r\n  const p2Def = nodeDefinitionFromTypeSelector(rootState, p2Node.nodeType);\r\n\r\n  if (!p1Def || !p2Def) {\r\n    return null;\r\n  }\r\n\r\n  const p1Pin = p1Def.pins[p1.pinId];\r\n  const p2Pin = p2Def.pins[p2.pinId];\r\n\r\n  if (!p1Pin || !p2Pin) {\r\n    return null;\r\n  }\r\n\r\n  // Pins are in same direction and cannot be connected.\r\n  if (p1Pin.direction === p2Pin.direction) {\r\n    return null;\r\n  }\r\n\r\n  const outputPin = p1Pin.direction === \"output\" ? p1 : p2;\r\n  const inputPin = p1Pin.direction === \"input\" ? p1 : p2;\r\n\r\n  return {\r\n    outputPin,\r\n    inputPin,\r\n  };\r\n}\r\n","import { AnyAction } from \"redux\";\r\n\r\nexport const ACTION_WIRE_DETATCH = \"@wire/detatch\" as const;\r\nexport const detatchWire = (connectionId: string) => ({\r\n  type: ACTION_WIRE_DETATCH,\r\n  payload: {\r\n    connectionId,\r\n  },\r\n});\r\nexport type DetatchWireNodeAction = ReturnType<typeof detatchWire>;\r\nexport function isDetatchWireAction(\r\n  action: AnyAction\r\n): action is DetatchWireNodeAction {\r\n  return action.type === ACTION_WIRE_DETATCH;\r\n}\r\n","import pick from \"lodash/pick\";\r\n\r\nimport { isDetatchWireAction } from \"@/actions/wire-detatch\";\r\n\r\nimport { createNodeGraphReducer } from \"../utils\";\r\n\r\nexport default createNodeGraphReducer((state, action) => {\r\n  if (!isDetatchWireAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  const { connectionId } = action.payload;\r\n\r\n  const remainingIds = Object.keys(state.connectionsById).filter(\r\n    (x) => x !== connectionId\r\n  );\r\n\r\n  return {\r\n    ...state,\r\n    connectionsById: pick(state.connectionsById, remainingIds),\r\n  };\r\n});\r\n","import { concatReducers } from \"@/store/utils\";\r\n\r\nimport circuitDeleteReducer from \"./circuit-delete\";\r\nimport nodeAddReducer from \"./node-add\";\r\nimport nodeDeleteReducer from \"./node-delete\";\r\nimport projectNewReducer from \"./project-new\";\r\nimport wireAttachReducer from \"./wire-attach\";\r\nimport wireDetatchReducer from \"./wire-detatch\";\r\n\r\nconst graphReducer = concatReducers(\r\n  circuitDeleteReducer,\r\n  nodeAddReducer,\r\n  projectNewReducer,\r\n  nodeDeleteReducer,\r\n  wireAttachReducer,\r\n  wireDetatchReducer\r\n);\r\n\r\nexport default graphReducer;\r\n","import difference from \"lodash/difference\";\r\nimport pick from \"lodash/pick\";\r\nimport flatMap from \"lodash/flatMap\";\r\n\r\nimport { AppState } from \"@/store\";\r\n\r\nimport {\r\n  connectionsByIdSelector,\r\n  nodeInputConnectionIdsFromNodeIdSelector,\r\n  nodeOutputConnectionIdsFromNodeIdSelector,\r\n} from \"@/services/node-graph/selectors/connections\";\r\n\r\nimport { NodeLayoutState } from \"../../state\";\r\nimport { nodePinsFromPinNodeSelector } from \"@/services/node-graph/selectors/pins\";\r\nimport { nodePinEquals } from \"@/services/node-graph/types\";\r\n\r\nexport default function nodeDelete(\r\n  state: NodeLayoutState,\r\n  nodeIds: string[],\r\n  rootState: AppState\r\n): NodeLayoutState {\r\n  const removedIcPins = flatMap(nodeIds, (nodeId) =>\r\n    nodePinsFromPinNodeSelector(rootState, nodeId)\r\n  );\r\n\r\n  // This logic has to duplicate the wire removal procedure from\r\n  //  wire-detatch.ts.\r\n  // We might want to just call that reducer from here.\r\n\r\n  const removingNodeConnectionIds = nodeIds.reduce((connectionIds, nodeId) => {\r\n    const inputs = nodeInputConnectionIdsFromNodeIdSelector(rootState, nodeId);\r\n    connectionIds.push(...inputs);\r\n\r\n    const outputs = nodeOutputConnectionIdsFromNodeIdSelector(\r\n      rootState,\r\n      nodeId\r\n    );\r\n    connectionIds.push(...outputs);\r\n\r\n    return connectionIds;\r\n  }, [] as string[]);\r\n\r\n  const connectionsById = connectionsByIdSelector(rootState);\r\n  const removingPinConnectionIds = Object.keys(connectionsById).filter(\r\n    (connectionId) => {\r\n      const { inputPin, outputPin } = connectionsById[connectionId];\r\n      return removedIcPins.some(\r\n        (removedPin) =>\r\n          nodePinEquals(removedPin, inputPin) ||\r\n          nodePinEquals(removedPin, outputPin)\r\n      );\r\n    }\r\n  );\r\n\r\n  const removingConnectionIds = [\r\n    ...removingNodeConnectionIds,\r\n    ...removingPinConnectionIds,\r\n  ];\r\n\r\n  const removingJointIds = removingConnectionIds.reduce(\r\n    (jointIds, connectionId) => {\r\n      jointIds.push(...state.wireJointIdsByConnectionId[connectionId]);\r\n      return jointIds;\r\n    },\r\n    [] as string[]\r\n  );\r\n\r\n  const remainingConnectionIds = difference(\r\n    Object.keys(state.wireJointIdsByConnectionId),\r\n    removingNodeConnectionIds\r\n  );\r\n\r\n  const remainingJointIds = difference(\r\n    Object.keys(state.wireJointPositionsByJointId),\r\n    removingJointIds\r\n  );\r\n\r\n  const remainingNodeIds = difference(\r\n    Object.keys(state.nodePositionsById),\r\n    nodeIds\r\n  );\r\n\r\n  return {\r\n    ...state,\r\n    nodePositionsById: pick(state.nodePositionsById, remainingNodeIds),\r\n    wireJointIdsByConnectionId: pick(\r\n      state.wireJointIdsByConnectionId,\r\n      remainingConnectionIds\r\n    ),\r\n    wireJointPositionsByJointId: pick(\r\n      state.wireJointPositionsByJointId,\r\n      remainingJointIds\r\n    ),\r\n  };\r\n}\r\n","import { priorityBefore, reducerPriority } from \"@/store/priorities\";\r\n\r\nimport { isDeleteCircuitAction } from \"@/actions/circuit-delete\";\r\n\r\nimport nodeGraphCircuitDeleteReducer from \"@/services/node-graph/reducer/circuit-delete\";\r\nimport { nodeIdsFromCircuitIdSelector } from \"@/services/circuits/selectors/nodes\";\r\nimport { nodeIdsFromTypeSelector } from \"@/services/node-graph/selectors/nodes\";\r\nimport { circuitIdToNodeType } from \"@/services/node-types/definition-sources/integrated-circuits/utils\";\r\n\r\nimport { createNodeLayoutReducer } from \"../utils\";\r\n\r\nimport nodeDeleteOperation from \"./operations/node-delete\";\r\n\r\nexport default reducerPriority(\r\n  // We need to run this reducer before graph runs, as we want to check what wires are connected to the node being deleted.\r\n  priorityBefore(nodeGraphCircuitDeleteReducer),\r\n  createNodeLayoutReducer((state, action, rootState) => {\r\n    if (!isDeleteCircuitAction(action)) {\r\n      return state;\r\n    }\r\n\r\n    const { circuitId } = action.payload;\r\n    const inCircuitNodeIds = nodeIdsFromCircuitIdSelector(rootState, circuitId);\r\n\r\n    state = nodeDeleteOperation(state, inCircuitNodeIds, rootState);\r\n\r\n    const circuitTypeNodeIds = nodeIdsFromTypeSelector(\r\n      rootState,\r\n      circuitIdToNodeType(circuitId)\r\n    );\r\n\r\n    state = nodeDeleteOperation(state, circuitTypeNodeIds, rootState);\r\n\r\n    return state;\r\n  })\r\n);\r\n","import { fpSet } from \"@/utils\";\r\n\r\nimport { ZeroPoint } from \"@/geometry\";\r\nimport { isAddNodeAction } from \"@/actions/node-add\";\r\n\r\nimport { createNodeLayoutReducer } from \"../utils\";\r\n\r\nexport default createNodeLayoutReducer((state, action) => {\r\n  if (!isAddNodeAction(action)) {\r\n    return state;\r\n  }\r\n  const { nodeId, position = ZeroPoint } = action.payload;\r\n\r\n  return fpSet(state, \"nodePositionsById\", nodeId, position);\r\n});\r\n","import { priorityBefore, reducerPriority } from \"@/store/priorities\";\r\n\r\nimport { isDeleteNodeAction } from \"@/actions/node-delete\";\r\n\r\nimport { createNodeLayoutReducer } from \"../utils\";\r\n\r\nimport nodeGraphNodeDeleteReducer from \"@/services/node-graph/reducer/node-delete\";\r\n\r\nimport nodeDeleteOperation from \"./operations/node-delete\";\r\n\r\n// We need to run this reducer before graph runs, as we want to check what wires are connected to the node being deleted.\r\nexport default reducerPriority(\r\n  priorityBefore(nodeGraphNodeDeleteReducer),\r\n  createNodeLayoutReducer((state, action, rootState) => {\r\n    if (!isDeleteNodeAction(action)) {\r\n      return state;\r\n    }\r\n\r\n    const { nodeIds } = action.payload;\r\n\r\n    return nodeDeleteOperation(state, nodeIds, rootState);\r\n  })\r\n);\r\n","import { AnyAction } from \"redux\";\r\n\r\nimport { asArray, MaybeArray } from \"@/arrays\";\r\nimport { Point } from \"@/geometry\";\r\n\r\nexport const ACTION_NODE_MOVE = \"@node/move\" as const;\r\nexport const moveNode = (\r\n  nodeId: MaybeArray<string>,\r\n  position: Point,\r\n  relative = false\r\n) => ({\r\n  type: ACTION_NODE_MOVE,\r\n  payload: { nodeIds: asArray(nodeId), position, relative },\r\n});\r\nexport type MoveNodeAction = ReturnType<typeof moveNode>;\r\nexport function isMoveNodeAction(action: AnyAction): action is MoveNodeAction {\r\n  return action.type === ACTION_NODE_MOVE;\r\n}\r\n","import mapValues from \"lodash/mapValues\";\r\nimport pick from \"lodash/pick\";\r\n\r\nimport { isMoveNodeAction } from \"@/actions/node-move\";\r\nimport { createNodeLayoutReducer } from \"../utils\";\r\n\r\nexport default createNodeLayoutReducer((state, action, appState) => {\r\n  if (!isMoveNodeAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  const { nodeIds, position, relative } = action.payload;\r\n\r\n  const movedNodePositions = mapValues(\r\n    pick(state.nodePositionsById, nodeIds),\r\n    (p) => ({\r\n      x: relative ? p.x + position.x : position.x,\r\n      y: relative ? p.y + position.y : position.y,\r\n    })\r\n  );\r\n\r\n  return {\r\n    ...state,\r\n    nodePositionsById: {\r\n      ...state.nodePositionsById,\r\n      ...movedNodePositions,\r\n    },\r\n  };\r\n});\r\n","import { isNewProjectAction } from \"@/actions/project-new\";\r\n\r\nimport { createNodeLayoutReducer } from \"../utils\";\r\nimport { defaultNodeLayoutState } from \"../state\";\r\n\r\nexport default createNodeLayoutReducer((state, action) => {\r\n  if (!isNewProjectAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  return defaultNodeLayoutState;\r\n});\r\n","import { v4 as uuidV4 } from \"uuid\";\r\nimport zipObject from \"lodash/zipObject\";\r\n\r\nimport { isAttachWireAction } from \"@/actions/wire-attach\";\r\nimport { fpSet } from \"@/utils\";\r\n\r\nimport { createNodeLayoutReducer } from \"../utils\";\r\n\r\nexport default createNodeLayoutReducer((state, action) => {\r\n  if (!isAttachWireAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  const { connectionId, joints } = action.payload;\r\n\r\n  // Might want to use addWireJoint action, but field is the only thing that cares about joints.\r\n  if (joints.length > 0) {\r\n    const jointIds = joints.map((x) => uuidV4());\r\n    state = fpSet(state, \"wireJointIdsByConnectionId\", connectionId, jointIds);\r\n    state = fpSet(state, \"wireJointPositionsByJointId\", (value) => ({\r\n      ...value,\r\n      ...zipObject(jointIds, joints),\r\n    }));\r\n  } else {\r\n    state = fpSet(state, \"wireJointIdsByConnectionId\", connectionId, []);\r\n  }\r\n\r\n  return state;\r\n});\r\n","import pick from \"lodash/pick\";\r\nimport difference from \"lodash/difference\";\r\n\r\nimport { isDetatchWireAction } from \"@/actions/wire-detatch\";\r\n\r\nimport { createNodeLayoutReducer } from \"../utils\";\r\n\r\nexport default createNodeLayoutReducer((state, action) => {\r\n  if (!isDetatchWireAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  const { connectionId } = action.payload;\r\n\r\n  const remainingConnectionIds = Object.keys(\r\n    state.wireJointIdsByConnectionId\r\n  ).filter((x) => x != connectionId);\r\n\r\n  const remainingJointIds = difference(\r\n    Object.keys(state.wireJointPositionsByJointId),\r\n    state.wireJointIdsByConnectionId[connectionId]\r\n  );\r\n\r\n  return {\r\n    ...state,\r\n    wireJointIdsByConnectionId: pick(\r\n      state.wireJointIdsByConnectionId,\r\n      remainingConnectionIds\r\n    ),\r\n    wireJointPositionsByJointId: pick(\r\n      state.wireJointPositionsByJointId,\r\n      remainingJointIds\r\n    ),\r\n  };\r\n});\r\n","import { AnyAction } from \"redux\";\r\nimport { v4 as uuidV4 } from \"uuid\";\r\n\r\nimport { Point } from \"@/geometry\";\r\n\r\nexport const ACTION_WIRE_JOINT_ADD = \"@wire/joint/add\" as const;\r\nexport const addWireJoint = (\r\n  connectionId: string,\r\n  addAfterJointId: string | null,\r\n  position: Point,\r\n  jointId?: string\r\n) => ({\r\n  type: ACTION_WIRE_JOINT_ADD,\r\n  payload: {\r\n    connectionId,\r\n    jointId: jointId || uuidV4(),\r\n    addAfterJointId,\r\n    position,\r\n  },\r\n});\r\nexport type AddWireJointAction = ReturnType<typeof addWireJoint>;\r\nexport function isAddWireJointAction(\r\n  action: AnyAction\r\n): action is AddWireJointAction {\r\n  return action.type === ACTION_WIRE_JOINT_ADD;\r\n}\r\n","import { isAddWireJointAction } from \"@/actions/wire-joint-add\";\r\n\r\nimport { createNodeLayoutReducer } from \"../utils\";\r\n\r\nexport default createNodeLayoutReducer((state, action) => {\r\n  if (!isAddWireJointAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  const { connectionId, addAfterJointId, position, jointId } = action.payload;\r\n  let wireJoints = state.wireJointIdsByConnectionId[connectionId];\r\n  let insertionIndex = addAfterJointId\r\n    ? wireJoints.indexOf(addAfterJointId) + 1\r\n    : 0;\r\n\r\n  wireJoints = [\r\n    ...wireJoints.slice(0, insertionIndex),\r\n    jointId,\r\n    ...wireJoints.slice(insertionIndex),\r\n  ];\r\n\r\n  return {\r\n    ...state,\r\n    wireJointIdsByConnectionId: {\r\n      ...state.wireJointIdsByConnectionId,\r\n      [connectionId]: wireJoints,\r\n    },\r\n    wireJointPositionsByJointId: {\r\n      ...state.wireJointPositionsByJointId,\r\n      [jointId]: position,\r\n    },\r\n  };\r\n});\r\n","import { AnyAction } from \"redux\";\r\n\r\nexport const ACTION_WIRE_JOINT_DELETE = \"@wire/joint/delete\" as const;\r\nexport const deleteWireJoint = (jointId: string) => ({\r\n  type: ACTION_WIRE_JOINT_DELETE,\r\n  payload: { jointId },\r\n});\r\nexport type DeleteWireJointAction = ReturnType<typeof deleteWireJoint>;\r\nexport function isDeleteWireJointAction(\r\n  action: AnyAction\r\n): action is DeleteWireJointAction {\r\n  return action.type === ACTION_WIRE_JOINT_DELETE;\r\n}\r\n","import { concatReducers } from \"@/store/utils\";\r\n\r\nimport circuitDeleteReducer from \"./circuit-delete\";\r\nimport nodeAddReducer from \"./node-add\";\r\nimport nodeDeleteReducer from \"./node-delete\";\r\nimport nodeMoveReducer from \"./node-move\";\r\nimport projectNewReducer from \"./project-new\";\r\nimport wireAttachReducer from \"./wire-attach\";\r\nimport wireDetatchReducer from \"./wire-detatch\";\r\nimport wireJointAddReducer from \"./wire-joint-add\";\r\nimport wireJointDeleteReducer from \"./wire-joint-delete\";\r\nimport wireJointMoveReducer from \"./wire-joint-move\";\r\n\r\nconst fieldReducer = concatReducers(\r\n  circuitDeleteReducer,\r\n  nodeAddReducer,\r\n  projectNewReducer,\r\n  nodeDeleteReducer,\r\n  nodeMoveReducer,\r\n  wireAttachReducer,\r\n  wireDetatchReducer,\r\n  wireJointAddReducer,\r\n  wireJointDeleteReducer,\r\n  wireJointMoveReducer\r\n);\r\n\r\nexport default fieldReducer;\r\n","import pick from \"lodash/pick\";\r\nimport mapValues from \"lodash/mapValues\";\r\n\r\nimport { isDeleteWireJointAction } from \"@/actions/wire-joint-delete\";\r\n\r\nimport { createNodeLayoutReducer } from \"../utils\";\r\n\r\nexport default createNodeLayoutReducer((state, action) => {\r\n  if (!isDeleteWireJointAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  const { jointId } = action.payload;\r\n\r\n  const remainingJointIds = Object.keys(\r\n    state.wireJointPositionsByJointId\r\n  ).filter((x) => x !== jointId);\r\n\r\n  return {\r\n    ...state,\r\n    wireJointIdsByConnectionId: mapValues(\r\n      state.wireJointIdsByConnectionId,\r\n      (connectionIds) => connectionIds.filter((x) => x !== jointId)\r\n    ),\r\n    wireJointsByJointId: pick(\r\n      state.wireJointPositionsByJointId,\r\n      remainingJointIds\r\n    ),\r\n  };\r\n});\r\n","import mapValues from \"lodash/mapValues\";\r\nimport pick from \"lodash/pick\";\r\n\r\nimport { isMoveWireJointAction } from \"@/actions/wire-joint-move\";\r\n\r\nimport { createNodeLayoutReducer } from \"../utils\";\r\n\r\nexport default createNodeLayoutReducer((state, action) => {\r\n  if (!isMoveWireJointAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  const { jointIds, position, relative } = action.payload;\r\n\r\n  const movedJoints = mapValues(\r\n    pick(state.wireJointPositionsByJointId, jointIds),\r\n    (p) => ({\r\n      x: relative ? p.x + position.x : position.x,\r\n      y: relative ? p.y + position.y : position.y,\r\n    })\r\n  );\r\n\r\n  return {\r\n    ...state,\r\n    wireJointPositionsByJointId: {\r\n      ...state.wireJointPositionsByJointId,\r\n      ...movedJoints,\r\n    },\r\n  };\r\n});\r\n","import { AnyAction } from \"redux\";\r\n\r\nimport { AppState, defaultAppState } from \"@/store\";\r\nimport { reducerPriority, PRIORITY_SAVE } from \"@/store/priorities\";\r\n\r\nimport { ACTION_CIRCUIT_ADD } from \"@/actions/circuit-add\";\r\nimport { ACTION_CIRCUIT_DELETE } from \"@/actions/circuit-delete\";\r\nimport { ACTION_CIRCUIT_RENAME } from \"@/actions/circuit-rename\";\r\nimport { ACTION_NODE_ADD } from \"@/actions/node-add\";\r\nimport { ACTION_NODE_DELETE } from \"@/actions/node-delete\";\r\nimport { ACTION_SELECTION_MOVE } from \"@/actions/selection-move\";\r\nimport { ACTION_WIRE_ATTACH } from \"@/actions/wire-attach\";\r\nimport { ACTION_WIRE_DETATCH } from \"@/actions/wire-detatch\";\r\nimport { ACTION_WIRE_JOINT_ADD } from \"@/actions/wire-joint-add\";\r\nimport { ACTION_WIRE_JOINT_MOVE_END } from \"@/actions/wire-joint-move\";\r\n\r\nimport { createSave, storeAutosave } from \"../utils\";\r\nimport { ACTION_WIRE_JOINT_DELETE } from \"@/actions/wire-joint-delete\";\r\n\r\nconst AUTOSAVE_TRIGGERS = [\r\n  ACTION_NODE_ADD,\r\n  ACTION_NODE_DELETE,\r\n  ACTION_CIRCUIT_ADD,\r\n  ACTION_CIRCUIT_DELETE,\r\n  ACTION_CIRCUIT_RENAME,\r\n  ACTION_SELECTION_MOVE,\r\n  ACTION_WIRE_ATTACH,\r\n  ACTION_WIRE_DETATCH,\r\n  ACTION_WIRE_JOINT_ADD,\r\n  ACTION_WIRE_JOINT_MOVE_END,\r\n  ACTION_WIRE_JOINT_DELETE,\r\n];\r\n\r\nexport default reducerPriority(\r\n  PRIORITY_SAVE,\r\n  (state: AppState = defaultAppState, action: AnyAction): AppState => {\r\n    if (AUTOSAVE_TRIGGERS.indexOf(action.type) === -1) {\r\n      return state;\r\n    }\r\n\r\n    const save = createSave(state);\r\n    storeAutosave(save);\r\n\r\n    return state;\r\n  }\r\n);\r\n","import { concatReducers } from \"@/store/utils\";\r\n\r\nimport autosaveReducer from \"./autosave\";\r\nimport initReducer from \"./init\";\r\nimport projectNewReducer from \"./project-new\";\r\nimport projectReceiveReducer from \"./project-receive\";\r\n\r\nexport default concatReducers(\r\n  autosaveReducer,\r\n  projectNewReducer,\r\n  initReducer,\r\n  projectReceiveReducer\r\n);\r\n","import {\r\n  SaveCircuit,\r\n  SaveData,\r\n  saveDataSchema,\r\n  SaveNode,\r\n  SaveWire,\r\n} from \"./types\";\r\n\r\nimport { AppState } from \"@/store\";\r\nimport rootReducer from \"@/store/reducer\";\r\n\r\nimport { addNode } from \"@/actions/node-add\";\r\nimport { attachWire } from \"@/actions/wire-attach\";\r\n\r\nimport { defaultSelectionState } from \"../selection/state\";\r\nimport { defaultSimulatorState } from \"../simulator/state\";\r\nimport { defaultNodeGraphState } from \"../node-graph/state\";\r\n\r\nimport {\r\n  nodeIdsSelector,\r\n  nodeFromNodeIdSelector,\r\n} from \"../node-graph/selectors/nodes\";\r\nimport {\r\n  connectionIdsSelector,\r\n  connectionFromConnectionIdSelector,\r\n} from \"../node-graph/selectors/connections\";\r\nimport { nodePositionFromNodeIdSelector } from \"../node-layout/selectors/node-positions\";\r\nimport {\r\n  circuitIdsSelector,\r\n  circuitNameFromIdSelector,\r\n} from \"../circuits/selectors/circuits\";\r\nimport { circuitIdFromNodeIdSelector } from \"../circuits/selectors/nodes\";\r\nimport {\r\n  wireJointPositionsByJointIdSelector,\r\n  wireJointIdsFromConnectionIdSelector,\r\n} from \"../node-layout/selectors/wires\";\r\nimport { defaultNodeLayoutState } from \"../node-layout/state\";\r\n\r\nimport { SaveFormatError } from \"./errors\";\r\nimport { addCircuit } from \"@/actions/circuit-add\";\r\n\r\nexport function createSave(state: AppState): SaveData {\r\n  const jointPositions = wireJointPositionsByJointIdSelector(state);\r\n  return {\r\n    circuits: circuitIdsSelector(state).map((circuitId) => {\r\n      const circuitName = circuitNameFromIdSelector(state, circuitId);\r\n      const saveCircuit: SaveCircuit = {\r\n        circuitId,\r\n        circuitName,\r\n      };\r\n      return saveCircuit;\r\n    }),\r\n    nodes: nodeIdsSelector(state).map((nodeId) => {\r\n      const node = nodeFromNodeIdSelector(state, nodeId);\r\n      const position = nodePositionFromNodeIdSelector(state, nodeId);\r\n      const circuitId = circuitIdFromNodeIdSelector(state, nodeId);\r\n      const saveNode: SaveNode = {\r\n        nodeId: nodeId,\r\n        nodeType: node.nodeType,\r\n        circuitId: circuitId ?? \"root\",\r\n        x: position.x,\r\n        y: position.y,\r\n      };\r\n      return saveNode;\r\n    }),\r\n    wires: connectionIdsSelector(state).map((connectionId) => {\r\n      const wire = connectionFromConnectionIdSelector(state, connectionId);\r\n      const jointIds = wireJointIdsFromConnectionIdSelector(\r\n        state,\r\n        connectionId\r\n      );\r\n      const saveWire: SaveWire = {\r\n        input: wire.inputPin,\r\n        output: wire.outputPin,\r\n        joints: jointIds.map((jointId) => jointPositions[jointId]),\r\n      };\r\n      return saveWire;\r\n    }),\r\n  };\r\n}\r\n\r\nexport function loadSave(state: AppState, save: SaveData): AppState {\r\n  try {\r\n    saveDataSchema.validateSync(save);\r\n  } catch (e) {\r\n    throw new SaveFormatError(e.message);\r\n  }\r\n\r\n  state = {\r\n    ...state,\r\n    services: {\r\n      ...state.services,\r\n      nodeLayout: defaultNodeLayoutState,\r\n      nodeGraph: defaultNodeGraphState,\r\n      selection: defaultSelectionState,\r\n      simulator: defaultSimulatorState,\r\n    },\r\n  };\r\n\r\n  try {\r\n    state = (save.circuits ?? []).reduce(\r\n      (state, { circuitId, circuitName }) =>\r\n        rootReducer(state, addCircuit({ circuitId, circuitName })),\r\n      state\r\n    );\r\n\r\n    state = (save.nodes ?? []).reduce(\r\n      (state, node) =>\r\n        rootReducer(\r\n          state,\r\n          addNode(node.nodeType, {\r\n            nodeId: node.nodeId,\r\n            circuitId: node.circuitId,\r\n            position: { x: node.x, y: node.y },\r\n          })\r\n        ),\r\n      state\r\n    );\r\n\r\n    state = (save.wires ?? []).reduce(\r\n      (state, wire) =>\r\n        rootReducer(\r\n          state,\r\n          attachWire(wire.output, wire.input, { joints: wire.joints })\r\n        ),\r\n      state\r\n    );\r\n  } catch (e) {\r\n    console.error(\"Failed to rehydrate SaveData:\", e);\r\n    throw new SaveFormatError(\"Failed to load project.\");\r\n  }\r\n\r\n  return state;\r\n}\r\n\r\nexport function storeAutosave(save: SaveData): void {\r\n  localStorage.setItem(\"autosave\", JSON.stringify(save));\r\n}\r\n\r\nexport function loadAutosave(): SaveData | null {\r\n  const str = localStorage.getItem(\"autosave\");\r\n  if (!str) {\r\n    return null;\r\n  }\r\n\r\n  try {\r\n    return JSON.parse(str);\r\n  } catch {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport function deleteAutosave() {\r\n  localStorage.removeItem(\"autosave\");\r\n}\r\n","import { AnyAction } from \"redux\";\r\n\r\nimport { AppState, defaultAppState } from \"@/store\";\r\n\r\nimport { isNewProjectAction } from \"@/actions/project-new\";\r\n\r\nimport { deleteAutosave } from \"../utils\";\r\n\r\nexport default function fileNewReducer(\r\n  state: AppState = defaultAppState,\r\n  action: AnyAction\r\n): AppState {\r\n  if (!isNewProjectAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  deleteAutosave();\r\n  return state;\r\n}\r\n","import { AnyAction } from \"redux\";\r\nimport { AppState, defaultAppState } from \"@/store\";\r\n\r\nimport { isInitAction } from \"@/actions/init\";\r\n\r\nimport { loadAutosave, loadSave } from \"../utils\";\r\n\r\nexport default function initReducer(\r\n  state: AppState = defaultAppState,\r\n  action: AnyAction\r\n): AppState {\r\n  if (!isInitAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  const save = loadAutosave();\r\n  if (!save) {\r\n    return state;\r\n  }\r\n\r\n  try {\r\n    return loadSave(state, save);\r\n  } catch {\r\n    return state;\r\n  }\r\n}\r\n","import { AnyAction } from \"redux\";\r\n\r\nimport { AppState, defaultAppState } from \"@/store\";\r\n\r\nimport { isReceiveProjectAction } from \"@/actions/project-receive\";\r\n\r\nimport { loadSave } from \"../utils\";\r\n\r\nexport default function projectReceiveReducer(\r\n  state: AppState = defaultAppState,\r\n  action: AnyAction\r\n): AppState {\r\n  if (!isReceiveProjectAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  try {\r\n    return loadSave(state, action.payload.saveData);\r\n  } catch {\r\n    // TODO: display error\r\n    return state;\r\n  }\r\n}\r\n","import difference from \"lodash/difference\";\r\n\r\nimport { isDeleteNodeAction } from \"@/actions/node-delete\";\r\n\r\nimport { createSelectionReducer } from \"../utils\";\r\n\r\nexport default createSelectionReducer((state, action) => {\r\n  if (!isDeleteNodeAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  const { nodeIds } = action.payload;\r\n\r\n  return {\r\n    ...state,\r\n    selectedNodeIds: difference(state.selectedNodeIds, nodeIds),\r\n    selectedConnectionIds: [], // Might be removing a node attached to a selected wire\r\n  };\r\n});\r\n","import { isNewProjectAction } from \"@/actions/project-new\";\r\n\r\nimport { createSelectionReducer } from \"../utils\";\r\nimport { defaultSelectionState } from \"../state\";\r\n\r\nexport default createSelectionReducer((state, action) => {\r\n  if (!isNewProjectAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  return defaultSelectionState;\r\n});\r\n","import { AnyAction } from \"redux\";\r\n\r\nexport const ACTION_SELECT_CLEAR = \"@select/all\" as const;\r\nexport const selectAll = () => ({\r\n  type: ACTION_SELECT_CLEAR,\r\n});\r\nexport type SelectAllAction = ReturnType<typeof selectAll>;\r\nexport function isSelectAllAction(\r\n  action: AnyAction\r\n): action is SelectAllAction {\r\n  return action.type === ACTION_SELECT_CLEAR;\r\n}\r\n","import { createSelector } from \"reselect\";\r\nimport { includes } from \"lodash\";\r\n\r\nimport { AppState } from \"@/store\";\r\n\r\nimport { Connection } from \"@/services/node-graph/types\";\r\n\r\nimport { nodeIdsFromCircuitIdSelector } from \"./nodes\";\r\n\r\n/**\r\n * Get all connection ids for the given circuit id.\r\n *\r\n * A connection is in the circuit if both its input and output are for nodes in this circuit.\r\n *\r\n * WARN: Single-memoized, cache will bust if new circuit id passed.\r\n */\r\nexport const connectionIdsByCircuitIdSelector = createSelector(\r\n  (state: AppState, circuitId: string) =>\r\n    nodeIdsFromCircuitIdSelector(state, circuitId),\r\n  (state: AppState) => state.services.nodeGraph.connectionsById,\r\n  (nodeIds: string[], connectionsById: Record<string, Connection>) => {\r\n    return Object.keys(connectionsById).filter((connectionId) => {\r\n      const { inputPin, outputPin } = connectionsById[connectionId];\r\n\r\n      if (!includes(nodeIds, inputPin.nodeId)) {\r\n        return false;\r\n      }\r\n\r\n      if (!includes(nodeIds, outputPin.nodeId)) {\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n);\r\n","import { AppState } from \"@/store\";\r\n\r\nimport { nodeIdsFromCircuitIdSelector } from \"@/services/circuits/selectors/nodes\";\r\nimport { connectionIdsByCircuitIdSelector } from \"@/services/circuits/selectors/connections\";\r\n\r\nimport { editingCircuitIdSelector } from \"./circuit\";\r\n\r\nexport const nodeIdsForEditingCircuitSelector = (state: AppState) => {\r\n  const editingCircuitId = editingCircuitIdSelector(state);\r\n  const nodeIds = nodeIdsFromCircuitIdSelector(state, editingCircuitId);\r\n  return nodeIds;\r\n};\r\n\r\nexport const connectionIdsForEditingCircuitSelector = (state: AppState) => {\r\n  const editingCircuitId = editingCircuitIdSelector(state);\r\n  const connectionids = connectionIdsByCircuitIdSelector(\r\n    state,\r\n    editingCircuitId\r\n  );\r\n  return connectionids;\r\n};\r\n","import { AppState } from \"@/store\";\r\nimport { Point, pointAdd, ZeroPoint } from \"@/geometry\";\r\n\r\nimport { nodeTypeFromNodeIdSelector } from \"@/services/node-graph/selectors/nodes\";\r\nimport { nodeDefinitionFromTypeSelector } from \"@/services/node-types/selectors/node-types\";\r\nimport { NodeDefinition } from \"@/services/node-types/types\";\r\nimport { nodeDefFromNodeIdSelector } from \"@/services/node-graph/selectors/node-def\";\r\n\r\nimport { createNodeLayoutSelector } from \"../utils\";\r\nimport { NodeLayoutState } from \"../state\";\r\n\r\nimport { nodePositionFromNodeIdSelector } from \"./node-positions\";\r\n\r\ninterface PositionCache {\r\n  inputNodeDef: NodeDefinition;\r\n  inputNodePosition: Point;\r\n  outputPosition: Point;\r\n}\r\n\r\n// TODO: These build up forever, need to wipe it on occasion.\r\n// Probably should use LRU cache.\r\n// Not fixing it right now as we previously used re-reselect, which\r\n//  also builds up forever.\r\nconst startPositionCacheByConnectionId: Record<string, PositionCache> = {};\r\nconst endPositionCacheByConnectionId: Record<string, PositionCache> = {};\r\n\r\nexport const wireStartPositionFromConnectionIdSelector = (\r\n  state: AppState,\r\n  connectionId: string\r\n) => {\r\n  const {\r\n    outputPin: { nodeId, pinId },\r\n  } = state.services.nodeGraph.connectionsById[connectionId];\r\n\r\n  const nodeDef = nodeDefFromNodeIdSelector(state, nodeId);\r\n  if (!nodeDef) {\r\n    return ZeroPoint;\r\n  }\r\n\r\n  const nodePosition =\r\n    nodePositionFromNodeIdSelector(state, nodeId) || ZeroPoint;\r\n\r\n  // Caching is to get a consistent reference to avoid component rerenders.\r\n  //  We are not concerned about performance here.\r\n  const cacheData = startPositionCacheByConnectionId[connectionId];\r\n  if (\r\n    cacheData &&\r\n    cacheData.inputNodeDef === nodeDef &&\r\n    cacheData.inputNodePosition.x === nodePosition.x &&\r\n    cacheData.inputNodePosition.y === nodePosition.y\r\n  ) {\r\n    return cacheData.outputPosition;\r\n  }\r\n\r\n  let offset = ZeroPoint;\r\n  if (nodeDef && nodeDef.pins[pinId]) {\r\n    offset = nodeDef.pins[pinId];\r\n  }\r\n  const position = pointAdd(nodePosition, offset);\r\n  startPositionCacheByConnectionId[connectionId] = {\r\n    inputNodeDef: nodeDef,\r\n    inputNodePosition: nodePosition,\r\n    outputPosition: position,\r\n  };\r\n\r\n  return position;\r\n};\r\n\r\nexport const wireEndPositionFromConnectionIdSelector = (\r\n  state: AppState,\r\n  connectionId: string\r\n) => {\r\n  const {\r\n    inputPin: { nodeId, pinId },\r\n  } = state.services.nodeGraph.connectionsById[connectionId];\r\n  const nodeDef = nodeDefFromNodeIdSelector(state, nodeId);\r\n  if (!nodeDef) {\r\n    return ZeroPoint;\r\n  }\r\n\r\n  const nodePosition =\r\n    nodePositionFromNodeIdSelector(state, nodeId) || ZeroPoint;\r\n\r\n  // Caching is to get a consistent reference to avoid component rerenders.\r\n  //  We are not concerned about performance here.\r\n  const cacheData = endPositionCacheByConnectionId[connectionId];\r\n  if (\r\n    cacheData &&\r\n    cacheData.inputNodeDef === nodeDef &&\r\n    cacheData.inputNodePosition.x === nodePosition.x &&\r\n    cacheData.inputNodePosition.y === nodePosition.y\r\n  ) {\r\n    return cacheData.outputPosition;\r\n  }\r\n\r\n  let offset = ZeroPoint;\r\n  if (nodeDef && nodeDef.pins[pinId]) {\r\n    offset = nodeDef.pins[pinId];\r\n  }\r\n  const position = pointAdd(nodePosition, offset);\r\n  endPositionCacheByConnectionId[connectionId] = {\r\n    inputNodeDef: nodeDef,\r\n    inputNodePosition: nodePosition,\r\n    outputPosition: position,\r\n  };\r\n\r\n  return position;\r\n};\r\n\r\n// WARN: Returns new object with each invocation.  Not safe for react use.\r\n//  Currently used to get all joint ids in reducers.\r\nexport const jointIdsSelector = createNodeLayoutSelector(\r\n  (state: NodeLayoutState) => Object.keys(state.wireJointPositionsByJointId)\r\n);\r\n\r\nexport const wireJointIdsByConnectionIdSelector = createNodeLayoutSelector(\r\n  (state) => state.wireJointIdsByConnectionId\r\n);\r\n\r\nexport const wireJointIdsFromConnectionIdSelector = createNodeLayoutSelector(\r\n  (state: NodeLayoutState, connectionId: string) =>\r\n    state.wireJointIdsByConnectionId[connectionId]\r\n);\r\n\r\nexport const wireJointPositionFromJointIdSelector = createNodeLayoutSelector(\r\n  (state: NodeLayoutState, jointId: string) =>\r\n    state.wireJointPositionsByJointId[jointId]\r\n);\r\n\r\n// WARN: Returns new object with each invocation.  Not safe for react use.\r\n//  Currently used to get all joint ids in reducers.\r\nexport const wireJointPositionsByJointIdSelector = createNodeLayoutSelector(\r\n  (state: NodeLayoutState) => {\r\n    return state.wireJointPositionsByJointId;\r\n  }\r\n);\r\n","import flatten from \"lodash/flatten\";\r\n\r\nimport { isSelectAllAction } from \"@/actions/select-all\";\r\n\r\nimport { nodeIdsForEditingCircuitSelector } from \"@/services/circuit-editor-ui/selectors/nodes\";\r\nimport {\r\n  connectionIdsSelector,\r\n  connectionsByIdSelector,\r\n} from \"@/services/node-graph/selectors/connections\";\r\nimport { wireJointIdsByConnectionIdSelector } from \"@/services/node-layout/selectors/wires\";\r\n\r\nimport { createSelectionReducer } from \"../utils\";\r\n\r\nexport default createSelectionReducer((state, action, appState) => {\r\n  if (!isSelectAllAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  const nodeIds = nodeIdsForEditingCircuitSelector(appState);\r\n\r\n  let connectionIds = connectionIdsSelector(appState);\r\n  const connectionsById = connectionsByIdSelector(appState);\r\n  connectionIds = connectionIds.filter((connectionId) => {\r\n    const { inputPin, outputPin } = connectionsById[connectionId];\r\n    if (\r\n      nodeIds.indexOf(inputPin.nodeId) === -1 ||\r\n      nodeIds.indexOf(outputPin.nodeId) === -1\r\n    ) {\r\n      return false;\r\n    }\r\n    return true;\r\n  });\r\n\r\n  const wireJointIdsFromConnectionId = wireJointIdsByConnectionIdSelector(\r\n    appState\r\n  );\r\n  const jointIds = flatten(\r\n    connectionIds.map((connId) => wireJointIdsFromConnectionId[connId])\r\n  );\r\n\r\n  return {\r\n    ...state,\r\n    selectedNodeIds: nodeIds,\r\n    selectedConnectionIds: connectionIds,\r\n    selectedJointIds: jointIds,\r\n  };\r\n});\r\n","import { AnyAction } from \"redux\";\r\n\r\nexport const ACTION_SELECT_CLEAR = \"@select/clear\" as const;\r\nexport const clearSelection = () => ({\r\n  type: ACTION_SELECT_CLEAR,\r\n});\r\nexport type ClearSelectionAction = ReturnType<typeof clearSelection>;\r\nexport function isClearSelectionAction(\r\n  action: AnyAction\r\n): action is ClearSelectionAction {\r\n  return action.type === ACTION_SELECT_CLEAR;\r\n}\r\n","import { isClearSelectionAction } from \"@/actions/select-clear\";\r\n\r\nimport { createSelectionReducer } from \"../utils\";\r\n\r\nexport default createSelectionReducer((state, action) => {\r\n  if (!isClearSelectionAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  return {\r\n    ...state,\r\n    selectedNodeIds: [],\r\n    selectedConnectionIds: [],\r\n    selectedJointIds: [],\r\n  };\r\n});\r\n","import { AnyAction } from \"redux\";\r\n\r\nimport { SelectionMode } from \"@/selection-mode\";\r\n\r\nexport const ACTION_SELECT_WIRE_JOINTS = \"@select/wire-joints\" as const;\r\nexport const selectWireJoints = (\r\n  jointId: string | string[],\r\n  mode: SelectionMode = \"set\"\r\n) => ({\r\n  type: ACTION_SELECT_WIRE_JOINTS,\r\n  payload: {\r\n    jointIds: Array.isArray(jointId) ? jointId : [jointId],\r\n    mode,\r\n  },\r\n});\r\nexport type SelectWireJointsAction = ReturnType<typeof selectWireJoints>;\r\nexport function isSelectWireJointsAction(\r\n  action: AnyAction\r\n): action is SelectWireJointsAction {\r\n  return action.type === ACTION_SELECT_WIRE_JOINTS;\r\n}\r\n","import { isSelectWireJointsAction } from \"@/actions/select-wire-joints\";\r\nimport { createSelectionReducer, combineSelection } from \"../utils\";\r\n\r\nexport default createSelectionReducer((state, action) => {\r\n  if (!isSelectWireJointsAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  const { jointIds, mode } = action.payload;\r\n\r\n  return {\r\n    ...state,\r\n    selectedNodeIds: mode === \"set\" ? [] : state.selectedNodeIds,\r\n    selectedConnectionIds: mode === \"set\" ? [] : state.selectedConnectionIds,\r\n    selectedJointIds: combineSelection(state.selectedJointIds, jointIds, mode),\r\n  };\r\n});\r\n","import { isSelectNodesAction } from \"@/actions/select-nodes\";\r\n\r\nimport { combineSelection, createSelectionReducer } from \"../utils\";\r\n\r\nexport default createSelectionReducer((state, action) => {\r\n  if (!isSelectNodesAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  const { nodeIds, mode } = action.payload;\r\n\r\n  return {\r\n    ...state,\r\n    selectedNodeIds: combineSelection(state.selectedNodeIds, nodeIds, mode),\r\n    selectedConnectionIds: mode === \"set\" ? [] : state.selectedConnectionIds,\r\n    selectedJointIds: mode === \"set\" ? [] : state.selectedJointIds,\r\n  };\r\n});\r\n","import { createSelector } from \"reselect\";\r\nimport getBounds from \"svg-path-bounds\";\r\n\r\nimport mapValues from \"lodash/mapValues\";\r\n\r\nimport { normalizeRectangle } from \"@/geometry\";\r\n\r\nimport { nodeTypesByNodeIdSelector } from \"@/services/node-graph/selectors/nodes\";\r\nimport { nodeDefinitionsByTypeSelector } from \"@/services/node-types/selectors/node-types\";\r\n\r\nimport { nodePositionsByNodeIdSelector } from \"./node-positions\";\r\n\r\nexport const nodeBoundsByIdSelector = createSelector(\r\n  nodeDefinitionsByTypeSelector,\r\n  nodeTypesByNodeIdSelector,\r\n  (nodeDefsByType, elementTypesByNodeId) =>\r\n    mapValues(elementTypesByNodeId, (elementType, id) => {\r\n      const def = nodeDefsByType[elementType];\r\n      if (!def) {\r\n        return [0, 0, 0, 0];\r\n      }\r\n\r\n      return getBounds(def.visual.hitPath);\r\n    })\r\n);\r\n\r\nexport const nodeRectsByIdSelector = createSelector(\r\n  nodePositionsByNodeIdSelector,\r\n  nodeBoundsByIdSelector,\r\n  (positionsById, boundsById) =>\r\n    mapValues(positionsById, (p1, id) => {\r\n      const bounds = boundsById[id] || [0, 0, 0, 0];\r\n      return normalizeRectangle(\r\n        {\r\n          x: p1.x + bounds[0],\r\n          y: p1.y + bounds[1],\r\n        },\r\n        {\r\n          x: p1.x + bounds[2],\r\n          y: p1.y + bounds[3],\r\n        }\r\n      );\r\n    })\r\n);\r\n","import forOwn from \"lodash/forOwn\";\r\nimport pick from \"lodash/pick\";\r\n\r\nimport { intersects, pointIntersects } from \"@/geometry\";\r\n\r\nimport { isSelectRegionAction } from \"@/actions/select-region\";\r\n\r\nimport { nodeIdsForEditingCircuitSelector } from \"@/services/circuit-editor-ui/selectors/nodes\";\r\nimport { nodeRectsByIdSelector } from \"@/services/node-layout/selectors/node-bounds\";\r\nimport { wireJointPositionsByJointIdSelector } from \"@/services/node-layout/selectors/wires\";\r\n\r\nimport { combineSelection, createSelectionReducer } from \"../utils\";\r\n\r\nexport default createSelectionReducer((state, action, appState) => {\r\n  if (!isSelectRegionAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  const { region, mode } = action.payload;\r\n\r\n  const nodeIds = nodeIdsForEditingCircuitSelector(appState);\r\n  const rects = pick(nodeRectsByIdSelector(appState), nodeIds);\r\n\r\n  const chosenNodeIds: string[] = [];\r\n  forOwn(rects, (rect, id) => {\r\n    if (intersects(rect, region)) {\r\n      chosenNodeIds.push(id);\r\n    }\r\n  });\r\n\r\n  const chosenJointIds: string[] = [];\r\n  const jointPositions = wireJointPositionsByJointIdSelector(appState);\r\n  forOwn(jointPositions, (p, jointId) => {\r\n    if (pointIntersects(p, region)) {\r\n      chosenJointIds.push(jointId);\r\n    }\r\n  });\r\n\r\n  return {\r\n    ...state,\r\n    selectedNodeIds: combineSelection(\r\n      state.selectedNodeIds,\r\n      chosenNodeIds,\r\n      mode\r\n    ),\r\n    selectedConnectionIds: mode === \"set\" ? [] : state.selectedConnectionIds,\r\n    selectedJointIds: combineSelection(\r\n      state.selectedJointIds,\r\n      chosenJointIds,\r\n      mode\r\n    ),\r\n  };\r\n});\r\n","import { AnyAction } from \"redux\";\r\n\r\nimport { SelectionMode } from \"@/selection-mode\";\r\n\r\nexport const ACTION_SELECT_WIRES = \"@select/wires\" as const;\r\nexport const selectWires = (\r\n  connectionId: string | string[],\r\n  mode: SelectionMode = \"set\"\r\n) => ({\r\n  type: ACTION_SELECT_WIRES,\r\n  payload: {\r\n    connectionIds: Array.isArray(connectionId) ? connectionId : [connectionId],\r\n    mode,\r\n  },\r\n});\r\nexport type SelectWiresAction = ReturnType<typeof selectWires>;\r\nexport function isSelectWiresAction(\r\n  action: AnyAction\r\n): action is SelectWiresAction {\r\n  return action.type === ACTION_SELECT_WIRES;\r\n}\r\n","import { isSelectWiresAction } from \"@/actions/select-wires\";\r\nimport { createSelectionReducer, combineSelection } from \"../utils\";\r\n\r\nexport default createSelectionReducer((state, action) => {\r\n  if (!isSelectWiresAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  const { connectionIds, mode } = action.payload;\r\n\r\n  return {\r\n    ...state,\r\n    selectedNodeIds: mode === \"set\" ? [] : state.selectedNodeIds,\r\n    selectedConnectionIds: combineSelection(\r\n      state.selectedConnectionIds,\r\n      connectionIds,\r\n      mode\r\n    ),\r\n    selectedJointIds: mode === \"set\" ? [] : state.selectedJointIds,\r\n  };\r\n});\r\n","import { AnyAction } from \"redux\";\r\n\r\nexport const ACTION_SELECTION_COPY = \"@selection/copy\" as const;\r\nexport const selectionCopy = () => ({\r\n  type: ACTION_SELECTION_COPY,\r\n});\r\nexport type SelectionCopyAction = ReturnType<typeof selectionCopy>;\r\nexport function isSelectionCopyAction(\r\n  action: AnyAction\r\n): action is SelectionCopyAction {\r\n  return action.type === ACTION_SELECTION_COPY;\r\n}\r\n","import { AnyAction } from \"redux\";\r\n\r\nexport const ACTION_SELECTION_DELETE = \"@selection/delete\" as const;\r\nexport const selectionDelete = () => ({\r\n  type: ACTION_SELECTION_DELETE,\r\n});\r\nexport type SelectionDeleteAction = ReturnType<typeof selectionDelete>;\r\nexport function isSelectionDeleteAction(\r\n  action: AnyAction\r\n): action is SelectionDeleteAction {\r\n  return action.type === ACTION_SELECTION_DELETE;\r\n}\r\n","import { concatReducers } from \"@/store/utils\";\r\n\r\nimport nodeDeleteReducer from \"./node-delete\";\r\nimport projectNewReducer from \"./project-new\";\r\nimport selectAllReducer from \"./select-all\";\r\nimport selectClearReducer from \"./select-clear\";\r\nimport selectJointsReducer from \"./select-joints\";\r\nimport selectNodesReducer from \"./select-nodes\";\r\nimport selectRegionReducer from \"./select-region\";\r\nimport selectWiresReducer from \"./select-wires\";\r\nimport selectionCopyReducer from \"./selection-copy\";\r\nimport selectionDeleteReducer from \"./selection-delete\";\r\nimport selectionMoveReducer from \"./selection-move\";\r\nimport wireDetatchReducer from \"./wire-detatch\";\r\n\r\nconst selectionReducer = concatReducers(\r\n  projectNewReducer,\r\n  nodeDeleteReducer,\r\n  selectAllReducer,\r\n  selectClearReducer,\r\n  selectJointsReducer,\r\n  selectNodesReducer,\r\n  selectRegionReducer,\r\n  selectWiresReducer,\r\n  selectionCopyReducer,\r\n  selectionDeleteReducer,\r\n  selectionMoveReducer,\r\n  wireDetatchReducer\r\n);\r\n\r\nexport default selectionReducer;\r\n","import { AnyAction } from \"redux\";\r\n\r\nimport { AppState, defaultAppState } from \"@/store\";\r\nimport rootReducer from \"@/store/reducer\";\r\n\r\nimport { isSelectionCopyAction } from \"@/actions/selection-copy\";\r\nimport { copyNodes } from \"@/actions/clipboard-copy\";\r\n\r\nimport { selectedNodeIdsSelector } from \"@/services/selection/selectors/selection\";\r\n\r\nexport default function selectionCopyReducer(\r\n  state: AppState = defaultAppState,\r\n  action: AnyAction\r\n): AppState {\r\n  if (!isSelectionCopyAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  const selectedNodes = selectedNodeIdsSelector(state);\r\n  if (selectedNodes.length === 0) {\r\n    return state;\r\n  }\r\n\r\n  return rootReducer(state, copyNodes(selectedNodes));\r\n}\r\n","import { AnyAction } from \"redux\";\r\n\r\nimport { AppState, defaultAppState } from \"@/store\";\r\nimport rootReducer from \"@/store/reducer\";\r\n\r\nimport { isSelectionDeleteAction } from \"@/actions/selection-delete\";\r\nimport { deleteNode } from \"@/actions/node-delete\";\r\nimport { detatchWire } from \"@/actions/wire-detatch\";\r\nimport { deleteWireJoint } from \"@/actions/wire-joint-delete\";\r\n\r\nexport default function selectionDeleteReducer(\r\n  state: AppState = defaultAppState,\r\n  action: AnyAction\r\n): AppState {\r\n  if (!isSelectionDeleteAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  const {\r\n    selectedNodeIds,\r\n    selectedConnectionIds,\r\n    selectedJointIds,\r\n  } = state.services.selection;\r\n\r\n  if (selectedNodeIds.length > 0) {\r\n    state = rootReducer(state, deleteNode(selectedNodeIds));\r\n  }\r\n  state = selectedConnectionIds.reduce(\r\n    (state, connectionId) => rootReducer(state, detatchWire(connectionId)),\r\n    state\r\n  );\r\n  state = selectedJointIds.reduce(\r\n    (state, jointId) => rootReducer(state, deleteWireJoint(jointId)),\r\n    state\r\n  );\r\n\r\n  return state;\r\n}\r\n","import { AnyAction } from \"redux\";\r\n\r\nimport { Point } from \"@/geometry\";\r\nimport { AppState, defaultAppState } from \"@/store\";\r\nimport rootReducer from \"@/store/reducer\";\r\n\r\nimport { isMoveSelectionAction } from \"@/actions/selection-move\";\r\nimport { moveNode } from \"@/actions/node-move\";\r\nimport { moveWireJoint } from \"@/actions/wire-joint-move\";\r\n\r\nimport {\r\n  selectedNodeIdsSelector,\r\n  selectedJointIdsSelector,\r\n} from \"@/services/selection/selectors/selection\";\r\n\r\nexport default function selectionMoveReducer(\r\n  state: AppState = defaultAppState,\r\n  action: AnyAction\r\n) {\r\n  if (!isMoveSelectionAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  const { offsetX, offsetY } = action.payload;\r\n\r\n  const nodeIds = selectedNodeIdsSelector(state);\r\n  const jointIds = selectedJointIdsSelector(state);\r\n\r\n  const offset: Point = {\r\n    x: offsetX,\r\n    y: offsetY,\r\n  };\r\n\r\n  state = rootReducer(state, moveNode(nodeIds, offset, true));\r\n  state = rootReducer(state, moveWireJoint(jointIds, offset, true));\r\n\r\n  return state;\r\n}\r\n","import { isDetatchWireAction } from \"@/actions/wire-detatch\";\r\n\r\nimport { createSelectionReducer } from \"../utils\";\r\n\r\nexport default createSelectionReducer((state, action) => {\r\n  if (!isDetatchWireAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  const { connectionId } = action.payload;\r\n\r\n  return {\r\n    ...state,\r\n    selectedConnectionIds: state.selectedConnectionIds.filter(\r\n      (x) => x !== connectionId\r\n    ),\r\n  };\r\n});\r\n","import {\r\n  createServiceReducerCreator,\r\n  createServiceSelectorCreator,\r\n} from \"../service-state-utils\";\r\n\r\nexport const createSimulatorReducer = createServiceReducerCreator(\"simulator\");\r\nexport const createSimulatorSelector = createServiceSelectorCreator(\r\n  \"simulator\"\r\n);\r\n","import { ACTION_NODE_ADD } from \"@/actions/node-add\";\r\nimport { ACTION_PROJECT_NEW } from \"@/actions/project-new\";\r\nimport { ACTION_NODE_DELETE } from \"@/actions/node-delete\";\r\nimport { ACTION_PROJECT_RECEIVE } from \"@/actions/project-receive\";\r\nimport { ACTION_WIRE_ATTACH } from \"@/actions/wire-attach\";\r\nimport { ACTION_WIRE_DETATCH } from \"@/actions/wire-detatch\";\r\n\r\nimport { defaultSimulatorState } from \"../state\";\r\nimport { createSimulatorReducer } from \"../utils\";\r\n\r\nconst SIM_INVALIDATE_ACTIONS = [\r\n  ACTION_PROJECT_NEW,\r\n  ACTION_PROJECT_RECEIVE,\r\n  ACTION_NODE_ADD,\r\n  ACTION_NODE_DELETE,\r\n  ACTION_WIRE_ATTACH,\r\n  ACTION_WIRE_DETATCH,\r\n];\r\n\r\nexport default createSimulatorReducer((state, action) => {\r\n  if (SIM_INVALIDATE_ACTIONS.indexOf(action.type) !== -1) {\r\n    // Reset the simulator but keep the ticks per second choice.\r\n    return {\r\n      ...defaultSimulatorState,\r\n      ticksPerSecond: state.ticksPerSecond,\r\n    };\r\n  }\r\n\r\n  return state;\r\n});\r\n","import { ElementDefinition } from \"../types\";\r\n\r\nexport * from \"./element-led\";\r\nexport * from \"./element-toggle\";\r\n\r\nexport const ElementDefinitionsByType = {\r\n  and: require(\"./element-and\").default as ElementDefinition,\r\n  or: require(\"./element-or\").default as ElementDefinition,\r\n  nor: require(\"./element-nor\").default as ElementDefinition,\r\n  not: require(\"./element-not\").default as ElementDefinition,\r\n  buffer: require(\"./element-buffer\").default as ElementDefinition,\r\n  led: require(\"./element-led\").default as ElementDefinition,\r\n  toggle: require(\"./element-toggle\").default as ElementDefinition,\r\n  seg7: require(\"./element-seg7\").default as ElementDefinition,\r\n  xor: require(\"./element-xor\").default as ElementDefinition,\r\n};\r\nexport type ElementType = keyof typeof ElementDefinitionsByType;\r\n","import { AnyAction } from \"redux\";\r\n\r\nexport const ACTION_NODE_INTERACT = \"@node/interact\" as const;\r\nexport const interactNode = (nodeId: string) => ({\r\n  type: ACTION_NODE_INTERACT,\r\n  payload: { nodeId },\r\n});\r\nexport type InteractNodeAction = ReturnType<typeof interactNode>;\r\nexport function isInteractNodeAction(\r\n  action: AnyAction\r\n): action is InteractNodeAction {\r\n  return action.type === ACTION_NODE_INTERACT;\r\n}\r\n","import {\r\n  createServiceReducerCreator,\r\n  createServiceSelectorCreator,\r\n} from \"../service-state-utils\";\r\n\r\nexport const createSimulatorGraphReducer = createServiceReducerCreator(\r\n  \"simulatorGraph\"\r\n);\r\nexport const createSimulatorGraphSelector = createServiceSelectorCreator(\r\n  \"simulatorGraph\"\r\n);\r\n","import { createSimulatorGraphSelector } from \"../utils\";\r\nimport { SimulatorGraphState } from \"../state\";\r\n\r\nexport const simulatorNodeIdFromCircuitNodeIdSelector = createSimulatorGraphSelector(\r\n  (state: SimulatorGraphState, circuitNodeId: string) => {\r\n    return state.simulatorNodeIdsByCircuitNodeId[circuitNodeId];\r\n  }\r\n);\r\n\r\n/**\r\n * Get all simulator node ids.\r\n *\r\n * WARN: Not react safe.\r\n */\r\nexport const simulatorNodeIdsSelector = createSimulatorGraphSelector((state) =>\r\n  Object.keys(state.simulatorNodesById)\r\n);\r\n\r\nexport const elementTypeFromSimulatorNodeId = createSimulatorGraphSelector(\r\n  (state: SimulatorGraphState, simulatorNodeId: string) => {\r\n    const simulatorNode = state.simulatorNodesById[simulatorNodeId];\r\n    if (!simulatorNode) {\r\n      return null;\r\n    }\r\n\r\n    return simulatorNode.elementType;\r\n  }\r\n);\r\n","import values from \"lodash/values\";\r\nimport flatMap from \"lodash/flatMap\";\r\n\r\nimport { createSimulatorGraphSelector } from \"../utils\";\r\nimport { SimulatorGraphState } from \"../state\";\r\n\r\n/**\r\n * Gets an array of simulator node ids connected to the outputs of the given node id.\r\n * WARN: Not react safe.  For reducer use only.\r\n */\r\nexport const outputSimulatorNodeIdsFromSimulatorNodeIdSelector = createSimulatorGraphSelector(\r\n  (state: SimulatorGraphState, simulatorNodeId: string) => {\r\n    const simulatorNode = state.simulatorNodesById[simulatorNodeId];\r\n    if (!simulatorNode) {\r\n      return [];\r\n    }\r\n\r\n    return flatMap(values(simulatorNode.outputsByPin), (pins) =>\r\n      pins.map((x) => x.simulatorNodeId)\r\n    );\r\n  }\r\n);\r\n\r\n/**\r\n * Gets a map of node input pins to their output sources given a node id.\r\n */\r\nexport const inputPinsByPinIdFromSimulatorNodeIdSelector = createSimulatorGraphSelector(\r\n  (state: SimulatorGraphState, simulatorNodeId: string) => {\r\n    const simulatorNode = state.simulatorNodesById[simulatorNodeId];\r\n    if (!simulatorNode) {\r\n      return {};\r\n    }\r\n\r\n    return simulatorNode.inputsByPin;\r\n  }\r\n);\r\n","import binarySearch from \"binary-search\";\r\nimport { v4 as uuidV4 } from \"uuid\";\r\nimport findIndex from \"lodash/findIndex\";\r\nimport pick from \"lodash/pick\";\r\nimport mapValues from \"lodash/mapValues\";\r\n\r\nimport { fpSet } from \"@/utils\";\r\nimport { asArray } from \"@/arrays\";\r\nimport { AppState } from \"@/store\";\r\n\r\nimport { inputPinsByPinIdFromSimulatorNodeIdSelector } from \"@/services/simulator-graph/selectors/connections\";\r\nimport {\r\n  simulatorNodeIdsSelector,\r\n  elementTypeFromSimulatorNodeId,\r\n} from \"@/services/simulator-graph/selectors/nodes\";\r\n\r\nimport { SimulatorState, defaultSimulatorState } from \"../state\";\r\nimport {\r\n  SimTransitionWindow,\r\n  SimNodePinTransition as SimNodeTransition,\r\n} from \"../types\";\r\nimport { ElementDefinitionsByType } from \"@/elements\";\r\n\r\nexport function simInit(\r\n  state: SimulatorState,\r\n  appState: AppState\r\n): SimulatorState {\r\n  // Switching away from edit mode, initialize the simulator.\r\n  const nodeIds = simulatorNodeIdsSelector(appState);\r\n\r\n  state = {\r\n    ...defaultSimulatorState,\r\n    ticksPerSecond: state.ticksPerSecond,\r\n  };\r\n\r\n  state = nodeIds.reduce(\r\n    (state, nodeId) => initNode(state, nodeId, appState),\r\n    state\r\n  );\r\n\r\n  state = nodeIds.reduce(\r\n    (state, nodeId) => collectNodeTransitions(state, nodeId, appState),\r\n    state\r\n  );\r\n\r\n  return state;\r\n}\r\n\r\nfunction initNode(\r\n  state: SimulatorState,\r\n  nodeId: string,\r\n  appState: AppState\r\n): SimulatorState {\r\n  const elementType = elementTypeFromSimulatorNodeId(appState, nodeId);\r\n  if (!elementType) {\r\n    return state;\r\n  }\r\n\r\n  const def = ElementDefinitionsByType[elementType];\r\n  if (!def) {\r\n    return state;\r\n  }\r\n\r\n  const outputValues: Record<string, boolean> = {};\r\n  for (const output of def.outputPins) {\r\n    outputValues[output] = false;\r\n  }\r\n\r\n  return fpSet(state, \"nodeOutputValuesByNodeId\", nodeId, outputValues);\r\n}\r\n\r\nexport function collectNodeTransitions(\r\n  state: SimulatorState,\r\n  nodeId: string,\r\n  appState: AppState\r\n): SimulatorState {\r\n  const elementType = elementTypeFromSimulatorNodeId(appState, nodeId);\r\n  if (!elementType) {\r\n    return state;\r\n  }\r\n\r\n  const def = ElementDefinitionsByType[elementType];\r\n  if (!def || !def.evolve) {\r\n    return state;\r\n  }\r\n\r\n  // Build the current input state from the connected pins.\r\n  const inputs: Record<string, boolean> = {};\r\n  const inputSourcesByPin = inputPinsByPinIdFromSimulatorNodeIdSelector(\r\n    appState,\r\n    nodeId\r\n  );\r\n\r\n  for (const inputPin of Object.keys(inputSourcesByPin)) {\r\n    const inputConn = inputSourcesByPin[inputPin];\r\n    if (!inputConn) {\r\n      inputs[inputPin] = false;\r\n      continue;\r\n    }\r\n    const { simulatorNodeId: sourceNodeId, pinId: sourcePinId } = inputConn;\r\n\r\n    inputs[inputPin] =\r\n      state.nodeOutputValuesByNodeId[sourceNodeId]?.[sourcePinId] || false;\r\n  }\r\n\r\n  const result = def.evolve(\r\n    state.nodeStatesByNodeId[nodeId],\r\n    inputs,\r\n    state.tick\r\n  );\r\n\r\n  if (result.state) {\r\n    state = fpSet(state, \"nodeStatesByNodeId\", nodeId, result.state);\r\n  }\r\n\r\n  if (result.transitions) {\r\n    const transitions = asArray(result.transitions);\r\n    for (const transition of transitions) {\r\n      const {\r\n        tickOffset,\r\n        valuesByPin,\r\n        transitionMerger = \"replace\",\r\n      } = transition;\r\n\r\n      // Sanity check that we are not producing transitions for the past or current tick.\r\n      const transitionTick = state.tick + (tickOffset > 0 ? tickOffset : 1);\r\n\r\n      // We originally removed old transitions when scheduling new transitions.\r\n      //  Experimenting without this.\r\n      if (transitionMerger === \"replace\") {\r\n        state = removeTransitionsByNodeId(state, nodeId);\r\n      }\r\n\r\n      state = addTransition(state, nodeId, transitionTick, valuesByPin);\r\n    }\r\n  }\r\n\r\n  return state;\r\n}\r\n\r\nfunction addTransition(\r\n  state: Readonly<SimulatorState>,\r\n  nodeId: string,\r\n  tick: number,\r\n  valuesByOutputPin: Record<string, boolean>\r\n): SimulatorState {\r\n  const transitionId = uuidV4();\r\n\r\n  const newTransition: SimNodeTransition = {\r\n    transitionId: transitionId,\r\n    nodeId,\r\n    tick,\r\n    valuesByOutputPin,\r\n  };\r\n\r\n  // Add the transition to the state, and clone transitionWindows for mutation below.\r\n  state = {\r\n    ...state,\r\n    transitionsById: {\r\n      ...state.transitionsById,\r\n      [transitionId]: newTransition,\r\n    },\r\n    transitionWindows: [...state.transitionWindows],\r\n  };\r\n\r\n  let index = binarySearch(state.transitionWindows, tick, (a, b) => a.tick - b);\r\n  if (index < 0) {\r\n    // Need to create a new window\r\n    index = -index - 1;\r\n    const newWindow: SimTransitionWindow = {\r\n      tick,\r\n      transitionIds: [],\r\n    };\r\n    // Mutation is safe here as we cloned the array above.\r\n    state.transitionWindows.splice(index, 0, newWindow);\r\n  }\r\n\r\n  // Mutation is safe here as we cloned the array above.\r\n  state.transitionWindows[index] = {\r\n    ...state.transitionWindows[index],\r\n    transitionIds: [\r\n      ...state.transitionWindows[index].transitionIds,\r\n      transitionId,\r\n    ],\r\n  };\r\n  return state;\r\n}\r\n\r\nfunction removeTransitionsByNodeId(\r\n  state: Readonly<SimulatorState>,\r\n  nodeId: string\r\n): SimulatorState {\r\n  function isNodeTransition(transition: SimNodeTransition) {\r\n    return transition.nodeId === nodeId;\r\n  }\r\n\r\n  const transitionIds = Object.keys(state.transitionsById).filter((id) =>\r\n    isNodeTransition(state.transitionsById[id])\r\n  );\r\n\r\n  return transitionIds.reduce(\r\n    (state, transitionId) => removeTransitionById(state, transitionId),\r\n    state\r\n  );\r\n}\r\n\r\nexport function removeTransitionById(\r\n  state: Readonly<SimulatorState>,\r\n  transitionId: string\r\n): SimulatorState {\r\n  const transition = state.transitionsById[transitionId];\r\n  if (!transition) {\r\n    return state;\r\n  }\r\n\r\n  const transitionsById = pick(\r\n    state.transitionsById,\r\n    Object.keys(state.transitionsById).filter((x) => x !== transitionId)\r\n  );\r\n  let transitionWindows = state.transitionWindows;\r\n\r\n  const transitionWindowIndex = findIndex(\r\n    transitionWindows,\r\n    (x) => x.tick === transition.tick\r\n  );\r\n  if (transitionWindowIndex !== -1) {\r\n    const transitionWindow = transitionWindows[transitionWindowIndex];\r\n\r\n    const tickWindowTransitionIndex = transitionWindow.transitionIds.indexOf(\r\n      transitionId\r\n    );\r\n    if (tickWindowTransitionIndex !== -1) {\r\n      if (transitionWindow.transitionIds.length === 1) {\r\n        // Only one element left, remove the window.\r\n        transitionWindows = [\r\n          ...transitionWindows.slice(0, transitionWindowIndex),\r\n          ...transitionWindows.slice(transitionWindowIndex + 1),\r\n        ];\r\n      } else {\r\n        // Remove the transition from the tick window.\r\n        transitionWindows = [...transitionWindows];\r\n        const transitionIds =\r\n          transitionWindows[transitionWindowIndex].transitionIds;\r\n        transitionWindows[transitionWindowIndex] = {\r\n          ...transitionWindows[transitionWindowIndex],\r\n          transitionIds: [\r\n            ...transitionIds.slice(0, tickWindowTransitionIndex),\r\n            ...transitionIds.slice(tickWindowTransitionIndex + 1),\r\n          ],\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    ...state,\r\n    transitionsById,\r\n    transitionWindows,\r\n  };\r\n}\r\n","import { fpSet } from \"@/utils\";\r\n\r\nimport { ElementDefinitionsByType } from \"@/elements\";\r\n\r\nimport { isInteractNodeAction } from \"@/actions/node-interact\";\r\nimport {\r\n  simulatorNodeIdFromCircuitNodeIdSelector,\r\n  elementTypeFromSimulatorNodeId,\r\n} from \"@/services/simulator-graph/selectors/nodes\";\r\n\r\nimport { createSimulatorReducer } from \"../utils\";\r\n\r\nimport { collectNodeTransitions } from \"./utils\";\r\n\r\nexport default createSimulatorReducer((state, action, appState) => {\r\n  if (!isInteractNodeAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  const { nodeId: circuitNodeId } = action.payload;\r\n  const simulatorNodeId = simulatorNodeIdFromCircuitNodeIdSelector(\r\n    appState,\r\n    circuitNodeId\r\n  );\r\n\r\n  const elementType = elementTypeFromSimulatorNodeId(appState, simulatorNodeId);\r\n  if (!elementType) {\r\n    return state;\r\n  }\r\n\r\n  const def = ElementDefinitionsByType[elementType];\r\n  if (!def || !def.interact) {\r\n    return state;\r\n  }\r\n\r\n  const nodeState = state.nodeStatesByNodeId[simulatorNodeId];\r\n  const newState = def.interact(nodeState);\r\n  state = fpSet(state, \"nodeStatesByNodeId\", simulatorNodeId, newState);\r\n\r\n  return collectNodeTransitions(state, simulatorNodeId, appState);\r\n});\r\n","import { AnyAction } from \"redux\";\r\n\r\nexport const ACTION_SIM_FASTFORWARD = \"@sim/fastforward\" as const;\r\nexport const fastForwardSim = () => ({\r\n  type: ACTION_SIM_FASTFORWARD,\r\n});\r\nexport type FastForwardSimAction = ReturnType<typeof fastForwardSim>;\r\nexport function isFastForwardSimAction(\r\n  action: AnyAction\r\n): action is FastForwardSimAction {\r\n  return action.type === ACTION_SIM_FASTFORWARD;\r\n}\r\n","import pick from \"lodash/pick\";\r\nimport difference from \"lodash/difference\";\r\n\r\nimport { AppState } from \"@/store\";\r\nimport { isTickSimAction } from \"@/actions/sim-tick\";\r\nimport { outputSimulatorNodeIdsFromSimulatorNodeIdSelector } from \"@/services/simulator-graph/selectors/connections\";\r\n\r\nimport { SimulatorState } from \"../state\";\r\nimport { SimTransitionWindow } from \"../types\";\r\nimport { createSimulatorReducer } from \"../utils\";\r\n\r\nimport { collectNodeTransitions } from \"./utils\";\r\n\r\nexport default createSimulatorReducer((state, action, appState) => {\r\n  if (!isTickSimAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  const start = performance.now();\r\n\r\n  const { tickCount } = action.payload;\r\n\r\n  const endTick = state.tick + tickCount;\r\n\r\n  // We cannot grab the windows ahead of time, as some windows might generate more windows\r\n  //  for future ticks.\r\n\r\n  // Pre-clone windows as we wil be repeatedly modifying it.\r\n  state = {\r\n    ...state,\r\n    transitionWindows: [...state.transitionWindows],\r\n  };\r\n\r\n  let saftyCount = tickCount + 1;\r\n  while (\r\n    state.transitionWindows.length > 0 &&\r\n    state.transitionWindows[0].tick <= endTick\r\n  ) {\r\n    if (--saftyCount === 0) {\r\n      // If we have seen more windows than ticks, something is creating windows for past ticks.\r\n      throw new Error(\r\n        `Maximum ticks per sim evolution exceeded.  This is an indication that windows are being generated for past ticks.`\r\n      );\r\n    }\r\n\r\n    // We can safely mutate here, as even if the array is regenerated\r\n    //  from a tick it will still be a fresh copy that has not yet been\r\n    //  consumed by redux.\r\n    const window = state.transitionWindows.shift()!;\r\n    state = tickWindow(state, window, appState);\r\n  }\r\n\r\n  // If we did not encounter a window on our last tick, jump ahead to that tick.\r\n  if (state.tick != endTick) {\r\n    state = {\r\n      ...state,\r\n      tick: endTick,\r\n    };\r\n  }\r\n\r\n  const end = performance.now();\r\n\r\n  const updateTime = end - start;\r\n  state = {\r\n    ...state,\r\n    profilerLogicUpdateMsecs: updateTime,\r\n  };\r\n\r\n  return state;\r\n});\r\n\r\nfunction tickWindow(\r\n  state: SimulatorState,\r\n  window: SimTransitionWindow,\r\n  appState: AppState\r\n): SimulatorState {\r\n  // Update the current tick, as it is referenced\r\n  //  during transition collection.\r\n  state = {\r\n    ...state,\r\n    tick: window.tick,\r\n    // pre-clone outputs for mutation below\r\n    nodeOutputValuesByNodeId: {\r\n      ...state.nodeOutputValuesByNodeId,\r\n    },\r\n  };\r\n\r\n  // Could benefit from being changed to a Set, although nodes usually arent hooked up to too many\r\n  //  outputs at a time.\r\n  let updatedNodes = [];\r\n  for (const tid of window.transitionIds) {\r\n    const { nodeId, valuesByOutputPin } = state.transitionsById[tid];\r\n\r\n    // nodeOutputValuesByNodeId is pre-cloned\r\n    state.nodeOutputValuesByNodeId[nodeId] = {\r\n      ...state.nodeOutputValuesByNodeId[nodeId],\r\n      ...valuesByOutputPin,\r\n    };\r\n\r\n    // Add each node we output to, to the output list.\r\n    const outputNodeIds = outputSimulatorNodeIdsFromSimulatorNodeIdSelector(\r\n      appState,\r\n      nodeId\r\n    );\r\n    for (const nodeId of outputNodeIds) {\r\n      if (updatedNodes.indexOf(nodeId) === -1) {\r\n        updatedNodes.push(nodeId);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Remove all window transitions as they have been consumed.\r\n  // State is cloned above\r\n  state.transitionsById = pick(\r\n    state.transitionsById,\r\n    difference(Object.keys(state.transitionsById), window.transitionIds)\r\n  );\r\n\r\n  for (const nodeId of updatedNodes) {\r\n    state = collectNodeTransitions(state, nodeId, appState);\r\n  }\r\n\r\n  return state;\r\n}\r\n","import { AnyAction } from \"redux\";\r\n\r\nexport const ACTION_SIM_PAUSE = \"@sim/pause\" as const;\r\nexport const pauseSim = (mode: boolean | \"toggle\") => ({\r\n  type: ACTION_SIM_PAUSE,\r\n  payload: { mode },\r\n});\r\nexport type PauseSimAction = ReturnType<typeof pauseSim>;\r\nexport function isPauseSimAction(action: AnyAction): action is PauseSimAction {\r\n  return action.type === ACTION_SIM_PAUSE;\r\n}\r\n","import { createSimulatorSelector } from \"../utils\";\r\n\r\nexport const isSimActiveSelector = createSimulatorSelector(\r\n  (state) => state.mode !== \"edit\"\r\n);\r\n\r\nexport const isSimRunningSelector = createSimulatorSelector(\r\n  (state) => state.mode === \"run\"\r\n);\r\n\r\nexport const isSimPausedSelector = createSimulatorSelector(\r\n  (state) => state.mode === \"pause\"\r\n);\r\n\r\nexport const ticksPerSecondSelector = createSimulatorSelector(\r\n  (state) => state.ticksPerSecond\r\n);\r\n","import { isPauseSimAction } from \"@/actions/sim-pause\";\r\n\r\nimport { createSimulatorReducer } from \"../utils\";\r\nimport { isSimActiveSelector } from \"../selectors/run\";\r\n\r\nexport default createSimulatorReducer((state, action) => {\r\n  if (!isPauseSimAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  const { mode } = action.payload;\r\n\r\n  if (!isSimActiveSelector.local(state)) {\r\n    return state;\r\n  }\r\n\r\n  let runMode = state.mode;\r\n\r\n  switch (mode) {\r\n    case true:\r\n      runMode = \"pause\";\r\n      break;\r\n    case false:\r\n      runMode = \"run\";\r\n      break;\r\n    case \"toggle\":\r\n      runMode = runMode == \"run\" ? \"pause\" : \"run\";\r\n  }\r\n\r\n  return {\r\n    ...state,\r\n    mode: runMode,\r\n  };\r\n});\r\n","import { AnyAction } from \"redux\";\r\n\r\nexport const ACTION_SIM_START = \"@sim/start\" as const;\r\nexport const startSim = () => ({\r\n  type: ACTION_SIM_START,\r\n});\r\nexport type StartSimAction = ReturnType<typeof startSim>;\r\nexport function isStartSimAction(action: AnyAction): action is StartSimAction {\r\n  return action.type === ACTION_SIM_START;\r\n}\r\n","import { isStartSimAction } from \"@/actions/sim-start\";\r\n\r\nimport { createSimulatorReducer } from \"../utils\";\r\n\r\nimport { simInit } from \"./utils\";\r\n\r\nexport default createSimulatorReducer((state, action, appState) => {\r\n  if (!isStartSimAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  state = simInit(state, appState);\r\n\r\n  return {\r\n    ...state,\r\n    mode: \"run\",\r\n  };\r\n});\r\n","import { AnyAction } from \"redux\";\r\n\r\nexport const ACTION_SIM_STOP = \"@sim/stop\" as const;\r\nexport const stopSim = () => ({\r\n  type: ACTION_SIM_STOP,\r\n});\r\nexport type StartSimAction = ReturnType<typeof stopSim>;\r\nexport function isStopSimAction(action: AnyAction): action is StartSimAction {\r\n  return action.type === ACTION_SIM_STOP;\r\n}\r\n","import { isStopSimAction } from \"@/actions/sim-stop\";\r\n\r\nimport { createSimulatorReducer } from \"../utils\";\r\n\r\nimport { defaultSimulatorState } from \"../state\";\r\n\r\nexport default createSimulatorReducer((state, action, appState) => {\r\n  if (!isStopSimAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  // Reset the simulator but keep the ticks per second choice.\r\n  return {\r\n    ...defaultSimulatorState,\r\n    ticksPerSecond: state.ticksPerSecond,\r\n  };\r\n});\r\n","import { concatReducers } from \"@/store/utils\";\r\n\r\nimport elementGraphInvalidatedReducer from \"./element-graph-invalidated\";\r\nimport nodeInteractReducer from \"./node-interact\";\r\nimport simFastforwardReducer from \"./sim-fastforward\";\r\nimport simPauseReducer from \"./sim-pause\";\r\nimport simStartReducer from \"./sim-start\";\r\nimport simStopReducer from \"./sim-stop\";\r\nimport simTickReducer from \"./sim-tick\";\r\n\r\nconst simulatorReducer = concatReducers(\r\n  elementGraphInvalidatedReducer,\r\n  nodeInteractReducer,\r\n  simFastforwardReducer,\r\n  simPauseReducer,\r\n  simStartReducer,\r\n  simStopReducer,\r\n  simTickReducer\r\n);\r\n\r\nexport default simulatorReducer;\r\n","import { AnyAction } from \"redux\";\r\n\r\nimport { AppState, defaultAppState } from \"@/store\";\r\n\r\nimport { isFastForwardSimAction } from \"@/actions/sim-fastforward\";\r\nimport { tickSim } from \"@/actions/sim-tick\";\r\n\r\nimport evolveSimReducer from \"./sim-tick\";\r\n\r\nexport default function simFastForwardReducer(\r\n  state: AppState = defaultAppState,\r\n  action: AnyAction\r\n) {\r\n  if (!isFastForwardSimAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  const { tick, transitionWindows } = state.services.simulator;\r\n\r\n  if (transitionWindows.length === 0) {\r\n    return state;\r\n  }\r\n\r\n  const nextWindowTick = transitionWindows[0].tick - tick;\r\n  return evolveSimReducer(state, tickSim(nextWindowTick));\r\n}\r\n","import { v4 as uuidV4 } from \"uuid\";\r\nimport merge from \"lodash/merge\";\r\nimport get from \"lodash/get\";\r\n\r\nimport { AppState } from \"@/store\";\r\nimport { PRIORITY_PRE, reducerPriority } from \"@/store/priorities\";\r\n\r\nimport { isStartSimAction } from \"@/actions/sim-start\";\r\n\r\nimport { nodeIdsFromCircuitIdSelector } from \"@/services/circuits/selectors/nodes\";\r\nimport { nodeTypeFromNodeIdSelector } from \"@/services/node-graph/selectors/nodes\";\r\nimport { connectionsByIdSelector } from \"@/services/node-graph/selectors/connections\";\r\nimport {\r\n  CircuitNodeElementProduction,\r\n  ElementNodeElementProduction,\r\n  NodeElementProduction,\r\n  NodeElementProductionObject,\r\n} from \"@/services/node-types/types/element-production\";\r\nimport { nodeDefinitionFromTypeSelector } from \"@/services/node-types/selectors/node-types\";\r\nimport { nodeDefFromNodeIdSelector } from \"@/services/node-graph/selectors/node-def\";\r\n\r\nimport { createSimulatorGraphReducer } from \"../utils\";\r\nimport { SimulatorGraphState } from \"../state\";\r\nimport { SimulatorNode, SimulatorNodePin } from \"../types\";\r\n\r\n// This must run before simulator/reducer/sim-start, as we need to build up the graph before it can\r\n// run the first tick.\r\n// TODO: This makes more sense as a selector, since it transforms existing state.\r\nexport default reducerPriority(\r\n  PRIORITY_PRE,\r\n  createSimulatorGraphReducer((state, action, rootState) => {\r\n    if (!isStartSimAction(action)) {\r\n      return state;\r\n    }\r\n\r\n    const {\r\n      simulatorNodesById,\r\n      simulatorNodeIdsByCircuitNodeId,\r\n    } = produceCircuit(\"root\", rootState);\r\n\r\n    return {\r\n      ...state,\r\n      simulatorNodesById,\r\n      simulatorNodeIdsByCircuitNodeId,\r\n    };\r\n  })\r\n);\r\n\r\ntype CircuitProductionResult = Pick<\r\n  SimulatorGraphState,\r\n  \"simulatorNodeIdsByCircuitNodeId\" | \"simulatorNodesById\"\r\n> & {\r\n  inputElementPinsByCircuitPinId: Record<string, SimulatorNodePin[]>;\r\n  outputElementPinsByCircuitPinId: Record<string, SimulatorNodePin>;\r\n};\r\n\r\nconst EMPTY_PRODUCTION = Object.freeze<CircuitProductionResult>({\r\n  simulatorNodesById: {},\r\n  simulatorNodeIdsByCircuitNodeId: {},\r\n  inputElementPinsByCircuitPinId: {},\r\n  outputElementPinsByCircuitPinId: {},\r\n});\r\n\r\nfunction produceCircuit(\r\n  circuitId: string,\r\n  rootState: AppState,\r\n  topLevel = true\r\n): CircuitProductionResult {\r\n  const simulatorNodesById: Record<string, SimulatorNode> = {};\r\n  const simulatorNodeIdsByCircuitNodeId: Record<string, string> = {};\r\n  const inputElementPinsByCircuitPinId: Record<string, SimulatorNodePin[]> = {};\r\n  const outputElementPinsByCircuitPinId: Record<string, SimulatorNodePin> = {};\r\n\r\n  const inputCircuitNodeIds: string[] = [];\r\n  const outputCircuitNodeIds: string[] = [];\r\n\r\n  // 1. Create new elements\r\n  // 2. Wire elements amongs themselves.\r\n  // 3. Pass input and output mapping to parent.\r\n\r\n  const circuitNodeInputPinsByPinIdByNodeId: Record<\r\n    string,\r\n    Record<string, SimulatorNodePin[]>\r\n  > = {};\r\n  const circuitNodeOutputPinsByPinIdByNodeId: Record<\r\n    string,\r\n    Record<string, SimulatorNodePin>\r\n  > = {};\r\n\r\n  const circuitNodeIds = nodeIdsFromCircuitIdSelector(rootState, circuitId);\r\n  for (const circuitNodeId of circuitNodeIds) {\r\n    const nodeType = nodeTypeFromNodeIdSelector(rootState, circuitNodeId);\r\n    if (!nodeType) {\r\n      continue;\r\n    }\r\n\r\n    // If this node is a pin, remember it to calculate circuit inputs and outputs.\r\n    if (nodeType === \"pin-input\") {\r\n      inputCircuitNodeIds.push(circuitNodeId);\r\n      inputElementPinsByCircuitPinId[circuitNodeId] = [];\r\n      continue;\r\n    } else if (nodeType === \"pin-output\") {\r\n      outputCircuitNodeIds.push(circuitNodeId);\r\n      continue;\r\n    }\r\n\r\n    const productionResult = produceNode(circuitNodeId, rootState);\r\n\r\n    // Merge the produced simulator nodes.\r\n    merge(simulatorNodesById, productionResult.simulatorNodesById);\r\n\r\n    // Merge the mapping from circuit node to simulator node.\r\n    // FIXME: We need to figure out how to map IC nodes.\r\n    if (topLevel) {\r\n      merge(\r\n        simulatorNodeIdsByCircuitNodeId,\r\n        productionResult.simulatorNodeIdsByCircuitNodeId\r\n      );\r\n    }\r\n\r\n    // Remember what these circuit node pins translate to.\r\n    circuitNodeInputPinsByPinIdByNodeId[circuitNodeId] =\r\n      productionResult.inputElementPinsByCircuitPinId;\r\n    circuitNodeOutputPinsByPinIdByNodeId[circuitNodeId] =\r\n      productionResult.outputElementPinsByCircuitPinId;\r\n  }\r\n\r\n  const circuitConnectionsById = connectionsByIdSelector(rootState);\r\n  for (const connectionId of Object.keys(circuitConnectionsById)) {\r\n    const { inputPin, outputPin } = circuitConnectionsById[connectionId];\r\n    // We are only interested in connections within this circuit.\r\n    // There should not be any cross-circuit connections.\r\n    // It might be ok to skip this step, and rely on not finding the node mapping.\r\n\r\n    if (\r\n      circuitNodeIds.indexOf(inputPin.nodeId) === -1 ||\r\n      circuitNodeIds.indexOf(outputPin.nodeId) === -1\r\n    ) {\r\n      continue;\r\n    }\r\n\r\n    // We need to find the one output, and connect it to all inputs that match.\r\n    // There might be more than one input if the input was on an IC / circuit production.\r\n    const outputSimPin = get(circuitNodeOutputPinsByPinIdByNodeId, [\r\n      outputPin.nodeId,\r\n      outputPin.pinId,\r\n    ]);\r\n    const inputSimPins = get(circuitNodeInputPinsByPinIdByNodeId, [\r\n      inputPin.nodeId,\r\n      inputPin.pinId,\r\n    ]);\r\n\r\n    // If the output is one of our input nodes, then the inputs\r\n    //  need to be saved for our circuit inputs\r\n    if (inputCircuitNodeIds.indexOf(outputPin.nodeId) !== -1 && inputSimPins) {\r\n      // pin id is the pin-input nodeId\r\n      inputElementPinsByCircuitPinId[outputPin.nodeId].push(...inputSimPins);\r\n      continue;\r\n    } else if (\r\n      outputCircuitNodeIds.indexOf(inputPin.nodeId) !== -1 &&\r\n      outputSimPin\r\n    ) {\r\n      outputElementPinsByCircuitPinId[inputPin.nodeId] = outputSimPin;\r\n      continue;\r\n    }\r\n\r\n    if (!outputSimPin || !inputSimPins) {\r\n      continue;\r\n    }\r\n\r\n    const outputSimNode = simulatorNodesById[outputSimPin.simulatorNodeId];\r\n    let outputsByOutputPin = outputSimNode.outputsByPin[outputSimPin.pinId];\r\n    if (outputsByOutputPin == null) {\r\n      outputSimNode.outputsByPin[outputSimPin.pinId] = outputsByOutputPin = [];\r\n    }\r\n\r\n    // Wire up the output to all of the inputs\r\n    for (const inputSimPin of inputSimPins) {\r\n      outputsByOutputPin.push({\r\n        simulatorNodeId: inputSimPin.simulatorNodeId,\r\n        pinId: inputSimPin.pinId,\r\n      });\r\n\r\n      const inputNode = simulatorNodesById[inputSimPin.simulatorNodeId];\r\n      inputNode.inputsByPin[inputSimPin.pinId] = {\r\n        simulatorNodeId: outputSimPin.simulatorNodeId,\r\n        pinId: outputSimPin.pinId,\r\n      };\r\n    }\r\n  }\r\n\r\n  return {\r\n    simulatorNodesById,\r\n    simulatorNodeIdsByCircuitNodeId,\r\n    inputElementPinsByCircuitPinId,\r\n    outputElementPinsByCircuitPinId,\r\n  };\r\n}\r\n\r\nfunction produceNode(\r\n  circuitNodeId: string,\r\n  rootState: AppState\r\n): CircuitProductionResult {\r\n  const nodeType = nodeTypeFromNodeIdSelector(rootState, circuitNodeId);\r\n  if (!nodeType) {\r\n    return EMPTY_PRODUCTION;\r\n  }\r\n\r\n  const nodeDef = nodeDefinitionFromTypeSelector(rootState, nodeType);\r\n  if (!nodeDef || !nodeDef.elementProduction) {\r\n    return EMPTY_PRODUCTION;\r\n  }\r\n\r\n  const production = normalizeElementProduction(nodeDef.elementProduction);\r\n  switch (production.type) {\r\n    case \"element\":\r\n      return produceElementNode(circuitNodeId, production, rootState);\r\n    case \"circuit\":\r\n      return produceCircuitNode(circuitNodeId, production, rootState);\r\n    default:\r\n      throw new Error(\r\n        \"Unsupported production type \" + (production as any).type\r\n      );\r\n  }\r\n}\r\n\r\nfunction produceElementNode(\r\n  circuitNodeId: string,\r\n  production: ElementNodeElementProduction,\r\n  rootState: AppState\r\n): CircuitProductionResult {\r\n  const nodeDef = nodeDefFromNodeIdSelector(rootState, circuitNodeId);\r\n  if (!nodeDef) {\r\n    return EMPTY_PRODUCTION;\r\n  }\r\n\r\n  const simulatorNodesById: Record<string, SimulatorNode> = {};\r\n  const simulatorNodeIdsByCircuitNodeId: Record<string, string> = {};\r\n\r\n  const simulatorNodeId = uuidV4();\r\n  simulatorNodesById[simulatorNodeId] = {\r\n    elementType: production.elementType,\r\n    // We do not have any internal pins.\r\n    // These will be wired by produceCircuit as\r\n    // it completes is cross-circuit connections.\r\n    inputsByPin: {},\r\n    outputsByPin: {},\r\n  };\r\n\r\n  simulatorNodeIdsByCircuitNodeId[circuitNodeId] = simulatorNodeId;\r\n\r\n  const inputElementPinsByCircuitPinId: Record<string, SimulatorNodePin[]> = {};\r\n  const outputElementPinsByCircuitPinId: Record<string, SimulatorNodePin> = {};\r\n\r\n  // We have a one to one pin mapping between node and element\r\n  for (const pinId of Object.keys(nodeDef.pins)) {\r\n    const { direction } = nodeDef.pins[pinId];\r\n    if (direction === \"input\") {\r\n      inputElementPinsByCircuitPinId[pinId] = [\r\n        {\r\n          pinId,\r\n          simulatorNodeId,\r\n        },\r\n      ];\r\n    } else if (direction === \"output\") {\r\n      outputElementPinsByCircuitPinId[pinId] = {\r\n        pinId,\r\n        simulatorNodeId,\r\n      };\r\n    }\r\n  }\r\n\r\n  return {\r\n    simulatorNodesById,\r\n    simulatorNodeIdsByCircuitNodeId,\r\n    inputElementPinsByCircuitPinId,\r\n    outputElementPinsByCircuitPinId,\r\n  };\r\n}\r\n\r\nfunction produceCircuitNode(\r\n  circuitNodeId: string,\r\n  production: CircuitNodeElementProduction,\r\n  rootState: AppState\r\n): CircuitProductionResult {\r\n  const circuitProuction = produceCircuit(\r\n    production.circuitId,\r\n    rootState,\r\n    false\r\n  );\r\n\r\n  return circuitProuction;\r\n}\r\n\r\nfunction normalizeElementProduction(\r\n  elementProduction: NodeElementProduction\r\n): NodeElementProductionObject {\r\n  if (typeof elementProduction === \"string\") {\r\n    return {\r\n      type: \"element\",\r\n      elementType: elementProduction,\r\n    };\r\n  }\r\n\r\n  return elementProduction;\r\n}\r\n","import { isStopSimAction } from \"@/actions/sim-stop\";\r\n\r\nimport { createSimulatorGraphReducer } from \"../utils\";\r\n\r\nimport { defaultSimulatorGraphState } from \"../state\";\r\n\r\nexport default createSimulatorGraphReducer((state, action) => {\r\n  if (!isStopSimAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  // Reset the simulator but keep the ticks per second choice.\r\n  return {\r\n    ...defaultSimulatorGraphState,\r\n  };\r\n});\r\n","import { concatReducers } from \"@/store/utils\";\r\n\r\nimport simStartReducer from \"./sim-start\";\r\nimport simStopReducer from \"./sim-stop\";\r\n\r\nexport default concatReducers(simStartReducer, simStopReducer);\r\n","import circuitEditorUiReducer from \"@/services/circuit-editor-ui/reducer\";\r\nimport circuitsReducer from \"@/services/circuits/reducer\";\r\nimport clipboardReducer from \"@/services/clipboard/reducer\";\r\nimport dialogReducer from \"@/services/dialog/reducer\";\r\nimport nodeGraphReducer from \"@/services/node-graph/reducer\";\r\nimport nodeLayoutReducer from \"@/services/node-layout/reducer\";\r\nimport savedataReducer from \"@/services/savedata/reducer\";\r\nimport selectionReducer from \"@/services/selection/reducer\";\r\nimport simulatorReducer from \"@/services/simulator/reducer\";\r\nimport simulatorGraphReducer from \"@/services/simulator-graph/reducer\";\r\n\r\nimport { concatReducers, finalizeReducerList } from \"./utils\";\r\n\r\nconst reducer = finalizeReducerList(\r\n  concatReducers(\r\n    circuitEditorUiReducer,\r\n    circuitsReducer,\r\n    clipboardReducer,\r\n    dialogReducer,\r\n    nodeGraphReducer,\r\n    nodeLayoutReducer,\r\n    savedataReducer,\r\n    selectionReducer,\r\n    simulatorReducer,\r\n    simulatorGraphReducer\r\n  )\r\n);\r\n\r\nexport default reducer;\r\n","export class SaveFormatError extends Error {\r\n  code: string;\r\n\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.message = message;\r\n    this.code = \"SAVE_FORMAT_ERROR\";\r\n  }\r\n}\r\n","import { call, select, takeEvery } from \"redux-saga/effects\";\r\nimport { saveAs } from \"file-saver\";\r\n\r\nimport { AppState } from \"@/store\";\r\n\r\nimport { ACTION_PROJECT_SAVE } from \"@/actions/project-save\";\r\n\r\nimport { displayDialogSaga } from \"@/services/dialog/api\";\r\n\r\nimport { createSave } from \"../utils\";\r\n\r\nexport default function* projectSaveSaga() {\r\n  yield takeEvery(ACTION_PROJECT_SAVE, saveProject);\r\n}\r\n\r\nfunction* saveProject() {\r\n  const state: AppState = yield select();\r\n\r\n  const fileName: string | null = yield call(\r\n    displayDialogSaga,\r\n    \"save-project\",\r\n    null\r\n  );\r\n  if (!fileName) {\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const save = createSave(state);\r\n    const blob = new Blob([JSON.stringify(save, null, 2)], {\r\n      type: \"application/json;charset=utf-8\",\r\n    });\r\n\r\n    saveAs(blob, fileName);\r\n  } catch (e) {\r\n    // TODO: Handle error\r\n    console.warn(\"Failed to save project:\", e);\r\n  }\r\n}\r\n","import { fork } from \"redux-saga/effects\";\r\n\r\nimport projectLoadSaga from \"./project-load\";\r\nimport projectSaveSaga from \"./project-save\";\r\n\r\nexport default function* saveDataSaga() {\r\n  yield fork(projectLoadSaga);\r\n  yield fork(projectSaveSaga);\r\n}\r\n","import { takeLeading, select, put, delay } from \"redux-saga/effects\";\r\n\r\nimport { ACTION_SIM_START } from \"@/actions/sim-start\";\r\nimport { ACTION_SIM_PAUSE } from \"@/actions/sim-pause\";\r\n\r\nimport { tickSim } from \"@/actions/sim-tick\";\r\n\r\nimport { isSimRunningSelector, ticksPerSecondSelector } from \"../selectors/run\";\r\n\r\nexport default function* runModeSaga() {\r\n  yield takeLeading([ACTION_SIM_START, ACTION_SIM_PAUSE], handleRunSim);\r\n}\r\n\r\nfunction* handleRunSim() {\r\n  while (true) {\r\n    const isRunning = yield select(isSimRunningSelector);\r\n    if (!isRunning) {\r\n      break;\r\n    }\r\n\r\n    yield put(tickSim(1));\r\n\r\n    const tps = yield select(ticksPerSecondSelector);\r\n    const timeToWait = Math.max(Math.ceil(1000 / tps), 1);\r\n    yield delay(timeToWait);\r\n  }\r\n}\r\n","import { fork } from \"redux-saga/effects\";\r\n\r\nimport runModeSaga from \"./mode-run\";\r\n\r\nexport default function* simulatorSaga() {\r\n  yield fork(runModeSaga);\r\n}\r\n","import { createStore, compose, applyMiddleware } from \"redux\";\r\nimport freeze from \"redux-freeze\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\n\r\nimport { doInit } from \"@/actions/init\";\r\n\r\nimport {\r\n  actionSanitizer,\r\n  stateSanitizer,\r\n  actionsBlacklist,\r\n} from \"./devtool-sanitizer\";\r\n\r\nimport saga from \"./saga\";\r\nimport reducer from \"./reducer\";\r\n\r\nconst composeEnhancers =\r\n  (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ &&\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n      actionSanitizer,\r\n      stateSanitizer,\r\n      actionsBlacklist,\r\n    })) ||\r\n  compose;\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nexport const store = createStore(\r\n  reducer,\r\n  composeEnhancers(applyMiddleware(freeze, sagaMiddleware))\r\n);\r\n\r\nsagaMiddleware.run(saga);\r\nstore.dispatch(doInit());\r\n","import { fork } from \"redux-saga/effects\";\r\n\r\nimport saveDataSaga from \"@/services/savedata/saga\";\r\nimport simulatorSaga from \"@/services/simulator/saga\";\r\n\r\nexport default function* appSaga() {\r\n  yield fork(saveDataSaga);\r\n  yield fork(simulatorSaga);\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"flex-row\":\"flex-module__flex-row___[fullhash-base64-5]\",\"flex-column\":\"flex-module__flex-column___[fullhash-base64-5]\",\"flexitem-shrink\":\"flex-module__flexitem-shrink___[fullhash-base64-5]\"};","// extracted by mini-css-extract-plugin\nexport default {\"fill-parent\":\"sizing-module__fill-parent___[fullhash-base64-5]\"};","import { createSimulatorSelector } from \"../utils\";\r\n\r\nexport const averageMsecsPerTickSelector = createSimulatorSelector(\r\n  (state) => state.profilerLogicUpdateMsecs\r\n);\r\n","import { createCircuitEditorUiSelector } from \"../utils\";\r\n\r\nexport const viewScaleSelector = createCircuitEditorUiSelector(\r\n  (s) => s.viewScale\r\n);\r\n","import { os } from \"platform\";\r\n\r\nconst OS_MAC = /(Mac|iOS|OS\\ X)/;\r\n\r\nexport const keyboardIsMac = OS_MAC.test((os || \"undefined\").toString());\r\n\r\nexport const keyboardCommandModifier = keyboardIsMac ? \"command\" : \"ctrl\";\r\n","import { keyboardCommandModifier } from \"@/runtime-env\";\r\n\r\nexport const KEYMAP_SIM_STEP = \"keymap:CircuitEditor/SimStep\" as const;\r\nexport const KEYMAP_SIM_FASTFORWARD = \"keymap:CircuitEditor/SimFastForward\" as const;\r\nexport const KEYMAP_SELECT_ALL = \"keymap:CircuitEditor/SelectAll\" as const;\r\nexport const KEYMAP_COPY = \"keymap:CircuitEditor/Copy\" as const;\r\nexport const KEYMAP_PASTE = \"keymap:CircuitEditor/Paste\" as const;\r\nexport const KEYMAP_DELETE = \"keymap:CircuitEditor/Delete\" as const;\r\n\r\nconst keymap = {\r\n  [KEYMAP_SIM_STEP]: \"space\",\r\n  [KEYMAP_SIM_FASTFORWARD]: \"shift+space\",\r\n  [KEYMAP_SELECT_ALL]: `${keyboardCommandModifier}+a`,\r\n  [KEYMAP_COPY]: `${keyboardCommandModifier}+c`,\r\n  [KEYMAP_PASTE]: `${keyboardCommandModifier}+v`,\r\n  [KEYMAP_DELETE]: [\"backspace\", \"del\"],\r\n};\r\nexport default keymap;\r\n\r\nexport type KeymapKeys = keyof typeof keymap;\r\nexport type KeymapHandler = Record<KeymapKeys, HotkeyHandler>;\r\n","import { createSelector } from \"reselect\";\r\nimport values from \"lodash/values\";\r\n\r\nimport { Rectangle, union } from \"@/geometry\";\r\n\r\nimport { nodeRectsByIdSelector } from \"./node-bounds\";\r\nimport { wireJointPositionsByJointIdSelector } from \"./wires\";\r\n\r\nconst MinFieldRect: Readonly<Rectangle> = Object.freeze({\r\n  p1: {\r\n    x: -100,\r\n    y: -100,\r\n  },\r\n  p2: {\r\n    x: 100,\r\n    y: 100,\r\n  },\r\n});\r\n\r\nexport const fieldRectSelector = createSelector(\r\n  nodeRectsByIdSelector,\r\n  wireJointPositionsByJointIdSelector,\r\n  (nodeRectsById, wireJointsById) => {\r\n    const nodeRects = values(nodeRectsById);\r\n    const jointRects = values(wireJointsById).map((p) => ({ p1: p, p2: p }));\r\n\r\n    return [...nodeRects, ...jointRects].reduce(union, MinFieldRect);\r\n  }\r\n);\r\n","import * as React from \"react\";\r\n\r\nexport const fieldSvgElementContext = React.createContext<SVGSVGElement | null>(\r\n  null\r\n);\r\n\r\nconst ContextProvider = fieldSvgElementContext.Provider;\r\n\r\nexport const FieldSvgElementProvider: React.FC<{\r\n  value: React.RefObject<SVGSVGElement | null>;\r\n}> = ({ value, children }) => {\r\n  // Force the component to rerender when the ref changes.\r\n  const [svgElement, setSvgElement] = React.useState<SVGSVGElement | null>(\r\n    null\r\n  );\r\n  React.useEffect(() => {\r\n    setSvgElement(value.current);\r\n  }, [value.current]);\r\n\r\n  return <ContextProvider value={svgElement}>{children}</ContextProvider>;\r\n};\r\n","import * as React from \"react\";\r\n\r\nimport { Point, ZeroPoint } from \"@/geometry\";\r\n\r\nimport { fieldSvgElementContext } from \"../contexts/fieldSvgElement\";\r\nimport { getFieldCoord } from \"../utils\";\r\n\r\nexport function useMouseCoords(): (p: Point) => Point {\r\n  const fieldRef = React.useContext(fieldSvgElementContext);\r\n  return React.useCallback(\r\n    (p: Point) => {\r\n      if (!fieldRef) {\r\n        return p;\r\n      }\r\n      return getFieldCoord(fieldRef, p);\r\n    },\r\n    [fieldRef]\r\n  );\r\n}\r\n\r\nexport function useEventMouseCoords(): (\r\n  e: MouseEvent | React.MouseEvent\r\n) => Point {\r\n  const fieldRef = React.useContext(fieldSvgElementContext);\r\n  return React.useCallback(\r\n    (e: MouseEvent | React.MouseEvent) => {\r\n      if (!fieldRef) {\r\n        return ZeroPoint;\r\n      }\r\n      const p: Point = {\r\n        x: e.pageX,\r\n        y: e.pageY,\r\n      };\r\n      return getFieldCoord(fieldRef, p);\r\n    },\r\n    [fieldRef]\r\n  );\r\n}\r\n","import { Point } from \"@/geometry\";\r\n\r\nexport function getFieldCoord(field: SVGSVGElement, p: Point) {\r\n  const ctm = field.getScreenCTM();\r\n  if (!ctm) {\r\n    return p;\r\n  }\r\n\r\n  const pt = field.createSVGPoint();\r\n  pt.x = p.x;\r\n  pt.y = p.y;\r\n  const translated = pt.matrixTransform(ctm.inverse());\r\n  return { x: translated.x, y: translated.y };\r\n}\r\n","import * as React from \"react\";\r\n\r\nimport useSelector from \"@/hooks/useSelector\";\r\nimport { nodeDefinitionFromTypeSelector } from \"@/services/node-types/selectors/node-types\";\r\nimport { cls } from \"@/utils\";\r\n\r\nexport interface NodeVisualProps {\r\n  className?: string;\r\n  x?: number;\r\n  y?: number;\r\n  nodeType: string;\r\n  nodeState: any;\r\n  isSelected?: boolean;\r\n  onClick?(e: React.MouseEvent): void;\r\n  onMouseDown?(e: React.MouseEvent): void;\r\n  onMouseOver?(e: React.MouseEvent): void;\r\n  onMouseUp?(e: React.MouseEvent): void;\r\n  onMouseLeave?(e: React.MouseEvent): void;\r\n}\r\n\r\nconst NodeVisual: React.FC<NodeVisualProps> = ({\r\n  className,\r\n  x = 0,\r\n  y = 0,\r\n  nodeType,\r\n  nodeState,\r\n  isSelected = false,\r\n  onClick,\r\n  onMouseDown,\r\n  onMouseOver,\r\n  onMouseUp,\r\n  onMouseLeave,\r\n}) => {\r\n  const def = useSelector((state) =>\r\n    nodeDefinitionFromTypeSelector(state, nodeType)\r\n  );\r\n\r\n  let body: React.ReactNode;\r\n  let hitPath: string | undefined;\r\n  if (!def) {\r\n    body = (\r\n      <rect\r\n        x={x}\r\n        y={y}\r\n        width={50}\r\n        height={50}\r\n        fill={isSelected ? \"goldenrod\" : \"red\"}\r\n      />\r\n    );\r\n  } else {\r\n    const { component: ElementComponent } = def.visual;\r\n    body = (\r\n      <ElementComponent isSelected={isSelected} elementState={nodeState} />\r\n    );\r\n    hitPath = def.visual.hitPath;\r\n  }\r\n\r\n  const transform = x != 0 || y != 0 ? `translate(${x}, ${y})` : undefined;\r\n  return (\r\n    <g\r\n      className={cls(className, \"node-visual\", isSelected && \"node-selected\")}\r\n      transform={transform}\r\n      onClick={onClick}\r\n      onMouseDown={onMouseDown}\r\n      onMouseOver={onMouseOver}\r\n      onMouseUp={onMouseUp}\r\n      onMouseLeave={onMouseLeave}\r\n    >\r\n      {hitPath && <path d={hitPath} fill=\"transparent\" onClick={onClick} />}\r\n      {body}\r\n    </g>\r\n  );\r\n};\r\n\r\nexport default NodeVisual;\r\n","import * as React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { calcSize } from \"@/geometry\";\r\nimport useSelector from \"@/hooks/useSelector\";\r\n\r\nimport {\r\n  isDraggingNewNodeSelector,\r\n  dragNewNodeTypeSelector,\r\n  dragEndSelector,\r\n} from \"@/services/circuit-editor-ui/selectors/drag\";\r\n\r\nimport { fieldRectSelector } from \"@/services/node-layout/selectors/field\";\r\n\r\nimport { fieldDragContinue } from \"@/actions/field-drag-continue\";\r\n\r\nimport { useEventMouseCoords } from \"../hooks/useMouseCoords\";\r\n\r\nimport NodeVisual from \"./NodeVisual\";\r\n\r\nconst DragNewNodeLayer: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const getMouseCoords = useEventMouseCoords();\r\n  const fieldRect = useSelector(fieldRectSelector);\r\n  const { width, height } = calcSize(fieldRect);\r\n  const isDraggingNewNode = useSelector(isDraggingNewNodeSelector);\r\n  const dragEnd = useSelector(dragEndSelector);\r\n  const draggingNodeType = useSelector(dragNewNodeTypeSelector);\r\n\r\n  const onMouseMove = React.useCallback(\r\n    (e: React.MouseEvent) => {\r\n      const p = getMouseCoords(e);\r\n      dispatch(fieldDragContinue(p));\r\n    },\r\n    [getMouseCoords]\r\n  );\r\n\r\n  if (!isDraggingNewNode || !draggingNodeType) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {dragEnd && (\r\n        <g opacity={0.5}>\r\n          <NodeVisual\r\n            x={dragEnd.x}\r\n            y={dragEnd.y}\r\n            nodeType={draggingNodeType}\r\n            nodeState={{}}\r\n          />\r\n        </g>\r\n      )}\r\n      <rect\r\n        width={width}\r\n        height={height}\r\n        fill=\"transparent\"\r\n        onMouseMove={onMouseMove}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragNewNodeLayer;\r\n","import { AppState } from \"@/store\";\r\n\r\nimport { createSimulatorSelector } from \"../utils\";\r\nimport { SimulatorState } from \"../state\";\r\n\r\nexport const nodeStatesByNodeIdSelector = (function () {\r\n  let cachedSimulatorNodeIdsByCircuitNodeId: any;\r\n  let cachedNodeStatesBySimulatorNodeId: any;\r\n  let cachedNodeStatesByNodeIdSelector: Record<string, any> | null = null;\r\n\r\n  return (state: AppState) => {\r\n    const simulatorNodeIdsByCircuitNodeId =\r\n      state.services.simulatorGraph.simulatorNodeIdsByCircuitNodeId;\r\n    const nodeStatesBySimulatorNodeId =\r\n      state.services.simulator.nodeStatesByNodeId;\r\n\r\n    if (\r\n      cachedSimulatorNodeIdsByCircuitNodeId ===\r\n        simulatorNodeIdsByCircuitNodeId &&\r\n      cachedNodeStatesBySimulatorNodeId === nodeStatesBySimulatorNodeId &&\r\n      cachedNodeStatesByNodeIdSelector != null\r\n    ) {\r\n      return cachedNodeStatesByNodeIdSelector;\r\n    }\r\n\r\n    const nodeStatesByNodeId: Record<string, any> = {};\r\n\r\n    for (const circuitNodeId of Object.keys(simulatorNodeIdsByCircuitNodeId)) {\r\n      const simulatorNodeId = simulatorNodeIdsByCircuitNodeId[circuitNodeId];\r\n      nodeStatesByNodeId[circuitNodeId] =\r\n        nodeStatesBySimulatorNodeId[simulatorNodeId];\r\n    }\r\n\r\n    cachedSimulatorNodeIdsByCircuitNodeId = simulatorNodeIdsByCircuitNodeId;\r\n    cachedNodeStatesBySimulatorNodeId = nodeStatesBySimulatorNodeId;\r\n    cachedNodeStatesByNodeIdSelector = nodeStatesByNodeId;\r\n    return nodeStatesByNodeId;\r\n  };\r\n})();\r\n\r\nexport const nodeStateFromNodeIdSelector = (\r\n  state: AppState,\r\n  nodeId: string\r\n) => {\r\n  const simulatorNodeIdsByCircuitNodeId =\r\n    state.services.simulatorGraph.simulatorNodeIdsByCircuitNodeId;\r\n  const nodeStatesBySimulatorNodeId =\r\n    state.services.simulator.nodeStatesByNodeId;\r\n\r\n  const simulatorNodeId = simulatorNodeIdsByCircuitNodeId[nodeId];\r\n  if (!simulatorNodeId) {\r\n    return {};\r\n  }\r\n\r\n  return nodeStatesBySimulatorNodeId[simulatorNodeId];\r\n};\r\n","import * as React from \"react\";\r\n\r\nimport pick from \"lodash/pick\";\r\nimport mapValues from \"lodash/mapValues\";\r\nimport values from \"lodash/values\";\r\n\r\nimport { createSelector } from \"reselect\";\r\n\r\nimport { nodeTypesByNodeIdSelector } from \"@/services/node-graph/selectors/nodes\";\r\nimport { nodeStatesByNodeIdSelector } from \"@/services/simulator/selectors/nodes\";\r\nimport { nodePositionsByNodeIdSelector } from \"@/services/node-layout/selectors/node-positions\";\r\nimport { selectedNodeIdsSelector } from \"@/services/selection/selectors/selection\";\r\nimport { dragMoveOffsetSelector } from \"@/services/circuit-editor-ui/selectors/drag\";\r\n\r\nimport useSelector from \"@/hooks/useSelector\";\r\n\r\nimport NodeVisual from \"./NodeVisual\";\r\n\r\nconst selectedNodePositionsByIdSelector = createSelector(\r\n  selectedNodeIdsSelector,\r\n  nodePositionsByNodeIdSelector,\r\n  (selectedNodeIds, nodePositionsById) =>\r\n    pick(nodePositionsById, selectedNodeIds)\r\n);\r\n\r\nconst selectedNodeTypesByIdSelector = createSelector(\r\n  selectedNodeIdsSelector,\r\n  nodeTypesByNodeIdSelector,\r\n  (selectedNodeIds, nodeTypesById) => pick(nodeTypesById, selectedNodeIds)\r\n);\r\n\r\nconst selectedNodeStatesByIdSelector = createSelector(\r\n  selectedNodeIdsSelector,\r\n  nodeStatesByNodeIdSelector,\r\n  (selectedNodeIds, nodeStatesById) => pick(nodeStatesById, selectedNodeIds)\r\n);\r\n\r\nconst DragNodePreviewLayer: React.FC = () => {\r\n  const selectedNodePositionsById = useSelector(\r\n    selectedNodePositionsByIdSelector\r\n  );\r\n  const selectedNodeTypesById = useSelector(selectedNodeTypesByIdSelector);\r\n  const selectedNodeStatesById = useSelector(selectedNodeStatesByIdSelector);\r\n  const dragMoveOffset = useSelector(dragMoveOffsetSelector);\r\n\r\n  let elements: React.ReactNode | null = null;\r\n  if (dragMoveOffset) {\r\n    elements = values(\r\n      mapValues(selectedNodePositionsById, (p, nodeId) => (\r\n        <NodeVisual\r\n          key={nodeId}\r\n          nodeType={selectedNodeTypesById[nodeId]}\r\n          nodeState={selectedNodeStatesById[nodeId]}\r\n          x={p.x + dragMoveOffset.x}\r\n          y={p.y + dragMoveOffset.y}\r\n        />\r\n      ))\r\n    );\r\n  }\r\n  return (\r\n    <g id=\"drag-preview-layer\" opacity={0.3}>\r\n      {elements}\r\n    </g>\r\n  );\r\n};\r\n\r\nexport default DragNodePreviewLayer;\r\n","import { keyboardIsMac } from \"./runtime-env\";\r\n\r\nexport type SelectionMode = \"set\" | \"append\" | \"remove\" | \"toggle\";\r\n\r\nexport function getModifiers(e: MouseEvent): ModifierKeys {\r\n  const { ctrlKey, altKey, shiftKey, metaKey } = e;\r\n  return {\r\n    ctrlMetaKey: keyboardIsMac ? metaKey : ctrlKey,\r\n    altKey: altKey,\r\n    shiftKey,\r\n  };\r\n}\r\n\r\nexport function getSelectMode(modifiers: ModifierKeys): SelectionMode {\r\n  if (modifiers.shiftKey && modifiers.ctrlMetaKey) {\r\n    return \"remove\";\r\n  }\r\n  if (modifiers.shiftKey) {\r\n    return \"append\";\r\n  }\r\n  if (modifiers.ctrlMetaKey) {\r\n    return \"toggle\";\r\n  }\r\n  return \"set\";\r\n}\r\n\r\nexport interface ModifierKeys {\r\n  ctrlMetaKey: boolean;\r\n  shiftKey: boolean;\r\n  altKey: boolean;\r\n}\r\n","import * as React from \"react\";\r\nimport { Point, ZeroPoint, pointSubtract } from \"@/geometry\";\r\n\r\nexport interface UseMouseTracking {\r\n  startTracking(e: React.MouseEvent): void;\r\n  cancelTracking(): void;\r\n}\r\n\r\nexport interface MouseTrackingOptions {\r\n  dragThreshold?: number;\r\n  onClick?(e: MouseEvent): void;\r\n  onDragStart?(e: MouseEvent): void;\r\n  onDragMove?(offset: Point, e: MouseEvent): void;\r\n  onDragEnd?(offset: Point, e: MouseEvent): void;\r\n}\r\n\r\nexport default function useMouseTracking(\r\n  opts: MouseTrackingOptions\r\n): UseMouseTracking {\r\n  const {\r\n    dragThreshold = 5,\r\n    onClick,\r\n    onDragStart,\r\n    onDragMove,\r\n    onDragEnd,\r\n  } = opts;\r\n\r\n  // We need both state and ref for this.\r\n  //  State lets us trigger a rerender / useEffect.\r\n  //  Ref lets us check for cancellation when handling document events.\r\n  //  We seem to get a few rogue onMouseMove events after we try to stop tracking.\r\n  const [isTracking, setTracking] = React.useState(false);\r\n  const isTrackingRef = React.useRef(false);\r\n\r\n  const isDraggingRef = React.useRef(false);\r\n  const mouseDownRef = React.useRef<Point>(ZeroPoint);\r\n\r\n  const startTracking = React.useCallback((e: React.MouseEvent) => {\r\n    if (isTrackingRef.current) {\r\n      return;\r\n    }\r\n\r\n    isTrackingRef.current = true;\r\n    setTracking(true);\r\n    mouseDownRef.current = { x: e.pageX, y: e.pageY };\r\n  }, []);\r\n\r\n  const cancelTracking = React.useCallback(() => {\r\n    isTrackingRef.current = false;\r\n    setTracking(false);\r\n    isDraggingRef.current = false;\r\n    mouseDownRef.current = ZeroPoint;\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    if (!isTracking) {\r\n      return;\r\n    }\r\n\r\n    function onMouseMove(e: MouseEvent) {\r\n      if (!isTrackingRef.current) {\r\n        return;\r\n      }\r\n\r\n      if (isDraggingRef.current) {\r\n        if (onDragMove) {\r\n          const offset = pointSubtract(\r\n            { x: e.pageX, y: e.pageY },\r\n            mouseDownRef.current\r\n          );\r\n          onDragMove(offset, e);\r\n        }\r\n      } else {\r\n        const d = mouseDownRef.current;\r\n        if (\r\n          Math.abs(d.x - e.pageX) >= dragThreshold ||\r\n          Math.abs(d.y - e.pageY) >= dragThreshold\r\n        ) {\r\n          isDraggingRef.current = true;\r\n          if (onDragStart) {\r\n            onDragStart(e);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    function onMouseUp(e: MouseEvent) {\r\n      if (!isTrackingRef.current) {\r\n        return;\r\n      }\r\n\r\n      if (isDraggingRef.current) {\r\n        if (onDragEnd) {\r\n          const offset = pointSubtract(\r\n            { x: e.pageX, y: e.pageY },\r\n            mouseDownRef.current\r\n          );\r\n          onDragEnd(offset, e);\r\n        }\r\n      } else {\r\n        if (onClick) {\r\n          onClick(e);\r\n        }\r\n      }\r\n\r\n      cancelTracking();\r\n    }\r\n\r\n    document.addEventListener(\"mousemove\", onMouseMove);\r\n    document.addEventListener(\"mouseup\", onMouseUp);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"mousemove\", onMouseMove);\r\n      document.removeEventListener(\"mouseup\", onMouseUp);\r\n    };\r\n  }, [isTracking]);\r\n\r\n  return {\r\n    startTracking,\r\n    cancelTracking,\r\n  };\r\n}\r\n","import * as React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport { Point } from \"@/geometry\";\r\nimport { getModifiers, getSelectMode } from \"@/selection-mode\";\r\n\r\nimport useMouseTracking from \"@/hooks/useMouseTracking\";\r\n\r\nimport { selectionRectSelector } from \"@/services/circuit-editor-ui/selectors/drag\";\r\n\r\nimport { clearSelection } from \"@/actions/select-clear\";\r\nimport { fieldDragStartSelect } from \"@/actions/field-drag-start-select\";\r\nimport { fieldDragContinue } from \"@/actions/field-drag-continue\";\r\nimport { fieldDragEnd } from \"@/actions/field-drag-end\";\r\n\r\nimport { useEventMouseCoords } from \"../hooks/useMouseCoords\";\r\n\r\nconst DragSelectLayer: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const selectionRect = useSelector(selectionRectSelector);\r\n\r\n  const getCoords = useEventMouseCoords();\r\n\r\n  const onClick = React.useCallback(() => {\r\n    dispatch(clearSelection());\r\n  }, []);\r\n\r\n  const onDragStart = React.useCallback(\r\n    (e: MouseEvent) => {\r\n      const p = getCoords(e);\r\n      dispatch(fieldDragStartSelect(p));\r\n    },\r\n    [getCoords]\r\n  );\r\n\r\n  const onDragMove = React.useCallback(\r\n    (offset: Point, e: MouseEvent) => {\r\n      const p = getCoords(e);\r\n      dispatch(fieldDragContinue(p));\r\n    },\r\n    [getCoords]\r\n  );\r\n\r\n  const onDragEnd = React.useCallback(\r\n    (offset: Point, e: MouseEvent) => {\r\n      const p = getCoords(e);\r\n      const modifiers = getModifiers(e);\r\n      const mode = getSelectMode(modifiers);\r\n      dispatch(fieldDragEnd(p, mode));\r\n    },\r\n    [getCoords]\r\n  );\r\n\r\n  const { startTracking } = useMouseTracking({\r\n    onClick,\r\n    onDragStart,\r\n    onDragMove,\r\n    onDragEnd,\r\n  });\r\n  const onMouseDown = React.useCallback(\r\n    (e: React.MouseEvent) => {\r\n      if (e.defaultPrevented) {\r\n        return;\r\n      }\r\n      e.preventDefault();\r\n      startTracking(e);\r\n    },\r\n    [getCoords]\r\n  );\r\n\r\n  return (\r\n    <g id=\"drag-select-layer\">\r\n      <rect\r\n        width=\"100%\"\r\n        height=\"100%\"\r\n        fill=\"transparent\"\r\n        onMouseDown={onMouseDown}\r\n      />\r\n      {selectionRect && (\r\n        <g\r\n          transform={`translate(${selectionRect.p1.x}, ${selectionRect.p1.y})`}\r\n        >\r\n          <rect\r\n            width={selectionRect.p2.x - selectionRect.p1.x}\r\n            height={selectionRect.p2.y - selectionRect.p1.y}\r\n            strokeWidth=\"2\"\r\n            strokeDasharray=\"5 3\"\r\n            stroke=\"skyblue\"\r\n            fill=\"transparent\"\r\n          />\r\n        </g>\r\n      )}\r\n    </g>\r\n  );\r\n};\r\n\r\nexport default DragSelectLayer;\r\n","import * as React from \"react\";\r\n\r\nimport useSelector from \"@/hooks/useSelector\";\r\nimport { viewScaleSelector } from \"@/services/circuit-editor-ui/selectors/view\";\r\n\r\nconst GridBackground: React.FC = () => {\r\n  const scale = useSelector(viewScaleSelector);\r\n\r\n  return (\r\n    <svg width=\"100%\" height=\"100%\" xmlns=\"http://www.w3.org/2000/svg\">\r\n      <defs>\r\n        <pattern id=\"grid\" width=\"50\" height=\"50\" patternUnits=\"userSpaceOnUse\">\r\n          <path\r\n            d=\"M 50 0 L 0 0 0 50\"\r\n            fill=\"none\"\r\n            stroke=\"gray\"\r\n            strokeWidth={0.5 * (1 / scale)}\r\n          />\r\n        </pattern>\r\n      </defs>\r\n\r\n      <rect width=\"100%\" height=\"100%\" fill=\"url(#grid)\" />\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default GridBackground;\r\n","import Node from \"./node\";\r\nexport * from \"./node\";\r\nexport default Node;\r\n","import * as React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { Point, ZeroPoint } from \"@/geometry\";\r\nimport { getModifiers, getSelectMode } from \"@/selection-mode\";\r\n\r\nimport useSelector from \"@/hooks/useSelector\";\r\nimport useMouseTracking from \"@/hooks/useMouseTracking\";\r\n\r\nimport { nodeTypeFromNodeIdSelector } from \"@/services/node-graph/selectors/nodes\";\r\nimport { nodeStateFromNodeIdSelector } from \"@/services/simulator/selectors/nodes\";\r\nimport { isNodeSelectedFromNodeIdSelector } from \"@/services/selection/selectors/selection\";\r\nimport { nodePositionFromNodeIdSelector } from \"@/services/node-layout/selectors/node-positions\";\r\nimport { isSimActiveSelector } from \"@/services/simulator/selectors/run\";\r\n\r\nimport { fieldDragStartNode } from \"@/actions/field-drag-start-node\";\r\nimport { fieldDragContinue } from \"@/actions/field-drag-continue\";\r\nimport { fieldDragEnd } from \"@/actions/field-drag-end\";\r\nimport { interactNode } from \"@/actions/node-interact\";\r\nimport { selectNodes } from \"@/actions/select-nodes\";\r\n\r\nimport NodeVisual from \"../NodeVisual\";\r\n\r\nimport { useEventMouseCoords } from \"../../hooks/useMouseCoords\";\r\n\r\nimport \"./Node.module.css\";\r\n\r\nexport interface NodeProps {\r\n  nodeId: string;\r\n}\r\n\r\nconst Node: React.FC<NodeProps> = ({ nodeId }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const isSimActive = useSelector(isSimActiveSelector);\r\n\r\n  const pos = useSelector((s) => nodePositionFromNodeIdSelector(s, nodeId));\r\n  if (!pos) {\r\n    // Caught some bad logic that was rendering non-existant nodes.\r\n    // Leaving this in for safty, although the underlying issue was fixed.\r\n    console.warn(`Rendering node id ${nodeId} that has no position.`);\r\n  }\r\n  const { x, y } = pos ?? ZeroPoint;\r\n\r\n  const nodeType = useSelector((s) => nodeTypeFromNodeIdSelector(s, nodeId));\r\n  const nodeState = useSelector((s) => nodeStateFromNodeIdSelector(s, nodeId));\r\n  const isSelected = useSelector((s) =>\r\n    isNodeSelectedFromNodeIdSelector(s, nodeId)\r\n  );\r\n\r\n  const getCoords = useEventMouseCoords();\r\n\r\n  const onClick = React.useCallback(\r\n    (e: MouseEvent) => {\r\n      if (isSimActive) {\r\n        dispatch(interactNode(nodeId));\r\n      } else {\r\n        const modifiers = getModifiers(e);\r\n        const mode = getSelectMode(modifiers);\r\n        dispatch(selectNodes(nodeId, mode));\r\n      }\r\n    },\r\n    [isSimActive]\r\n  );\r\n\r\n  const onDragStart = React.useCallback(\r\n    (e: MouseEvent) => {\r\n      const p = getCoords(e);\r\n      const modifiers = getModifiers(e);\r\n      const mode = getSelectMode(modifiers);\r\n      dispatch(fieldDragStartNode(nodeId, p, mode));\r\n    },\r\n    [nodeId, getCoords]\r\n  );\r\n\r\n  const onDragMove = React.useCallback(\r\n    (offset: Point, e: MouseEvent) => {\r\n      const p = getCoords(e);\r\n      dispatch(fieldDragContinue(p));\r\n    },\r\n    [getCoords]\r\n  );\r\n\r\n  const onDragEnd = React.useCallback(\r\n    (offset: Point, e: MouseEvent) => {\r\n      const p = getCoords(e);\r\n      const modifiers = getModifiers(e);\r\n      const mode = getSelectMode(modifiers);\r\n      dispatch(fieldDragEnd(p, mode));\r\n    },\r\n    [getCoords]\r\n  );\r\n\r\n  const { startTracking } = useMouseTracking({\r\n    onClick,\r\n    onDragStart,\r\n    onDragMove,\r\n    onDragEnd,\r\n  });\r\n  const onMouseDown = React.useCallback(\r\n    (e: React.MouseEvent) => {\r\n      if (e.defaultPrevented) {\r\n        return;\r\n      }\r\n      e.preventDefault();\r\n      startTracking(e);\r\n    },\r\n    [getCoords]\r\n  );\r\n\r\n  if (!nodeType) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <NodeVisual\r\n      className=\"circuit-field-node\"\r\n      x={x}\r\n      y={y}\r\n      nodeType={nodeType}\r\n      nodeState={nodeState}\r\n      isSelected={isSelected}\r\n      onMouseDown={onMouseDown}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Node;\r\n","import * as React from \"react\";\r\n\r\nimport useSelector from \"@/hooks/useSelector\";\r\n\r\nimport { nodeIdsForEditingCircuitSelector } from \"@/services/circuit-editor-ui/selectors/nodes\";\r\n\r\nimport Node from \"./Node\";\r\n\r\nconst NodesLayer: React.FC = () => {\r\n  const nodeIds = useSelector(nodeIdsForEditingCircuitSelector);\r\n\r\n  const nodeElements = nodeIds.map((nodeId) => {\r\n    return <Node key={nodeId} nodeId={nodeId} />;\r\n  });\r\n\r\n  return <g id=\"nodes-layer\">{nodeElements}</g>;\r\n};\r\nexport default NodesLayer;\r\n","import createCachedSelector from \"re-reselect\";\r\n\r\nimport { AppState } from \"@/store\";\r\n\r\nimport { Connection } from \"@/services/node-graph/types\";\r\n\r\nexport const wireValueFromConnectionIdSelector = createCachedSelector(\r\n  (state: AppState, connectionId: string) =>\r\n    state.services.nodeGraph.connectionsById[connectionId],\r\n  (state: AppState) =>\r\n    state.services.simulatorGraph.simulatorNodeIdsByCircuitNodeId,\r\n  (state: AppState) => state.services.simulator.nodeOutputValuesByNodeId,\r\n  (\r\n    wire: Connection,\r\n    simulatorNodeIdsByCircuitNodeId: Record<string, string>,\r\n    outputVauesByNodeId: Record<string, Record<string, boolean>>\r\n  ) => {\r\n    if (!wire) {\r\n      return false;\r\n    }\r\n\r\n    const {\r\n      outputPin: { nodeId, pinId },\r\n    } = wire;\r\n\r\n    const simulatorNodeId = simulatorNodeIdsByCircuitNodeId[nodeId];\r\n\r\n    return outputVauesByNodeId[simulatorNodeId]?.[pinId] || false;\r\n  }\r\n)((_: any, connectionId: string) => connectionId);\r\n","import * as React from \"react\";\r\nimport { v4 as uuidV4 } from \"uuid\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport {\r\n  Point,\r\n  normalize,\r\n  pointSubtract,\r\n  dotProduct,\r\n  pointAdd,\r\n  scale,\r\n} from \"@/geometry\";\r\nimport { getSelectMode, getModifiers } from \"@/selection-mode\";\r\n\r\nimport useSelector from \"@/hooks/useSelector\";\r\nimport useMouseTracking from \"@/hooks/useMouseTracking\";\r\n\r\nimport { addWireJoint } from \"@/actions/wire-joint-add\";\r\nimport { moveWireJoint, moveWireJointEnd } from \"@/actions/wire-joint-move\";\r\nimport { selectWires } from \"@/actions/select-wires\";\r\n\r\nimport {\r\n  wireJointPositionFromJointIdSelector,\r\n  wireStartPositionFromConnectionIdSelector,\r\n  wireEndPositionFromConnectionIdSelector,\r\n} from \"@/services/node-layout/selectors/wires\";\r\n\r\nimport { useEventMouseCoords } from \"../hooks/useMouseCoords\";\r\n\r\nexport interface WireSegmentProps {\r\n  connectionId: string;\r\n  startJointId: string | null;\r\n  endJointId: string | null;\r\n}\r\nconst WireSegment: React.FC<WireSegmentProps> = ({\r\n  connectionId,\r\n  startJointId,\r\n  endJointId,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  const getMouseCoords = useEventMouseCoords();\r\n\r\n  const start = useSelector((state) => {\r\n    if (startJointId == null) {\r\n      return wireStartPositionFromConnectionIdSelector(state, connectionId);\r\n    }\r\n    return wireJointPositionFromJointIdSelector(state, startJointId);\r\n  });\r\n\r\n  const end = useSelector((state) => {\r\n    if (endJointId == null) {\r\n      return wireEndPositionFromConnectionIdSelector(state, connectionId);\r\n    }\r\n    return wireJointPositionFromJointIdSelector(state, endJointId);\r\n  });\r\n\r\n  const [mousePos, setMousePos] = React.useState<Point | null>(null);\r\n  const addedJointRef = React.useRef<string | null>(null);\r\n\r\n  const onMouseMove = React.useCallback(\r\n    (e: React.MouseEvent) => {\r\n      const p = getMouseCoords(e);\r\n      setMousePos(p);\r\n    },\r\n    [getMouseCoords]\r\n  );\r\n\r\n  const onMouseLeave = React.useCallback(() => {\r\n    setMousePos(null);\r\n  }, []);\r\n\r\n  const onDragStart = React.useCallback(\r\n    (e: MouseEvent) => {\r\n      const p = getMouseCoords(e);\r\n      const jointId = uuidV4();\r\n      addedJointRef.current = jointId;\r\n      dispatch(addWireJoint(connectionId, startJointId, p, jointId));\r\n    },\r\n    [connectionId, startJointId, getMouseCoords]\r\n  );\r\n\r\n  const onDragMove = React.useCallback(\r\n    (offset: Point, e: MouseEvent) => {\r\n      const jointId = addedJointRef.current;\r\n      if (!jointId) {\r\n        return;\r\n      }\r\n      const p = getMouseCoords(e);\r\n      dispatch(moveWireJoint(jointId, p));\r\n    },\r\n    [getMouseCoords]\r\n  );\r\n\r\n  const onDragEnd = React.useCallback(() => {\r\n    dispatch(moveWireJointEnd());\r\n  }, []);\r\n\r\n  const onClick = React.useCallback(\r\n    (e: MouseEvent) => {\r\n      const modifiers = getModifiers(e);\r\n      const mode = getSelectMode(modifiers);\r\n      dispatch(selectWires(connectionId, mode));\r\n    },\r\n    [connectionId]\r\n  );\r\n\r\n  const { startTracking } = useMouseTracking({\r\n    onClick,\r\n    onDragStart,\r\n    onDragMove,\r\n    onDragEnd,\r\n  });\r\n\r\n  const onJointInsertMouseDown = React.useCallback(\r\n    (e: React.MouseEvent) => {\r\n      startTracking(e);\r\n    },\r\n    [startTracking]\r\n  );\r\n\r\n  let insertJointPos: Point | undefined;\r\n  if (mousePos) {\r\n    let lineDir = normalize(pointSubtract(end, start));\r\n    const v = pointSubtract(mousePos, start);\r\n    var d = dotProduct(v, lineDir);\r\n    insertJointPos = pointAdd(start, scale(lineDir, d));\r\n  }\r\n\r\n  return (\r\n    <g onMouseMove={onMouseMove} onMouseLeave={onMouseLeave}>\r\n      <line x1={start.x} y1={start.y} x2={end.x} y2={end.y} strokeWidth={2} />\r\n      {insertJointPos && (\r\n        <circle\r\n          cx={insertJointPos.x}\r\n          cy={insertJointPos.y}\r\n          r={3}\r\n          stroke=\"none\"\r\n          fill=\"red\"\r\n          onMouseDown={onJointInsertMouseDown}\r\n        />\r\n      )}\r\n    </g>\r\n  );\r\n};\r\n\r\nexport default WireSegment;\r\n","import WireJoint from \"./WireJoint\";\r\nexport default WireJoint;\r\n","import * as React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { Point } from \"@/geometry\";\r\nimport { cls } from \"@/utils\";\r\nimport { getSelectMode, getModifiers } from \"@/selection-mode\";\r\n\r\nimport useSelector from \"@/hooks/useSelector\";\r\nimport useMouseTracking from \"@/hooks/useMouseTracking\";\r\n\r\nimport { wireJointPositionFromJointIdSelector } from \"@/services/node-layout/selectors/wires\";\r\nimport { isJointSelectedFromJointIdSelector } from \"@/services/selection/selectors/selection\";\r\n\r\nimport { moveWireJoint, moveWireJointEnd } from \"@/actions/wire-joint-move\";\r\nimport { selectWireJoints } from \"@/actions/select-wire-joints\";\r\n\r\nimport { useEventMouseCoords } from \"../../hooks/useMouseCoords\";\r\n\r\nimport styles from \"./WireJoint.module.css\";\r\n\r\ninterface WireJointProps {\r\n  jointId: string;\r\n}\r\n\r\nconst WireJoint: React.FC<WireJointProps> = ({ jointId }) => {\r\n  const getMouseCoords = useEventMouseCoords();\r\n  const dispatch = useDispatch();\r\n\r\n  const isSelected = useSelector((state) =>\r\n    isJointSelectedFromJointIdSelector(state, jointId)\r\n  );\r\n\r\n  const position = useSelector((state) =>\r\n    wireJointPositionFromJointIdSelector(state, jointId)\r\n  );\r\n  const [mouseOver, setMouseOver] = React.useState(false);\r\n\r\n  const onJointDragMove = React.useCallback(\r\n    (offset: Point, e: MouseEvent) => {\r\n      const p = getMouseCoords(e);\r\n      dispatch(moveWireJoint(jointId, p));\r\n    },\r\n    [getMouseCoords]\r\n  );\r\n\r\n  const onJointDragEnd = React.useCallback(() => {\r\n    dispatch(moveWireJointEnd());\r\n  }, []);\r\n\r\n  const onClick = React.useCallback(\r\n    (e: MouseEvent) => {\r\n      const modifiers = getModifiers(e);\r\n      const mode = getSelectMode(modifiers);\r\n      dispatch(selectWireJoints(jointId, mode));\r\n    },\r\n    [jointId]\r\n  );\r\n\r\n  const { startTracking: startMoveJointTracking } = useMouseTracking({\r\n    onClick,\r\n    onDragMove: onJointDragMove,\r\n    onDragEnd: onJointDragEnd,\r\n  });\r\n\r\n  const onMouseOver = React.useCallback(() => {\r\n    setMouseOver(true);\r\n  }, []);\r\n  const onMouseOut = React.useCallback(() => {\r\n    setMouseOver(false);\r\n  }, []);\r\n\r\n  const mouseDown = React.useCallback(\r\n    (e: React.MouseEvent) => {\r\n      startMoveJointTracking(e);\r\n    },\r\n    [startMoveJointTracking]\r\n  );\r\n\r\n  return (\r\n    <circle\r\n      className={cls(styles[\"wire-joint\"], isSelected && styles[\"selected\"])}\r\n      cx={position.x}\r\n      cy={position.y}\r\n      r={mouseOver || isSelected ? 4 : 2}\r\n      onMouseOver={onMouseOver}\r\n      onMouseOut={onMouseOut}\r\n      onMouseDown={mouseDown}\r\n    />\r\n  );\r\n};\r\n\r\nexport default WireJoint;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"wire-joint\":\"WireJoint-module__wire-joint___[fullhash-base64-5]\",\"selected\":\"WireJoint-module__selected___[fullhash-base64-5]\"};","import Wire from \"./Wire\";\r\nexport default Wire;\r\n","import * as React from \"react\";\r\n\r\nimport { cls } from \"@/utils\";\r\nimport useSelector from \"@/hooks/useSelector\";\r\n\r\nimport { wireJointIdsFromConnectionIdSelector } from \"@/services/node-layout/selectors/wires\";\r\nimport { isWireSelectedFromConnectionIdSelector } from \"@/services/selection/selectors/selection\";\r\nimport { wireValueFromConnectionIdSelector } from \"@/services/simulator/selectors/wires\";\r\n\r\nimport WireSegment from \"../WireSegment\";\r\nimport WireJoint from \"../WireJoint\";\r\n\r\nimport styles from \"./Wire.module.css\";\r\n\r\nexport interface WireProps {\r\n  connectionId: string;\r\n}\r\n\r\nconst Wire: React.FC<WireProps> = ({ connectionId }) => {\r\n  const jointIds = useSelector((state) =>\r\n    wireJointIdsFromConnectionIdSelector(state, connectionId)\r\n  );\r\n  const isPowered = useSelector((state) =>\r\n    wireValueFromConnectionIdSelector(state, connectionId)\r\n  );\r\n  const isSelected = useSelector((state) =>\r\n    isWireSelectedFromConnectionIdSelector(state, connectionId)\r\n  );\r\n\r\n  // We need one extra array entry for starting on the last jointId and ending at null (end of wire)\r\n  const segmentElements = [...jointIds, null].map((endJointId, index) => {\r\n    const startJointId = index > 0 ? jointIds[index - 1] : null;\r\n    return (\r\n      <WireSegment\r\n        key={index}\r\n        connectionId={connectionId}\r\n        startJointId={startJointId}\r\n        endJointId={endJointId}\r\n      />\r\n    );\r\n  });\r\n\r\n  const jointElements = jointIds.map((jointId) => (\r\n    <WireJoint key={jointId} jointId={jointId} />\r\n  ));\r\n\r\n  return (\r\n    <g\r\n      className={cls(\r\n        styles[\"wire\"],\r\n        isPowered && styles[\"powered\"],\r\n        isSelected && styles[\"selected\"]\r\n      )}\r\n    >\r\n      {segmentElements}\r\n      {jointElements}\r\n    </g>\r\n  );\r\n};\r\n\r\nexport default Wire;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"wire\":\"Wire-module__wire___[fullhash-base64-5]\",\"powered\":\"Wire-module__powered___[fullhash-base64-5]\",\"selected\":\"Wire-module__selected___[fullhash-base64-5]\"};","import * as React from \"react\";\r\n\r\nimport useSelector from \"@/hooks/useSelector\";\r\n\r\nimport { connectionIdsForEditingCircuitSelector } from \"@/services/circuit-editor-ui/selectors/nodes\";\r\n\r\nimport Wire from \"./Wire\";\r\n\r\nconst WiresLayer: React.FC = () => {\r\n  const connectionIds = useSelector(connectionIdsForEditingCircuitSelector);\r\n  const connectorElements = connectionIds.map((connectionId) => (\r\n    <Wire key={connectionId} connectionId={connectionId} />\r\n  ));\r\n\r\n  return <g id=\"wires-layer\">{connectorElements}</g>;\r\n};\r\nexport default WiresLayer;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"node-pin-output\":\"NodePin-module__node-pin-output___[fullhash-base64-5]\",\"is-drag-target\":\"NodePin-module__is-drag-target___[fullhash-base64-5]\",\"node-pin-input\":\"NodePin-module__node-pin-input___[fullhash-base64-5]\"};","import * as React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { cls } from \"@/utils\";\r\nimport { Point } from \"@/geometry\";\r\nimport { getModifiers, getSelectMode } from \"@/selection-mode\";\r\n\r\nimport useSelector from \"@/hooks/useSelector\";\r\nimport useMouseTracking from \"@/hooks/useMouseTracking\";\r\n\r\nimport { nodePinPositionFromNodePinSelector } from \"@/services/node-layout/selectors/node-pin-positions\";\r\nimport { pinDirectionFromNodePinSelector } from \"@/services/node-graph/selectors/pins\";\r\nimport { dragWireTargetPinSelector } from \"@/services/circuit-editor-ui/selectors/drag\";\r\n\r\nimport { fieldDragStartWire } from \"@/actions/field-drag-start-wire\";\r\nimport { fieldDragEnd } from \"@/actions/field-drag-end\";\r\nimport { fieldDragContinue } from \"@/actions/field-drag-continue\";\r\n\r\nimport { useEventMouseCoords } from \"../../hooks/useMouseCoords\";\r\n\r\nimport styles from \"./NodePin.module.css\";\r\n\r\nexport interface NodePinProps {\r\n  nodeId: string;\r\n  pinId: string;\r\n}\r\n\r\nconst NodePin: React.FC<NodePinProps> = ({ nodeId, pinId }) => {\r\n  const getMouseCoords = useEventMouseCoords();\r\n  const dispatch = useDispatch();\r\n\r\n  const position = useSelector((s) =>\r\n    nodePinPositionFromNodePinSelector(s, nodeId, pinId)\r\n  );\r\n  const direction = useSelector((s) =>\r\n    pinDirectionFromNodePinSelector(s, nodeId, pinId)\r\n  );\r\n\r\n  const dragTargetPin = useSelector(dragWireTargetPinSelector);\r\n\r\n  const onDragStart = React.useCallback(\r\n    (e) => {\r\n      const p = getMouseCoords(e);\r\n      dispatch(fieldDragStartWire(p, { nodeId, pinId }));\r\n    },\r\n    [getMouseCoords, nodeId, pinId]\r\n  );\r\n\r\n  const onDragMove = React.useCallback(\r\n    (offset: Point, e: MouseEvent) => {\r\n      const p = getMouseCoords(e);\r\n      dispatch(fieldDragContinue(p));\r\n    },\r\n    [getMouseCoords]\r\n  );\r\n\r\n  const onDragEnd = React.useCallback(\r\n    (offset: Point, e: MouseEvent) => {\r\n      const p = getMouseCoords(e);\r\n      const modifiers = getModifiers(e);\r\n      const mode = getSelectMode(modifiers);\r\n      dispatch(fieldDragEnd(p, mode));\r\n    },\r\n    [getMouseCoords]\r\n  );\r\n\r\n  const { startTracking } = useMouseTracking({\r\n    onDragStart,\r\n    onDragMove,\r\n    onDragEnd,\r\n  });\r\n\r\n  const onMouseDown = React.useCallback((e: React.MouseEvent) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    startTracking(e);\r\n  }, []);\r\n\r\n  if (!position) {\r\n    return null;\r\n  }\r\n\r\n  const isDragTarget =\r\n    dragTargetPin != null &&\r\n    dragTargetPin.nodeId === nodeId &&\r\n    dragTargetPin.pinId === pinId;\r\n\r\n  const { x, y } = position;\r\n\r\n  if (direction === \"input\") {\r\n    return (\r\n      <path\r\n        d={describeArc(x, y, 3, -45, 225)}\r\n        className={cls(\r\n          styles[\"node-pin-input\"],\r\n          isDragTarget && styles[\"is-drag-target\"]\r\n        )}\r\n        onMouseDown={onMouseDown}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <circle\r\n      className={cls(\r\n        styles[\"node-pin-output\"],\r\n        isDragTarget && styles[\"is-drag-target\"]\r\n      )}\r\n      cx={x}\r\n      cy={y}\r\n      r={3}\r\n      onMouseDown={onMouseDown}\r\n    />\r\n  );\r\n};\r\n\r\nexport default NodePin;\r\n\r\n// Arc code from https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\r\nfunction describeArc(\r\n  x: number,\r\n  y: number,\r\n  radius: number,\r\n  startAngle: number,\r\n  endAngle: number\r\n): string {\r\n  var start = polarToCartesian(x, y, radius, endAngle);\r\n  var end = polarToCartesian(x, y, radius, startAngle);\r\n\r\n  var largeArcFlag = endAngle - startAngle <= 180 ? \"0\" : \"1\";\r\n\r\n  var d = [\r\n    \"M\",\r\n    start.x,\r\n    start.y,\r\n    \"A\",\r\n    radius,\r\n    radius,\r\n    0,\r\n    largeArcFlag,\r\n    0,\r\n    end.x,\r\n    end.y,\r\n  ].join(\" \");\r\n\r\n  return d;\r\n}\r\n\r\nfunction polarToCartesian(\r\n  centerX: number,\r\n  centerY: number,\r\n  radius: number,\r\n  angleInDegrees: number\r\n): Point {\r\n  var angleInRadians = ((angleInDegrees - 90) * Math.PI) / 180.0;\r\n\r\n  return {\r\n    x: centerX + radius * Math.cos(angleInRadians),\r\n    y: centerY + radius * Math.sin(angleInRadians),\r\n  };\r\n}\r\n","import NodePin from \"./NodePin\";\r\nexport default NodePin;\r\n","import * as React from \"react\";\r\n\r\nimport useSelector from \"@/hooks/useSelector\";\r\n\r\nimport { nodeDefFromNodeIdSelector } from \"@/services/node-graph/selectors/node-def\";\r\n\r\nimport NodePin from \"./NodePin\";\r\n\r\nexport interface NodePinsProps {\r\n  nodeId: string;\r\n}\r\n\r\nconst NodePins: React.FC<NodePinsProps> = ({ nodeId }) => {\r\n  const def = useSelector((state) => nodeDefFromNodeIdSelector(state, nodeId));\r\n\r\n  const pins = def?.pins ?? {};\r\n\r\n  const elements = Object.keys(pins).map((pinId) => (\r\n    <NodePin key={pinId} nodeId={nodeId} pinId={pinId} />\r\n  ));\r\n\r\n  return <>{elements}</>;\r\n};\r\n\r\nexport default NodePins;\r\n","import * as React from \"react\";\r\n\r\nimport useSelector from \"@/hooks/useSelector\";\r\n\r\nimport { nodeIdsForEditingCircuitSelector } from \"@/services/circuit-editor-ui/selectors/nodes\";\r\n\r\nimport NodePins from \"./NodePins\";\r\n\r\nconst NodePinsLayer: React.FC = () => {\r\n  const nodeIds = useSelector(nodeIdsForEditingCircuitSelector);\r\n\r\n  const elements = nodeIds.map((nodeId) => (\r\n    <NodePins key={nodeId} nodeId={nodeId} />\r\n  ));\r\n\r\n  return <g id=\"node-pins-layer\">{elements}</g>;\r\n};\r\n\r\nexport default NodePinsLayer;\r\n","import * as React from \"react\";\r\n\r\nimport useSelector from \"@/hooks/useSelector\";\r\n\r\nimport {\r\n  dragEndSelector,\r\n  dragModeSelector,\r\n  dragStartSelector,\r\n} from \"@/services/circuit-editor-ui/selectors/drag\";\r\n\r\nconst DragAttachWirePreviewLayer: React.FC = () => {\r\n  const dragMode = useSelector(dragModeSelector);\r\n  const dragStart = useSelector(dragStartSelector);\r\n  const dragEnd = useSelector(dragEndSelector);\r\n\r\n  if (dragMode != \"wire\" || !dragStart || !dragEnd) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <line\r\n      x1={dragStart.x}\r\n      y1={dragStart.y}\r\n      x2={dragEnd.x}\r\n      y2={dragEnd.y}\r\n      stroke=\"black\"\r\n      strokeWidth={1}\r\n    />\r\n  );\r\n};\r\n\r\nexport default DragAttachWirePreviewLayer;\r\n","import CircuitField from \"./CircuitField\";\r\nexport default CircuitField;\r\n","import * as React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { cls } from \"@/utils\";\r\nimport { calcSize } from \"@/geometry\";\r\n\r\nimport useSelector from \"@/hooks/useSelector\";\r\n\r\nimport { fieldRectSelector } from \"@/services/node-layout/selectors/field\";\r\n\r\nimport { fieldMouseLeave } from \"@/actions/field-mouse-leave\";\r\n\r\nimport { FieldSvgElementProvider } from \"./contexts/fieldSvgElement\";\r\n\r\nimport DragNewNodeLayer from \"./components/DragNewNodeLayer\";\r\nimport DragNodePreviewLayer from \"./components/DragNodePreviewLayer\";\r\nimport DragSelectLayer from \"./components/DragSelectLayer\";\r\nimport GridBackground from \"./components/GridBackground\";\r\nimport NodesLayer from \"./components/NodesLayer\";\r\nimport WiresLayer from \"./components/WiresLayer\";\r\nimport NodePinsLayer from \"./components/NodePinsLayer\";\r\nimport DragAttachWirePreviewLayer from \"./components/DragAttachWirePreviewLayer\";\r\n\r\nimport styles from \"./CircuitField.module.css\";\r\n\r\nconst CircuitField: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const fieldRect = useSelector(fieldRectSelector);\r\n  const { width, height } = calcSize(fieldRect);\r\n\r\n  const svgRef = React.useRef<SVGSVGElement>(null);\r\n\r\n  const onMouseDown = React.useCallback(() => {\r\n    svgRef.current?.focus();\r\n  }, []);\r\n\r\n  const onMouseLeave = React.useCallback(() => {\r\n    dispatch(fieldMouseLeave());\r\n  }, []);\r\n\r\n  return (\r\n    // svg seems to have an implicit bottom margin against its parent div.\r\n    //  Wrapping it in a div of the same size fixes it.\r\n    <div\r\n      className={cls(\"circuit-field\", styles[\"circuit-editor\"])}\r\n      style={{\r\n        width: `${width}px`,\r\n        height: `${height}px`,\r\n      }}\r\n    >\r\n      <svg\r\n        tabIndex={-1}\r\n        ref={svgRef}\r\n        width={width}\r\n        height={height}\r\n        onMouseDown={onMouseDown}\r\n        onMouseLeave={onMouseLeave}\r\n      >\r\n        <FieldSvgElementProvider value={svgRef}>\r\n          <GridBackground />\r\n          <DragSelectLayer />\r\n          <NodesLayer />\r\n          <WiresLayer />\r\n          <NodePinsLayer />\r\n          <DragAttachWirePreviewLayer />\r\n          <DragNodePreviewLayer />\r\n          <DragNewNodeLayer />\r\n        </FieldSvgElementProvider>\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CircuitField;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"circuit-editor\":\"CircuitField-module__circuit-editor___[fullhash-base64-5]\"};","import CircuitFieldView from \"./CircuitFieldView\";\r\nexport default CircuitFieldView;\r\n","import * as React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { HotKeys } from \"react-hotkeys\";\r\nimport { AnyAction } from \"redux\";\r\n\r\nimport { cls } from \"@/utils\";\r\nimport { useNativeEvent } from \"@/hooks/useNativeEvent\";\r\nimport useSelector from \"@/hooks/useSelector\";\r\n\r\nimport { viewScaleSelector } from \"@/services/circuit-editor-ui/selectors/view\";\r\n\r\nimport { viewZoom } from \"@/actions/view-zoom\";\r\nimport { tickSim } from \"@/actions/sim-tick\";\r\nimport { fastForwardSim } from \"@/actions/sim-fastforward\";\r\nimport { paste } from \"@/actions/clipboard-paste\";\r\nimport { selectionCopy } from \"@/actions/selection-copy\";\r\nimport { selectionDelete } from \"@/actions/selection-delete\";\r\nimport { selectAll } from \"@/actions/select-all\";\r\n\r\nimport keymap, {\r\n  KeymapHandler,\r\n  KEYMAP_SIM_STEP,\r\n  KEYMAP_SIM_FASTFORWARD,\r\n  KEYMAP_COPY,\r\n  KEYMAP_PASTE,\r\n  KEYMAP_DELETE,\r\n  KEYMAP_SELECT_ALL,\r\n} from \"./keymap\";\r\n\r\nimport CircuitField from \"./components/CircuitField\";\r\n\r\nimport styles from \"./CircuitFieldView.module.css\";\r\n\r\nexport interface CircuitFieldViewProps {\r\n  className?: string;\r\n}\r\n\r\nconst CircuitFieldView: React.FC<CircuitFieldViewProps> = ({ className }) => {\r\n  const viewRef = React.useRef<HTMLDivElement | null>(null);\r\n  const dispatch = useDispatch();\r\n  const scale = useSelector(viewScaleSelector);\r\n\r\n  const keyHandlers = React.useMemo(() => {\r\n    function createEventDispatcher(action: AnyAction): HotkeyHandler {\r\n      return (e?: KeyboardEvent) => {\r\n        if (e) {\r\n          if (e.defaultPrevented) {\r\n            return;\r\n          }\r\n          e.preventDefault();\r\n        }\r\n        dispatch(action);\r\n      };\r\n    }\r\n    let keyHandlers: KeymapHandler = {\r\n      [KEYMAP_SIM_STEP]: createEventDispatcher(tickSim(1)),\r\n      [KEYMAP_SIM_FASTFORWARD]: createEventDispatcher(fastForwardSim()),\r\n      [KEYMAP_SELECT_ALL]: createEventDispatcher(selectAll()),\r\n      [KEYMAP_COPY]: createEventDispatcher(selectionCopy()),\r\n      [KEYMAP_PASTE]: createEventDispatcher(paste()),\r\n      [KEYMAP_DELETE]: createEventDispatcher(selectionDelete()),\r\n    };\r\n    return keyHandlers;\r\n  }, []);\r\n\r\n  const onWheel = React.useCallback((e: WheelEvent) => {\r\n    if (e.defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (e.ctrlKey) {\r\n      dispatch(viewZoom(e.deltaY > 0 ? -1 : 1));\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  }, []);\r\n\r\n  // React listens to the root listener for all events,\r\n  //  and chrome assumes the root event listener for mouse events\r\n  //  never wants to preventDefault.\r\n  // We need to take a local event listener and mark it as not passive.\r\n  // https://github.com/facebook/react/issues/14856\r\n  useNativeEvent(viewRef, \"wheel\", onWheel, { passive: false });\r\n\r\n  return (\r\n    <div\r\n      className={cls(\r\n        \"circuit-field-view\",\r\n        className,\r\n        styles[\"circuit-field-view\"]\r\n      )}\r\n      ref={viewRef}\r\n    >\r\n      <div className={styles[\"circuit-field-content\"]}>\r\n        <div\r\n          className={cls(\r\n            \"zoom-container\",\r\n            styles[\"circuit-field-zoom-container\"]\r\n          )}\r\n          style={{\r\n            transform: `scale(${scale})`,\r\n          }}\r\n        >\r\n          <HotKeys keyMap={keymap} handlers={keyHandlers}>\r\n            <CircuitField />\r\n          </HotKeys>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CircuitFieldView;\r\n","import * as React from \"react\";\r\n\r\nexport function useNativeEvent<\r\n  T extends GlobalEventHandlers,\r\n  K extends keyof GlobalEventHandlersEventMap\r\n>(\r\n  ref: React.RefObject<T | null>,\r\n  type: K,\r\n  listener: (\r\n    this: GlobalEventHandlers,\r\n    ev: GlobalEventHandlersEventMap[K]\r\n  ) => any,\r\n  options?: boolean | AddEventListenerOptions\r\n) {\r\n  React.useEffect(() => {\r\n    if (!ref.current) {\r\n      return;\r\n    }\r\n\r\n    // De-reference the target so we remove from the right element.\r\n    const listenTarget = ref.current;\r\n\r\n    listenTarget.addEventListener(type, listener, options);\r\n    return () => {\r\n      listenTarget.removeEventListener(type, listener, options);\r\n    };\r\n  }, [ref.current, type, listener]);\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"circuit-field-view\":\"CircuitFieldView-module__circuit-field-view___[fullhash-base64-5]\",\"circuit-field-content\":\"CircuitFieldView-module__circuit-field-content___[fullhash-base64-5]\",\"circuit-field-zoom-container\":\"CircuitFieldView-module__circuit-field-zoom-container___[fullhash-base64-5]\"};","// extracted by mini-css-extract-plugin\nexport default {\"circuitstree\":\"CircuitsTree-module__circuitstree___[fullhash-base64-5]\"};","import * as React from \"react\";\r\nimport { Dispatch } from \"redux\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { EditableText, MenuDivider } from \"@blueprintjs/core\";\r\n\r\nimport {\r\n  Tree,\r\n  ITreeNode,\r\n  Menu,\r\n  MenuItem,\r\n  ContextMenu,\r\n} from \"@blueprintjs/core\";\r\n\r\nimport useSelector from \"@/hooks/useSelector\";\r\n\r\nimport { deleteCircuit } from \"@/actions/circuit-delete\";\r\n\r\nimport { editingCircuitIdSelector } from \"@/services/circuit-editor-ui/selectors/circuit\";\r\nimport {\r\n  circuitNameFromIdSelector,\r\n  circuitNamesByIdSelector,\r\n} from \"@/services/circuits/selectors/circuits\";\r\nimport { editCircuit } from \"@/actions/circuit-edit\";\r\nimport { addCircuit } from \"@/actions/circuit-add\";\r\nimport { renameCircuit } from \"@/actions/circuit-rename\";\r\n\r\nimport styles from \"./CircuitsTree.module.css\";\r\n\r\nconst CircuitsTree: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const editingCircuitId = useSelector(editingCircuitIdSelector);\r\n  const circuitNamesById = useSelector(circuitNamesByIdSelector);\r\n\r\n  const onNodeClick = React.useCallback(\r\n    (node: ITreeNode) => {\r\n      dispatch(editCircuit(node.id as string));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const onContextMenu = React.useCallback(\r\n    (e: React.MouseEvent<HTMLDivElement>) => {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n\r\n      ContextMenu.show(<CircuitTreeContextMenu dispatch={dispatch} />, {\r\n        left: e.pageX,\r\n        top: e.pageY,\r\n      });\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const treeItems: ITreeNode[] = React.useMemo(\r\n    () =>\r\n      Object.keys(circuitNamesById).map((circuitId) => {\r\n        return {\r\n          id: circuitId,\r\n          label: <CircuitTreeNodeCircuitLabel circuitId={circuitId} />,\r\n          isSelected: circuitId === editingCircuitId,\r\n        };\r\n      }),\r\n    [circuitNamesById, editingCircuitId]\r\n  );\r\n\r\n  return (\r\n    <div className={styles.circuitstree} onContextMenu={onContextMenu}>\r\n      <Tree contents={treeItems} onNodeClick={onNodeClick} />\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface CircuitTreeNodeLabelProps {\r\n  circuitId: string;\r\n}\r\n\r\nconst CircuitTreeNodeCircuitLabel: React.FC<CircuitTreeNodeLabelProps> = ({\r\n  circuitId,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  const circuitName = useSelector((state) =>\r\n    circuitNameFromIdSelector(state, circuitId)\r\n  );\r\n  const [isRenaming, setIsRenaming] = React.useState(false);\r\n\r\n  const onStartRename = React.useCallback(() => {\r\n    setIsRenaming(true);\r\n  }, []);\r\n\r\n  const onCancelRename = React.useCallback(() => {\r\n    setIsRenaming(false);\r\n  }, []);\r\n\r\n  const onRename = React.useCallback(\r\n    (newName) => {\r\n      dispatch(renameCircuit(circuitId, newName));\r\n      setIsRenaming(false);\r\n    },\r\n    [circuitId]\r\n  );\r\n\r\n  const onDelete = React.useCallback(() => {\r\n    dispatch(deleteCircuit(circuitId));\r\n  }, [dispatch, circuitId]);\r\n\r\n  const onContextMenu = React.useCallback(\r\n    (e: React.MouseEvent<HTMLElement>) => {\r\n      if (circuitId === \"root\") {\r\n        return;\r\n      }\r\n\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n\r\n      ContextMenu.show(\r\n        <Menu>\r\n          <MenuItem text=\"Rename Circuit\" onClick={onStartRename} />\r\n          <MenuDivider />\r\n          <MenuItem text=\"Delete Circuit\" onClick={onDelete} />\r\n        </Menu>,\r\n        { left: e.pageX, top: e.pageY }\r\n      );\r\n    },\r\n    []\r\n  );\r\n\r\n  if (isRenaming) {\r\n    return (\r\n      <EditableText\r\n        isEditing={true}\r\n        defaultValue={circuitName}\r\n        onConfirm={onRename}\r\n        onCancel={onCancelRename}\r\n      />\r\n    );\r\n  } else {\r\n    return (\r\n      <div\r\n        style={{ width: \"100%\" }}\r\n        onContextMenu={onContextMenu}\r\n        onDoubleClick={onStartRename}\r\n      >\r\n        {circuitName}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\ninterface CircuitTreeContextMenuProps {\r\n  // Dispatch must be passed in externally, as ContextMenu.show starts\r\n  //  a new redux tree and has no provider.\r\n  dispatch: Dispatch<any>;\r\n}\r\nconst CircuitTreeContextMenu: React.FC<CircuitTreeContextMenuProps> = ({\r\n  dispatch,\r\n}) => {\r\n  const onNewCircuit = React.useCallback(() => {\r\n    dispatch(addCircuit());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <Menu>\r\n      <MenuItem text=\"New Circuit\" onClick={onNewCircuit} />\r\n    </Menu>\r\n  );\r\n};\r\n\r\nexport default CircuitsTree;\r\n","import * as React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { typedKeys } from \"@/utils\";\r\n\r\nimport useMouseTracking from \"@/hooks/useMouseTracking\";\r\n\r\nimport {\r\n  nodeDefinitionFromTypeSelector,\r\n  nodeDefinitionsSelector,\r\n} from \"@/services/node-types/selectors/node-types\";\r\nimport { NodeComponentType } from \"@/services/node-types/types/visual\";\r\n\r\nimport { addNode } from \"@/actions/node-add\";\r\nimport { fieldDragStartNewNode } from \"@/actions/field-drag-start-newnode\";\r\nimport { fieldDragEnd } from \"@/actions/field-drag-end\";\r\n\r\nimport styles from \"./NodeTray.module.css\";\r\nimport useSelector from \"@/hooks/useSelector\";\r\n\r\nconst NodeTray: React.FC = () => {\r\n  const nodeDefinitions = useSelector(nodeDefinitionsSelector);\r\n  const nodes = nodeDefinitions.map((def) => {\r\n    return <TrayNode key={def.type} nodeType={def.type} />;\r\n  });\r\n\r\n  return (\r\n    <div className={styles[\"nodetray\"]}>\r\n      <div className={styles[\"nodetray-elements\"]}>{nodes}</div>\r\n    </div>\r\n  );\r\n};\r\nexport default NodeTray;\r\n\r\ninterface TrayNodeProps {\r\n  nodeType: string;\r\n}\r\nconst TrayNode: React.FC<TrayNodeProps> = ({ nodeType }) => {\r\n  const dispatch = useDispatch();\r\n  const onClick = React.useCallback(\r\n    (e: MouseEvent) => {\r\n      if (e.defaultPrevented) {\r\n        return;\r\n      }\r\n      e.preventDefault();\r\n      dispatch(addNode(nodeType));\r\n    },\r\n    [nodeType]\r\n  );\r\n\r\n  const onDragStart = React.useCallback(() => {\r\n    dispatch(fieldDragStartNewNode(nodeType));\r\n  }, [nodeType]);\r\n\r\n  const onDragEnd = React.useCallback(() => {\r\n    // We do not know the point from here, and selection mode is irrelevant.\r\n    dispatch(fieldDragEnd({ x: -1, y: -1 }, \"set\"));\r\n  }, []);\r\n\r\n  const { startTracking } = useMouseTracking({\r\n    onClick,\r\n    onDragStart,\r\n    onDragEnd,\r\n  });\r\n\r\n  const onMouseDown = React.useCallback((e: React.MouseEvent) => {\r\n    startTracking(e);\r\n  }, []);\r\n\r\n  const def = useSelector((state) =>\r\n    nodeDefinitionFromTypeSelector(state, nodeType)\r\n  );\r\n\r\n  let NodeComponent: NodeComponentType;\r\n  if (def) {\r\n    NodeComponent = def.visual.component;\r\n  } else {\r\n    NodeComponent = () => <rect fill=\"red\" x1={0} y1={0} x2={50} y2={50} />;\r\n  }\r\n\r\n  return (\r\n    <div onMouseDown={onMouseDown}>\r\n      {/* FIXME: Settle on a decent size and shrink overly large nodes to fit */}\r\n      <svg width={75} height={75}>\r\n        <NodeComponent elementState={{}} />\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\n","import useSelector from \"@/hooks/useSelector\";\r\nimport { averageMsecsPerTickSelector } from \"@/services/simulator/selectors/performance\";\r\nimport * as React from \"react\";\r\n\r\nimport { Mosaic, MosaicBranch, MosaicWindow } from \"react-mosaic-component\";\r\n\r\nimport CircuitFieldView from \"./components/CircuitFieldView\";\r\nimport CircuitsTree from \"./components/CircuitsTree\";\r\nimport NodeTray from \"./components/NodeTray\";\r\n\r\nexport interface CircuitEditorProps {\r\n  className?: string;\r\n}\r\n\r\n// TODO: MosaicWindows should be implemented by these components\r\nconst CircuitField: React.FC<{ path: MosaicBranch[]; id: string }> = ({\r\n  path,\r\n  id,\r\n}) => {\r\n  const avgMsecsPerTick = useSelector(averageMsecsPerTickSelector);\r\n  const title = `Circuit Field (${avgMsecsPerTick} ms)`;\r\n  return (\r\n    <MosaicWindow path={path} title={title}>\r\n      <CircuitFieldView />\r\n    </MosaicWindow>\r\n  );\r\n};\r\n\r\nfunction wrapInDummyWindow(\r\n  Component: React.ComponentType\r\n): React.FC<{ id: string; path: MosaicBranch[] }> {\r\n  return ({ id, path }) => (\r\n    <MosaicWindow path={path} title={id}>\r\n      <Component />\r\n    </MosaicWindow>\r\n  );\r\n}\r\n\r\nconst WindowMap = {\r\n  \"node-tray\": wrapInDummyWindow(NodeTray),\r\n  \"circuit-field\": CircuitField,\r\n  \"circuit-tree\": wrapInDummyWindow(CircuitsTree),\r\n};\r\n\r\nconst CircuitEditor: React.FC<CircuitEditorProps> = ({ className }) => {\r\n  return (\r\n    <div className={className}>\r\n      <Mosaic<keyof typeof WindowMap>\r\n        renderTile={(id, path) => {\r\n          const Component = WindowMap[id];\r\n          return <Component id={id as any} path={path} />;\r\n        }}\r\n        initialValue={{\r\n          direction: \"row\",\r\n          first: \"node-tray\",\r\n          second: {\r\n            direction: \"row\",\r\n            first: \"circuit-field\",\r\n            second: \"circuit-tree\",\r\n            splitPercentage: 60,\r\n          },\r\n          splitPercentage: 20,\r\n        }}\r\n      ></Mosaic>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CircuitEditor;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"nodetray\":\"NodeTray-module__nodetray___[fullhash-base64-5]\",\"nodetray-elements\":\"NodeTray-module__nodetray-elements___[fullhash-base64-5]\"};","import CircuitEditor from \"./CircuitEditor\";\r\nexport default CircuitEditor;\r\n","import * as React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { AnyAction } from \"redux\";\r\n\r\nexport function useAction(actionCreator: () => AnyAction): () => AnyAction;\r\nexport function useAction<Args>(\r\n  actionCreator: (...args: Args[]) => AnyAction\r\n): (...args: Args[]) => AnyAction;\r\nexport function useAction<A0, Args>(\r\n  actionCreator: (a0: A0, ...args: Args[]) => AnyAction,\r\n  a0: A0\r\n): (...args: Args[]) => AnyAction;\r\nexport function useAction(\r\n  actionCreator: (...args: any[]) => AnyAction,\r\n  ...preBind: any[]\r\n): (...args: any[]) => AnyAction {\r\n  const dispatch = useDispatch();\r\n  return React.useCallback(\r\n    (...args: any[]) => {\r\n      const action = actionCreator(...[...preBind, ...args]);\r\n      if (action) {\r\n        dispatch(action);\r\n      }\r\n    },\r\n    [actionCreator, ...preBind]\r\n  ) as any;\r\n}\r\n","import * as React from \"react\";\r\n\r\nconst PlayIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => {\r\n  return (\r\n    <svg width={16} height={16} {...props}>\r\n      <path d=\"M3,0 L13,8 L3,16 z\" />\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default PlayIcon;\r\n","import * as React from \"react\";\r\n\r\nconst StopIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => {\r\n  return (\r\n    <svg width={16} height={16} {...props}>\r\n      <path d=\"M1,1 L15,1 L15,15 L1,15 z\" />\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default StopIcon;\r\n","import * as React from \"react\";\r\n\r\nconst PauseIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => {\r\n  return (\r\n    <svg width={16} height={16} {...props}>\r\n      <path d=\"M2.5,1 L6.5,1 L6.5,15 L2.5,15 z M9.5,1 L13.5,1 L13.5,15 L9.5,15 z\" />\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default PauseIcon;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"SimControls-module__button___[fullhash-base64-5]\",\"button-play\":\"SimControls-module__button-play___[fullhash-base64-5]\",\"button-stop\":\"SimControls-module__button-stop___[fullhash-base64-5]\",\"button-pause\":\"SimControls-module__button-pause___[fullhash-base64-5]\",\"selected\":\"SimControls-module__selected___[fullhash-base64-5]\",\"button--disabled\":\"SimControls-module__button--disabled___[fullhash-base64-5]\"};","import SimControls from \"./SimControls\";\r\nexport default SimControls;\r\n","import * as React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { cls } from \"@/utils\";\r\n\r\nimport useSelector from \"@/hooks/useSelector\";\r\n\r\nimport {\r\n  isSimActiveSelector,\r\n  isSimPausedSelector,\r\n} from \"@/services/simulator/selectors/run\";\r\n\r\nimport { startSim } from \"@/actions/sim-start\";\r\nimport { stopSim } from \"@/actions/sim-stop\";\r\nimport { pauseSim } from \"@/actions/sim-pause\";\r\nimport { useAction } from \"@/hooks/useAction\";\r\n\r\nimport PlayIcon from \"../Icons/Play\";\r\nimport StopIcon from \"../Icons/Stop\";\r\nimport PauseIcon from \"../Icons/Pause\";\r\n\r\nimport styles from \"./SimControls.module.css\";\r\n\r\nconst PlayPauseButton: React.FC = () => {\r\n  const isActive = useSelector(isSimActiveSelector);\r\n  const isPaused = useSelector(isSimPausedSelector);\r\n\r\n  const onPlayClick = useAction(startSim);\r\n  const onStopClick = useAction(stopSim);\r\n  const onPauseClick = useAction(pauseSim, \"toggle\");\r\n\r\n  return (\r\n    <span>\r\n      {isActive ? (\r\n        <StopIcon\r\n          className={cls(styles[\"button\"], styles[\"button-stop\"])}\r\n          onClick={onStopClick}\r\n        />\r\n      ) : (\r\n        <PlayIcon\r\n          className={cls(styles[\"button\"], styles[\"button-play\"])}\r\n          onClick={onPlayClick}\r\n        />\r\n      )}\r\n      <PauseIcon\r\n        className={cls(\r\n          styles[\"button\"],\r\n          styles[\"button-pause\"],\r\n          !isActive && styles[\"button--disabled\"],\r\n          isPaused && styles[\"selected\"]\r\n        )}\r\n        onClick={onPauseClick}\r\n      />\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default PlayPauseButton;\r\n","import * as React from \"react\";\r\nimport { Menu } from \"@blueprintjs/core\";\r\n\r\nimport { useAction } from \"@/hooks/useAction\";\r\nimport { newProject } from \"@/actions/project-new\";\r\nimport { saveProject } from \"@/actions/project-save\";\r\nimport { loadProject } from \"@/actions/project-load\";\r\n\r\nconst FileMenu: React.FC = () => {\r\n  const onNewProject = useAction(newProject);\r\n  const onSaveProject = useAction(saveProject);\r\n  const onLoadProject = useAction(loadProject);\r\n\r\n  return (\r\n    <Menu>\r\n      <Menu.Item onClick={onNewProject} icon=\"new-object\" text=\"New\" />\r\n      <Menu.Divider />\r\n      <Menu.Item onClick={onLoadProject} icon=\"document-open\" text=\"Load\" />\r\n      <Menu.Item onClick={onSaveProject} icon=\"saved\" text=\"Save\" />\r\n    </Menu>\r\n  );\r\n};\r\n\r\nexport default FileMenu;\r\n","import * as React from \"react\";\r\nimport { Navbar, Alignment, Popover, Button } from \"@blueprintjs/core\";\r\n\r\nimport SimControls from \"./SimControls\";\r\nimport FileMenu from \"./FileMenu\";\r\n\r\nconst TitleBar: React.FC = () => {\r\n  return (\r\n    <Navbar>\r\n      <Navbar.Group align={Alignment.LEFT}>\r\n        <Navbar.Heading>Discrelog</Navbar.Heading>\r\n        <Navbar.Divider />\r\n        <Popover content={<FileMenu />}>\r\n          <Button minimal icon=\"document\" text=\"File\" />\r\n        </Popover>\r\n      </Navbar.Group>\r\n      <Navbar.Group align={Alignment.RIGHT}>\r\n        <SimControls />\r\n      </Navbar.Group>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default TitleBar;\r\n","import { createDialogSelector } from \"../utils\";\r\n\r\nexport const dialogTypeSelector = createDialogSelector((s) => s.dialogType);\r\nexport const dialogDataSelector = createDialogSelector((s) => s.data);\r\n","import * as React from \"react\";\r\nimport { Dialog, Button, Intent, InputGroup, Classes } from \"@blueprintjs/core\";\r\n\r\nimport { useAction } from \"@/hooks/useAction\";\r\nimport { cancelDialog } from \"@/actions/dialog-response-cancel\";\r\nimport { acceptDialog } from \"@/actions/dialog-response-accept\";\r\n\r\nconst SaveProjectDialog: React.FC = () => {\r\n  const onCancelDialog = useAction(cancelDialog);\r\n  const onAcceptDialog = useAction(acceptDialog);\r\n\r\n  const [projectName, setProjectName] = React.useState<string>(\"\");\r\n  const onSetProjectName = React.useCallback(\r\n    (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      setProjectName(e.target.value);\r\n    },\r\n    []\r\n  );\r\n\r\n  const onAccept = React.useCallback(() => {\r\n    if (projectName === \"\") {\r\n      return;\r\n    }\r\n    onAcceptDialog(projectName);\r\n  }, [onAcceptDialog, projectName]);\r\n\r\n  return (\r\n    <Dialog\r\n      isOpen={true}\r\n      icon=\"saved\"\r\n      onClose={onCancelDialog}\r\n      title=\"Save Project\"\r\n      canEscapeKeyClose={true}\r\n      canOutsideClickClose={true}\r\n    >\r\n      <div className={Classes.DIALOG_BODY}>\r\n        <InputGroup\r\n          placeholder=\"Project Name\"\r\n          value={projectName}\r\n          onChange={onSetProjectName}\r\n        />\r\n      </div>\r\n      <div className={Classes.DIALOG_FOOTER}>\r\n        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\r\n          <Button onClick={onCancelDialog}>Cancel</Button>\r\n          <Button\r\n            intent={Intent.PRIMARY}\r\n            disabled={projectName === \"\"}\r\n            onClick={onAccept}\r\n          >\r\n            Save\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default SaveProjectDialog;\r\n","import DialogManager from \"./DialogManager\";\r\nexport default DialogManager;\r\n","import * as React from \"react\";\r\n\r\nimport useSelector from \"@/hooks/useSelector\";\r\nimport { dialogTypeSelector } from \"@/services/dialog/selectors/dialog\";\r\n\r\nimport SaveProjectDialog from \"./dialogs/SaveProjectDialog\";\r\n\r\nconst DialogManager: React.FC = () => {\r\n  const dialogType = useSelector(dialogTypeSelector);\r\n\r\n  switch (dialogType) {\r\n    case \"save-project\":\r\n      return <SaveProjectDialog />;\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\nexport default DialogManager;\r\n","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport \"./styles\";\r\n\r\nimport { store } from \"./store\";\r\n\r\nimport App from \"./components/App\";\r\n\r\nconst rootEl = document.getElementById(\"root\");\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  rootEl\r\n);\r\n","import * as React from \"react\";\r\n\r\n// import { isDev } from \"@/env\";\r\nimport { cls } from \"@/utils\";\r\n\r\nimport flex from \"@/styles/flex.module.css\";\r\nimport sizing from \"@/styles/sizing.module.css\";\r\n\r\nimport CircuitEditor from \"@/pages/CircuitEditor\";\r\n// import Intro from \"@/pages/Intro\";\r\n\r\nimport TitleBar from \"../TitleBar\";\r\nimport DialogManager from \"../DialogManager\";\r\n\r\nconst App: React.FC = () => {\r\n  // const [introShown, setIntroShown] = React.useState(isDev);\r\n  // const onDismiss = React.useCallback(() => {\r\n  //   setIntroShown(true);\r\n  // }, []);\r\n\r\n  // if (!introShown) {\r\n  //   return <Intro dismiss={onDismiss} />;\r\n  // }\r\n\r\n  return (\r\n    <div className={cls(sizing[\"fill-parent\"], flex[\"flex-column\"])}>\r\n      <DialogManager />\r\n      <TitleBar />\r\n      <CircuitEditor\r\n        className={cls(sizing[\"fill-parent\"], flex[\"flexitem-shrink\"])}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import * as React from \"react\";\r\n\r\nimport { NodeComponentProps, NodeComponentType } from \"../types\";\r\n\r\nexport interface NodeVisualPathDefinition {\r\n  /**\r\n   * The svg path of this visual element.\r\n   */\r\n  path: string;\r\n  /**\r\n   * The fill or fill-producing function for this visual element.\r\n   */\r\n  fill?: string | ((state: any) => string);\r\n  stroke?: string | ((state: any) => string);\r\n  strokeWidth?: number | ((state: any) => number);\r\n}\r\n\r\nexport type NodeVisualPath = string | NodeVisualPathDefinition;\r\n\r\nexport interface ShapePathNodeProps extends NodeComponentProps {\r\n  /**\r\n   * The path or paths that make up the visual component of this node.\r\n   */\r\n  shapePath: NodeVisualPath | NodeVisualPath[];\r\n}\r\n\r\nconst ShapePathNode: React.FC<ShapePathNodeProps> = ({\r\n  shapePath,\r\n  isSelected,\r\n  elementState,\r\n}) => {\r\n  const visuals = normalizeVisuals(shapePath, elementState);\r\n  const body = visuals.map((v, i) => (\r\n    <path\r\n      key={i}\r\n      d={v.path}\r\n      // FIXME: If selected, this should use variable --color-element-selected\r\n      fill={isSelected ? \"goldenrod\" : v.fill}\r\n      stroke={isSelected ? \"goldenrod\" : v.stroke}\r\n      strokeWidth={v.strokeWidth}\r\n    />\r\n  ));\r\n\r\n  return <g>{body}</g>;\r\n};\r\n\r\nexport function createShapePathNode(\r\n  shapePath: NodeVisualPath | NodeVisualPath[]\r\n): NodeComponentType {\r\n  return (props: NodeComponentProps) => (\r\n    <ShapePathNode shapePath={shapePath} {...props} />\r\n  );\r\n}\r\n\r\nexport function normalizeVisuals(\r\n  v: NodeVisualPath | NodeVisualPath[],\r\n  state: any\r\n): { path: string; fill?: string; stroke?: string; strokeWidth?: number }[] {\r\n  const asArray = Array.isArray(v) ? v : [v];\r\n\r\n  return asArray.map((x) => {\r\n    if (typeof x === \"string\") {\r\n      return {\r\n        path: x,\r\n        fill: \"black\",\r\n        stroke: \"black\",\r\n        strokeWidth: 2,\r\n      };\r\n    }\r\n    const fill = typeof x.fill === \"function\" ? x.fill(state || {}) : x.fill;\r\n    const stroke =\r\n      typeof x.stroke === \"function\" ? x.stroke(state || {}) : x.stroke;\r\n    const strokeWidth =\r\n      typeof x.strokeWidth === \"function\"\r\n        ? x.strokeWidth(state || {})\r\n        : x.strokeWidth;\r\n    return {\r\n      path: x.path,\r\n      fill,\r\n      stroke,\r\n      strokeWidth,\r\n    };\r\n  });\r\n}\r\n","import { ToggleElementState } from \"@/elements\";\r\n\r\nimport { createShapePathNode } from \"../../components/ShapePathNode\";\r\nimport { NodeDefinition } from \"../../types\";\r\n\r\nconst toggleElementDefinition: NodeDefinition = {\r\n  type: \"interaction-toggle\",\r\n  elementProduction: \"toggle\",\r\n  visual: {\r\n    hitPath: `M5,5 L45,5 L45,45 L5,45 z`,\r\n    component: createShapePathNode([\r\n      {\r\n        path: \"M5,5 L45,5 L45,45 L5,45 z\",\r\n        fill: \"#AFAFAF\",\r\n        stroke: \"black\",\r\n      },\r\n      {\r\n        path: \"M10,10 L40,10 L40,40 L10,40 z\",\r\n        fill: (state: ToggleElementState) =>\r\n          state.toggleState ? \"lightgreen\" : \"darkgreen\",\r\n        stroke: \"black\",\r\n      },\r\n    ]),\r\n  },\r\n  pins: {\r\n    OUT: {\r\n      direction: \"output\",\r\n      x: 45,\r\n      y: 25,\r\n    },\r\n  },\r\n};\r\nexport default toggleElementDefinition;\r\n","import * as React from \"react\";\r\n\r\nimport { NodeDefinition } from \"../../types\";\r\n\r\n// Shape path from https://commons.wikimedia.org/wiki/File:AND_ANSI.svg\r\n\r\nconst andNodeDefinition: NodeDefinition = {\r\n  type: \"logic-and\",\r\n  elementProduction: \"and\",\r\n  visual: {\r\n    hitPath: `M30 5V45H50.47619c11.267908 0 20-9.000045 20-20s-8.732091-20-20-20H30z`,\r\n    component: () => (\r\n      <g>\r\n        <path\r\n          className=\"node-select-highlight--stroke\"\r\n          fill=\"none\"\r\n          stroke=\"#000\"\r\n          strokeWidth=\"2\"\r\n          d=\"M70 25h25M31 15H5M32 35H5\"\r\n        />\r\n        <path\r\n          className=\"node-select-highlight--fill\"\r\n          d=\"M30 5V45H50.47619c11.267908 0 20-9.000045 20-20s-8.732091-20-20-20H30zm2.857143 2.857143H50.47619c9.760663 0 16.666667 7.639955 16.666667 17.142857 0 9.502902-7.382195 17.142857-17.142857 17.142857H32.857143V7.857143z\"\r\n        />\r\n      </g>\r\n    ),\r\n  },\r\n  pins: {\r\n    A: { direction: \"input\", x: 0, y: 14.5 },\r\n    B: { direction: \"input\", x: 0, y: 35 },\r\n    OUT: { direction: \"output\", x: 100, y: 25 },\r\n  },\r\n};\r\nexport default andNodeDefinition;\r\n","import * as React from \"react\";\r\n\r\nimport { NodeDefinition } from \"../../types\";\r\n\r\n// Shape path from https://commons.wikimedia.org/wiki/File:Buffer_ANSI.svg\r\n\r\nconst bufferNodeDefinition: NodeDefinition = {\r\n  type: \"logic-buffer\",\r\n  elementProduction: \"buffer\",\r\n  visual: {\r\n    hitPath: `M 28.96875,2.59375 L 28.96875,5 L 28.96875,45 L 28.96875,47.40625 L 31.125,46.34375 L 72.15625,26.34375 L 75,25 L 72.15625,23.65625 L 31.125,3.65625 L 28.96875,2.59375 z`,\r\n    component: () => (\r\n      <g>\r\n        <path\r\n          className=\"node-select-highlight--stroke\"\r\n          fill=\"none\"\r\n          stroke=\"black\"\r\n          strokeWidth=\"2\"\r\n          d=\"M 72,25 L 95.085706,25\"\r\n        />\r\n        <path\r\n          className=\"node-select-highlight--stroke\"\r\n          fill=\"none\"\r\n          stroke=\"black\"\r\n          strokeWidth=\"2\"\r\n          d=\"M 29.043478,25 L 5.0434781,25\"\r\n        />\r\n        <path\r\n          className=\"node-select-highlight--fill\"\r\n          stroke=\"none\"\r\n          fill=\"black\"\r\n          d=\"M 28.96875,2.59375 L 28.96875,5 L 28.96875,45 L 28.96875,47.40625 L 31.125,46.34375 L 72.15625,26.34375 L 75,25 L 72.15625,23.65625 L 31.125,3.65625 L 28.96875,2.59375 z M 31.96875,7.40625 L 68.09375,25 L 31.96875,42.59375 L 31.96875,7.40625 z\"\r\n        />\r\n      </g>\r\n    ),\r\n  },\r\n  pins: {\r\n    IN: {\r\n      direction: \"input\",\r\n      x: 0,\r\n      y: 25,\r\n    },\r\n    OUT: {\r\n      direction: \"output\",\r\n      x: 100,\r\n      y: 25,\r\n    },\r\n  },\r\n};\r\nexport default bufferNodeDefinition;\r\n","import * as React from \"react\";\r\n\r\nimport { NodeDefinition } from \"../../types\";\r\n\r\n// Shape path from https://commons.wikimedia.org/wiki/File:NOR_ANSI.svg\r\n\r\nconst norNodeDefinition: NodeDefinition = {\r\n  type: \"logic-nor\",\r\n  elementProduction: \"nor\",\r\n  visual: {\r\n    hitPath: `M24.09375 5l2 2.4375S31.75 14.437549 31.75 25s-5.65625 17.5625-5.65625 17.5625l-2 2.4375H41.25c2.408076.000001 7.689699.024514 13.625-2.40625s12.536536-7.343266 17.6875-16.875L71.25 25l1.3125-.71875C62.259387 5.21559 46.006574 5 41.25 5H24.09375z`,\r\n    component: () => (\r\n      <g>\r\n        <path\r\n          className=\"node-select-highlight--stroke\"\r\n          fill=\"none\"\r\n          stroke=\"#000\"\r\n          strokeWidth=\"2\"\r\n          d=\"M79 25h16M31 15H5M32 35H5\"\r\n        />\r\n        <path\r\n          className=\"node-select-highlight--fill\"\r\n          fillRule=\"evenodd\"\r\n          d=\"M24.09375 5l2 2.4375S31.75 14.437549 31.75 25s-5.65625 17.5625-5.65625 17.5625l-2 2.4375H41.25c2.408076.000001 7.689699.024514 13.625-2.40625s12.536536-7.343266 17.6875-16.875L71.25 25l1.3125-.71875C62.259387 5.21559 46.006574 5 41.25 5H24.09375zm5.875 3H41.25c4.684173 0 18.28685-.130207 27.96875 17C64.451964 33.429075 58.697469 37.68391 53.5 39.8125 48.139339 42.007924 43.658075 42.000001 41.25 42H30c1.873588-3.108434 4.75-9.04935 4.75-17 0-7.973354-2.908531-13.900185-4.78125-17z\"\r\n        />\r\n        <path\r\n          className=\"node-select-highlight--stroke\"\r\n          fill=\"none\"\r\n          stroke=\"#000\"\r\n          strokeWidth=\"3\"\r\n          d=\"M79 25a4 4 0 1 1-8 0 4 4 0 1 1 8 0z\"\r\n        />\r\n      </g>\r\n    ),\r\n  },\r\n  pins: {\r\n    A: {\r\n      direction: \"input\",\r\n      x: 0,\r\n      y: 14.5,\r\n    },\r\n    B: {\r\n      direction: \"input\",\r\n      x: 0,\r\n      y: 35,\r\n    },\r\n    OUT: {\r\n      direction: \"output\",\r\n      x: 100,\r\n      y: 25,\r\n    },\r\n  },\r\n};\r\nexport default norNodeDefinition;\r\n","import * as React from \"react\";\r\n\r\nimport { NodeDefinition } from \"../../types\";\r\n\r\n// Shape path from https://commons.wikimedia.org/wiki/File:NOT_ANSI.svg\r\n\r\nconst notNodeDefinition: NodeDefinition = {\r\n  type: \"logic-not\",\r\n  elementProduction: \"not\",\r\n  visual: {\r\n    hitPath: `M28.96875 2.59375v44.8125l2.15625-1.0625 41.03125-20v-2.6875l-41.03125-20-2.15625-1.0625z`,\r\n    component: () => (\r\n      <g>\r\n        <path\r\n          className=\"node-select-highlight--stroke\"\r\n          fill=\"none\"\r\n          stroke=\"#000\"\r\n          strokeWidth=\"2\"\r\n          d=\"M79.15691 25H95M29.043478 25h-24\"\r\n        />\r\n        <path\r\n          className=\"node-select-highlight--fill\"\r\n          d=\"M28.96875 2.59375v44.8125l2.15625-1.0625 41.03125-20v-2.6875l-41.03125-20-2.15625-1.0625zm3 4.8125L68.09375 25l-36.125 17.59375V7.40625z\"\r\n        />\r\n        <path\r\n          className=\"node-select-highlight--stroke\"\r\n          fill=\"none\"\r\n          stroke=\"#000\"\r\n          strokeWidth=\"3\"\r\n          d=\"M79 25a4 4 0 1 1-8 0 4 4 0 1 1 8 0z\"\r\n        />\r\n      </g>\r\n    ),\r\n  },\r\n  pins: {\r\n    IN: {\r\n      direction: \"input\",\r\n      x: 0,\r\n      y: 25,\r\n    },\r\n    OUT: {\r\n      direction: \"output\",\r\n      x: 100,\r\n      y: 25,\r\n    },\r\n  },\r\n};\r\nexport default notNodeDefinition;\r\n","import * as React from \"react\";\r\n\r\nimport { NodeDefinition } from \"../../types\";\r\n\r\n// Shape path from https://commons.wikimedia.org/wiki/File:OR_ANSI.svg\r\n\r\nconst orNodeDefinition: NodeDefinition = {\r\n  type: \"logic-or\",\r\n  elementProduction: \"or\",\r\n  visual: {\r\n    hitPath: `M24.09375 5l2 2.4375S31.75 14.437549 31.75 25s-5.65625 17.5625-5.65625 17.5625l-2 2.4375H41.25c2.408076.000001 7.689699.024514 13.625-2.40625s12.536536-7.343266 17.6875-16.875L71.25 25l1.3125-.71875C62.259387 5.21559 46.006574 5 41.25 5H24.09375z`,\r\n    component: () => (\r\n      <g>\r\n        <path\r\n          className=\"node-select-highlight--stroke\"\r\n          fill=\"none\"\r\n          stroke=\"#000\"\r\n          strokeWidth=\"2\"\r\n          d=\"M70 25h25M31 15H5M32 35H5\"\r\n        />\r\n        <path\r\n          className=\"node-select-highlight--fill\"\r\n          fillRule=\"evenodd\"\r\n          d=\"M24.09375 5l2 2.4375S31.75 14.437549 31.75 25s-5.65625 17.5625-5.65625 17.5625l-2 2.4375H41.25c2.408076.000001 7.689699.024514 13.625-2.40625s12.536536-7.343266 17.6875-16.875L71.25 25l1.3125-.71875C62.259387 5.21559 46.006574 5 41.25 5H24.09375zm5.875 3H41.25c4.684173 0 18.28685-.130207 27.96875 17C64.451964 33.429075 58.697469 37.68391 53.5 39.8125 48.139339 42.007924 43.658075 42.000001 41.25 42H30c1.873588-3.108434 4.75-9.04935 4.75-17 0-7.973354-2.908531-13.900185-4.78125-17z\"\r\n        />\r\n      </g>\r\n    ),\r\n  },\r\n  pins: {\r\n    A: {\r\n      direction: \"input\",\r\n      x: 0,\r\n      y: 14.5,\r\n    },\r\n    B: {\r\n      direction: \"input\",\r\n      x: 0,\r\n      y: 35,\r\n    },\r\n    OUT: {\r\n      direction: \"output\",\r\n      x: 100,\r\n      y: 25,\r\n    },\r\n  },\r\n};\r\nexport default orNodeDefinition;\r\n","import * as React from \"react\";\r\n\r\nimport { NodeDefinition } from \"../../types\";\r\n\r\n// Shape path from https://commons.wikimedia.org/wiki/File:XOR_ANSI.svg\r\n\r\nconst xorNodeDefinition: NodeDefinition = {\r\n  type: \"logic-xor\",\r\n  elementProduction: \"xor\",\r\n  visual: {\r\n    hitPath: `M24.09375 5l2 2.4375S31.75 14.43755 31.75 25s-5.65625 17.5625-5.65625 17.5625l-2 2.4375H41.25c2.40808 0 7.6897.02451 13.625-2.40625s12.53654-7.34327 17.6875-16.875L71.25 25l1.3125-.71875C62.25939 5.21559 46.00657 5 41.25 5H24.09375z`,\r\n    component: () => (\r\n      <g>\r\n        <path\r\n          className=\"node-select-highlight--stroke\"\r\n          fill=\"none\"\r\n          stroke=\"#000\"\r\n          strokeWidth=\"2\"\r\n          d=\"M70 25h25M30.38572 15H5M31.3621 35H5\"\r\n        />\r\n        <g fillRule=\"evenodd\" className=\"node-select-highlight--fill\">\r\n          <path d=\"M24.25 42C22.65263 44.6444 22 45 22 45h-3.65625l2-2.4375S26 35.56245 26 25 20.34375 7.4375 20.34375 7.4375l-2-2.4375H22c.78125.9375 1.42188 1.65625 2.21875 3C26.09147 11.09981 29 17.02665 29 25c0 7.95065-2.8967 13.87942-4.75 17z\" />\r\n          <path d=\"M24.09375 5l2 2.4375S31.75 14.43755 31.75 25s-5.65625 17.5625-5.65625 17.5625l-2 2.4375H41.25c2.40808 0 7.6897.02451 13.625-2.40625s12.53654-7.34327 17.6875-16.875L71.25 25l1.3125-.71875C62.25939 5.21559 46.00657 5 41.25 5H24.09375zm5.875 3H41.25c4.68417 0 18.28685-.1302 27.96875 17C64.45196 33.42907 58.69747 37.68391 53.5 39.8125 48.13934 42.00792 43.65808 42 41.25 42H30c1.87359-3.10843 4.75-9.04935 4.75-17 0-7.97335-2.90853-13.90019-4.78125-17z\" />\r\n        </g>\r\n      </g>\r\n    ),\r\n  },\r\n  pins: {\r\n    A: {\r\n      direction: \"input\",\r\n      x: 0,\r\n      y: 14.5,\r\n    },\r\n    B: {\r\n      direction: \"input\",\r\n      x: 0,\r\n      y: 35,\r\n    },\r\n    OUT: {\r\n      direction: \"output\",\r\n      x: 100,\r\n      y: 25,\r\n    },\r\n  },\r\n};\r\nexport default xorNodeDefinition;\r\n","import { LedElementState } from \"@/elements\";\r\n\r\nimport { createShapePathNode } from \"../../components/ShapePathNode\";\r\nimport { NodeDefinition } from \"../../types\";\r\n\r\nfunction genCirclePath(cx: number, cy: number, r: number): string {\r\n  return `M ${cx - r}, ${cy}\r\n    a ${r},${r} 0 1,0 ${r * 2},0\r\n    a ${r},${r} 0 1,0 ${-(r * 2)},0`;\r\n}\r\n\r\nconst path = genCirclePath(25, 25, 20);\r\n\r\nconst ledNodeDefinition: NodeDefinition = {\r\n  type: \"output-led\",\r\n  elementProduction: \"led\",\r\n  visual: {\r\n    hitPath: path,\r\n    component: createShapePathNode({\r\n      path,\r\n      stroke: \"black\",\r\n      strokeWidth: 3,\r\n      fill: (state: LedElementState) =>\r\n        state.value ? \"lightgreen\" : \"darkgreen\",\r\n    }),\r\n  },\r\n  pins: {\r\n    IN: {\r\n      direction: \"input\",\r\n      x: 0,\r\n      y: 25,\r\n    },\r\n  },\r\n};\r\nexport default ledNodeDefinition;\r\n","import {\r\n  createShapePathNode,\r\n  NodeVisualPathDefinition,\r\n} from \"../../components/ShapePathNode\";\r\nimport { NodeDefinition } from \"../../types\";\r\n\r\n// Shape path from https://commons.wikimedia.org/wiki/File:7-segment_abcdefg.svg\r\n\r\nconst SCALE = 3;\r\nconst OFFSET = [15, 0];\r\n\r\n/**\r\n * Produce a visual path definition of a segment given a series of polygon points.\r\n * The path definition will color itself based on the state key specified by 'name'\r\n * @param name The state key to select color based on.  The key should represent a boolean value.\r\n * @param points An array of [x,y] pairs that make up the polygon.\r\n */\r\nfunction createSeg(\r\n  name: string,\r\n  points: [number, number][]\r\n): NodeVisualPathDefinition {\r\n  const start = points[0];\r\n  let path = `M${start[0] * SCALE + OFFSET[0]},${start[1] * SCALE + OFFSET[1]}`;\r\n  for (let p of points.slice(1)) {\r\n    const [x, y] = p;\r\n    path += `L${x * SCALE + OFFSET[0]},${y * SCALE + OFFSET[1]}`;\r\n  }\r\n  path += \"z\";\r\n  return {\r\n    path,\r\n    fill: (state) => (state[name] ? \"red\" : \"gray\"),\r\n  };\r\n}\r\n\r\nconst seg7ElementDefinition: NodeDefinition = {\r\n  type: \"output-seg7\",\r\n  elementProduction: \"seg7\",\r\n  visual: {\r\n    hitPath: `M0,0 V63 H45 V0 z`,\r\n    component: createShapePathNode([\r\n      createSeg(\"A\", [\r\n        [1, 1],\r\n        [2, 0],\r\n        [8, 0],\r\n        [9, 1],\r\n        [8, 2],\r\n        [2, 2],\r\n      ]),\r\n      createSeg(\"B\", [\r\n        [9, 1],\r\n        [10, 2],\r\n        [10, 8],\r\n        [9, 9],\r\n        [8, 8],\r\n        [8, 2],\r\n      ]),\r\n      createSeg(\"C\", [\r\n        [9, 9],\r\n        [10, 10],\r\n        [10, 16],\r\n        [9, 17],\r\n        [8, 16],\r\n        [8, 10],\r\n      ]),\r\n      createSeg(\"D\", [\r\n        [9, 17],\r\n        [8, 18],\r\n        [2, 18],\r\n        [1, 17],\r\n        [2, 16],\r\n        [8, 16],\r\n      ]),\r\n      createSeg(\"E\", [\r\n        [1, 17],\r\n        [0, 16],\r\n        [0, 10],\r\n        [1, 9],\r\n        [2, 10],\r\n        [2, 16],\r\n      ]),\r\n      createSeg(\"F\", [\r\n        [1, 9],\r\n        [0, 8],\r\n        [0, 2],\r\n        [1, 1],\r\n        [2, 2],\r\n        [2, 8],\r\n      ]),\r\n      createSeg(\"G\", [\r\n        [1, 9],\r\n        [2, 8],\r\n        [8, 8],\r\n        [9, 9],\r\n        [8, 10],\r\n        [2, 10],\r\n      ]),\r\n    ]),\r\n  },\r\n  pins: {\r\n    A: {\r\n      direction: \"input\",\r\n      x: 0,\r\n      y: 5,\r\n    },\r\n    B: {\r\n      direction: \"input\",\r\n      x: 0,\r\n      y: 15,\r\n    },\r\n    C: {\r\n      direction: \"input\",\r\n      x: 0,\r\n      y: 25,\r\n    },\r\n    D: {\r\n      direction: \"input\",\r\n      x: 0,\r\n      y: 35,\r\n    },\r\n    E: {\r\n      direction: \"input\",\r\n      x: 0,\r\n      y: 45,\r\n    },\r\n    F: {\r\n      direction: \"input\",\r\n      x: 0,\r\n      y: 55,\r\n    },\r\n    G: {\r\n      direction: \"input\",\r\n      x: 0,\r\n      y: 65,\r\n    },\r\n  },\r\n};\r\nexport default seg7ElementDefinition;\r\n","import * as React from \"react\";\r\n\r\nimport { NodeDefinition } from \"../../types\";\r\n\r\nconst pinInputElementDefinition: NodeDefinition = {\r\n  type: \"pin-input\",\r\n  visual: {\r\n    hitPath: `M15,25 a 10,10 0 1,0 20 0 a 10,10 0 1,0 -20,0`,\r\n    component: () => (\r\n      <path\r\n        className=\"node-select-highlight--stroke\"\r\n        d=\"M15,25 a 10,10 0 1,0 20 0 a 10,10 0 1,0 -20,0 M35,25 h5\"\r\n        stroke=\"black\"\r\n        fill=\"none\"\r\n      />\r\n    ),\r\n  },\r\n  pins: {\r\n    OUT: {\r\n      direction: \"output\",\r\n      x: 40,\r\n      y: 25,\r\n    },\r\n  },\r\n};\r\nexport default pinInputElementDefinition;\r\n","import * as React from \"react\";\r\n\r\nimport { NodeDefinition } from \"../../types\";\r\n\r\nconst pinOutputElementDefinition: NodeDefinition = {\r\n  type: \"pin-output\",\r\n  visual: {\r\n    hitPath: `M15,25 a 10,10 0 1,0 20 0 a 10,10 0 1,0 -20,0`,\r\n    component: () => (\r\n      <path\r\n        className=\"node-select-highlight--stroke\"\r\n        d=\"M15,25 a 10,10 0 1,0 20 0 a 10,10 0 1,0 -20,0 M15,25 h-5\"\r\n        stroke=\"black\"\r\n        fill=\"none\"\r\n      />\r\n    ),\r\n  },\r\n  pins: {\r\n    IN: {\r\n      direction: \"input\",\r\n      x: 10,\r\n      y: 25,\r\n    },\r\n  },\r\n};\r\nexport default pinOutputElementDefinition;\r\n"],"sourceRoot":""}