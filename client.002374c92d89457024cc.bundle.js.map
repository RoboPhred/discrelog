{"version":3,"sources":["webpack://discrelog/./src/actions/node-interact.ts","webpack://discrelog/./src/elements/constants.ts","webpack://discrelog/./src/elements/definitions/input-momentary.ts","webpack://discrelog/./src/elements/definitions/input-toggle.ts","webpack://discrelog/./src/elements/definitions/logic-and.ts","webpack://discrelog/./src/elements/definitions/logic-buffer.ts","webpack://discrelog/./src/elements/definitions/logic-nand.ts","webpack://discrelog/./src/elements/definitions/logic-nor.ts","webpack://discrelog/./src/elements/definitions/logic-not.ts","webpack://discrelog/./src/elements/definitions/logic-or.ts","webpack://discrelog/./src/elements/definitions/logic-xor.ts","webpack://discrelog/./src/elements/definitions/output-led.ts","webpack://discrelog/./src/elements/definitions/output-seg7.ts","webpack://discrelog/./src/elements/definitions/pin-high.ts","webpack://discrelog/./src/geometry.ts","webpack://discrelog/./src/history.ts","webpack://discrelog/./src/services/circuit-editor-ui-drag/state.ts","webpack://discrelog/./src/services/circuits/constants.ts","webpack://discrelog/./src/services/circuits/state.ts","webpack://discrelog/./src/services/clipboard/state.ts","webpack://discrelog/./src/services/dialog/state.ts","webpack://discrelog/./src/services/node-graph/state.ts","webpack://discrelog/./src/services/node-layout/state.ts","webpack://discrelog/./src/services/project/state.ts","webpack://discrelog/./src/services/selection/state.ts","webpack://discrelog/./src/services/simulator/state.ts","webpack://discrelog/./src/services/simulator-control/state.ts","webpack://discrelog/./src/utils.ts","webpack://discrelog/./src/styles/sizing.module.css?9a43","webpack://discrelog/./src/styles/flex.module.css?f6f1","webpack://discrelog/./src/components/Tessel/types.ts","webpack://discrelog/./src/hooks/useRefValue.ts","webpack://discrelog/./src/components/Tessel/Tessel.module.css?d43a","webpack://discrelog/./src/components/Tessel/TesselSplit.tsx","webpack://discrelog/./src/components/Tessel/TesselContext.tsx","webpack://discrelog/./src/components/Tessel/TesselSplitFrame.tsx","webpack://discrelog/./src/components/Tessel/TesselFrame.tsx","webpack://discrelog/./src/arrays.ts","webpack://discrelog/./src/hooks/useComponentBounds.ts","webpack://discrelog/./src/components/Tessel/drag-items/tessel-window.tsx","webpack://discrelog/./src/components/Tessel/TesselDropCapture.tsx","webpack://discrelog/./src/components/Tessel/utils.ts","webpack://discrelog/./src/components/Tessel/Tessel.tsx","webpack://discrelog/./src/components/Tessel/index.ts","webpack://discrelog/./src/pages/CircuitEditorPage/windows/CircuitFieldWindow/tessel-window.ts","webpack://discrelog/./src/services/ui-layout/state.ts","webpack://discrelog/./src/services/ui-settings/state.ts","webpack://discrelog/./src/services/state.ts","webpack://discrelog/./src/undo/state.ts","webpack://discrelog/./src/store/state.ts","webpack://discrelog/./src/env.ts","webpack://discrelog/./src/actions/init.ts","webpack://discrelog/./src/actions/circuit-add.ts","webpack://discrelog/./src/actions/circuit-delete.ts","webpack://discrelog/./src/actions/circuit-rename.ts","webpack://discrelog/./src/actions/node-add.ts","webpack://discrelog/./src/actions/node-delete.ts","webpack://discrelog/./src/actions/node-rename.ts","webpack://discrelog/./src/actions/selection-align-to-grid.ts","webpack://discrelog/./src/actions/selection-delete.ts","webpack://discrelog/./src/actions/selection-move.ts","webpack://discrelog/./src/actions/wire-attach.ts","webpack://discrelog/./src/actions/wire-detatch.ts","webpack://discrelog/./src/actions/wire-joint-add.ts","webpack://discrelog/./src/actions/wire-joint-move.ts","webpack://discrelog/./src/actions/wire-joint-delete.ts","webpack://discrelog/./src/actions/clipboard-paste.ts","webpack://discrelog/./src/actions/field-drag-end.ts","webpack://discrelog/./src/actions/undo.ts","webpack://discrelog/./src/actions/redo.ts","webpack://discrelog/./src/actions/project-new.ts","webpack://discrelog/./src/actions/project-receive.ts","webpack://discrelog/./src/project-mutation-actions.ts","webpack://discrelog/./src/undo/utils.ts","webpack://discrelog/./src/store/utils.ts","webpack://discrelog/./src/actions/field-drag-continue.ts","webpack://discrelog/./src/services/service-state-utils.ts","webpack://discrelog/./src/services/circuit-editor-ui-drag/utils.ts","webpack://discrelog/./src/services/circuit-editor-ui-drag/reducer/drag-continue.ts","webpack://discrelog/./src/selection-mode.ts","webpack://discrelog/./src/actions/select-region.ts","webpack://discrelog/./src/services/circuit-editor-ui-drag/selectors/snap.ts","webpack://discrelog/./src/runtime-env.ts","webpack://discrelog/./src/modifier-keys.ts","webpack://discrelog/./src/services/node-graph/utils.ts","webpack://discrelog/./src/services/node-graph/selectors/nodes.ts","webpack://discrelog/./src/services/circuits/utils.ts","webpack://discrelog/./src/services/circuits/selectors/nodes.ts","webpack://discrelog/./src/services/node-layout/utils.ts","webpack://discrelog/./src/services/node-layout/selectors/node-positions.ts","webpack://discrelog/./src/nodes/definitions/integrated-circuits/utils.ts","webpack://discrelog/./src/services/circuits/selectors/circuits.ts","webpack://discrelog/./src/nodes/definitions/integrated-circuits/index.tsx","webpack://discrelog/./src/nodes/definitions/interaction/index.ts","webpack://discrelog/./src/nodes/definitions/index.ts","webpack://discrelog/./src/nodes/definitions/logic/index.ts","webpack://discrelog/./src/nodes/definitions/output/index.ts","webpack://discrelog/./src/nodes/definitions/pins/index.ts","webpack://discrelog/./src/services/node-types/selectors/node-types.ts","webpack://discrelog/./src/services/node-layout/selectors/node-pin-positions.ts","webpack://discrelog/./src/services/selection/utils.ts","webpack://discrelog/./src/services/selection/selectors/selection.ts","webpack://discrelog/./src/services/circuit-editor-ui-drag/selectors/drag.ts","webpack://discrelog/./src/actions/field-drag-start-joint.ts","webpack://discrelog/./src/actions/select-wire-joints.ts","webpack://discrelog/./src/services/circuits/selectors/connections.ts","webpack://discrelog/./src/services/circuits/selectors/joints.ts","webpack://discrelog/./src/actions/field-drag-start-newjoint.ts","webpack://discrelog/./src/services/circuit-editor-ui-drag/reducer/drag-start-newjoint.ts","webpack://discrelog/./src/actions/field-drag-start-node.ts","webpack://discrelog/./src/actions/select-nodes.ts","webpack://discrelog/./src/actions/field-drag-start-select.ts","webpack://discrelog/./src/services/circuit-editor-ui-drag/reducer/drag-start-select.ts","webpack://discrelog/./src/actions/field-drag-start-wire.ts","webpack://discrelog/./src/services/circuit-editor-ui-drag/reducer/drag-start-wire.ts","webpack://discrelog/./src/actions/field-mouse-leave.ts","webpack://discrelog/./src/services/circuit-editor-ui-drag/reducer/index.ts","webpack://discrelog/./src/services/circuit-editor-ui-drag/reducer/drag-end.ts","webpack://discrelog/./src/services/circuit-editor-ui-drag/reducer/drag-start-joint.ts","webpack://discrelog/./src/services/circuit-editor-ui-drag/reducer/drag-start-node.ts","webpack://discrelog/./src/services/circuit-editor-ui-drag/reducer/mouse-leave.ts","webpack://discrelog/./src/services/circuits/reducer/circuit-add.ts","webpack://discrelog/./src/services/circuits/reducer/circuit-delete.ts","webpack://discrelog/./src/services/circuits/reducer/circuit-rename.ts","webpack://discrelog/./src/services/circuits/reducer/node-add.ts","webpack://discrelog/./src/services/circuits/reducer/node-delete.ts","webpack://discrelog/./src/services/circuits/reducer/index.ts","webpack://discrelog/./src/services/circuits/reducer/project-new.ts","webpack://discrelog/./src/actions/clipboard-copy.ts","webpack://discrelog/./src/services/node-graph/types.ts","webpack://discrelog/./src/services/node-graph/selectors/connections.ts","webpack://discrelog/./src/services/node-graph/selectors/node-def.ts","webpack://discrelog/./src/services/node-graph/selectors/pins.ts","webpack://discrelog/./src/services/clipboard/utils.ts","webpack://discrelog/./src/services/clipboard/reducer/index.ts","webpack://discrelog/./src/services/clipboard/reducer/clipboard-copy.ts","webpack://discrelog/./src/services/clipboard/reducer/clipboard-paste.ts","webpack://discrelog/./src/actions/dialog-response-accept.ts","webpack://discrelog/./src/services/dialog/utils.ts","webpack://discrelog/./src/services/dialog/reducer/dialog-response-accept.ts","webpack://discrelog/./src/actions/dialog-response-cancel.ts","webpack://discrelog/./src/services/dialog/reducer/dialog-response-cancel.ts","webpack://discrelog/./src/actions/dialog-show.ts","webpack://discrelog/./src/services/dialog/reducer/index.ts","webpack://discrelog/./src/services/dialog/reducer/dialog-show.ts","webpack://discrelog/./src/store/priorities.ts","webpack://discrelog/./src/services/node-graph/reducer/operations/node-delete.ts","webpack://discrelog/./src/services/node-graph/reducer/circuit-delete.ts","webpack://discrelog/./src/services/node-graph/reducer/node-add.ts","webpack://discrelog/./src/services/node-graph/reducer/node-delete.ts","webpack://discrelog/./src/services/node-graph/reducer/node-rename.ts","webpack://discrelog/./src/services/node-graph/reducer/index.ts","webpack://discrelog/./src/services/node-graph/reducer/project-new.ts","webpack://discrelog/./src/services/node-graph/reducer/wire-attach.ts","webpack://discrelog/./src/services/node-graph/reducer/wire-detatch.ts","webpack://discrelog/./src/services/node-layout/reducer/operations/node-delete.ts","webpack://discrelog/./src/services/node-layout/reducer/circuit-delete.ts","webpack://discrelog/./src/services/node-layout/reducer/node-add.ts","webpack://discrelog/./src/services/node-layout/reducer/node-delete.ts","webpack://discrelog/./src/actions/node-move.ts","webpack://discrelog/./src/services/node-layout/reducer/node-move.ts","webpack://discrelog/./src/services/node-layout/reducer/index.ts","webpack://discrelog/./src/services/node-layout/reducer/project-new.ts","webpack://discrelog/./src/services/node-layout/reducer/wire-attach.ts","webpack://discrelog/./src/services/node-layout/reducer/wire-detatch.ts","webpack://discrelog/./src/services/node-layout/reducer/wire-joint-add.ts","webpack://discrelog/./src/services/node-layout/reducer/wire-joint-delete.ts","webpack://discrelog/./src/services/node-layout/reducer/wire-joint-move.ts","webpack://discrelog/./src/services/savedata/types.ts","webpack://discrelog/./src/services/node-layout/selectors/wires.ts","webpack://discrelog/./src/services/savedata/errors.ts","webpack://discrelog/./src/services/savedata/api.ts","webpack://discrelog/./src/services/project/reducer/autosave.ts","webpack://discrelog/./src/services/project/utils.ts","webpack://discrelog/./src/services/project/reducer/project-modified.ts","webpack://discrelog/./src/services/project/reducer/project-new.ts","webpack://discrelog/./src/actions/project-rename.ts","webpack://discrelog/./src/services/project/reducer/project-rename.ts","webpack://discrelog/./src/actions/project-save.ts","webpack://discrelog/./src/services/project/reducer/index.ts","webpack://discrelog/./src/services/project/reducer/init.ts","webpack://discrelog/./src/services/project/reducer/project-receive.ts","webpack://discrelog/./src/services/project/reducer/project-save-success.ts","webpack://discrelog/./src/services/selection/reducer/node-delete.ts","webpack://discrelog/./src/services/selection/reducer/project-new.ts","webpack://discrelog/./src/actions/select-all.ts","webpack://discrelog/./src/services/selection/reducer/select-all.ts","webpack://discrelog/./src/actions/select-clear.ts","webpack://discrelog/./src/services/selection/reducer/select-clear.ts","webpack://discrelog/./src/services/selection/reducer/select-joints.ts","webpack://discrelog/./src/services/selection/reducer/select-nodes.ts","webpack://discrelog/./src/services/node-layout/selectors/node-bounds.ts","webpack://discrelog/./src/services/selection/reducer/select-region.ts","webpack://discrelog/./src/actions/select-wires.ts","webpack://discrelog/./src/services/selection/reducer/select-wires.ts","webpack://discrelog/./src/actions/selection-copy.ts","webpack://discrelog/./src/services/selection/reducer/index.ts","webpack://discrelog/./src/services/selection/reducer/selection-align-to-grid.ts","webpack://discrelog/./src/services/selection/reducer/selection-copy.ts","webpack://discrelog/./src/services/selection/reducer/selection-delete.ts","webpack://discrelog/./src/services/selection/reducer/selection-move.ts","webpack://discrelog/./src/services/selection/reducer/wire-detatch.ts","webpack://discrelog/./src/services/simulator/utils.ts","webpack://discrelog/./src/services/simulator/reducer/element-graph-invalidated.ts","webpack://discrelog/./src/elements/definitions/index.ts","webpack://discrelog/./src/services/simulator-graph/utils.ts","webpack://discrelog/./src/services/simulator-graph/graph-production.ts","webpack://discrelog/./src/nodes/types/element-production.ts","webpack://discrelog/./src/services/simulator-graph/types.ts","webpack://discrelog/./src/services/simulator-graph/selectors/graph.ts","webpack://discrelog/./src/services/simulator-graph/selectors/nodes.ts","webpack://discrelog/./src/services/simulator-graph/selectors/connections.ts","webpack://discrelog/./src/services/simulator/reducer/utils.ts","webpack://discrelog/./src/services/simulator/reducer/node-interact.ts","webpack://discrelog/./src/actions/sim-fastforward.ts","webpack://discrelog/./src/services/simulator/reducer/sim-fastforward.ts","webpack://discrelog/./src/actions/sim-start.ts","webpack://discrelog/./src/services/simulator/reducer/sim-start.ts","webpack://discrelog/./src/actions/sim-step.ts","webpack://discrelog/./src/actions/sim-tick.ts","webpack://discrelog/./src/actions/sim-stop.ts","webpack://discrelog/./src/services/simulator/reducer/sim-stop.ts","webpack://discrelog/./src/services/simulator/reducer/index.ts","webpack://discrelog/./src/services/simulator/reducer/sim-step.ts","webpack://discrelog/./src/services/simulator/reducer/sim-tick.ts","webpack://discrelog/./src/services/simulator-control/utils.ts","webpack://discrelog/./src/services/simulator-control/reducers/element-graph-invalidated.ts","webpack://discrelog/./src/actions/sim-pause.ts","webpack://discrelog/./src/services/simulator-control/selectors/run.ts","webpack://discrelog/./src/services/simulator-control/reducers/index.ts","webpack://discrelog/./src/services/simulator-control/reducers/sim-pause.ts","webpack://discrelog/./src/services/simulator-control/reducers/sim-start.ts","webpack://discrelog/./src/services/simulator-control/reducers/sim-step.ts","webpack://discrelog/./src/services/simulator-control/reducers/sim-stop.ts","webpack://discrelog/./src/services/ui-layout/utils.ts","webpack://discrelog/./src/services/ui-layout/reducer/circuit-delete.ts","webpack://discrelog/./src/actions/layout-rearrange.ts","webpack://discrelog/./src/services/ui-layout/reducer/layout-rearrange.ts","webpack://discrelog/./src/actions/view-activate.ts","webpack://discrelog/./src/services/ui-layout/reducer/view-activate.ts","webpack://discrelog/./src/actions/view-circuit.ts","webpack://discrelog/./src/services/ui-layout/reducer/view-circuit.ts","webpack://discrelog/./src/actions/view-reset.ts","webpack://discrelog/./src/services/ui-layout/reducer/index.ts","webpack://discrelog/./src/services/ui-layout/reducer/view-reset.ts","webpack://discrelog/./src/actions/view-node-names.ts","webpack://discrelog/./src/services/ui-settings/utils.ts","webpack://discrelog/./src/services/ui-settings/reducer/index.ts","webpack://discrelog/./src/services/ui-settings/reducer/view-node-names.ts","webpack://discrelog/./src/store/reducer.ts","webpack://discrelog/./src/services/reducer.ts","webpack://discrelog/./src/store/devtool-sanitizer.ts","webpack://discrelog/./src/services/dialog/api.ts","webpack://discrelog/./src/actions/project-export-link.ts","webpack://discrelog/./src/services/project/saga/project-export-link.ts","webpack://discrelog/./src/actions/project-import-link.ts","webpack://discrelog/./src/services/project/saga/project-import-link.ts","webpack://discrelog/./src/actions/project-load.ts","webpack://discrelog/./src/services/project/saga/project-load.ts","webpack://discrelog/./src/services/project/selectors/project.ts","webpack://discrelog/./src/services/project/saga/project-save.ts","webpack://discrelog/./src/services/project/saga/index.ts","webpack://discrelog/./src/services/simulator-control/saga/mode-run.ts","webpack://discrelog/./src/services/simulator-control/saga/index.ts","webpack://discrelog/./src/store/saga.ts","webpack://discrelog/./src/store/store.ts","webpack://discrelog/./src/undo/reducer/index.ts","webpack://discrelog/./src/undo/reducer/undo.ts","webpack://discrelog/./src/undo/reducer/redo.ts","webpack://discrelog/./src/undo/reducer/capture-undo-state.ts","webpack://discrelog/./src/hooks/useSelector.ts","webpack://discrelog/./src/services/saga.ts","webpack://discrelog/./src/services/ui-layout/selectors/layout.ts","webpack://discrelog/./src/components/Button/Button.module.css?a282","webpack://discrelog/./src/components/Button/index.ts","webpack://discrelog/./src/components/Button/Button.tsx","webpack://discrelog/./src/components/CircuitNodeBreadcrumb/CircuitNodeBreadcrumb.tsx","webpack://discrelog/./src/components/CircuitNodeBreadcrumb/index.ts","webpack://discrelog/./src/components/CircuitNodeBreadcrumb/CircuitNodeBreadcrumb.module.css?4319","webpack://discrelog/./src/services/node-layout/selectors/field.ts","webpack://discrelog/./src/components/Menus/MenuCloseContext.ts","webpack://discrelog/./src/components/Popover/PopoverChildContext.tsx","webpack://discrelog/./src/components/Popover/index.ts","webpack://discrelog/./src/components/Popover/Popover.tsx","webpack://discrelog/./src/hooks/useArrayState.ts","webpack://discrelog/./src/hooks/useOutsideMouseEvent.ts","webpack://discrelog/./src/components/ContextMenu.tsx","webpack://discrelog/./src/components/Menus/Menus.module.css?27a7","webpack://discrelog/./src/components/Menus/Menu.tsx","webpack://discrelog/./src/components/Menus/MenuItem.tsx","webpack://discrelog/./src/components/Menus/DividerMenuItem.tsx","webpack://discrelog/./src/components/CircuitField/components/ContextMenuItems.tsx","webpack://discrelog/./src/components/CircuitField/components/FieldContextMenu.tsx","webpack://discrelog/./src/components/CircuitField/drag-items/new-node.ts","webpack://discrelog/./src/components/CircuitField/components/CircuitFieldSurface/contexts/fieldSvgElement.tsx","webpack://discrelog/./src/components/CircuitField/circuit-field-context.tsx","webpack://discrelog/./src/components/CircuitField/utils.ts","webpack://discrelog/./src/components/CircuitField/components/CircuitFieldSurface/hooks/useMouseCoords.ts","webpack://discrelog/./src/styles/interaction.module.css?621c","webpack://discrelog/./src/services/simulator/selectors/nodes.ts","webpack://discrelog/./src/nodes/visuals/node-visuals.module.css?b45e","webpack://discrelog/./src/nodes/visuals/index.tsx","webpack://discrelog/./src/nodes/visuals/IntegratedCircuitNode.tsx","webpack://discrelog/./src/nodes/visuals/MomentaryInteractionNode.tsx","webpack://discrelog/./src/nodes/visuals/ToggleInteractionNode.tsx","webpack://discrelog/./src/components/CircuitField/components/CircuitFieldSurface/components/NodeVisual.tsx","webpack://discrelog/./src/components/CircuitField/components/CircuitFieldSurface/components/DragNewNodeLayer.tsx","webpack://discrelog/./src/components/CircuitField/components/CircuitFieldSurface/components/DragNodePreviewLayer.tsx","webpack://discrelog/./src/components/CircuitField/components/CircuitFieldSurface/components/WireJointVisual/WireJointVisual.tsx","webpack://discrelog/./src/components/CircuitField/components/CircuitFieldSurface/components/WireJointVisual/index.ts","webpack://discrelog/./src/components/CircuitField/components/CircuitFieldSurface/components/WireJointVisual/WireJointVisual.module.css?175d","webpack://discrelog/./src/components/CircuitField/components/CircuitFieldSurface/components/DragJointPreviewLayer.tsx","webpack://discrelog/./src/hooks/useMouseTracking.ts","webpack://discrelog/./src/components/CircuitField/viewport-context.tsx","webpack://discrelog/./src/components/CircuitField/components/CircuitFieldSurface/components/DragSelectLayer.tsx","webpack://discrelog/./src/components/CircuitField/components/CircuitFieldSurface/components/GridBackground.tsx","webpack://discrelog/./src/services/ui-settings/selectors/node-name.ts","webpack://discrelog/./src/components/AtomicTextInput.tsx","webpack://discrelog/./src/components/EditableText.tsx","webpack://discrelog/./src/components/Menus/EditableTextMenuItem.tsx","webpack://discrelog/./src/components/CircuitField/components/CircuitFieldSurface/components/NodeContextMenu.tsx","webpack://discrelog/./src/components/CircuitField/components/CircuitFieldSurface/components/Node/Node.tsx","webpack://discrelog/./src/components/CircuitField/components/CircuitFieldSurface/components/Node/index.ts","webpack://discrelog/./src/components/CircuitField/components/CircuitFieldSurface/components/NodesLayer.tsx","webpack://discrelog/./src/services/simulator/selectors/wires.ts","webpack://discrelog/./src/components/CircuitField/components/CircuitFieldSurface/components/WireSegment.tsx","webpack://discrelog/./src/components/CircuitField/components/CircuitFieldSurface/components/WireJoint.tsx","webpack://discrelog/./src/components/CircuitField/components/CircuitFieldSurface/components/Wire/index.ts","webpack://discrelog/./src/components/CircuitField/components/CircuitFieldSurface/components/Wire/Wire.tsx","webpack://discrelog/./src/components/CircuitField/components/CircuitFieldSurface/components/Wire/Wire.module.css?b8f1","webpack://discrelog/./src/components/CircuitField/components/CircuitFieldSurface/components/WiresLayer.tsx","webpack://discrelog/./src/components/CircuitField/components/CircuitFieldSurface/components/NodePin/NodePin.module.css?46cf","webpack://discrelog/./src/components/CircuitField/components/CircuitFieldSurface/components/NodePin/index.ts","webpack://discrelog/./src/components/CircuitField/components/CircuitFieldSurface/components/NodePin/NodePin.tsx","webpack://discrelog/./src/components/CircuitField/components/CircuitFieldSurface/components/NodePins.tsx","webpack://discrelog/./src/components/CircuitField/components/CircuitFieldSurface/components/NodePinsLayer.tsx","webpack://discrelog/./src/components/CircuitField/components/CircuitFieldSurface/components/DragAttachWirePreviewLayer.tsx","webpack://discrelog/./src/components/CircuitField/components/CircuitFieldSurface/index.ts","webpack://discrelog/./src/components/CircuitField/components/CircuitFieldSurface/CircuitFieldSurface.tsx","webpack://discrelog/./src/components/CircuitField/components/CircuitFieldSurface/CircuitFieldSurface.module.css?7f73","webpack://discrelog/./src/components/CircuitField/CircuitField.tsx","webpack://discrelog/./src/hooks/useNativeEvent.ts","webpack://discrelog/./src/components/CircuitField/index.ts","webpack://discrelog/./src/components/CircuitField/CircuitField.module.css?4e6b","webpack://discrelog/./src/components/Icons/Icons.module.css?682c","webpack://discrelog/./src/components/Icons/Close.tsx","webpack://discrelog/./src/components/Tessel/TesselWindow.tsx","webpack://discrelog/./src/pages/CircuitEditorPage/windows/CircuitFieldWindow/keymap.ts","webpack://discrelog/./src/pages/CircuitEditorPage/windows/CircuitFieldWindow/CircuitFieldWindow.tsx","webpack://discrelog/./src/components/SelectionList/SelectionList.tsx","webpack://discrelog/./src/components/SelectionList/SelectionList.module.css?89a4","webpack://discrelog/./src/components/SelectionList/index.ts","webpack://discrelog/./src/pages/CircuitEditorPage/windows/CircuitsTreeWindow/CircuitsTreeWindow.tsx","webpack://discrelog/./src/components/Tooltip/index.ts","webpack://discrelog/./src/components/Tooltip/Tooltip.tsx","webpack://discrelog/./src/components/Tooltip/Tooltip.module.css?a017","webpack://discrelog/./src/pages/CircuitEditorPage/windows/NodeTrayWindow/NodeTrayWindow.tsx","webpack://discrelog/./src/pages/CircuitEditorPage/windows/NodeTrayWindow/NodeTrayWindow.module.css?4e22","webpack://discrelog/./src/pages/CircuitEditorPage/CircuitEditorPage.tsx","webpack://discrelog/./src/pages/CircuitEditorPage/windows/CircuitsTreeWindow/CircuitsTreeWindow.module.css?897d","webpack://discrelog/./src/pages/CircuitEditorPage/index.ts","webpack://discrelog/./src/pages/ProjectImporterPage/index.ts","webpack://discrelog/./src/pages/ProjectImporterPage/ProjectImporterPage.tsx","webpack://discrelog/./src/router.tsx","webpack://discrelog/./src/components/AutoPopover.tsx","webpack://discrelog/./src/hooks/useAction.ts","webpack://discrelog/./src/components/FileMenu.tsx","webpack://discrelog/./src/undo/selectors.ts","webpack://discrelog/./src/components/EditMenu.tsx","webpack://discrelog/./src/components/Checkbox/index.ts","webpack://discrelog/./src/components/Checkbox/Checkbox.tsx","webpack://discrelog/./src/components/Checkbox/Checkbox.module.css?4fe9","webpack://discrelog/./src/components/Menus/CheckboxMenuItem.tsx","webpack://discrelog/./src/components/Menus/SubMenuItem.tsx","webpack://discrelog/./src/components/ViewMenu.tsx","webpack://discrelog/./src/services/simulator/selectors/performance.ts","webpack://discrelog/./src/components/Icons/Play.tsx","webpack://discrelog/./src/components/Icons/Stop.tsx","webpack://discrelog/./src/components/Icons/Pause.tsx","webpack://discrelog/./src/components/Icons/Step.tsx","webpack://discrelog/./src/components/SimControls/SimControls.module.css?8dc8","webpack://discrelog/./src/components/SimControls/index.ts","webpack://discrelog/./src/components/SimControls/SimControls.tsx","webpack://discrelog/./src/components/TitleBar/index.ts","webpack://discrelog/./src/components/TitleBar/TitleBar.tsx","webpack://discrelog/./src/components/TitleBar/TitleBar.module.css?c6e3","webpack://discrelog/./src/services/dialog/selectors/dialog.ts","webpack://discrelog/./src/components/Modal/Modal.module.css?d409","webpack://discrelog/./src/components/Modal/index.ts","webpack://discrelog/./src/components/Modal/Modal.tsx","webpack://discrelog/./src/components/Dialog/index.ts","webpack://discrelog/./src/components/Dialog/Dialog.tsx","webpack://discrelog/./src/components/Dialog/Dialog.module.css?a332","webpack://discrelog/./src/components/DialogManager/dialogs/ExportLinkDialog.tsx","webpack://discrelog/./src/components/DialogManager/dialogs/ExportLinkDialog.module.css?17f2","webpack://discrelog/./src/components/DialogManager/index.ts","webpack://discrelog/./src/components/DialogManager/DialogManager.tsx","webpack://discrelog/./src/index.tsx","webpack://discrelog/./src/components/App/App.tsx","webpack://discrelog/./src/nodes/definitions/interaction/momentary.tsx","webpack://discrelog/./src/nodes/definitions/interaction/toggle.tsx","webpack://discrelog/./src/nodes/definitions/logic/and.tsx","webpack://discrelog/./src/nodes/definitions/logic/buffer.tsx","webpack://discrelog/./src/nodes/definitions/logic/nand.tsx","webpack://discrelog/./src/nodes/definitions/logic/nor.tsx","webpack://discrelog/./src/nodes/definitions/logic/not.tsx","webpack://discrelog/./src/nodes/definitions/logic/or.tsx","webpack://discrelog/./src/nodes/definitions/logic/xor.tsx","webpack://discrelog/./src/nodes/definitions/output/led.ts","webpack://discrelog/./src/nodes/definitions/output/seg7.ts","webpack://discrelog/./src/nodes/definitions/pins/high.tsx","webpack://discrelog/./src/nodes/definitions/pins/input.tsx","webpack://discrelog/./src/nodes/definitions/pins/output.tsx","webpack://discrelog/./src/nodes/visuals/ShapePathNode.tsx","webpack://discrelog/./src/nodes/visuals/static-node-visual.tsx","webpack://discrelog/./src/svg.ts"],"names":["ACTION_NODE_INTERACT","interactNode","circuitNodeIdPath","data","type","payload","isInteractNodeAction","action","ELEMENT_TRANSISTER_RESPONSE_TIME","inputPins","outputPins","interact","state","undefined","transitions","tickOffset","valuesByPin","OUT","Math","round","defaultToggleState","toggleState","nextState","Object","assign","evolve","_","inputs","A","B","IN","value","pointSchema","shape","x","required","y","ZeroPoint","freeze","ZeroRect","p1","p2","boundsToRect","bounds","snapPoint","p","snap","magnitude","v","sqrt","normalize","m","dotProduct","a","b","scale","scaler","normalizeRectangle","args","length","r","min","max","offsetRectangle","rect","offset","pointAdd","pointSubtract","pointEquals","pointIntersects","calcSize","width","height","union","r1","r2","intersects","defaultCircuitEditorUiDragServiceState","dragMode","dragCircuitId","dragModifierKeys","dragStart","dragEnd","dragNewJointConnectionId","dragNewJointAfterJointId","dragWireSource","ROOT_CIRCUIT_ID","circuitNamesByCircuitId","nodeIdsByCircuitId","defaultCircuitsServiceState","defaultClipboardServiceState","clipboardNodes","clipboardPasteOrigin","defaultDialogServiceState","dialogType","defaultNodeGraphServiceState","nodesById","connectionsById","defaultNodeLayoutServiceState","nodePositionsById","wireJointIdsByConnectionId","wireJointPositionsByJointId","defaultProjectServiceState","projectName","projectModified","defaultSelectionServiceState","selectedNodeIds","selectedConnectionIds","selectedJointIds","defaultSimulatorServiceState","initialized","tick","lastTickProcessingTimeMs","nodeStatesByNodeId","nodeOutputValuesByNodeId","transitionsById","transitionWindows","defaultSimulatorControlServiceState","mode","ticksPerSecond","cls","values","filter","Boolean","join","fpSet","fpSetByArray","slice","map","String","target","path","firstPaths","lastPath","newData","clone","rollingTarget","seg","obj","Array","isArray","isTruthy","windowId","isTesselWindow","item","normalizeTesselDivision","firstPercent","isTesselPercentDivision","isTesselFixedDivision","useRefValue","ref","current","top","left","bottom","right","toJSON","direction","onChangePercentage","pointerCaptureRef","directionRef","onChangePercentageRef","onHandlePointerMove","e","parentRect","parentElement","getBoundingClientRect","percentage","position","pageX","isNaN","pageY","leading","onPointerMove","persist","onPointerDown","defaultPrevented","preventDefault","setPointerCapture","pointerId","onPointerUp","releasePointerCapture","className","tesselPathContext","useTesselPath","TesselPathProvider","pathKey","children","newPath","Provider","noop","tesselInteractionContext","moveWindow","closeWindow","useTesselInteraction","TesselInteractionProvider","context","applyDivisionChange","division","percent","absolute","secondSize","firstSize","renderWindow","onLayoutChange","first","second","divisionValue","sizeDirection","onFirstLayoutChange","onSecondLayoutChange","firstFix","secondFix","firstSizeDiv","secondSizeDiv","style","asArray","arrayEquals","every","i","dropIndexFp","array","index","newArray","push","useComponentBounds","size","setSize","observer","el","observe","disconnect","TESSEL_WINDOW_DRAG_OBJECT","tesselWindowDragObject","isTesselWindowDragObject","forwardRef","tesselPath","dropPos","setDropPos","onHover","monitor","isOver","shallow","pos","getClientOffset","xPercent","yPercent","onDrop","draggingPath","draggingSelf","dropRef","useDrop","accept","collect","getItem","hover","drop","dropMarkerClassname","divRef","filterTesselValues","normalized","pruneEmptyTesselValues","rootItem","from","to","newRoot","movingElement","newItem","Error","CIRCUIT_FIELD_WINDOW_ID","circuitFieldTesselWindow","circuitId","windowProps","isCircuitFieldTesselWindow","layout","activeCircuitEditorPath","defaultUiLayoutServiceState","defaultUiSettingsState","nodeNameMode","_defaultServiceState","circuitEditorUiDrag","nodeGraph","nodeLayout","circuits","clipboard","dialog","project","selection","simulator","simulatorControl","uiLayout","uiSettings","defaultServicesState","UndoServicesStateKeys","_defaultAppState","services","undo","undoStack","redoStack","defaultAppState","rootUrlBuilder","URL","window","location","origin","pathname","rootUrl","toString","ACTION_INIT","ACTION_CIRCUIT_ADD","addCircuit","circuitName","edit","ACTION_CIRCUIT_DELETE","isDeleteCircuitAction","ACTION_CIRCUIT_RENAME","ACTION_NODE_ADD","addNode","nodeType","opts","nodeId","isAddNodeAction","ACTION_NODE_DELETE","isDeleteNodeAction","ACTION_NODE_RENAME","ACTION_SELECTION_ALIGN_TO_GRID","ACTION_SELECTION_DELETE","deleteSelection","ACTION_SELECTION_MOVE","ACTION_WIRE_ATTACH","attachWire","connectionId","joints","isAttachWireAction","ACTION_WIRE_DETATCH","isDetatchWireAction","ACTION_WIRE_JOINT_ADD","ACTION_WIRE_JOINT_MOVE","moveWireJoint","jointId","jointIds","relative","snapMode","ACTION_WIRE_JOINT_DELETE","ACTION_PASTE","ACTION_FIELD_DRAG_END","fieldDragEnd","point","modifierKeys","ACTION_UNDO","isUndoAction","ACTION_REDO","redo","isRedoAction","ACTION_PROJECT_NEW","newProject","isNewProjectAction","ACTION_PROJECT_RECEIVE","receiveProject","fileName","saveData","PROJECT_MUTATION_ACTIONS","isProjectMutationAction","indexOf","captureUndoState","viewCircuitId","circuitEditorWindow","serviceStates","concatReducers","reducers","concat","ACTION_FIELD_DRAG_CONTINUE","fieldDragContinue","dragPos","createServiceReducerCreator","service","reducer","newState","createServiceSelectorCreator","selector","appSelector","s","local","createCircuitEditorUiDragReducer","createCircuitEditorUiDragSelector","isFieldDragContinueAction","getSelectMode","modifiers","defaultMode","shiftKey","ctrlMetaKey","combineSelection","selectedIds","chosenIds","chosen","ACTION_SELECT_REGION","gridNodeSnapSelector","gridJointSnapSelector","applyGridNodeSnapSelector","applyGridJointSnapSelector","keyboardIsMac","test","os","keyboardCommandModifier","MODIFIER_KEYS_NONE","getModifiers","ctrlKey","altKey","metaKey","createNodeGraphReducer","createNodeGraphSelector","nodesByNodeIdSelector","nodeIdsSelector","keys","nodeTypesByNodeIdSelector","nodeFromNodeIdSelector","nodeIdsFromTypeSelector","desiredType","nodeIds","nodeTypeFromNodeIdSelector","node","nodeNamesByNodeIdSelector","nodeName","nodeNameOrDefaultFromNodeIdSelector","substr","nodeNameFromNodeIdSelector","createCircuitsReducer","createCircuitsSelector","nodeIdsByCircuitIdSelector","nodeIdsFromCircuitIdSelector","circuitIdFromNodeIdSelector","createNodeLayoutReducer","createNodeLayoutSelector","nodePositionsByNodeIdSelector","nodePositionFromNodeIdSelector","circuitIdToNodeType","nodeTypeToCircuitId","startsWith","getICBorderPath","inputPinCount","outputPinCount","circuitIdsSelector","circuitNamesByIdSelector","circuitNameFromIdSelector","circuitIdForNodeIdSelector","circuitIds","circuitWouldRecurseSelector","targetCircuitId","targetCircuitNodeType","some","targetContainingCircuitId","circuitPinPosition","pinIndex","nodeTypesByNodeId","nodePositionsByNodeId","circuitNamesById","circuitNodeIds","pinNodeIds","circuitNodeId","pins","inputPinIds","outputPinIds","pinNodeId","componentProps","category","displayName","elementProduction","visual","hitRect","trayComponent","stroke","strokeWidth","fill","x1","y1","x2","y2","component","cachedNodeDefinitionsSelector","nodeDefinitionsSelector","nodeDefinitions","source","resolved","resolveSources","def","nodeDefinitionsByTypeSelector","defs","defsByType","nodeDefinitionFromTypeSelector","definitions","nodePinPositionsByPinIdByNodeIdSelector","nodeDefsByType","nodePinPositionsByPinIdByNodeId","nodePinPositionsByPinId","nodePosition","elementType","pinIds","pinId","relPinPosition","pinPosition","createSelectionReducer","createSelectionSelector","selectedNodeIdsSelector","isNodeSelectedFromNodeIdSelector","isWireSelectedFromConnectionIdSelector","selectedJointIdsSelector","isJointSelectedFromJointIdSelector","isDragForCircuitSelector","dragModeSelector","isDraggingSelector","dragCircuitIdSelector","dragStartSelector","dragEndSelector","dragModifierKeysSelector","selectionRectSelector","dragMoveOffsetSelector","nodeSnap","jointSnap","gridSnap","dragNewJointPositionSelector","dragWireTargetPinSelector","pinPositionsByPinIdByNodeId","pinPositionsByPinId","ACTION_FIELD_DRAG_START_JOINT","ACTION_SELECT_WIRE_JOINTS","selectWireJoints","connectionIdsByCircuitIdSelector","inputPin","outputPin","includes","circuitIdFromConnectionIdSelector","conn","circuitIdFromJointIdSelector","find","connId","ACTION_FIELD_DRAG_START_NEWJOINT","appState","isFieldDragStartNewJointAction","addAfterJointId","ACTION_FIELD_DRAG_START_NODE","ACTION_SELECT_NODES","selectNodes","ACTION_FIELD_DRAG_START_SELECT","isFieldDragStartSelectAction","ACTION_FIELD_DRAG_START_WIRE","rootState","isFieldDragStartWireAction","pin","nodeIdsByCircuit","circuitIdForNode","ACTION_FIELD_MOUSE_LEAVE","isFieldDragEndAction","selectionMode","region","selectRegion","moveBy","hasNodes","offsetX","offsetY","moveSelection","addWireJoint","stateWithDragEnd","endPin","dragNewNodeType","isFieldDragStartJointAction","isFieldDragStartNodeAction","isFieldMouseLeaveAction","isAddCircuitAction","remainingCircuitIds","circuitTypeNodeIds","isRenameCircuitAction","trimmedName","trim","ACTION_COPY_NODES","nodePinSchema","nodePinEquals","connectionsByIdSelector","connectionIdsSelector","connectionFromConnectionIdSelector","connectionsSelector","connectionIdFromInputPinSelector","connectionIds","nodeInputConnectionIdsFromNodeIdSelector","nodeOutputConnectionIdsFromNodeIdSelector","nodeConnectionIdsFromNodeIdSelector","outputs","nodeDefFromNodeIdSelector","nodePinsFromPinNodeSelector","icNodeType","icNodeId","createClipboardReducer","isCopyNodesAction","copyIds","rootPosition","copyNodes","connections","nodeDef","outputConnections","result","connection","nodeOutputSourcesByPinIdFromNodeIdSelector","id","conns","nodeIsSelected","c","isPasteAction","pastePosition","pasteIds","sourceId","output","targetCopyId","targetPin","targetId","ACTION_DIALOG_RESPONSE_ACCEPT","acceptDialog","createDialogReducer","createDialogSelector","isAcceptDialogAction","ACTION_DIALOG_RESPONSE_CANCEL","isCancelDialogAction","ACTION_DIALOG_SHOW","isShowDialogAction","reducerPriority","priority","weight","priorityBefore","nodeDelete","remainingNodeIds","removedIcPins","isRenameNodeAction","p1Node","p2Node","p1Def","p2Def","p1Pin","p2Pin","pinsToConnection","remainingIds","removingNodeConnectionIds","reduce","removingPinConnectionIds","removedPin","removingJointIds","remainingConnectionIds","remainingJointIds","ACTION_NODE_MOVE","moveNode","isMoveNodeAction","movedNodePositions","movedP","isAddWireJointAction","wireJoints","insertionIndex","isDeleteWireJointAction","isMoveWireJointAction","movedJoints","saveCircuitSchema","saveNodeSchema","nullable","saveWireSchema","input","of","saveDataSchema","nodes","wires","startPositionCacheByConnectionId","endPositionCacheByConnectionId","wireJointIdsByConnectionIdSelector","wireJointIdsFromConnectionIdSelector","wireJointPositionFromJointIdSelector","wireJointPositionsByJointIdSelector","SaveFormatError","message","super","this","code","createSave","jointPositions","wire","loadSave","save","validateSync","console","error","localStorage","setItem","JSON","stringify","createProjectReducer","createProjectSelector","removeItem","ACTION_PROJECT_RENAME","isRenameProjectAction","ACTION_PROJECT_SAVE","saveProject","ACTION_PROJECT_SAVE_SUCCESS","autosave","isInitAction","str","parse","loadAutosave","isReceiveProjectAction","isSaveProjectSuccessAction","ACTION_SELECT_CLEAR","selectAll","isSelectAllAction","wireJointIdsFromConnectionId","isClearSelectionAction","isSelectWireJointsAction","isSelectNodesAction","nodeRectsByIdSelector","positionsById","nodeTypesById","isSelectRegionAction","rects","chosenNodeIds","chosenJointIds","jointIdsFromCircuitIdSelector","ACTION_SELECT_WIRES","isSelectWiresAction","ACTION_SELECTION_COPY","isSelectionAlignToGridAction","nodePositions","nodePos","snappedPos","jointPos","isCopySelectionAction","selectedNodes","isDeleteSelectionAction","detatchWire","deleteWireJoint","isMoveSelectionAction","nodeSnapMode","jointSnapMode","createSimulatorReducer","createSimulatorSelector","asElementDef","module","default","ElementDefinitionsByType","getSimulatorNodeIdFromCircuitNodeIdPath","simulatorNodeIdPath","pop","simulatorNodeIdItem","simulatorNodeId","EMPTY_PRODUCTION","simulatorNodesById","simulatorNodeIdsByCircuitNodeId","inputElementPinsByCircuitPinId","outputElementPinsByCircuitPinId","produceCircuitGraph","dependencies","inputCircuitNodeIds","outputCircuitNodeIds","circuitNodeInputPinsByPinIdByNodeId","circuitNodeOutputPinsByPinIdByNodeId","productionResult","produceNode","circuitConnectionsById","outputSimPin","inputSimPins","outputSimNode","outputsByOutputPin","outputsByPin","inputSimPin","inputsByPin","production","subCircuitIds","produceElementNode","circuitProuction","produceCircuitNode","EmptySimulatorGraph","elementTypeFromSimulatorNodeId","simulatorNode","elementDefFromSimulatorNodeId","EmptyPinArray","EmptyPinInputs","simInit","simulatorNodeIdsSelector","outputValues","forEach","initNode","collectNodeTransitions","simTick","tickCount","endTick","saftyCount","shift","tickWindow","readonlyState","transitionIds","updatedNodes","Set","tid","valuesByOutputPin","updates","key","outputSimulatorNodeIdsFromSimulatorNodeIdSelector","add","inputSourcesByPin","inputPinsByPinIdFromSimulatorNodeIdSelector","inputConn","sourceNodeId","sourcePinId","collectNodeInputs","applyEvolutionResult","evolutionResult","nodeState","transition","defaultMerger","transitionMerger","transitionTick","isNodeTransition","transitionId","transitionWindowIndex","transitionWindow","tickWindowTransitionIndex","removeTransitionById","removeTransitionsByNodeId","newTransition","newWindow","splice","addTransition","applyOutputTransition","simulatorNodeIdFromCircuitNodeIdSelector","ACTION_SIM_FASTFORWARD","isFastForwardSimAction","ACTION_SIM_START","startSim","isStartSimAction","ACTION_SIM_STEP","stepSim","isStepSimAction","ACTION_SIM_TICK","tickSim","ACTION_SIM_STOP","stopSim","isStopSimAction","simState","windowTick","isTickSimAction","start","performance","now","updateTime","createSimulatorControlReducer","createSimulatorControlSelector","ACTION_SIM_PAUSE","pauseSim","isSimActiveSelector","isSimRunningSelector","isSimPausedSelector","ticksPerSecondSelector","isPauseSimAction","runMode","createUiLayoutReducer","createUiLayoutSelector","findDefaultActiveWindow","activePath","walk","doWork","walkTesselValues","ACTION_LAYOUT_REARRANGE","isRearrangeLayoutAction","ACTION_VIEW_ACTIVATE","isActivateViewAction","ACTION_VIEW_CIRCUIT","viewCircuit","isViewCircuitAction","VIEW_RESET","resetView","isResetViewAction","VIEW_NODE_NAMES","viewNodeNames","createUiSettingsReducer","createUiSettingsSelector","isViewNodeNamesAction","finalizedList","finalizeReducerList","actionsBlacklist","displayDialogSaga","showDialog","response","ACTION_PROJECT_EXPORT_LINK","exportProjectLink","projectExportLinkSaga","onExportLink","saveText","encoded","encodedText","urlData","encodeURIComponent","projectLink","search","ACTION_PROJECT_IMPORT_LINK","projectImportLinkSaga","onImportLink","dewrapped","decodeURIComponent","deflated","ACTION_PROJECT_LOAD","loadProject","projectLoadSaga","file","contents","text","bind","name","lastIndexOf","warn","projectNameSelector","projectModifiedSelector","projectSaveSaga","showSaveFilePicker","saveNativeFileApi","saveLegacy","fileHandle","suggestedName","types","description","getFile","renameProject","writable","createWritable","write","close","blob","Blob","saveAs","saveDataSaga","runModeSaga","handleRunSim","tps","timeToWait","ceil","simulatorSaga","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","actionSanitizer","stateSanitizer","sagaMiddleware","store","stackItem","undoReducer","redoReducer","undoState","captureUndoStateReducer","useSelector","run","dispatch","layoutSelector","props","CircuitNodeBreadcrumbRootItem","rootCircuitName","onClick","CircuitNodeBreadcrumbItem","elements","elementPath","MinFieldRect","fieldRectSelector","nodeRectsById","wireJointsById","MenuCloseContext","useMenuCloseContext","MenuCloseContextProvider","noopPopoverChildContext","registerPopoverChild","unregisterPopoverChild","PopoverChildContext","PopoverChildContextProvider","contextRegister","contextUnregister","parent","parentRegister","parentUnregister","element","providedContext","isOpen","anchorEl","placement","onRequestClose","popoverRef","setPopoverRef","attributes","styles","usePopper","popoverContext","ctxRef","usePopoverChild","popoverChildren","defaultValue","items","setItems","addItem","useArrayState","onOutsideEvent","when","onEvent","contains","document","addEventListener","removeEventListener","useOutsideMouseEvent","createPortal","popper","body","ContextMenu","open","useContextMenu","ctxPos","setCtxPos","openContextMenu","onCloseContextMenu","renderContextMenu","content","disabled","secondary","requestMenuClose","onItemClick","onAlignToGrid","onDelete","NEW_NODE_DRAG_OBJECT","newNodeDragObject","isNewNodeDragObject","nullRef","fieldSvgElementContext","svgRef","scalerRef","ContextProvider","FieldSvgElementProvider","circuitFieldContext","circuitNodePath","useCircuitField","CircuitFieldProvider","getFieldCoord","field","ctm","getScreenCTM","pt","createSVGPoint","translated","matrixTransform","inverse","useEventMouseCoords","nodeOutputsFromCircuitNodeIdSelector","nodeOutputsBySimulatorNodeId","NamedNodeComponents","nodeNamesById","borderPath","onViewCircuit","alignmentBaseline","fontSize","textAnchor","d","onDoubleClick","isSimActive","circuitIdPath","onPress","onRelease","onColor","onTextColor","onMouseDown","onMouseUp","onMouseLeave","cx","cy","elementState","offColor","ErrorComponent","componentName","getNodeVisualElement","nodeProps","Component","EmptyState","transform","getMouseCoords","useMouseCoords","dragType","setDragType","setDragPos","dropTargetWouldRecurse","coords","snapDragPos","opacity","selectedNodePositionsByIdSelector","selectedNodeTypesByIdSelector","isDragForSelf","selectedNodePositionsById","selectedNodeTypesById","dragMoveOffset","interactable","selected","mouseOver","setMouseOver","onMouseOver","onMouseOut","selectedJointPositionsByIdSelector","jointPositionsById","newJointPosition","newJointElement","useMouseTracking","dragThreshold","onDragStart","onDragMove","onDragEnd","isTracking","setTracking","isTrackingRef","isDraggingRef","mouseDownRef","startTracking","cancelTracking","onMouseMove","abs","viewportContext","zoomFactor","zoom","useViewportContext","ViewportContextProvider","setZoomFactor","delta","selectionRect","counterScale","getCoords","button","fieldDragStartSelect","strokeDasharray","gridId","gridSize","xmlns","patternUnits","nodeNameModeSelector","autoFocus","onChange","onBeginEdit","onCommit","onCancel","onBlur","onKeyUp","editValue","setEditValue","onInputChange","onInputKeyUp","onInputBlur","textClassname","inputClassname","label","isEditing","onRequestEdit","inputRef","onSpanDoubleClick","select","onEditableCommit","nodeCircuitId","isRenaming","setIsRenaming","onRename","onRenameCancel","onRenameCommit","renameNode","onOpenCircuitInNewWindow","fontWeight","Node","nodeStatesBySimulatorNodeId","nodeStateFromCircuitNodeIdSelector","isSelected","onContextMenu","fieldDragStartNode","NodeName","nodeFieldDisplayNameFromNodeId","textScale","textYOffset","nodeElements","wireValueFromConnectionIdSelector","icNodePath","nextIcNodePath","nextPin","nextConnectionId","startJointId","endJointId","isDragging","cacheData","inputNodeDef","inputNodePosition","outputPosition","wireStartPositionFromConnectionIdSelector","end","wireEndPositionFromConnectionIdSelector","mousePos","setMousePos","fieldDragStartNewJoint","selectWires","onJointInsertMouseDown","insertJointPos","lineDir","onJointDragStart","fieldDragStartJoint","onJointDragMove","onJointDragEnd","startMoveJointTracking","mouseDown","isPowered","segmentElements","jointElements","connectorElements","highlight","setHighlight","nodePinPositions","nodePinPositionFromNodePinSelector","pinDef","pinDirectionFromNodePinSelector","dragTargetPin","stopPropagation","onMouseEnter","isDragTarget","pinVisual","focus","dragRef","tabIndex","ZoomingCircuitFieldSurface","sizeRef","componentWidth","componentHeight","fieldRect","fieldWidth","fieldHeight","onWheel","deltaY","listener","options","passive","listenTarget","title","onCloseWindow","dragSourceRef","useDrag","Close","KEYMAP_SIM_STEP","KEYMAP_SIM_FASTFORWARD","KEYMAP_SELECT_ALL","KEYMAP_COPY","KEYMAP_PASTE","KEYMAP_DELETE","KEYMAP_UNDO","KEYMAP_REDO","FillParent","SelectionListItemNode","onItemSelected","CircuitTreeNodeCircuitLabel","onRequestRename","onCancelRename","newName","renameCircuit","onOpenNewWindow","deleteCircuit","CircuitTreeContextMenu","onNewCircuit","arrowRef","setArrowRef","popperStyles","role","arrow","CategoryNames","logic","TrayCategory","TrayNode","liRef","setLiRef","showTooltip","setShowTooltip","onShowTooltip","onHideTooltip","nodeTrayVisual","viewBox","TrayComponent","NodeTrayErrorComponent","WindowsById","categories","keyHandlers","createEventDispatcher","onViewActivated","activateView","HotKeys","keyMap","handlers","onFocus","onCircuitSelected","listItems","rearrangeLayout","importError","setImportError","searchParams","URLSearchParams","get","importProjectLink","exact","setOpen","onClose","useAction","actionCreator","preBind","useClickAction","onNewProject","onSaveProject","onLoadProject","canUndoSelector","canRedoSelector","canUndo","onUndo","canRedo","onRedo","checked","ElementNamesMenu","onAlwaysVisible","onNamedOnly","onHidden","onResetView","averageMsecsPerTickSelector","isActive","isPaused","avgMsecsPerTick","onPlayClick","onStopClick","onPauseClick","onStepClick","onMuteMouseDown","toFixed","Stop","Play","Step","Pause","dialogTypeSelector","dialogDataSelector","onClickOutside","onEscapeKey","AutoFocusInside","acceptText","cancelText","onAccept","footer","onCloseDialog","dialogData","onCopy","navigator","writeText","catch","dialogFooter","rootEl","getElementById","DndProvider","backend","history","hitPath","fillRule","OFFSET","createSeg","points","C","D","E","F","G","ShapePathNode","shapePath","normalizeVisuals","TrayShapePathNode","TrayShapePadding","createShapePathVisual","createStaticNodeVisual","TrayComponentPadding","describeArc","radius","startAngle","endAngle","polarToCartesian","largeArcFlag","centerX","centerY","angleInDegrees","angleInRadians","PI","cos","sin"],"mappings":"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","file":"client.002374c92d89457024cc.bundle.js","sourcesContent":["import { AnyAction } from \"redux\";\n\nexport const ACTION_NODE_INTERACT = \"@node/interact\" as const;\nexport const interactNode = (circuitNodeIdPath: string[], data?: any) => ({\n  type: ACTION_NODE_INTERACT,\n  payload: { circuitNodeIdPath, data },\n});\nexport type InteractNodeAction = ReturnType<typeof interactNode>;\nexport function isInteractNodeAction(\n  action: AnyAction\n): action is InteractNodeAction {\n  return action.type === ACTION_NODE_INTERACT;\n}\n","export const ELEMENT_TRANSISTER_RESPONSE_TIME = 4;\n","import { EvolutionResult } from \"@/logic\";\n\nimport { ELEMENT_TRANSISTER_RESPONSE_TIME } from \"../constants\";\nimport { ElementDefinition } from \"../types\";\n\nconst inputMomentaryElementDefinition: ElementDefinition = {\n  inputPins: [],\n  outputPins: [\"OUT\"],\n  interact(state: any, data: any): EvolutionResult {\n    if (data === undefined) {\n      return {\n        transitions: [\n          {\n            tickOffset: 1,\n            valuesByPin: { OUT: true },\n          },\n          {\n            tickOffset: 1 + Math.round(ELEMENT_TRANSISTER_RESPONSE_TIME * 1.5),\n            valuesByPin: { OUT: false },\n          },\n        ],\n      };\n    } else if (data) {\n      return {\n        transitions: {\n          tickOffset: 1,\n          valuesByPin: { OUT: true },\n        },\n      };\n    } else {\n      return {\n        transitions: {\n          tickOffset: 1,\n          valuesByPin: { OUT: false },\n        },\n      };\n    }\n  },\n};\nexport default inputMomentaryElementDefinition;\n","import { ElementDefinition } from \"../types\";\n\nexport interface ToggleElementState {\n  toggleState: boolean;\n}\nconst defaultToggleState: ToggleElementState = {\n  toggleState: false,\n};\n\nconst buttonToggleElementDefinition: ElementDefinition = {\n  inputPins: [],\n  outputPins: [\"OUT\"],\n  interact(state: ToggleElementState = defaultToggleState) {\n    const nextState = !state.toggleState;\n    return {\n      state: Object.assign({}, state, {\n        toggleState: nextState,\n      }),\n      transitions: {\n        tickOffset: 1,\n        valuesByPin: { OUT: nextState },\n      },\n    };\n  },\n  evolve: (state: ToggleElementState = defaultToggleState) => {\n    return {\n      state,\n      transitions: {\n        tickOffset: 1,\n        valuesByPin: { OUT: state.toggleState },\n      },\n    };\n  },\n};\nexport default buttonToggleElementDefinition;\n","import { ELEMENT_TRANSISTER_RESPONSE_TIME } from \"../constants\";\nimport { ElementDefinition } from \"../types\";\n\nconst andElementDefinition: ElementDefinition = {\n  inputPins: [\"A\", \"B\"],\n  outputPins: [\"OUT\"],\n  evolve(_, inputs) {\n    return {\n      transitions: {\n        tickOffset: ELEMENT_TRANSISTER_RESPONSE_TIME,\n        valuesByPin: { OUT: inputs.A && inputs.B },\n      },\n    };\n  },\n};\nexport default andElementDefinition;\n","import { ELEMENT_TRANSISTER_RESPONSE_TIME } from \"../constants\";\nimport { ElementDefinition } from \"../types\";\n\nconst bufferElementDefinition: ElementDefinition = {\n  inputPins: [\"IN\"],\n  outputPins: [\"OUT\"],\n  evolve(_, inputs) {\n    return {\n      transitions: {\n        tickOffset: ELEMENT_TRANSISTER_RESPONSE_TIME,\n        valuesByPin: { OUT: inputs.IN },\n      },\n    };\n  },\n};\nexport default bufferElementDefinition;\n","import { ELEMENT_TRANSISTER_RESPONSE_TIME } from \"../constants\";\nimport { ElementDefinition } from \"../types\";\n\nconst nandElementDefinition: ElementDefinition = {\n  inputPins: [\"A\", \"B\"],\n  outputPins: [\"OUT\"],\n  evolve(_, inputs) {\n    return {\n      transitions: {\n        tickOffset: ELEMENT_TRANSISTER_RESPONSE_TIME,\n        valuesByPin: { OUT: !(inputs.A && inputs.B) },\n      },\n    };\n  },\n};\nexport default nandElementDefinition;\n","import { ELEMENT_TRANSISTER_RESPONSE_TIME } from \"../constants\";\nimport { ElementDefinition } from \"../types\";\n\nconst norElementDefinition: ElementDefinition = {\n  inputPins: [\"A\", \"B\"],\n  outputPins: [\"OUT\"],\n  evolve(_, inputs) {\n    return {\n      transitions: {\n        tickOffset: ELEMENT_TRANSISTER_RESPONSE_TIME,\n        valuesByPin: { OUT: !(inputs.A || inputs.B) },\n      },\n    };\n  },\n};\nexport default norElementDefinition;\n","import { ELEMENT_TRANSISTER_RESPONSE_TIME } from \"../constants\";\nimport { ElementDefinition } from \"../types\";\n\nconst notElementDefinition: ElementDefinition = {\n  inputPins: [\"IN\"],\n  outputPins: [\"OUT\"],\n  evolve(_, inputs) {\n    return {\n      transitions: {\n        tickOffset: ELEMENT_TRANSISTER_RESPONSE_TIME,\n        valuesByPin: { OUT: !inputs.IN },\n      },\n    };\n  },\n};\nexport default notElementDefinition;\n","import { ELEMENT_TRANSISTER_RESPONSE_TIME } from \"../constants\";\nimport { ElementDefinition } from \"../types\";\n\nconst orElementDefinition: ElementDefinition = {\n  inputPins: [\"A\", \"B\"],\n  outputPins: [\"OUT\"],\n  evolve(_, inputs) {\n    return {\n      transitions: {\n        tickOffset: ELEMENT_TRANSISTER_RESPONSE_TIME,\n        valuesByPin: { OUT: inputs.A || inputs.B },\n      },\n    };\n  },\n};\nexport default orElementDefinition;\n","import { ELEMENT_TRANSISTER_RESPONSE_TIME } from \"../constants\";\nimport { ElementDefinition } from \"../types\";\n\nconst xorElementDefinition: ElementDefinition = {\n  inputPins: [\"A\", \"B\"],\n  outputPins: [\"OUT\"],\n  evolve(_, inputs) {\n    return {\n      transitions: {\n        tickOffset: ELEMENT_TRANSISTER_RESPONSE_TIME,\n        valuesByPin: { OUT: (inputs.A || inputs.B) && inputs.A != inputs.B },\n      },\n    };\n  },\n};\nexport default xorElementDefinition;\n","import { ElementDefinition } from \"../types\";\n\nexport interface LedElementState {\n  value: boolean;\n}\n\nconst ledElementDefinition: ElementDefinition = {\n  inputPins: [\"IN\"],\n  outputPins: [],\n  evolve(_, inputs) {\n    return {\n      state: {\n        value: inputs.IN,\n      },\n    };\n  },\n};\nexport default ledElementDefinition;\n","import { ElementDefinition } from \"../types\";\n\nconst seg7ElementDefinition: ElementDefinition = {\n  inputPins: [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"],\n  outputPins: [],\n  evolve(_, inputs) {\n    return {\n      state: { ...inputs },\n    };\n  },\n};\nexport default seg7ElementDefinition;\n","import { ElementDefinition } from \"../types\";\n\nconst pinHighElementDefinition: ElementDefinition = {\n  inputPins: [],\n  outputPins: [\"OUT\"],\n  evolve() {\n    return {\n      transitions: {\n        tickOffset: 1,\n        valuesByPin: { OUT: true },\n      },\n    };\n  },\n};\nexport default pinHighElementDefinition;\n","import * as yup from \"yup\";\n\nexport interface Point {\n  x: number;\n  y: number;\n}\nexport const pointSchema = yup.object().shape({\n  x: yup.number().required(),\n  y: yup.number().required(),\n});\n\nexport interface Size {\n  width: number;\n  height: number;\n}\n\nexport interface Rectangle {\n  p1: Point;\n  p2: Point;\n}\n\n// Bit silly to have two ways of tracking a rectangular region, but this is inherited from svg-path-bounds\nexport type Bounds = [left: number, top: number, right: number, bottom: number];\n\nexport const ZeroPoint = Object.freeze({ x: 0, y: 0 });\nexport const ZeroRect = Object.freeze({ p1: ZeroPoint, p2: ZeroPoint });\n\nexport function boundsToRect(bounds: Bounds): Rectangle {\n  return {\n    p1: { x: bounds[0], y: bounds[1] },\n    p2: { x: bounds[2], y: bounds[3] },\n  };\n}\n\nexport function snapPoint(p: Point, snap: number) {\n  return {\n    x: Math.round(p.x / snap) * snap,\n    y: Math.round(p.y / snap) * snap,\n  };\n}\n\nexport function magnitude(v: Point): number {\n  return Math.sqrt(v.x * v.x + v.y * v.y);\n}\nexport function normalize(p: Point): Point {\n  const m = magnitude(p);\n  return {\n    x: p.x / m,\n    y: p.y / m,\n  };\n}\n\nexport function dotProduct(a: Point, b: Point): number {\n  return a.x * b.x + a.y * b.y;\n}\n\nexport function scale(p: Point, scaler: number) {\n  return { x: p.x * scaler, y: p.y * scaler };\n}\n\nexport function normalizeRectangle(p1: Point, p2: Point): Rectangle;\nexport function normalizeRectangle(r: Rectangle): Rectangle;\nexport function normalizeRectangle(...args: any[]): Rectangle {\n  let p1: Point;\n  let p2: Point;\n  if (args.length === 1) {\n    const r = args[0] as Rectangle;\n    p1 = r.p1;\n    p2 = r.p2;\n  } else {\n    p1 = args[0] as Point;\n    p2 = args[1] as Point;\n  }\n  return {\n    p1: {\n      x: Math.min(p1.x, p2.x),\n      y: Math.min(p1.y, p2.y),\n    },\n    p2: {\n      x: Math.max(p1.x, p2.x),\n      y: Math.max(p1.y, p2.y),\n    },\n  };\n}\n\nexport function offsetRectangle(rect: Rectangle, offset: Point) {\n  return {\n    p1: pointAdd(rect.p1, offset),\n    p2: pointAdd(rect.p2, offset),\n  };\n}\n\nexport function pointAdd(p1: Point, p2: Point): Point {\n  return {\n    x: p1.x + p2.x,\n    y: p1.y + p2.y,\n  };\n}\nexport function pointSubtract(p1: Point, p2: Point): Point {\n  return {\n    x: p1.x - p2.x,\n    y: p1.y - p2.y,\n  };\n}\nexport function pointEquals(p1: Point, p2: Point): boolean {\n  return p1.x === p2.x && p1.y === p2.y;\n}\n\nexport function pointIntersects(p: Point, r: Rectangle): boolean {\n  r = normalizeRectangle(r);\n\n  if (r.p1.x > p.x || r.p2.x < p.x) {\n    return false;\n  }\n\n  if (r.p1.y > p.y || r.p2.y < p.y) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function calcSize(r: Rectangle): Size {\n  r = normalizeRectangle(r);\n  return {\n    width: r.p2.x - r.p1.x,\n    height: r.p2.y - r.p1.y,\n  };\n}\n\nexport function union(r1: Rectangle, r2: Rectangle): Rectangle {\n  r1 = normalizeRectangle(r1);\n  r2 = normalizeRectangle(r2);\n  return {\n    p1: {\n      x: Math.min(r1.p1.x, r2.p1.x),\n      y: Math.min(r1.p1.y, r2.p1.y),\n    },\n    p2: {\n      x: Math.max(r1.p2.x, r2.p2.x),\n      y: Math.max(r1.p2.y, r2.p2.y),\n    },\n  };\n}\n\nexport function intersects(r1: Rectangle, r2: Rectangle): boolean {\n  r1 = normalizeRectangle(r1);\n  r2 = normalizeRectangle(r2);\n\n  // r1 starts after p2's extent, or does not reach r2's start.\n  if (r1.p1.x > r2.p2.x || r1.p2.x < r2.p1.x) {\n    return false;\n  }\n\n  // r1 starts after p2's extent, or does not reach r2's start.\n  if (r1.p1.y > r2.p2.y || r1.p2.y < r2.p1.y) {\n    return false;\n  }\n\n  return true;\n}\n","import { createHashHistory } from \"history\";\n\nconst history = createHashHistory();\n\nexport default history;\n","import { Point } from \"@/geometry\";\nimport { ModifierKeys } from \"@/modifier-keys\";\n\nimport { NodePin } from \"../node-graph/types\";\n\nexport interface CircuitEditorUiDragServiceState {\n  /**\n   * The current drag operation being performed by the ui.\n   */\n  dragMode: \"move\" | \"select\" | \"new-joint\" | \"wire\" | null;\n\n  /**\n   * The circuit id in which the drag operation is occuring.\n   * Used for select and wire modes.\n   */\n  dragCircuitId: string | null;\n\n  /**\n   * The modifier keys in play for the drag operation.\n   */\n  dragModifierKeys: ModifierKeys | null;\n\n  /**\n   * The start of the drag operation, if applicable for the current operation.\n   */\n  dragStart: Point | null;\n\n  /**\n   * The current end point for the drag operation.  This does not indicate the final\n   * drag position, but the cumulative position.\n   */\n  dragEnd: Point | null;\n\n  /**\n   * if dragMode is \"new-joint\", the connection id to create the joint on.\n   */\n  dragNewJointConnectionId: string | null;\n\n  /**\n   * If dragMode is \"new-joint\", the joint id to add the new joint after.\n   */\n  dragNewJointAfterJointId: string | null;\n\n  /**\n   * If drag mode is \"wire\", this is the source pin being wired by the drag.\n   */\n  dragWireSource: NodePin | null;\n}\n\nconst _defaultState: CircuitEditorUiDragServiceState = {\n  dragMode: null,\n  dragCircuitId: null,\n  dragModifierKeys: null,\n  dragStart: null,\n  dragEnd: null,\n  dragNewJointConnectionId: null,\n  dragNewJointAfterJointId: null,\n  dragWireSource: null,\n};\n\nexport const defaultCircuitEditorUiDragServiceState = Object.freeze(\n  _defaultState\n);\n","export const ROOT_CIRCUIT_ID = \"root\";\n","import { ROOT_CIRCUIT_ID } from \"./constants\";\n\nexport interface CircuitsServiceState {\n  /**\n   * The user-provided names for circuits by circuit id.\n   */\n  circuitNamesByCircuitId: Record<string, string>;\n\n  /**\n   * Arrays of node ids contained in a circuit by the containing circuit id.\n   */\n  nodeIdsByCircuitId: Record<string, string[]>;\n}\n\nconst _defaultState: CircuitsServiceState = {\n  circuitNamesByCircuitId: {\n    [ROOT_CIRCUIT_ID]: \"Root\",\n  },\n  nodeIdsByCircuitId: {\n    [ROOT_CIRCUIT_ID]: [],\n  },\n};\n\nexport const defaultCircuitsServiceState = Object.freeze(_defaultState);\n","import { Point, ZeroPoint } from \"@/geometry\";\n\nimport { ClipboardNode } from \"./types\";\n\nexport interface ClipboardServiceState {\n  clipboardNodes: ClipboardNode[];\n  clipboardPasteOrigin: Point;\n}\n\nexport const defaultClipboardServiceState: Readonly<ClipboardServiceState> = Object.freeze(\n  {\n    clipboardNodes: [],\n    clipboardPasteOrigin: ZeroPoint,\n  }\n);\n","export interface DialogServiceBaseState {\n  dialogType: string | null;\n  data: any;\n}\n\nexport interface EmptyDialogServiceState extends DialogServiceBaseState {\n  dialogType: null;\n  data: null;\n}\n\nexport interface ExportProjectLinkDialogData {\n  projectLink: string;\n}\nexport interface ExportProjectLinkDialogServiceState\n  extends DialogServiceBaseState {\n  dialogType: \"export-project-link\";\n  data: ExportProjectLinkDialogData;\n}\n\nexport type DialogServiceState =\n  | EmptyDialogServiceState\n  | ExportProjectLinkDialogServiceState;\nexport type DialogType = DialogServiceState[\"dialogType\"];\n\nconst _defaultState: EmptyDialogServiceState = {\n  dialogType: null,\n  data: null,\n};\n\nexport const defaultDialogServiceState: Readonly<EmptyDialogServiceState> = Object.freeze(\n  _defaultState\n);\n","import { Node, Connection } from \"./types\";\n\nexport interface NodeGraphServiceState {\n  /**\n   * A map of nodes by node id.\n   */\n  nodesById: Record<string, Node>;\n\n  /**\n   * A map of connections between nodes, by connection id.\n   */\n  connectionsById: Record<string, Connection>;\n}\n\nconst _defaultState: NodeGraphServiceState = {\n  nodesById: {},\n  connectionsById: {},\n};\n\nexport const defaultNodeGraphServiceState = Object.freeze(_defaultState);\n","import { Point } from \"@/geometry\";\n\nexport interface NodeLayoutServiceState {\n  nodePositionsById: Record<string, Point>;\n  wireJointIdsByConnectionId: Record<string, string[]>;\n  wireJointPositionsByJointId: Record<string, Point>;\n}\n\nconst _defaultState: NodeLayoutServiceState = {\n  nodePositionsById: {},\n  wireJointIdsByConnectionId: {},\n  wireJointPositionsByJointId: {},\n};\n\nexport const defaultNodeLayoutServiceState: Readonly<NodeLayoutServiceState> = Object.freeze(\n  _defaultState\n);\n","export interface ProjectServiceState {\n  projectName: string;\n  projectModified: boolean;\n}\n\nconst _defaultProps: ProjectServiceState = {\n  projectName: \"New Project\",\n  projectModified: false,\n};\n\nexport const defaultProjectServiceState = Object.freeze(_defaultProps);\n","export interface SelectionServiceState {\n  selectedNodeIds: string[];\n  selectedConnectionIds: string[];\n  selectedJointIds: string[];\n}\n\nconst _defaultState: SelectionServiceState = {\n  selectedNodeIds: [],\n  selectedConnectionIds: [],\n  selectedJointIds: [],\n};\n\nexport const defaultSelectionServiceState = Object.freeze(_defaultState);\n","import { SimNodePinTransition, SimTransitionWindow } from \"./types\";\n\nexport interface SimulatorServiceState {\n  /**\n   * Whether the simulator has been initialized.\n   */\n  initialized: boolean;\n\n  /**\n   * The current tick the simulator is on.\n   */\n  tick: number;\n\n  /**\n   * The time it took in milliseconds to process the last tick.\n   */\n  lastTickProcessingTimeMs: number;\n\n  /**\n   * A map of node states by node id.\n   */\n  nodeStatesByNodeId: Record<string, any>;\n\n  /**\n   * A map of output-to-value maps by node id.\n   */\n  nodeOutputValuesByNodeId: Record<string, Record<string, boolean>>;\n\n  /**\n   * A map of pending transitions by id.\n   */\n  transitionsById: Record<string, SimNodePinTransition>;\n\n  /**\n   * Transition windows in ascending order of tick.\n   */\n  transitionWindows: SimTransitionWindow[];\n}\n\nconst _defaultState: SimulatorServiceState = {\n  initialized: false,\n  tick: 0,\n  lastTickProcessingTimeMs: 0,\n  nodeStatesByNodeId: {},\n  nodeOutputValuesByNodeId: {},\n  transitionsById: {},\n  transitionWindows: [],\n};\n\nexport const defaultSimulatorServiceState = Object.freeze(_defaultState);\n","export interface SimulatorControlServiceState {\n  /**\n   * The overall application mode.\n   * Might not belong in simulator state?\n   *\n   * - edit: User is editing, no simulator is running\n   * - step: Sim is paused and only ticks on user command\n   * - run: Sim is actively running and ticking forwards on its own.\n   */\n  mode: \"edit\" | \"pause\" | \"run\";\n\n  /**\n   * Tick speed in ticks per second when running.\n   */\n  ticksPerSecond: number;\n}\n\nconst _defaultState: SimulatorControlServiceState = {\n  mode: \"edit\",\n  ticksPerSecond: 1000,\n};\n\nexport const defaultSimulatorControlServiceState = Object.freeze(_defaultState);\n","export function cls(...values: (string | false | undefined)[]): string {\n  return values.filter((x) => Boolean(x) && x != \"\").join(\" \");\n}\n\nexport function typedKeys<T extends Record<string, unknown>>(\n  obj: T\n): (keyof T)[] {\n  return Object.keys(obj) as (keyof T)[];\n}\n\nexport type ValueSetter<T> = T | ((old: T) => T);\n\nexport function fpSet<\n  Target extends Record<string, any> | any[],\n  P1 extends keyof Target,\n  T extends Target[P1]\n>(target: Target, p1: P1, value: ValueSetter<T>): Target;\nexport function fpSet<\n  Target extends Record<string, any> | any[],\n  P1 extends keyof Target,\n  P2 extends keyof Target[P1],\n  T extends Target[P1][P2]\n>(target: Target, p1: P1, p2: P2, value: ValueSetter<T>): Target;\nexport function fpSet<\n  Target extends Record<string, any> | any[],\n  P1 extends keyof Target,\n  P2 extends keyof Target[P1],\n  P3 extends keyof Target[P1][P2],\n  T extends Target[P1][P2][P3]\n>(target: Target, p1: P1, p2: P2, p3: P3, value: ValueSetter<T>): Target;\nexport function fpSet(...args: any[]): any {\n  const target = args[0];\n  const path = args.slice(1, args.length - 1).map(String);\n  const value = args[args.length - 1];\n  return fpSetByArray(target, path, value);\n}\n\nexport function fpSetByArray<T extends Record<string, any>>(\n  target: T,\n  path: (string | number)[],\n  value: ValueSetter<any>\n): T {\n  if (path.length === 0) {\n    if (typeof value === \"function\") {\n      return value(target);\n    }\n    return value;\n  }\n\n  const firstPaths = path.slice(0, path.length - 1).map(String);\n  const lastPath = path[path.length - 1];\n\n  const newData = clone(target);\n\n  let rollingTarget: any = newData;\n\n  for (const seg of firstPaths) {\n    rollingTarget[seg] = clone(rollingTarget[seg]);\n    rollingTarget = rollingTarget[seg];\n  }\n\n  if (typeof value === \"function\") {\n    rollingTarget[lastPath] = value(rollingTarget[lastPath]);\n  } else {\n    rollingTarget[lastPath] = value;\n  }\n\n  return newData;\n}\n\nfunction clone<T extends Record<string, unknown> | any[]>(obj: T): T {\n  if (Array.isArray(obj)) {\n    return obj.slice() as T;\n  }\n  return Object.assign({}, obj);\n}\n\nexport function isTruthy<T>(value: T | null | undefined | false): value is T {\n  return Boolean(value);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"fill-parent\":\"fill-parent--3pw6U\"};","// extracted by mini-css-extract-plugin\nexport default {\"flex-row\":\"flex-row--sHjOY\",\"flex-column\":\"flex-column--2LT64\",\"flex-reverse\":\"flex-reverse--2Vn7L\",\"flexitem-shrink\":\"flexitem-shrink--2U9EV\",\"flexitem-fix\":\"flexitem-fix--1ARxk\"};","import has from \"lodash/has\";\n\nexport type TesselWindowRenderer = (\n  window: TesselWindowItem\n) => React.ReactElement | null;\n\nexport interface TesselWindowItem<P = Record<string, any>> {\n  windowId: string;\n  windowProps?: P;\n}\n\nexport type TesselDirection = \"row\" | \"column\";\n\nexport interface TesselPercentDivision {\n  firstPercent: number;\n}\nexport interface TesselFixedDivision {\n  firstSize?: number;\n  secondSize?: number;\n}\nexport type TesselDivision = TesselPercentDivision | TesselFixedDivision;\nexport type TesselDivisionValue = number | TesselDivision;\n\nexport interface TesselSplitItem {\n  first: TesselValue;\n  second: TesselValue;\n  direction: TesselDirection;\n  division: TesselDivisionValue;\n}\n\nexport type TesselItem = TesselWindowItem | TesselSplitItem;\nexport type TesselValue = string | TesselItem;\n\nexport type TesselDropPosition = \"left\" | \"right\" | \"top\" | \"bottom\";\n\nexport function normalizeTesselItem(value: TesselValue): TesselItem {\n  if (typeof value === \"string\") {\n    return {\n      windowId: value,\n    };\n  }\n\n  return value;\n}\n\nexport function isTesselWindow(item: TesselItem): item is TesselWindowItem {\n  return has(item, \"windowId\");\n}\n\nexport function isTesselSplit(item: TesselItem): item is TesselSplitItem {\n  return has(item, \"first\") && has(item, \"second\") && has(item, \"direction\");\n}\n\nexport function normalizeTesselDivision(\n  value: TesselDivisionValue\n): TesselDivision {\n  if (typeof value === \"number\") {\n    return {\n      firstPercent: value,\n    };\n  }\n\n  return value;\n}\n\nexport function isTesselPercentDivision(\n  value: TesselDivision\n): value is TesselPercentDivision {\n  return has(value, \"firstPercent\");\n}\n\nexport function isTesselFixedDivision(\n  value: TesselDivision\n): value is TesselFixedDivision {\n  return has(value, \"firstSize\") || has(value, \"secondSize\");\n}\n","import * as React from \"react\";\n\nexport function useRefValue<T>(value: T): React.RefObject<T> {\n  const ref = React.useRef(value);\n  React.useEffect(() => {\n    ref.current = value;\n  });\n\n  return ref;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"tessel\":\"tessel--2Q3Xd\",\"tessel-content\":\"tessel-content--3-kEA\",\"tessel-drop-capture\":\"tessel-drop-capture--3TbuI\",\"tessel-drop-capture--dragging\":\"tessel-drop-capture--dragging--Ihwyz\",\"tessel-drop-marker\":\"tessel-drop-marker--1cqr2\",\"drop-left\":\"drop-left--wqP1V\",\"drop-right\":\"drop-right--2MyGz\",\"drop-top\":\"drop-top--1S0co\",\"drop-bottom\":\"drop-bottom--2f330\",\"tessel-split\":\"tessel-split--2gDs5\",\"tessel-split--row\":\"tessel-split--row--2fC6o\",\"tessel-split--column\":\"tessel-split--column--1Hl4C\",\"tessel-window\":\"tessel-window--1qDgp\",\"tessel-window-titlebar\":\"tessel-window-titlebar--uHBdn\",\"tessel-window-title\":\"tessel-window-title--2v0hT\",\"tessel-window-controls\":\"tessel-window-controls--3i3ou\",\"tessel-window-controls-close\":\"tessel-window-controls-close--2O8Zs\",\"tessel-window-content\":\"tessel-window-content--sOnG-\"};","import { cls } from \"@/utils\";\nimport * as React from \"react\";\nimport throttle from \"lodash/throttle\";\n\nimport { useRefValue } from \"@/hooks/useRefValue\";\n\nimport { TesselDirection } from \"./types\";\n\nimport styles from \"./Tessel.module.css\";\n\nexport interface TesselSplitProps {\n  direction: TesselDirection;\n  onChangePercentage(percent: number, position: number): void;\n}\n\nconst ZeroRect: DOMRect = Object.freeze({\n  top: 0,\n  left: 0,\n  bottom: 0,\n  right: 0,\n  x: 0,\n  y: 0,\n  height: 0,\n  width: 0,\n  toJSON: () => ({}),\n});\n\nconst TesselSplit: React.FC<TesselSplitProps> = ({\n  direction,\n  onChangePercentage,\n}) => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n\n  const pointerCaptureRef = React.useRef<number | null>(null);\n\n  // Ref these up so we can continue using the same throttle across rerenders.\n  const directionRef = useRefValue(direction);\n  const onChangePercentageRef = useRefValue(onChangePercentage);\n\n  const onHandlePointerMove = React.useMemo(\n    () =>\n      throttle(\n        (e: React.PointerEvent<HTMLDivElement>) => {\n          if (pointerCaptureRef.current == null || ref.current == null) {\n            return;\n          }\n\n          const parentRect =\n            ref.current.parentElement?.getBoundingClientRect() ?? ZeroRect;\n\n          let percentage = 0;\n          let position = 0;\n          if (directionRef.current === \"row\") {\n            position = e.pageX - parentRect.left;\n            percentage = position / parentRect.width;\n            if (isNaN(percentage)) {\n              percentage = 0;\n              position = parentRect.left;\n            } else if (percentage > 1) {\n              percentage = 1;\n              position = parentRect.right;\n            }\n          } else {\n            position = e.pageY - parentRect.top;\n            percentage = position / parentRect.height;\n            if (isNaN(percentage)) {\n              percentage = 0;\n              position = parentRect.top;\n            } else if (percentage > 1) {\n              percentage = 1;\n              position = parentRect.bottom;\n            }\n          }\n\n          onChangePercentageRef.current!(percentage * 100, position);\n        },\n        1000 / 60,\n        { leading: true }\n      ),\n    [directionRef, onChangePercentageRef]\n  );\n\n  const onPointerMove = React.useCallback(\n    (e: React.PointerEvent<HTMLDivElement>) => {\n      e.persist();\n      onHandlePointerMove(e);\n    },\n    [onHandlePointerMove]\n  );\n\n  const onPointerDown = React.useCallback(\n    (e: React.PointerEvent<HTMLDivElement>) => {\n      if (e.defaultPrevented || !ref.current) {\n        return;\n      }\n\n      if (pointerCaptureRef.current) {\n        return;\n      }\n\n      e.preventDefault();\n\n      // We use pointer capture over the useMouseTracking\n      // hook because pointer capture will capture our mouse icon.\n      ref.current.setPointerCapture(e.pointerId);\n      pointerCaptureRef.current = e.pointerId;\n    },\n    []\n  );\n\n  const onPointerUp = React.useCallback(() => {\n    if (ref.current && pointerCaptureRef.current) {\n      ref.current.releasePointerCapture(pointerCaptureRef.current);\n      pointerCaptureRef.current = null;\n    }\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      className={cls(\n        \"tessel-split\",\n        styles[\"tessel-split\"],\n        styles[\n          direction === \"row\" ? \"tessel-split--row\" : \"tessel-split--column\"\n        ]\n      )}\n      onPointerDown={onPointerDown}\n      onPointerMove={onPointerMove}\n      onPointerUp={onPointerUp}\n    />\n  );\n};\n\nexport default TesselSplit;\n","import * as React from \"react\";\nimport { TesselDropPosition } from \"./types\";\n\nconst tesselPathContext = React.createContext<string[]>([]);\nexport function useTesselPath() {\n  return React.useContext(tesselPathContext);\n}\nexport interface TesselContextProviderProps {\n  pathKey: string;\n}\nexport const TesselPathProvider: React.FC<TesselContextProviderProps> = ({\n  pathKey,\n  children,\n}) => {\n  const path = useTesselPath();\n\n  const newPath = React.useMemo<string[]>(() => [...path, pathKey], [\n    path,\n    pathKey,\n  ]);\n\n  return (\n    <tesselPathContext.Provider value={newPath}>\n      {children}\n    </tesselPathContext.Provider>\n  );\n};\n\nexport interface TesselInteractionContext {\n  moveWindow(from: string[], to: string[], position: TesselDropPosition): void;\n  closeWindow(path: string[]): void;\n}\nfunction noop() {\n  /* no op */\n}\nconst tesselInteractionContext = React.createContext<TesselInteractionContext>({\n  moveWindow: noop,\n  closeWindow: noop,\n});\nexport function useTesselInteraction() {\n  return React.useContext(tesselInteractionContext);\n}\n\nexport type TesselInteractionProviderProps = TesselInteractionContext;\nexport const TesselInteractionProvider: React.FC<TesselInteractionProviderProps> = ({\n  moveWindow,\n  closeWindow,\n  children,\n}) => {\n  const context = React.useMemo<TesselInteractionContext>(\n    () => ({\n      moveWindow,\n      closeWindow,\n    }),\n    [moveWindow, closeWindow]\n  );\n\n  return (\n    <tesselInteractionContext.Provider value={context}>\n      {children}\n    </tesselInteractionContext.Provider>\n  );\n};\n","import * as React from \"react\";\n\nimport { cls } from \"@/utils\";\n\nimport sizing from \"@/styles/sizing.module.css\";\nimport flex from \"@/styles/flex.module.css\";\n\nimport {\n  isTesselFixedDivision,\n  isTesselPercentDivision,\n  normalizeTesselDivision,\n  TesselDivision,\n  TesselItem,\n  TesselSplitItem,\n  TesselValue,\n  TesselWindowRenderer,\n} from \"./types\";\n\nimport TesselSplit from \"./TesselSplit\";\nimport TesselFrame from \"./TesselFrame\";\nimport { TesselPathProvider } from \"./TesselContext\";\n\nexport interface TesselSplitFrameProps {\n  item: TesselSplitItem;\n  renderWindow: TesselWindowRenderer;\n  onLayoutChange(relativeRoot: TesselItem): void;\n}\n\nconst TesselSplitFrame: React.FC<TesselSplitFrameProps> = ({\n  item,\n  renderWindow,\n  onLayoutChange,\n}) => {\n  const { direction, first, second, division: divisionValue } = item;\n  const sizeDirection = direction === \"row\" ? \"width\" : \"height\";\n\n  const onChangePercentage = React.useCallback(\n    (percentage: number, absolute: number) => {\n      const division = normalizeTesselDivision(item.division);\n      onLayoutChange({\n        ...item,\n        division: applyDivisionChange(division, percentage, absolute),\n      });\n    },\n    [item, onLayoutChange]\n  );\n\n  const onFirstLayoutChange = React.useCallback(\n    (value: TesselValue) => {\n      onLayoutChange({\n        ...item,\n        first: value,\n      });\n    },\n    [item, onLayoutChange]\n  );\n\n  const onSecondLayoutChange = React.useCallback(\n    (value: TesselValue) => {\n      onLayoutChange({\n        ...item,\n        second: value,\n      });\n    },\n    [item, onLayoutChange]\n  );\n\n  const division = normalizeTesselDivision(divisionValue);\n  let firstSize = \"50%\";\n  let secondSize = \"50%\";\n  let firstFix = false;\n  let secondFix = false;\n  if (isTesselPercentDivision(division)) {\n    const { firstPercent } = division;\n    firstSize = `${firstPercent}%`;\n    secondSize = `${100 - firstPercent}%`;\n  } else if (isTesselFixedDivision(division)) {\n    const { firstSize: firstSizeDiv, secondSize: secondSizeDiv } = division;\n    // Only support one of firstSize or secondSize\n    if (firstSizeDiv) {\n      firstSize = `${firstSizeDiv}px`;\n      firstFix = true;\n      secondSize = \"100%\";\n    } else {\n      firstSize = \"100%\";\n      secondSize = `${secondSizeDiv}px`;\n      secondFix = true;\n    }\n  }\n\n  return (\n    <div\n      className={cls(\n        sizing[\"fill-parent\"],\n        flex[direction === \"row\" ? \"flex-row\" : \"flex-column\"]\n      )}\n    >\n      <div\n        className={cls(\n          firstFix ? flex[\"flexitem-fix\"] : flex[\"flexitem-shrink\"]\n        )}\n        style={{ [sizeDirection]: firstSize }}\n      >\n        <TesselPathProvider pathKey=\"first\">\n          <TesselFrame\n            value={first}\n            renderWindow={renderWindow}\n            onLayoutChange={onFirstLayoutChange}\n          />\n        </TesselPathProvider>\n      </div>\n      <TesselSplit\n        direction={direction}\n        onChangePercentage={onChangePercentage}\n      />\n      <div\n        className={cls(\n          secondFix ? flex[\"flexitem-fix\"] : flex[\"flexitem-shrink\"]\n        )}\n        style={{ [sizeDirection]: secondSize }}\n      >\n        <TesselPathProvider pathKey=\"second\">\n          <TesselFrame\n            value={second}\n            renderWindow={renderWindow}\n            onLayoutChange={onSecondLayoutChange}\n          />\n        </TesselPathProvider>\n      </div>\n    </div>\n  );\n};\n\nfunction applyDivisionChange(\n  division: TesselDivision,\n  percent: number,\n  absolute: number\n): TesselDivision {\n  if (isTesselPercentDivision(division)) {\n    return {\n      firstPercent: percent,\n    };\n  } else if (isTesselFixedDivision(division)) {\n    if (typeof division.secondSize === \"number\") {\n      return {\n        secondSize: absolute,\n      };\n    }\n\n    return {\n      firstSize: absolute,\n    };\n  }\n\n  return division;\n}\n\nexport default TesselSplitFrame;\n","import * as React from \"react\";\nimport TesselSplitFrame from \"./TesselSplitFrame\";\n\nimport {\n  isTesselSplit,\n  isTesselWindow,\n  normalizeTesselItem,\n  TesselValue,\n  TesselWindowRenderer,\n} from \"./types\";\n\nexport interface TesselFrameProps {\n  value: TesselValue;\n  renderWindow: TesselWindowRenderer;\n  onLayoutChange(value: TesselValue): void;\n}\n\nconst TesselFrame: React.FC<TesselFrameProps> = ({\n  value,\n  renderWindow,\n  onLayoutChange,\n}) => {\n  const item = normalizeTesselItem(value);\n  if (isTesselWindow(item)) {\n    return renderWindow(item);\n  } else if (isTesselSplit(item)) {\n    return (\n      <TesselSplitFrame\n        item={item}\n        renderWindow={renderWindow}\n        onLayoutChange={onLayoutChange}\n      />\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default TesselFrame;\n","export type MaybeArray<T> = T | T[];\nexport function asArray<T>(value: MaybeArray<T>): T[] {\n  return Array.isArray(value) ? value : [value];\n}\n\nexport function arrayEquals<T extends any[]>(a: T, b: T) {\n  if (a === b) {\n    return true;\n  }\n\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  return a.every((v, i) => b[i] === v);\n}\n\nconst EmptyArray: ReadonlyArray<unknown> = Object.freeze([]);\n// Would be simpler to just use EmptyArray, but we cannot type that to what the usage wants.\n// Shame the type `[]` is invalid.\nexport function immutableEmptyArray<T>(): T[] {\n  return EmptyArray as any;\n}\n\nexport function dropIndexFp<T>(array: T[], index: number) {\n  const newArray = array.slice(0, index);\n  for (let i = index + 1; i < array.length; i++) {\n    newArray.push(array[i]);\n  }\n  return newArray;\n}\n","import * as React from \"react\";\nimport ResizeObserver from \"resize-observer-polyfill\";\n\ninterface UseComponentBounds {\n  left: number;\n  top: number;\n  right: number;\n  bottom: number;\n  width: number;\n  height: number;\n}\nexport function useComponentBounds(ref: React.RefObject<HTMLElement | null>) {\n  const [size, setSize] = React.useState<UseComponentBounds>({\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    width: 0,\n    height: 0,\n  });\n\n  React.useLayoutEffect(() => {\n    if (!ref.current) {\n      return;\n    }\n\n    const observer = new ResizeObserver(() => {\n      const el = ref.current;\n      if (!el) {\n        return;\n      }\n      const b = el.getBoundingClientRect();\n      setSize({\n        top: b.top,\n        left: b.left,\n        right: b.right,\n        bottom: b.bottom,\n        width: b.width,\n        height: b.height,\n      });\n    });\n\n    observer.observe(ref.current);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [ref]);\n\n  return size;\n}\n","import { DragObjectWithType } from \"react-dnd\";\n\nexport const TESSEL_WINDOW_DRAG_OBJECT = \"@tessel/window\" as const;\nexport const tesselWindowDragObject = (path: string[]) => ({\n  type: TESSEL_WINDOW_DRAG_OBJECT,\n  payload: { path },\n});\nexport type TesselWindowDragObject = ReturnType<typeof tesselWindowDragObject>;\nexport function isTesselWindowDragObject(\n  item: DragObjectWithType\n): item is TesselWindowDragObject {\n  return item.type === TESSEL_WINDOW_DRAG_OBJECT;\n}\n","import { arrayEquals } from \"@/arrays\";\nimport { useComponentBounds } from \"@/hooks/useComponentBounds\";\nimport { cls } from \"@/utils\";\nimport * as React from \"react\";\nimport { DropTargetMonitor, DragObjectWithType, useDrop } from \"react-dnd\";\n\nimport {\n  isTesselWindowDragObject,\n  TESSEL_WINDOW_DRAG_OBJECT,\n} from \"./drag-items/tessel-window\";\n\nimport styles from \"./Tessel.module.css\";\nimport { useTesselInteraction, useTesselPath } from \"./TesselContext\";\nimport { TesselDropPosition } from \"./types\";\n\nexport interface TesselDropCaptureProps {\n  className?: string;\n  children?: React.ReactNode;\n}\nconst TesselDropCapture = React.forwardRef<\n  HTMLDivElement,\n  TesselDropCaptureProps\n>(({ className, children }, forwardRef) => {\n  const tesselPath = useTesselPath();\n  const { moveWindow } = useTesselInteraction();\n\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const { top, left, right, bottom } = useComponentBounds(ref);\n\n  const [dropPos, setDropPos] = React.useState<TesselDropPosition | null>(null);\n\n  const onHover = React.useCallback(\n    (item: DragObjectWithType, monitor: DropTargetMonitor) => {\n      if (!monitor.isOver({ shallow: true })) {\n        setDropPos(null);\n        return;\n      }\n\n      const pos = monitor.getClientOffset();\n      if (item == null || pos == null || !isTesselWindowDragObject(item)) {\n        setDropPos(null);\n        return;\n      }\n\n      if (pos.x < left || pos.x > right) {\n        setDropPos(null);\n        return;\n      }\n\n      if (pos.y < top || pos.y > bottom) {\n        setDropPos(null);\n        return;\n      }\n\n      const relX = pos.x - left;\n      const xPercent = relX / (right - left);\n      if (xPercent <= 0.3) {\n        setDropPos(\"left\");\n        return;\n      }\n      if (xPercent >= 0.6) {\n        setDropPos(\"right\");\n        return;\n      }\n\n      const relY = pos.y - top;\n      const yPercent = relY / (bottom - top);\n      if (yPercent <= 0.3) {\n        setDropPos(\"top\");\n        return;\n      }\n      if (yPercent >= 0.6) {\n        setDropPos(\"bottom\");\n        return;\n      }\n\n      setDropPos(null);\n    },\n    [top, left, right, bottom]\n  );\n\n  const onDrop = React.useCallback(\n    (item: DragObjectWithType, monitor: DropTargetMonitor) => {\n      if (!monitor.isOver({ shallow: true })) {\n        return;\n      }\n\n      if (!isTesselWindowDragObject(item)) {\n        return;\n      }\n      const { path: draggingPath } = item.payload;\n\n      if (arrayEquals(draggingPath, tesselPath)) {\n        return;\n      }\n\n      if (dropPos == null) {\n        return;\n      }\n\n      moveWindow(draggingPath, tesselPath, dropPos);\n    },\n    [tesselPath, dropPos, moveWindow]\n  );\n\n  const [{ draggingSelf }, dropRef] = useDrop(\n    {\n      accept: TESSEL_WINDOW_DRAG_OBJECT,\n      collect: (monitor) => {\n        // This is here as hover is not called on hover exit.\n        // We need something to capture the exit event.\n        if (!monitor.isOver({ shallow: true })) {\n          setDropPos(null);\n        }\n\n        const item = monitor.getItem();\n        if (!item || !isTesselWindowDragObject(item)) {\n          return {};\n        }\n\n        return {\n          draggingSelf: arrayEquals(item.payload.path, tesselPath),\n        };\n      },\n      hover: onHover,\n      drop: onDrop,\n    },\n    [onHover, onDrop]\n  );\n\n  let dropMarkerClassname = styles[\"tessel-drop-marker\"] + \" \";\n  if (dropPos != null && !draggingSelf) {\n    switch (dropPos) {\n      case \"bottom\":\n        dropMarkerClassname += styles[\"drop-bottom\"];\n        break;\n      case \"top\":\n        dropMarkerClassname += styles[\"drop-top\"];\n        break;\n      case \"left\":\n        dropMarkerClassname += styles[\"drop-left\"];\n        break;\n      case \"right\":\n        dropMarkerClassname += styles[\"drop-right\"];\n        break;\n    }\n  }\n\n  return (\n    <div\n      ref={(divRef) => {\n        ref.current = divRef;\n        dropRef(divRef);\n        if (typeof forwardRef === \"function\") {\n          forwardRef(divRef);\n        } else if (forwardRef) {\n          forwardRef.current = divRef;\n        }\n      }}\n      className={cls(\n        styles[\"tessel-drop-capture\"],\n        draggingSelf && styles[\"tessel-drop-capture--dragging\"],\n        className\n      )}\n    >\n      {children}\n      <div className={dropMarkerClassname} />\n    </div>\n  );\n});\n\nexport default TesselDropCapture;\n","import { isTesselSplit, normalizeTesselItem, TesselValue } from \"./types\";\n\nexport function walkTesselValues(\n  value: TesselValue,\n  walk: (value: TesselValue, path: string[]) => boolean | undefined\n) {\n  function doWork(value: TesselValue, path: string[]): boolean {\n    if (walk(value, []) === false) {\n      return false;\n    }\n\n    const normalized = normalizeTesselItem(value);\n    if (isTesselSplit(normalized)) {\n      if (!doWork(normalized.first, [...path, \"first\"])) {\n        return false;\n      }\n      if (!doWork(normalized.second, [...path, \"second\"])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  doWork(value, []);\n}\n\nexport function filterTesselValues(\n  value: TesselValue,\n  filter: (value: TesselValue) => boolean\n): TesselValue | null {\n  if (!filter(value)) {\n    return null;\n  }\n\n  const normalized = normalizeTesselItem(value);\n\n  if (isTesselSplit(normalized)) {\n    const first = filterTesselValues(normalized.first, filter);\n    const second = filterTesselValues(normalized.second, filter);\n\n    if (first && second) {\n      return value;\n    }\n\n    return first ?? second ?? null;\n  }\n\n  return value;\n}\n\nexport function findAndReplaceTesselValue(\n  value: TesselValue,\n  replace: (value: TesselValue) => TesselValue | null\n): TesselValue {\n  function doWork(value: TesselValue): TesselValue | null {\n    const newValue = replace(value);\n    if (newValue) {\n      return newValue;\n    }\n\n    const normalized = normalizeTesselItem(value);\n    if (isTesselSplit(normalized)) {\n      const first = doWork(normalized.first);\n      if (first) {\n        return {\n          ...normalized,\n          first,\n        };\n      }\n\n      const second = doWork(normalized.second);\n      if (second) {\n        return {\n          ...normalized,\n          second,\n        };\n      }\n    }\n\n    return null;\n  }\n  return doWork(value) ?? value;\n}\n\nexport function pruneEmptyTesselValues(value: TesselValue): TesselValue {\n  if (typeof value === \"string\") {\n    return value;\n  }\n\n  if (isTesselSplit(value)) {\n    if (value.first == null) {\n      return pruneEmptyTesselValues(value.second);\n    }\n    if (value.second == null) {\n      return pruneEmptyTesselValues(value.first);\n    }\n    return {\n      ...value,\n      first: pruneEmptyTesselValues(value.first),\n      second: pruneEmptyTesselValues(value.second),\n    };\n  }\n\n  return value;\n}\n","import * as React from \"react\";\nimport get from \"lodash/get\";\n\nimport { cls, fpSetByArray } from \"@/utils\";\n\nimport {\n  TesselDropPosition,\n  TesselItem,\n  TesselValue,\n  TesselWindowRenderer,\n} from \"./types\";\n\nimport TesselFrame from \"./TesselFrame\";\nimport TesselDropCapture from \"./TesselDropCapture\";\n\nimport styles from \"./Tessel.module.css\";\n\nimport { TesselInteractionProvider } from \"./TesselContext\";\nimport { pruneEmptyTesselValues } from \"./utils\";\n\nexport interface TesselProps {\n  className?: string;\n  rootItem: TesselValue | null;\n  renderWindow: TesselWindowRenderer;\n  onLayoutChange(rootItem: TesselValue | null): void;\n}\n\nconst Tessel: React.FC<TesselProps> = ({\n  className,\n  rootItem,\n  renderWindow,\n  onLayoutChange,\n}) => {\n  const moveWindow = React.useCallback(\n    (from: string[], to: string[], position: TesselDropPosition) => {\n      if (from.length === 0) {\n        // If we have a window at the root, there is no place to drag it to.\n        return;\n      }\n\n      let newRoot = rootItem;\n      const movingElement = get(newRoot, from);\n      // If rootItem is a string (implicit window), than there is no way we can find our\n      // from target inside of it (given that from is not the root).\n      // This would be covered by movingElement being undefined, but we add\n      // the extra check to inform typescript of this condition.\n      if (!newRoot || typeof newRoot === \"string\" || !movingElement) {\n        return;\n      }\n\n      // Target must exist, or be the root.\n      if (to.length > 0 && !get(newRoot, to)) {\n        return;\n      }\n\n      // First, null out the from path.\n      // We cannot clean up the stack at this point as that might remove path\n      // elements that we are moving to.  Cleanup will be done later.\n      newRoot = fpSetByArray(newRoot, from, null);\n\n      // Now, insert the window at the new location\n      newRoot = fpSetByArray(newRoot, to, (item: TesselValue) => {\n        let newItem: TesselItem;\n        if (position === \"left\" || position === \"right\") {\n          newItem = {\n            direction: \"row\",\n            division: 50,\n            first: position === \"left\" ? movingElement : item,\n            second: position === \"right\" ? movingElement : item,\n          };\n        } else if (position === \"top\" || position === \"bottom\") {\n          newItem = {\n            direction: \"column\",\n            division: 50,\n            first: position === \"top\" ? movingElement : item,\n            second: position === \"bottom\" ? movingElement : item,\n          };\n        } else {\n          // Unknown position\n          throw new Error(`Unknown tessel position: ${position}`);\n        }\n        return newItem;\n      });\n\n      // Remove the empty entry from the removal of the from element.\n      newRoot = pruneEmptyTesselValues(newRoot);\n\n      onLayoutChange(newRoot);\n    },\n    [rootItem, onLayoutChange]\n  );\n\n  const closeWindow = React.useCallback(\n    (path: string[]) => {\n      let newRoot = rootItem;\n      if (!newRoot) {\n        return;\n      }\n      if (typeof newRoot === \"string\") {\n        if (path.length === 0) {\n          onLayoutChange(null);\n        }\n        return;\n      }\n\n      // First, null out the from path.\n      // We cannot clean up the stack at this point as that might remove path\n      // elements that we are moving to.  Cleanup will be done later.\n      newRoot = fpSetByArray(newRoot, path, null);\n      // Remove the empty entry from the removal of the from element.\n      newRoot = pruneEmptyTesselValues(newRoot);\n\n      onLayoutChange(newRoot);\n    },\n    [onLayoutChange, rootItem]\n  );\n\n  return (\n    <div className={cls(\"tessel\", styles[\"tessel\"], className)}>\n      <TesselInteractionProvider\n        moveWindow={moveWindow}\n        closeWindow={closeWindow}\n      >\n        <TesselDropCapture>\n          <div className={styles[\"tessel-content\"]}>\n            {rootItem && (\n              <TesselFrame\n                value={rootItem}\n                renderWindow={renderWindow}\n                onLayoutChange={onLayoutChange}\n              />\n            )}\n          </div>\n        </TesselDropCapture>\n      </TesselInteractionProvider>\n    </div>\n  );\n};\n\nexport default Tessel;\n","export * from \"./Tessel\";\nexport * from \"./types\";\n\nimport Tessel from \"./Tessel\";\nexport default Tessel;\nexport { Tessel };\n","import {\n  isTesselWindow,\n  TesselValue,\n  TesselWindowItem,\n} from \"@/components/Tessel\";\n\nimport { CircuitFieldWindowProps } from \"./CircuitFieldWindow\";\n\nexport const CIRCUIT_FIELD_WINDOW_ID = \"circuit-field\" as const;\n\nexport const circuitFieldTesselWindow = (\n  circuitId: string,\n  circuitNodeIdPath: string[]\n): TesselWindowItem<CircuitFieldWindowProps> => ({\n  windowId: CIRCUIT_FIELD_WINDOW_ID,\n  windowProps: {\n    circuitId,\n    circuitNodeIdPath,\n  },\n});\n\nexport function isCircuitFieldTesselWindow(\n  x: TesselValue\n): x is Required<TesselWindowItem<CircuitFieldWindowProps>> {\n  if (typeof x === \"string\") {\n    // We must have props to be a proper circuit field.\n    return false;\n  }\n  if (!isTesselWindow(x)) {\n    return false;\n  }\n  return x.windowId === CIRCUIT_FIELD_WINDOW_ID;\n}\n","import { TesselValue } from \"@/components/Tessel\";\n\nimport { circuitFieldTesselWindow } from \"@/pages/CircuitEditorPage/windows/CircuitFieldWindow/tessel-window\";\n\nimport { ROOT_CIRCUIT_ID } from \"../circuits/constants\";\n\nexport interface UiLayoutServiceState {\n  /**\n   * The tessel layout.\n   */\n  layout: TesselValue | null;\n\n  /**\n   * The tessel path to the current active circuit editor.\n   */\n  activeCircuitEditorPath: string[];\n}\n\nconst _defaultState: UiLayoutServiceState = {\n  layout: {\n    direction: \"row\",\n    division: {\n      firstSize: 200,\n    },\n    first: {\n      direction: \"column\",\n      division: 30,\n      first: \"circuits-list\",\n      second: \"node-tray\",\n    },\n    second: circuitFieldTesselWindow(ROOT_CIRCUIT_ID, []),\n  },\n  activeCircuitEditorPath: [\"second\"],\n};\n\nexport const defaultUiLayoutServiceState = Object.freeze(_defaultState);\n","export interface UiSettingsState {\n  nodeNameMode: \"all\" | \"named-only\" | \"none\";\n}\n\nconst _defaultState: UiSettingsState = {\n  nodeNameMode: \"named-only\",\n};\n\nexport const defaultUiSettingsState = Object.freeze(_defaultState);\n","import {\n  CircuitEditorUiDragServiceState,\n  defaultCircuitEditorUiDragServiceState,\n} from \"./circuit-editor-ui-drag/state\";\nimport {\n  CircuitsServiceState,\n  defaultCircuitsServiceState,\n} from \"./circuits/state\";\nimport {\n  ClipboardServiceState,\n  defaultClipboardServiceState,\n} from \"./clipboard/state\";\nimport { DialogServiceState, defaultDialogServiceState } from \"./dialog/state\";\nimport {\n  NodeGraphServiceState,\n  defaultNodeGraphServiceState,\n} from \"./node-graph/state\";\nimport {\n  NodeLayoutServiceState,\n  defaultNodeLayoutServiceState,\n} from \"./node-layout/state\";\nimport {\n  ProjectServiceState,\n  defaultProjectServiceState,\n} from \"./project/state\";\nimport {\n  SelectionServiceState,\n  defaultSelectionServiceState,\n} from \"./selection/state\";\nimport {\n  SimulatorServiceState,\n  defaultSimulatorServiceState,\n} from \"./simulator/state\";\nimport {\n  SimulatorControlServiceState,\n  defaultSimulatorControlServiceState,\n} from \"./simulator-control/state\";\nimport {\n  UiLayoutServiceState,\n  defaultUiLayoutServiceState,\n} from \"./ui-layout/state\";\nimport { UiSettingsState, defaultUiSettingsState } from \"./ui-settings/state\";\n\nexport interface AppServicesState {\n  circuitEditorUiDrag: CircuitEditorUiDragServiceState;\n  circuits: CircuitsServiceState;\n  clipboard: ClipboardServiceState;\n  dialog: DialogServiceState;\n  nodeGraph: NodeGraphServiceState;\n  nodeLayout: NodeLayoutServiceState;\n  project: ProjectServiceState;\n  selection: SelectionServiceState;\n  simulator: SimulatorServiceState;\n  simulatorControl: SimulatorControlServiceState;\n  uiLayout: UiLayoutServiceState;\n  uiSettings: UiSettingsState;\n}\n\nconst _defaultServiceState: AppServicesState = {\n  circuitEditorUiDrag: defaultCircuitEditorUiDragServiceState,\n  nodeGraph: defaultNodeGraphServiceState,\n  nodeLayout: defaultNodeLayoutServiceState,\n  circuits: defaultCircuitsServiceState,\n  clipboard: defaultClipboardServiceState,\n  dialog: defaultDialogServiceState,\n  project: defaultProjectServiceState,\n  selection: defaultSelectionServiceState,\n  simulator: defaultSimulatorServiceState,\n  simulatorControl: defaultSimulatorControlServiceState,\n  uiLayout: defaultUiLayoutServiceState,\n  uiSettings: defaultUiSettingsState,\n};\n\nexport const defaultServicesState = Object.freeze(_defaultServiceState);\n","import { AppServicesState } from \"@/services/state\";\n\nexport const UndoServicesStateKeys = [\n  \"circuits\",\n  \"nodeGraph\",\n  \"nodeLayout\",\n] as const;\nexport type UndoServicesStates = Pick<\n  AppServicesState,\n  \"circuits\" | \"nodeGraph\" | \"nodeLayout\"\n>;\n\nexport interface UndoStackState {\n  serviceStates: UndoServicesStates;\n  viewCircuitId: string | null;\n}\n\nexport interface UndoState {\n  undoStack: UndoStackState[];\n  redoStack: UndoStackState[];\n}\n\nconst _defaultState: UndoState = {\n  undoStack: [],\n  redoStack: [],\n};\n\nexport const defaultUndoState = Object.freeze(_defaultState);\n","import { AppServicesState, defaultServicesState } from \"@/services/state\";\nimport { defaultUndoState, UndoState } from \"@/undo/state\";\n\nexport interface AppState {\n  services: AppServicesState;\n  undo: UndoState;\n}\n\nconst _defaultAppState: AppState = {\n  services: defaultServicesState,\n  undo: defaultUndoState,\n};\n\nexport const defaultAppState = Object.freeze(_defaultAppState);\n","export const isProd = process.env.NODE_ENV === \"production\";\nexport const isDev = process.env.NODE_ENV === \"development\";\n\nconst rootUrlBuilder = new URL(window.location.origin);\nrootUrlBuilder.pathname = __webpack_public_path__;\nexport const rootUrl = rootUrlBuilder.toString();\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_INIT = \"@init\";\nexport const doInit = () => ({ type: ACTION_INIT });\nexport type InitAction = ReturnType<typeof doInit>;\nexport function isInitAction(action: AnyAction): action is InitAction {\n  return action.type === ACTION_INIT;\n}\n","import { AnyAction } from \"redux\";\nimport { v4 as uuidV4 } from \"uuid\";\n\nexport const ACTION_CIRCUIT_ADD = \"@circuit/add\" as const;\nexport interface NewCircuitOpts {\n  circuitName?: string;\n  circuitId?: string;\n  edit?: boolean;\n}\nexport const addCircuit = ({\n  circuitName,\n  circuitId,\n  edit,\n}: NewCircuitOpts = {}) => ({\n  type: ACTION_CIRCUIT_ADD,\n  payload: { circuitId: circuitId ?? uuidV4(), circuitName, edit },\n});\nexport type AddCircuitAction = ReturnType<typeof addCircuit>;\nexport function isAddCircuitAction(\n  action: AnyAction\n): action is AddCircuitAction {\n  return action.type === ACTION_CIRCUIT_ADD;\n}\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_CIRCUIT_DELETE = \"@circuit/delete\" as const;\nexport const deleteCircuit = (circuitId: string) => ({\n  type: ACTION_CIRCUIT_DELETE,\n  payload: { circuitId },\n});\nexport type DeleteCircuitAction = ReturnType<typeof deleteCircuit>;\nexport function isDeleteCircuitAction(\n  action: AnyAction\n): action is DeleteCircuitAction {\n  return action.type === ACTION_CIRCUIT_DELETE;\n}\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_CIRCUIT_RENAME = \"@circuit/rename\" as const;\nexport const renameCircuit = (circuitId: string, circuitName: string) => ({\n  type: ACTION_CIRCUIT_RENAME,\n  payload: { circuitId, circuitName },\n});\nexport type RenameCircuitAction = ReturnType<typeof renameCircuit>;\nexport function isRenameCircuitAction(\n  action: AnyAction\n): action is RenameCircuitAction {\n  return action.type === ACTION_CIRCUIT_RENAME;\n}\n","import { v4 as uuidV4 } from \"uuid\";\nimport { AnyAction } from \"redux\";\n\nimport { Point } from \"@/geometry\";\n\nexport interface AddNodeOptions {\n  nodeId?: string;\n  nodeName?: string;\n}\nexport const ACTION_NODE_ADD = \"@node/add\" as const;\nexport const addNode = (\n  nodeType: string,\n  circuitId: string,\n  position: Point,\n  opts?: AddNodeOptions\n) => ({\n  type: ACTION_NODE_ADD,\n  payload: { nodeId: uuidV4(), nodeType, circuitId, position, ...(opts || {}) },\n});\nexport type AddNodeAction = ReturnType<typeof addNode>;\nexport function isAddNodeAction(action: AnyAction): action is AddNodeAction {\n  return action.type === ACTION_NODE_ADD;\n}\n","import { AnyAction } from \"redux\";\n\nimport { asArray, MaybeArray } from \"@/arrays\";\n\nexport const ACTION_NODE_DELETE = \"@node/delete\" as const;\nexport const deleteNode = (nodeId: MaybeArray<string>) => ({\n  type: ACTION_NODE_DELETE,\n  payload: { nodeIds: asArray(nodeId) },\n});\nexport type DeleteNodeAction = ReturnType<typeof deleteNode>;\nexport function isDeleteNodeAction(\n  action: AnyAction\n): action is DeleteNodeAction {\n  return action.type === ACTION_NODE_DELETE;\n}\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_NODE_RENAME = \"@node/rename\" as const;\nexport const renameNode = (nodeId: string, nodeName: string) => ({\n  type: ACTION_NODE_RENAME,\n  payload: { nodeId, nodeName },\n});\nexport type RenameNodeAction = ReturnType<typeof renameNode>;\nexport function isRenameNodeAction(\n  action: AnyAction\n): action is RenameNodeAction {\n  return action.type === ACTION_NODE_RENAME;\n}\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_SELECTION_ALIGN_TO_GRID = \"@selection/align-to-grid\" as const;\nexport const selectionAlignToGrid = () => ({\n  type: ACTION_SELECTION_ALIGN_TO_GRID,\n});\nexport function isSelectionAlignToGridAction(action: AnyAction): boolean {\n  return action.type === ACTION_SELECTION_ALIGN_TO_GRID;\n}\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_SELECTION_DELETE = \"@selection/delete\" as const;\nexport const deleteSelection = () => ({\n  type: ACTION_SELECTION_DELETE,\n});\nexport type DeleteSelectionAction = ReturnType<typeof deleteSelection>;\nexport function isDeleteSelectionAction(\n  action: AnyAction\n): action is DeleteSelectionAction {\n  return action.type === ACTION_SELECTION_DELETE;\n}\n","import { AnyAction } from \"redux\";\n\nexport interface MoveSelectionOpts {\n  snapMode?: \"none\" | \"node\" | \"by-type\";\n}\nexport const ACTION_SELECTION_MOVE = \"@selection/move\" as const;\nexport const moveSelection = (\n  offsetX: number,\n  offsetY: number,\n  opts: MoveSelectionOpts = {}\n) => ({\n  type: ACTION_SELECTION_MOVE,\n  payload: { offsetX, offsetY, snapMode: opts.snapMode ?? \"none\" },\n});\nexport type MoveSelectionAction = ReturnType<typeof moveSelection>;\nexport function isMoveSelectionAction(\n  action: AnyAction\n): action is MoveSelectionAction {\n  return action.type === ACTION_SELECTION_MOVE;\n}\n","import { AnyAction } from \"redux\";\nimport { v4 as uuidV4 } from \"uuid\";\n\nimport { Point } from \"@/geometry\";\n\nimport { NodePin } from \"@/services/node-graph/types\";\n\nexport interface AttachWireOptions {\n  joints?: Point[];\n}\nexport const ACTION_WIRE_ATTACH = \"@wire/attach\" as const;\nexport const attachWire = (\n  p1: NodePin,\n  p2: NodePin,\n  opts?: AttachWireOptions\n) => ({\n  type: ACTION_WIRE_ATTACH,\n  payload: {\n    connectionId: uuidV4(),\n    p1,\n    p2,\n    joints: opts?.joints || [],\n  },\n});\nexport type AttachWireAction = ReturnType<typeof attachWire>;\nexport function isAttachWireAction(\n  action: AnyAction\n): action is AttachWireAction {\n  return action.type === ACTION_WIRE_ATTACH;\n}\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_WIRE_DETATCH = \"@wire/detatch\" as const;\nexport const detatchWire = (connectionId: string) => ({\n  type: ACTION_WIRE_DETATCH,\n  payload: {\n    connectionId,\n  },\n});\nexport type DetatchWireNodeAction = ReturnType<typeof detatchWire>;\nexport function isDetatchWireAction(\n  action: AnyAction\n): action is DetatchWireNodeAction {\n  return action.type === ACTION_WIRE_DETATCH;\n}\n","import { AnyAction } from \"redux\";\nimport { v4 as uuidV4 } from \"uuid\";\n\nimport { Point } from \"@/geometry\";\n\nexport const ACTION_WIRE_JOINT_ADD = \"@wire/joint/add\" as const;\nexport const addWireJoint = (\n  connectionId: string,\n  addAfterJointId: string | null,\n  position: Point,\n  jointId?: string\n) => ({\n  type: ACTION_WIRE_JOINT_ADD,\n  payload: {\n    connectionId,\n    jointId: jointId || uuidV4(),\n    addAfterJointId,\n    position,\n  },\n});\nexport type AddWireJointAction = ReturnType<typeof addWireJoint>;\nexport function isAddWireJointAction(\n  action: AnyAction\n): action is AddWireJointAction {\n  return action.type === ACTION_WIRE_JOINT_ADD;\n}\n","import { AnyAction } from \"redux\";\n\nimport { Point } from \"@/geometry\";\nimport { asArray, MaybeArray } from \"@/arrays\";\n\nexport interface MoveWireJointOpts {\n  relative?: boolean;\n  snapMode?: \"none\" | \"node\" | \"joint\";\n}\nexport const ACTION_WIRE_JOINT_MOVE = \"@wire/joint/move\" as const;\nexport const moveWireJoint = (\n  jointId: MaybeArray<string>,\n  position: Point,\n  opts: MoveWireJointOpts = {}\n) => ({\n  type: ACTION_WIRE_JOINT_MOVE,\n  payload: {\n    jointIds: asArray(jointId),\n    position,\n    relative: opts.relative ?? false,\n    snapMode: opts.snapMode ?? \"none\",\n  },\n});\nexport type MoveWireJointAction = ReturnType<typeof moveWireJoint>;\nexport function isMoveWireJointAction(\n  action: AnyAction\n): action is MoveWireJointAction {\n  return action.type === ACTION_WIRE_JOINT_MOVE;\n}\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_WIRE_JOINT_DELETE = \"@wire/joint/delete\" as const;\nexport const deleteWireJoint = (jointId: string) => ({\n  type: ACTION_WIRE_JOINT_DELETE,\n  payload: { jointId },\n});\nexport type DeleteWireJointAction = ReturnType<typeof deleteWireJoint>;\nexport function isDeleteWireJointAction(\n  action: AnyAction\n): action is DeleteWireJointAction {\n  return action.type === ACTION_WIRE_JOINT_DELETE;\n}\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_PASTE = \"@clipboard/paste\" as const;\nexport const paste = (targetCircuitId: string) => ({\n  type: ACTION_PASTE,\n  payload: { targetCircuitId },\n});\nexport type PasteAction = ReturnType<typeof paste>;\nexport function isPasteAction(action: AnyAction): action is PasteAction {\n  return action.type === ACTION_PASTE;\n}\n","import { AnyAction } from \"redux\";\n\nimport { Point } from \"@/geometry\";\nimport { ModifierKeys } from \"@/modifier-keys\";\n\nexport const ACTION_FIELD_DRAG_END = \"@field/drag/end\" as const;\nexport const fieldDragEnd = (point: Point, modifierKeys: ModifierKeys) => ({\n  type: ACTION_FIELD_DRAG_END,\n  payload: { ...point, modifierKeys },\n});\nexport type FieldDragEndAction = ReturnType<typeof fieldDragEnd>;\nexport function isFieldDragEndAction(\n  action: AnyAction\n): action is FieldDragEndAction {\n  return action.type === ACTION_FIELD_DRAG_END;\n}\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_UNDO = \"@undo/undo\" as const;\nexport const undo = () => ({\n  type: ACTION_UNDO,\n});\nexport function isUndoAction(action: AnyAction) {\n  return action.type === ACTION_UNDO;\n}\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_REDO = \"@undo/redo\" as const;\nexport const redo = () => ({\n  type: ACTION_REDO,\n});\nexport function isRedoAction(action: AnyAction) {\n  return action.type === ACTION_REDO;\n}\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_PROJECT_NEW = \"@project/new\" as const;\nexport const newProject = () => ({\n  type: ACTION_PROJECT_NEW,\n});\nexport type NewProjectAction = ReturnType<typeof newProject>;\nexport function isNewProjectAction(\n  action: AnyAction\n): action is NewProjectAction {\n  return action.type === ACTION_PROJECT_NEW;\n}\n","import { AnyAction } from \"redux\";\n\nimport { SaveData } from \"@/services/savedata/types\";\n\nexport const ACTION_PROJECT_RECEIVE = \"@project/receive\" as const;\nexport const receiveProject = (fileName: string, saveData: SaveData) => ({\n  type: ACTION_PROJECT_RECEIVE,\n  payload: { fileName, saveData },\n});\nexport type ReceiveProjectAction = ReturnType<typeof receiveProject>;\nexport function isReceiveProjectAction(\n  action: AnyAction\n): action is ReceiveProjectAction {\n  return action.type === ACTION_PROJECT_RECEIVE;\n}\n","import { AnyAction } from \"redux\";\n\nimport { ACTION_CIRCUIT_ADD } from \"@/actions/circuit-add\";\nimport { ACTION_CIRCUIT_DELETE } from \"@/actions/circuit-delete\";\nimport { ACTION_CIRCUIT_RENAME } from \"@/actions/circuit-rename\";\nimport { ACTION_NODE_ADD } from \"@/actions/node-add\";\nimport { ACTION_NODE_DELETE } from \"@/actions/node-delete\";\nimport { ACTION_NODE_RENAME } from \"@/actions/node-rename\";\nimport { ACTION_SELECTION_ALIGN_TO_GRID } from \"@/actions/selection-align-to-grid\";\nimport { ACTION_SELECTION_DELETE } from \"@/actions/selection-delete\";\nimport { ACTION_SELECTION_MOVE } from \"@/actions/selection-move\";\nimport { ACTION_WIRE_ATTACH } from \"@/actions/wire-attach\";\nimport { ACTION_WIRE_DETATCH } from \"@/actions/wire-detatch\";\nimport { ACTION_WIRE_JOINT_ADD } from \"@/actions/wire-joint-add\";\nimport { ACTION_WIRE_JOINT_MOVE } from \"@/actions/wire-joint-move\";\nimport { ACTION_WIRE_JOINT_DELETE } from \"@/actions/wire-joint-delete\";\n\nimport { ACTION_PASTE } from \"@/actions/clipboard-paste\";\nimport { ACTION_FIELD_DRAG_END } from \"@/actions/field-drag-end\";\n\nimport { ACTION_UNDO } from \"@/actions/undo\";\nimport { ACTION_REDO } from \"@/actions/redo\";\n\nimport { ACTION_PROJECT_NEW } from \"@/actions/project-new\";\nimport { ACTION_PROJECT_RECEIVE } from \"@/actions/project-receive\";\n\nexport const PROJECT_MUTATION_ACTIONS = [\n  ACTION_CIRCUIT_ADD,\n  ACTION_CIRCUIT_DELETE,\n  ACTION_CIRCUIT_RENAME,\n  ACTION_NODE_ADD,\n  ACTION_NODE_DELETE,\n  ACTION_NODE_RENAME,\n  ACTION_SELECTION_ALIGN_TO_GRID,\n  ACTION_SELECTION_DELETE,\n  ACTION_SELECTION_MOVE,\n  ACTION_WIRE_ATTACH,\n  ACTION_WIRE_DETATCH,\n  ACTION_WIRE_JOINT_ADD,\n  ACTION_WIRE_JOINT_DELETE,\n  ACTION_WIRE_JOINT_MOVE,\n\n  ACTION_UNDO,\n  ACTION_REDO,\n\n  // These actions typically fire off other actions in this list,\n  // and are redundant for services that take part in the core reducer.\n  // However, undo/redo is outside of the core reducer and does not see the\n  // reentrant actions in order to produce a single undo stack entry for\n  // the entire paste operation.\n  ACTION_PASTE,\n  ACTION_FIELD_DRAG_END,\n];\n\nexport function isProjectMutationAction(action: AnyAction) {\n  return PROJECT_MUTATION_ACTIONS.indexOf(action.type) !== -1;\n}\n\nexport const PROJECT_RESET_ACTIONS = [\n  ACTION_PROJECT_NEW,\n  ACTION_PROJECT_RECEIVE,\n];\n\nexport function isProjectResetAction(action: AnyAction) {\n  return PROJECT_RESET_ACTIONS.indexOf(action.type) !== -1;\n}\n","import pick from \"lodash/pick\";\nimport get from \"lodash/get\";\n\nimport { AppState } from \"@/store\";\n\nimport { isCircuitFieldTesselWindow } from \"@/pages/CircuitEditorPage/windows/CircuitFieldWindow/tessel-window\";\n\nimport { UndoStackState, UndoServicesStateKeys } from \"./state\";\n\nexport function captureUndoState(state: AppState): UndoStackState {\n  let viewCircuitId: string | null = null;\n\n  const { layout, activeCircuitEditorPath } = state.services.uiLayout;\n  const circuitEditorWindow = get(layout, activeCircuitEditorPath);\n  if (isCircuitFieldTesselWindow(circuitEditorWindow)) {\n    viewCircuitId = circuitEditorWindow.windowProps.circuitId;\n  }\n\n  return {\n    serviceStates: pick(state.services, UndoServicesStateKeys),\n    viewCircuitId,\n  };\n}\n","import { AnyAction } from \"redux\";\nimport sortBy from \"lodash/sortBy\";\n\nimport { MaybeArray } from \"@/arrays\";\n\nimport { AppState, defaultAppState } from \"./state\";\nimport { AppReducer } from \"./types\";\n\nexport function concatReducers(\n  ...reducers: MaybeArray<AppReducer>[]\n): AppReducer[] {\n  // Previously, this was reduceReducers and generated a reducer\n  //  that invokes each child reducer.\n  // However, we need to be able to order reducers across services,\n  //  so we must now aggregate a list of reducers and do a final ordering\n  //  step after all are collected.\n  return ([] as AppReducer[]).concat(...reducers);\n}\n\nexport function finalizeReducerList(reducers: AppReducer[]): AppReducer {\n  // Order the list by weight ascending.\n  const finalizedList = sortBy(reducers, (x: AppReducer) => x.weight || 0);\n\n  return (state: AppState = defaultAppState, action: AnyAction) => {\n    return finalizedList.reduce(\n      (state, reducer) => reducer(state, action),\n      state\n    );\n  };\n}\n","import { AnyAction } from \"redux\";\nimport { Point } from \"@/geometry\";\nimport { ModifierKeys } from \"@/modifier-keys\";\n\nexport const ACTION_FIELD_DRAG_CONTINUE = \"@field/drag/continue\" as const;\nexport const fieldDragContinue = (p: Point, modifierKeys: ModifierKeys) => ({\n  type: ACTION_FIELD_DRAG_CONTINUE,\n  payload: { dragPos: p, modifierKeys },\n});\nexport type FieldDragContinueAction = ReturnType<typeof fieldDragContinue>;\nexport function isFieldDragContinueAction(\n  action: AnyAction\n): action is FieldDragContinueAction {\n  return action.type === ACTION_FIELD_DRAG_CONTINUE;\n}\n","import { AnyAction, Reducer } from \"redux\";\n\nimport { AppState, defaultAppState } from \"@/store\";\nimport { fpSet } from \"@/utils\";\n\nexport type ServiceKey = keyof AppState[\"services\"];\nexport type ServiceState<\n  TServiceKey extends ServiceKey\n> = AppState[\"services\"][TServiceKey];\n\nexport interface ServiceReducer<TServiceState> {\n  (\n    state: Readonly<TServiceState>,\n    action: AnyAction,\n    appState: AppState\n  ): TServiceState;\n}\n\nexport function createServiceReducerCreator<TServiceKey extends ServiceKey>(\n  service: TServiceKey\n): (\n  reducer: ServiceReducer<AppState[\"services\"][TServiceKey]>\n) => Reducer<AppState, AnyAction> {\n  return (reducer: ServiceReducer<AppState[\"services\"][TServiceKey]>) => {\n    return (state: AppState = defaultAppState, action: AnyAction) => {\n      const newState = reducer(state.services[service], action, state);\n      if (state.services[service] != newState) {\n        return fpSet(state, \"services\", service, newState);\n      }\n      return state;\n    };\n  };\n}\n\nexport interface ServiceSelectorA0<TServiceKey extends ServiceKey, TReturn> {\n  (s: AppState): TReturn;\n  local(s: ServiceState<TServiceKey>): TReturn;\n}\n\nexport interface ServiceSelectorA1<\n  TServiceKey extends ServiceKey,\n  TA1,\n  TReturn\n> {\n  (s: AppState, a1: TA1): TReturn;\n  local(s: ServiceState<TServiceKey>, a1: TA1): TReturn;\n}\n\nexport interface ServiceSelectorA2<\n  TServiceKey extends ServiceKey,\n  TA1,\n  TA2,\n  TReturn\n> {\n  (s: AppState, a1: TA1, a2: TA2): TReturn;\n  local(s: ServiceState<TServiceKey>, a1: TA1, a2: TA2): TReturn;\n}\n\nexport interface ServiceSelectorCreator<TServiceKey extends ServiceKey> {\n  <TReturn>(\n    selector: (s: ServiceState<TServiceKey>) => TReturn\n  ): ServiceSelectorA0<TServiceKey, TReturn>;\n  <TA1, TReturn>(\n    selector: (s: ServiceState<TServiceKey>, a1: TA1) => TReturn\n  ): ServiceSelectorA1<TServiceKey, TA1, TReturn>;\n  <TA1, TA2, TReturn>(\n    selector: (s: ServiceState<TServiceKey>, a1: TA1, a2: TA2) => TReturn\n  ): ServiceSelectorA2<TServiceKey, TA1, TA2, TReturn>;\n}\n\nexport function createServiceSelectorCreator<TServiceKey extends ServiceKey>(\n  service: TServiceKey\n): ServiceSelectorCreator<TServiceKey> {\n  return <TArgs, TReturn>(\n    selector: (s: ServiceState<TServiceKey>, ...args: TArgs[]) => TReturn\n  ) => {\n    const appSelector: any = (s: AppState, ...args: TArgs[]) =>\n      selector(s.services[service], ...args);\n    appSelector.local = selector;\n    return appSelector;\n  };\n}\n","import {\n  createServiceReducerCreator,\n  createServiceSelectorCreator,\n} from \"../service-state-utils\";\n\nexport const createCircuitEditorUiDragReducer = createServiceReducerCreator(\n  \"circuitEditorUiDrag\"\n);\nexport const createCircuitEditorUiDragSelector = createServiceSelectorCreator(\n  \"circuitEditorUiDrag\"\n);\n","import { isFieldDragContinueAction } from \"@/actions/field-drag-continue\";\n\nimport { createCircuitEditorUiDragReducer } from \"../utils\";\n\nexport default createCircuitEditorUiDragReducer((state, action) => {\n  if (!isFieldDragContinueAction(action)) {\n    return state;\n  }\n\n  const { dragPos, modifierKeys } = action.payload;\n\n  return {\n    ...state,\n    dragEnd: dragPos,\n    dragModifierKeys: modifierKeys,\n  };\n});\n","import union from \"lodash/union\";\nimport difference from \"lodash/difference\";\n\nimport { ModifierKeys } from \"./modifier-keys\";\n\nexport type SelectionMode =\n  | \"set\"\n  | \"append\"\n  | \"remove\"\n  | \"toggle\"\n  | \"set-if-unselected\";\n\nexport function getSelectMode(\n  modifiers: ModifierKeys,\n  defaultMode: SelectionMode = \"set\"\n): SelectionMode {\n  if (modifiers.shiftKey && modifiers.ctrlMetaKey) {\n    return \"remove\";\n  }\n  if (modifiers.shiftKey) {\n    return \"append\";\n  }\n  if (modifiers.ctrlMetaKey) {\n    return \"toggle\";\n  }\n  return defaultMode;\n}\n\nexport function combineSelection(\n  selectedIds: string[],\n  chosenIds: string[],\n  mode: SelectionMode\n) {\n  switch (mode) {\n    case \"set\":\n      return chosenIds;\n    case \"set-if-unselected\": {\n      if (chosenIds.every((chosen) => selectedIds.indexOf(chosen) !== -1)) {\n        // All were selected.\n        return selectedIds;\n      }\n\n      // One wasn't selected, set it\n      return chosenIds;\n    }\n    case \"append\":\n      return union(selectedIds, chosenIds);\n    case \"remove\":\n      return difference(selectedIds, chosenIds);\n    case \"toggle\": {\n      return difference(selectedIds, chosenIds).concat(\n        difference(chosenIds, selectedIds)\n      );\n    }\n  }\n\n  return chosenIds;\n}\n","import { AnyAction } from \"redux\";\n\nimport { Rectangle } from \"@/geometry\";\nimport { SelectionMode } from \"@/selection-mode\";\n\nexport const ACTION_SELECT_REGION = \"@select/region\" as const;\nexport const selectRegion = (\n  region: Rectangle,\n  circuitId: string,\n  mode: SelectionMode = \"set\"\n) => ({\n  type: ACTION_SELECT_REGION,\n  payload: {\n    region,\n    circuitId,\n    mode,\n  },\n});\nexport type SelectRegionAction = ReturnType<typeof selectRegion>;\nexport function isSelectRegionAction(\n  action: AnyAction\n): action is SelectRegionAction {\n  return action.type === ACTION_SELECT_REGION;\n}\n","import { Point, snapPoint } from \"@/geometry\";\nimport { AppState } from \"@/store\";\n\nimport { createCircuitEditorUiDragSelector } from \"../utils\";\n\nexport const gridNodeSnapSelector = createCircuitEditorUiDragSelector(() => 50);\n\nexport const gridJointSnapSelector = createCircuitEditorUiDragSelector(() => 5);\n\nexport const applyGridNodeSnapSelector = (s: AppState, p: Point) => {\n  const snap = gridNodeSnapSelector(s);\n  return snapPoint(p, snap);\n};\n\nexport const applyGridJointSnapSelector = (s: AppState, p: Point) => {\n  const snap = gridJointSnapSelector(s);\n  return snapPoint(p, snap);\n};\n","import { os } from \"platform\";\n\nconst OS_MAC = /(Mac|iOS|OS\\ X)/;\n\nexport const keyboardIsMac = OS_MAC.test((os || \"undefined\").toString());\n\nexport const keyboardCommandModifier = keyboardIsMac ? \"command\" : \"ctrl\";\n","import { keyboardIsMac } from \"./runtime-env\";\n\nexport const MODIFIER_KEYS_NONE = Object.freeze<ModifierKeys>({});\n\nexport interface ModifierKeys {\n  ctrlMetaKey?: boolean;\n  shiftKey?: boolean;\n  altKey?: boolean;\n}\n\nexport interface MouseEventModifierKeys {\n  ctrlKey: boolean;\n  altKey: boolean;\n  shiftKey: boolean;\n  metaKey: boolean;\n}\nexport function getModifiers(e: MouseEventModifierKeys): ModifierKeys {\n  const { ctrlKey, altKey, shiftKey, metaKey } = e;\n  return {\n    // Mac reserves ctrl for system use, apps use meta.\n    ctrlMetaKey: keyboardIsMac ? metaKey : ctrlKey,\n    altKey,\n    shiftKey,\n  };\n}\n","import {\n  createServiceReducerCreator,\n  createServiceSelectorCreator,\n} from \"../service-state-utils\";\n\nexport const createNodeGraphReducer = createServiceReducerCreator(\"nodeGraph\");\nexport const createNodeGraphSelector = createServiceSelectorCreator(\n  \"nodeGraph\"\n);\n","import { createSelector } from \"reselect\";\nimport mapValues from \"lodash/mapValues\";\n\nimport { createNodeGraphSelector } from \"../utils\";\nimport { NodeGraphServiceState } from \"../state\";\nimport { Node } from \"../types\";\n\nexport const nodesByNodeIdSelector = createNodeGraphSelector(\n  (s) => s.nodesById\n);\n\nexport const nodeIdsSelector = createNodeGraphSelector(\n  createSelector(\n    nodesByNodeIdSelector.local,\n    (nodesById: Record<string, Node>) => Object.keys(nodesById)\n  )\n);\n\nexport const nodeTypesByNodeIdSelector = createNodeGraphSelector(\n  createSelector(\n    nodesByNodeIdSelector.local,\n    (nodesById: Record<string, Node>) => mapValues(nodesById, (x) => x.nodeType)\n  )\n);\n\nexport const nodeFromNodeIdSelector = createNodeGraphSelector(\n  (s: NodeGraphServiceState, nodeId: string) => s.nodesById[nodeId] || null\n);\n\nexport const nodeIdsFromTypeSelector = createNodeGraphSelector(\n  (s: NodeGraphServiceState, desiredType: string) => {\n    const nodeIds: string[] = [];\n    for (const nodeId of Object.keys(s.nodesById)) {\n      const { nodeType } = s.nodesById[nodeId];\n      if (nodeType === desiredType) {\n        nodeIds.push(nodeId);\n      }\n    }\n    return nodeIds;\n  }\n);\n\nexport const nodeTypeFromNodeIdSelector = createNodeGraphSelector(\n  (s: NodeGraphServiceState, nodeId: string) => {\n    const node = nodeFromNodeIdSelector.local(s, nodeId);\n    if (!node) {\n      return null;\n    }\n    return node.nodeType;\n  }\n);\n\nexport const nodeNamesByNodeIdSelector = createNodeGraphSelector(\n  createSelector(\n    (state) => state.nodesById,\n    (nodesById) => {\n      return mapValues(nodesById, (node) => node.nodeName);\n    }\n  )\n);\n\nexport const nodeNameOrDefaultFromNodeIdSelector = createNodeGraphSelector(\n  (s: NodeGraphServiceState, nodeId: string) => {\n    const node = nodeFromNodeIdSelector.local(s, nodeId);\n    if (!node) {\n      return null;\n    }\n\n    return node.nodeName ?? nodeId.substr(0, 4);\n  }\n);\n\nexport const nodeNameFromNodeIdSelector = createNodeGraphSelector(\n  (s: NodeGraphServiceState, nodeId: string) => {\n    const node = nodeFromNodeIdSelector.local(s, nodeId);\n    if (!node) {\n      return null;\n    }\n\n    return node.nodeName;\n  }\n);\n","import {\n  createServiceReducerCreator,\n  createServiceSelectorCreator,\n} from \"../service-state-utils\";\n\nexport const createCircuitsReducer = createServiceReducerCreator(\"circuits\");\nexport const createCircuitsSelector = createServiceSelectorCreator(\"circuits\");\n","import { createCircuitsSelector } from \"../utils\";\n\nexport const nodeIdsByCircuitIdSelector = createCircuitsSelector(\n  (state) => state.nodeIdsByCircuitId\n);\n\nexport const nodeIdsFromCircuitIdSelector = createCircuitsSelector<\n  string,\n  string[]\n>((state, circuitId: string) => state.nodeIdsByCircuitId[circuitId]);\n\nexport const circuitIdFromNodeIdSelector = createCircuitsSelector<\n  string,\n  string | null\n>((state, nodeId) => {\n  for (const circuitId of Object.keys(state.nodeIdsByCircuitId)) {\n    const nodeIds = state.nodeIdsByCircuitId[circuitId];\n    if (nodeIds.indexOf(nodeId) !== -1) {\n      return circuitId;\n    }\n  }\n  return null;\n});\n","import {\n  createServiceReducerCreator,\n  createServiceSelectorCreator,\n} from \"../service-state-utils\";\n\nexport const createNodeLayoutReducer = createServiceReducerCreator(\n  \"nodeLayout\"\n);\nexport const createNodeLayoutSelector = createServiceSelectorCreator(\n  \"nodeLayout\"\n);\n","import { ZeroPoint } from \"@/geometry\";\n\nimport { createNodeLayoutSelector } from \"../utils\";\nimport { NodeLayoutServiceState } from \"../state\";\n\nexport const nodePositionsByNodeIdSelector = createNodeLayoutSelector(\n  (state) => state.nodePositionsById\n);\n\nexport const nodePositionFromNodeIdSelector = createNodeLayoutSelector(\n  (state: NodeLayoutServiceState, nodeId: string) =>\n    state.nodePositionsById[nodeId] ?? ZeroPoint\n);\n","export function circuitIdToNodeType(circuitId: string) {\n  return `ic-${circuitId}`;\n}\n\nexport function nodeTypeToCircuitId(nodeType: string | null): string | null {\n  if (!nodeType || !nodeType.startsWith(\"ic-\")) {\n    return null;\n  }\n  return nodeType.substr(3);\n}\n\nexport function getICBorderPath(inputPinCount: number, outputPinCount: number) {\n  const height = Math.max(inputPinCount, outputPinCount, 1) * 50 - 20;\n  return `M10,10 h80 v${height} h-80 z`;\n}\n","import {\n  circuitIdToNodeType,\n  nodeTypeToCircuitId,\n} from \"@/nodes/definitions/integrated-circuits/utils\";\nimport { nodeTypeFromNodeIdSelector } from \"@/services/node-graph/selectors/nodes\";\nimport { AppState } from \"@/store\";\n\nimport { CircuitsServiceState } from \"../state\";\nimport { createCircuitsSelector } from \"../utils\";\n\nimport { nodeIdsFromCircuitIdSelector } from \"./nodes\";\n\nexport const circuitIdsSelector = createCircuitsSelector((state) =>\n  Object.keys(state.circuitNamesByCircuitId)\n);\n\nexport const circuitNamesByIdSelector = createCircuitsSelector(\n  (state) => state.circuitNamesByCircuitId\n);\n\nexport const circuitNameFromIdSelector = createCircuitsSelector(\n  (state: CircuitsServiceState, circuitId: string) =>\n    state.circuitNamesByCircuitId[circuitId]\n);\n\nconst circuitIdForNodeIdSelector = createCircuitsSelector(\n  (state: CircuitsServiceState, nodeId: string) => {\n    const { nodeIdsByCircuitId } = state;\n    const circuitIds = Object.keys(nodeIdsByCircuitId);\n    for (const circuitId of circuitIds) {\n      if (nodeIdsByCircuitId[circuitId].indexOf(nodeId) !== -1) {\n        return circuitId;\n      }\n    }\n    return null;\n  }\n);\n\nexport const circuitWouldRecurseSelector = (\n  state: AppState,\n  circuitId: string | null,\n  targetCircuitId: string\n): boolean => {\n  if (!circuitId) {\n    return false;\n  }\n  if (circuitId === targetCircuitId) {\n    return true;\n  }\n\n  const targetCircuitNodeType = circuitIdToNodeType(targetCircuitId);\n  const { nodesById } = state.services.nodeGraph;\n  const targetCircuitNodeIds = Object.keys(nodesById).filter(\n    (nodeId) => nodesById[nodeId].nodeType === targetCircuitNodeType\n  );\n\n  return targetCircuitNodeIds.some((nodeId) => {\n    const targetContainingCircuitId = circuitIdForNodeIdSelector(state, nodeId);\n    if (!targetContainingCircuitId) {\n      return false;\n    }\n    return circuitWouldRecurseSelector(\n      state,\n      circuitId,\n      targetContainingCircuitId\n    );\n  });\n};\n","import * as React from \"react\";\n\nimport { createSelector } from \"reselect\";\nimport sortBy from \"lodash/sortBy\";\nimport getBounds from \"svg-path-bounds\";\n\nimport { PinDirection } from \"@/logic\";\nimport { boundsToRect, Point } from \"@/geometry\";\n\nimport { IntegratedCircuitVisualProps } from \"@/nodes/visuals/IntegratedCircuitNode\";\n\nimport { nodeIdsByCircuitIdSelector } from \"@/services/circuits/selectors/nodes\";\nimport { ROOT_CIRCUIT_ID } from \"@/services/circuits/constants\";\nimport { nodeTypesByNodeIdSelector } from \"@/services/node-graph/selectors/nodes\";\nimport { nodePositionsByNodeIdSelector } from \"@/services/node-layout/selectors/node-positions\";\nimport { circuitNamesByIdSelector } from \"@/services/circuits/selectors/circuits\";\n\nimport {\n  NodeDefinition,\n  NodeDefinitionSource,\n  NodePinDefinition,\n} from \"../../types\";\n\nimport { circuitIdToNodeType, getICBorderPath } from \"./utils\";\n\nconst IntegratedCircuitDefinitionSource: NodeDefinitionSource = createSelector(\n  nodeIdsByCircuitIdSelector,\n  nodeTypesByNodeIdSelector,\n  nodePositionsByNodeIdSelector,\n  circuitNamesByIdSelector,\n  (\n    nodeIdsByCircuitId,\n    nodeTypesByNodeId,\n    nodePositionsByNodeId,\n    circuitNamesById\n  ) => {\n    return Object.keys(nodeIdsByCircuitId)\n      .filter((x) => x !== ROOT_CIRCUIT_ID)\n      .map((circuitId) => {\n        const circuitNodeIds = nodeIdsByCircuitId[circuitId] ?? [];\n        const circuitName =\n          circuitNamesById[circuitId] ?? circuitId.substr(0, 5);\n\n        // Sort by y axis position to get consistent pin locations.\n        let pinNodeIds = circuitNodeIds.filter((circuitNodeId) =>\n          nodeTypesByNodeId[circuitNodeId].startsWith(\"pin-\")\n        );\n        pinNodeIds = sortBy(\n          pinNodeIds,\n          (nodeId) => nodePositionsByNodeId[nodeId].y,\n          (nodeId) => nodePositionsByNodeId[nodeId].x\n        );\n\n        const pins: Record<string, NodePinDefinition> = {};\n        const inputPinIds: string[] = [];\n        const outputPinIds: string[] = [];\n        for (const pinNodeId of pinNodeIds) {\n          const type = nodeTypesByNodeId[pinNodeId];\n          if (type === \"pin-input\") {\n            pins[pinNodeId] = {\n              direction: \"input\",\n              ...circuitPinPosition(inputPinIds.length, \"input\"),\n            };\n            inputPinIds.push(pinNodeId);\n          } else if (type === \"pin-output\") {\n            pins[pinNodeId] = {\n              direction: \"output\",\n              ...circuitPinPosition(outputPinIds.length, \"output\"),\n            };\n            outputPinIds.push(pinNodeId);\n          }\n        }\n\n        const componentProps: IntegratedCircuitVisualProps = {\n          circuitId,\n          inputPinIds,\n          outputPinIds,\n        };\n\n        const def: NodeDefinition = {\n          type: circuitIdToNodeType(circuitId),\n          category: \"integrated-circuit\",\n          displayName: circuitName,\n          elementProduction: {\n            type: \"circuit\",\n            circuitId,\n          },\n          visual: {\n            hitRect: boundsToRect(\n              getBounds(\n                getICBorderPath(inputPinIds.length, outputPinIds.length)\n              )\n            ),\n            trayComponent: () => (\n              <g stroke=\"black\" strokeWidth={1}>\n                <rect x={10} y={10} width={30} height={30} fill=\"none\" />\n\n                <line x1={10} y1={15} x2={5} y2={15} />\n                <line x1={40} y1={15} x2={45} y2={15} />\n\n                <line x1={10} y1={35} x2={5} y2={35} />\n                <line x1={40} y1={35} x2={45} y2={35} />\n              </g>\n            ),\n            component: \"integrated-circuit\",\n            componentProps,\n          },\n          pins,\n        };\n        return def;\n      });\n  }\n);\n\nexport default [IntegratedCircuitDefinitionSource];\n\nfunction circuitPinPosition(pinIndex: number, direction: PinDirection): Point {\n  return {\n    x: direction === \"input\" ? 0 : 100,\n    y: pinIndex * 50 + 25,\n  };\n}\n","import { NodeDefinitionSource } from \"../../types\";\n\nconst InteractionNodeDefinitionSources: NodeDefinitionSource[] = [\n  require(\"./momentary\").default,\n  require(\"./toggle\").default,\n];\n\nexport default InteractionNodeDefinitionSources;\n","import { NodeDefinitionSource } from \"../types\";\n\nimport IntegratedCircuitDefinitionSources from \"./integrated-circuits\";\nimport InteractionNodeDefinitionSources from \"./interaction\";\nimport LogicNodeDefinitionSources from \"./logic\";\nimport OutputNodeDefinitionSources from \"./output\";\nimport PinNodeDefinitionSources from \"./pins\";\n\nconst nodeDefinitionSources: NodeDefinitionSource[] = [\n  ...IntegratedCircuitDefinitionSources,\n  ...InteractionNodeDefinitionSources,\n  ...LogicNodeDefinitionSources,\n  ...OutputNodeDefinitionSources,\n  ...PinNodeDefinitionSources,\n];\n\nexport default nodeDefinitionSources;\n","import { NodeDefinitionSource } from \"../../types\";\n\nconst LogicNodeDefinitionSources: NodeDefinitionSource[] = [\n  require(\"./and\").default,\n  require(\"./buffer\").default,\n  require(\"./nand\").default,\n  require(\"./nor\").default,\n  require(\"./not\").default,\n  require(\"./or\").default,\n  require(\"./xor\").default,\n];\n\nexport default LogicNodeDefinitionSources;\n","import { NodeDefinitionSource } from \"../../types\";\n\nconst OutputNodeDefinitionSources: NodeDefinitionSource[] = [\n  require(\"./led\").default,\n  require(\"./seg7\").default,\n];\n\nexport default OutputNodeDefinitionSources;\n","import { NodeDefinitionSource } from \"../../types\";\n\nconst PinNodeDefinitionSources: NodeDefinitionSource[] = [\n  require(\"./high\").default,\n  require(\"./input\").default,\n  require(\"./output\").default,\n];\n\nexport default PinNodeDefinitionSources;\n","import flatMap from \"lodash/flatMap\";\nimport find from \"lodash/find\";\n\nimport { asArray, MaybeArray } from \"@/arrays\";\nimport { AppState } from \"@/store\";\n\nimport nodeDefinitionSources from \"@/nodes/definitions\";\n\nimport { NodeDefinition, NodeDefinitionSource } from \"../../../nodes/types\";\nimport { createSelector } from \"reselect\";\n\n/**\n * Gets an array of node definitions from the current state.\n * WARN: Returns an unstable reference, not react safe.\n */\nlet cachedNodeDefinitionsSelector: NodeDefinition[] = [];\nexport const nodeDefinitionsSelector = (state: AppState) => {\n  const nodeDefinitions = flatMap(nodeDefinitionSources, (source) =>\n    resolveSources(source, state)\n  );\n\n  if (\n    nodeDefinitions.every(\n      (def, index) => def === cachedNodeDefinitionsSelector[index]\n    )\n  ) {\n    return cachedNodeDefinitionsSelector;\n  }\n\n  cachedNodeDefinitionsSelector = nodeDefinitions;\n  return nodeDefinitions;\n};\n\nexport const nodeDefinitionsByTypeSelector = createSelector(\n  nodeDefinitionsSelector,\n  (defs) => {\n    const defsByType: Record<string, NodeDefinition> = {};\n    for (const def of defs) {\n      defsByType[def.type] = def;\n    }\n    return defsByType;\n  }\n);\n\nexport const nodeDefinitionFromTypeSelector = (\n  state: AppState,\n  nodeType: string\n) => {\n  const definitions = nodeDefinitionsSelector(state);\n  return find(definitions, (x) => x.type === nodeType) ?? null;\n};\n\nfunction resolveSources(\n  source: NodeDefinitionSource,\n  state: AppState\n): NodeDefinition[] {\n  let resolved: MaybeArray<NodeDefinition>;\n  if (typeof source === \"function\") {\n    resolved = source(state);\n  } else {\n    resolved = source;\n  }\n\n  return asArray(resolved);\n}\n","import { createSelector } from \"reselect\";\n\nimport { AppState } from \"@/store\";\n\nimport { Point, pointAdd, ZeroPoint } from \"@/geometry\";\n\nimport { nodeTypesByNodeIdSelector } from \"@/services/node-graph/selectors/nodes\";\nimport { nodeDefinitionsByTypeSelector } from \"@/services/node-types/selectors/node-types\";\n\nimport { nodePositionsByNodeIdSelector } from \"./node-positions\";\n\nexport const nodePinPositionsByPinIdByNodeIdSelector = createSelector(\n  nodeDefinitionsByTypeSelector,\n  nodePositionsByNodeIdSelector,\n  nodeTypesByNodeIdSelector,\n  (nodeDefsByType, nodePositionsByNodeId, nodeTypesByNodeId) => {\n    const nodePinPositionsByPinIdByNodeId: Record<\n      string,\n      Record<string, Point>\n    > = {};\n\n    const nodeIds = Object.keys(nodeTypesByNodeId);\n    for (const nodeId of nodeIds) {\n      const nodePinPositionsByPinId: Record<string, Point> = {};\n      nodePinPositionsByPinIdByNodeId[nodeId] = nodePinPositionsByPinId;\n\n      const nodePosition = nodePositionsByNodeId[nodeId] ?? ZeroPoint;\n\n      const elementType = nodeTypesByNodeId[nodeId];\n      if (!elementType) {\n        continue;\n      }\n      const def = nodeDefsByType[elementType];\n      if (!def) {\n        continue;\n      }\n\n      const pinIds = Object.keys(def.pins);\n      for (const pinId of pinIds) {\n        const relPinPosition = def.pins[pinId];\n        const pinPosition = pointAdd(nodePosition, relPinPosition);\n        nodePinPositionsByPinId[pinId] = pinPosition;\n      }\n    }\n\n    return nodePinPositionsByPinIdByNodeId;\n  }\n);\n\nexport const nodePinPositionFromNodePinSelector = (\n  state: AppState,\n  nodeId: string,\n  pinId: string\n) => {\n  const positonsByPinIdByNodeId = nodePinPositionsByPinIdByNodeIdSelector(\n    state\n  );\n  const nodePinPositions = positonsByPinIdByNodeId[nodeId];\n  if (!nodePinPositions) {\n    return ZeroPoint;\n  }\n  return nodePinPositions[pinId] ?? ZeroPoint;\n};\n","import {\n  createServiceReducerCreator,\n  createServiceSelectorCreator,\n} from \"../service-state-utils\";\n\nexport const createSelectionReducer = createServiceReducerCreator(\"selection\");\nexport const createSelectionSelector = createServiceSelectorCreator(\n  \"selection\"\n);\n","import { createSelector } from \"reselect\";\n\nimport pick from \"lodash/pick\";\n\nimport { nodesByNodeIdSelector } from \"@/services/node-graph/selectors/nodes\";\n\nimport { createSelectionSelector } from \"../utils\";\nimport { SelectionServiceState } from \"../state\";\n\nexport const selectedNodeIdsSelector = createSelectionSelector(\n  (state) => state.selectedNodeIds\n);\n\nexport const isNodeSelectedFromNodeIdSelector = createSelectionSelector(\n  (s: SelectionServiceState, nodeId: string) =>\n    s.selectedNodeIds.indexOf(nodeId) !== -1\n);\n\nexport const selectedNodesByIdSelector = createSelector(\n  nodesByNodeIdSelector,\n  selectedNodeIdsSelector,\n  (nodesById, selectedNodeIds) => pick(nodesById, selectedNodeIds)\n);\n\nexport const selectedConnectionIdsSelector = createSelectionSelector(\n  (state) => state.selectedConnectionIds\n);\n\nexport const isWireSelectedFromConnectionIdSelector = createSelectionSelector(\n  (s: SelectionServiceState, connectionId: string) =>\n    s.selectedConnectionIds.indexOf(connectionId) !== -1\n);\n\nexport const selectedJointIdsSelector = createSelectionSelector(\n  (state) => state.selectedJointIds\n);\n\nexport const isJointSelectedFromJointIdSelector = createSelectionSelector(\n  (s: SelectionServiceState, jointId: string) =>\n    s.selectedJointIds.indexOf(jointId) !== -1\n);\n","import { createSelector } from \"reselect\";\n\nimport {\n  magnitude,\n  normalizeRectangle,\n  pointSubtract,\n  ZeroPoint,\n} from \"@/geometry\";\nimport { MODIFIER_KEYS_NONE } from \"@/modifier-keys\";\n\nimport { nodePinPositionsByPinIdByNodeIdSelector } from \"@/services/node-layout/selectors/node-pin-positions\";\nimport { selectedNodeIdsSelector } from \"@/services/selection/selectors/selection\";\nimport { nodeIdsByCircuitIdSelector } from \"@/services/circuits/selectors/nodes\";\n\nimport { createCircuitEditorUiDragSelector } from \"../utils\";\nimport { CircuitEditorUiDragServiceState } from \"../state\";\n\nimport { gridJointSnapSelector, gridNodeSnapSelector } from \"./snap\";\n\n// FIXME: Hack to stop drag appearing on the wrong windows.\n// Drag state should be local to CircuitEditor, not global in redux.\nexport const isDragForCircuitSelector = createCircuitEditorUiDragSelector(\n  (s: CircuitEditorUiDragServiceState, circuitId: string) =>\n    s.dragCircuitId === circuitId\n);\n\nexport const dragModeSelector = createCircuitEditorUiDragSelector(\n  (s) => s.dragMode\n);\nexport const isDraggingSelector = createCircuitEditorUiDragSelector(\n  (s) => s.dragMode != null\n);\nexport const dragCircuitIdSelector = createCircuitEditorUiDragSelector(\n  (s) => s.dragCircuitId\n);\nexport const dragStartSelector = createCircuitEditorUiDragSelector(\n  (s) => s.dragStart\n);\nexport const dragEndSelector = createCircuitEditorUiDragSelector(\n  (s) => s.dragEnd\n);\n\nexport const dragModifierKeysSelector = createCircuitEditorUiDragSelector(\n  (s) => s.dragModifierKeys ?? MODIFIER_KEYS_NONE\n);\n\nexport const selectionRectSelector = createCircuitEditorUiDragSelector(\n  createSelector(\n    dragModeSelector.local,\n    dragStartSelector.local,\n    dragEndSelector.local,\n    (dragMode, dragStart, dragEnd) =>\n      dragMode === \"select\" && dragStart && dragEnd\n        ? normalizeRectangle(dragStart, dragEnd)\n        : null\n  )\n);\n\nexport const dragMoveOffsetSelector = createSelector(\n  dragModeSelector,\n  selectedNodeIdsSelector,\n  dragModifierKeysSelector,\n  dragStartSelector,\n  dragEndSelector,\n  gridNodeSnapSelector,\n  gridJointSnapSelector,\n  (\n    dragMode,\n    selectedNodeIds,\n    modifierKeys,\n    dragStart,\n    dragEnd,\n    nodeSnap,\n    jointSnap\n  ) => {\n    if (dragMode !== \"move\" || !dragStart || !dragEnd) {\n      return null;\n    }\n\n    let gridSnap = jointSnap;\n    if (selectedNodeIds.length > 0) {\n      // If we are dragging nodes, restrict everything to the node snap size.\n      gridSnap = nodeSnap;\n    }\n\n    const offset = pointSubtract(dragEnd, dragStart);\n    if (!modifierKeys.ctrlMetaKey) {\n      offset.x = Math.round(offset.x / gridSnap) * gridSnap;\n      offset.y = Math.round(offset.y / gridSnap) * gridSnap;\n    }\n\n    return offset;\n  }\n);\n\nexport const dragNewJointPositionSelector = createCircuitEditorUiDragSelector(\n  (state) => {\n    const gridSnap = gridJointSnapSelector.local(state);\n\n    const { dragMode, dragEnd, dragModifierKeys } = state;\n    if (dragMode !== \"new-joint\" || !dragEnd || !dragModifierKeys) {\n      return null;\n    }\n\n    const position = { ...dragEnd };\n    if (!dragModifierKeys.ctrlMetaKey) {\n      position.x = Math.round(position.x / gridSnap) * gridSnap;\n      position.y = Math.round(position.y / gridSnap) * gridSnap;\n    }\n\n    return position;\n  }\n);\n\nexport const dragWireTargetPinSelector = createSelector(\n  dragModeSelector,\n  dragEndSelector,\n  nodeIdsByCircuitIdSelector,\n  dragCircuitIdSelector,\n  nodePinPositionsByPinIdByNodeIdSelector,\n  (\n    dragMode,\n    dragEnd,\n    nodeIdsByCircuitId,\n    circuitId,\n    pinPositionsByPinIdByNodeId\n  ) => {\n    if (dragMode !== \"wire\" || !dragEnd || !circuitId) {\n      return null;\n    }\n\n    const nodeIds = nodeIdsByCircuitId[circuitId];\n    if (!nodeIds) {\n      return null;\n    }\n\n    for (const nodeId of nodeIds) {\n      const pinPositionsByPinId =\n        pinPositionsByPinIdByNodeId[nodeId] ?? ZeroPoint;\n      const pinIds = Object.keys(pinPositionsByPinId);\n      for (const pinId of pinIds) {\n        const pinPosition = pinPositionsByPinId[pinId];\n        const offset = pointSubtract(dragEnd, pinPosition);\n        const length = magnitude(offset);\n        if (length <= 6) {\n          return { nodeId, pinId };\n        }\n      }\n    }\n\n    return null;\n  }\n);\n","import { AnyAction } from \"redux\";\n\nimport { Point } from \"@/geometry\";\nimport { ModifierKeys } from \"@/modifier-keys\";\n\nexport const ACTION_FIELD_DRAG_START_JOINT = \"@field/drag/start/joint\" as const;\nexport const fieldDragStartJoint = (\n  jointId: string,\n  p: Point,\n  modifierKeys: ModifierKeys\n) => ({\n  type: ACTION_FIELD_DRAG_START_JOINT,\n  payload: {\n    ...p,\n    jointId,\n    modifierKeys,\n  },\n});\nexport type FieldDragStartJointAction = ReturnType<typeof fieldDragStartJoint>;\nexport function isFieldDragStartJointAction(\n  action: AnyAction\n): action is FieldDragStartJointAction {\n  return action.type === ACTION_FIELD_DRAG_START_JOINT;\n}\n","import { AnyAction } from \"redux\";\n\nimport { SelectionMode } from \"@/selection-mode\";\n\nexport const ACTION_SELECT_WIRE_JOINTS = \"@select/wire-joints\" as const;\nexport const selectWireJoints = (\n  jointId: string | string[],\n  mode: SelectionMode = \"set\"\n) => ({\n  type: ACTION_SELECT_WIRE_JOINTS,\n  payload: {\n    jointIds: Array.isArray(jointId) ? jointId : [jointId],\n    mode,\n  },\n});\nexport type SelectWireJointsAction = ReturnType<typeof selectWireJoints>;\nexport function isSelectWireJointsAction(\n  action: AnyAction\n): action is SelectWireJointsAction {\n  return action.type === ACTION_SELECT_WIRE_JOINTS;\n}\n","import { createSelector } from \"reselect\";\nimport { includes } from \"lodash\";\n\nimport { AppState } from \"@/store\";\n\nimport { Connection } from \"@/services/node-graph/types\";\n\nimport {\n  circuitIdFromNodeIdSelector,\n  nodeIdsFromCircuitIdSelector,\n} from \"./nodes\";\n\n/**\n * Get all connection ids for the given circuit id.\n *\n * A connection is in the circuit if both its input and output are for nodes in this circuit.\n *\n * WARN: Single-memoized, cache will bust if new circuit id passed.\n */\nexport const connectionIdsByCircuitIdSelector = createSelector(\n  (state: AppState, circuitId: string) =>\n    nodeIdsFromCircuitIdSelector(state, circuitId),\n  (state: AppState) => state.services.nodeGraph.connectionsById,\n  (nodeIds: string[], connectionsById: Record<string, Connection>) => {\n    return Object.keys(connectionsById).filter((connectionId) => {\n      const { inputPin, outputPin } = connectionsById[connectionId];\n\n      if (!includes(nodeIds, inputPin.nodeId)) {\n        return false;\n      }\n\n      if (!includes(nodeIds, outputPin.nodeId)) {\n        return false;\n      }\n\n      return true;\n    });\n  }\n);\n\nexport const circuitIdFromConnectionIdSelector = (\n  state: AppState,\n  connectionId: string\n) => {\n  const { connectionsById } = state.services.nodeGraph;\n  const conn = connectionsById[connectionId];\n  if (!conn) {\n    return null;\n  }\n\n  // Input or output doesn't matter,\n  // the ui prevents connections from crossing circuit boundaries.\n  const { nodeId } = conn.inputPin || conn.outputPin;\n  return circuitIdFromNodeIdSelector(state, nodeId);\n};\n","import { AppState } from \"@/store\";\n\nimport { circuitIdFromConnectionIdSelector } from \"./connections\";\n\n/**\n * A hideously inefficient and not react safe selector designed to\n * find the circuit a joint id belongs to.\n *\n * This exists because we have a single drag logic state across\n * multiple circuit windows, and we need to know which circuit\n * the drag operation is being performed for.\n *\n * This should be removed when the circuit-editor-ui-drag state is\n * refactored to be local to the CircuitEditor component\n */\nexport const circuitIdFromJointIdSelector = (\n  state: AppState,\n  jointId: string\n) => {\n  const { wireJointIdsByConnectionId } = state.services.nodeLayout;\n  const connectionId = Object.keys(wireJointIdsByConnectionId).find(\n    (connId) => wireJointIdsByConnectionId[connId].indexOf(jointId) !== -1\n  );\n  if (!connectionId) {\n    return null;\n  }\n\n  return circuitIdFromConnectionIdSelector(state, connectionId);\n};\n","import { AnyAction } from \"redux\";\n\nimport { Point } from \"@/geometry\";\nimport { ModifierKeys } from \"@/modifier-keys\";\n\nexport const ACTION_FIELD_DRAG_START_NEWJOINT = \"@field/drag/start/new-joint\" as const;\nexport const fieldDragStartNewJoint = (\n  connectionId: string,\n  addAfterJointId: string | null,\n  p: Point,\n  modifierKeys: ModifierKeys\n) => ({\n  type: ACTION_FIELD_DRAG_START_NEWJOINT,\n  payload: {\n    ...p,\n    connectionId,\n    addAfterJointId,\n    modifierKeys,\n  },\n});\nexport type FieldDragStartNewJointAction = ReturnType<\n  typeof fieldDragStartNewJoint\n>;\nexport function isFieldDragStartNewJointAction(\n  action: AnyAction\n): action is FieldDragStartNewJointAction {\n  return action.type === ACTION_FIELD_DRAG_START_NEWJOINT;\n}\n","import { isFieldDragStartNewJointAction } from \"@/actions/field-drag-start-newjoint\";\nimport { circuitIdFromConnectionIdSelector } from \"@/services/circuits/selectors/connections\";\n\nimport { createCircuitEditorUiDragReducer } from \"../utils\";\n\nexport default createCircuitEditorUiDragReducer((state, action, appState) => {\n  if (!isFieldDragStartNewJointAction(action)) {\n    return state;\n  }\n\n  const { connectionId, addAfterJointId, modifierKeys, x, y } = action.payload;\n\n  return {\n    ...state,\n    dragMode: \"new-joint\" as const,\n    dragCircuitId: circuitIdFromConnectionIdSelector(appState, connectionId),\n    dragStart: {\n      x,\n      y,\n    },\n    dragNewJointConnectionId: connectionId,\n    dragNewJointAfterJointId: addAfterJointId,\n    dragModifierKeys: modifierKeys,\n  };\n});\n","import { AnyAction } from \"redux\";\n\nimport { Point } from \"@/geometry\";\nimport { ModifierKeys } from \"@/modifier-keys\";\n\nexport const ACTION_FIELD_DRAG_START_NODE = \"@field/drag/start/node\" as const;\nexport const fieldDragStartNode = (\n  nodeId: string,\n  p: Point,\n  modifierKeys: ModifierKeys\n) => ({\n  type: ACTION_FIELD_DRAG_START_NODE,\n  payload: {\n    ...p,\n    nodeId,\n    modifierKeys,\n  },\n});\nexport type FieldDragStartNodeAction = ReturnType<typeof fieldDragStartNode>;\nexport function isFieldDragStartNodeAction(\n  action: AnyAction\n): action is FieldDragStartNodeAction {\n  return action.type === ACTION_FIELD_DRAG_START_NODE;\n}\n","import { AnyAction } from \"redux\";\n\nimport { SelectionMode } from \"@/selection-mode\";\n\nexport const ACTION_SELECT_NODES = \"@select/nodes\" as const;\nexport const selectNodes = (\n  nodeId: string | string[],\n  mode: SelectionMode = \"set\"\n) => ({\n  type: ACTION_SELECT_NODES,\n  payload: {\n    nodeIds: Array.isArray(nodeId) ? nodeId : [nodeId],\n    mode,\n  },\n});\nexport type SelectNodesAction = ReturnType<typeof selectNodes>;\nexport function isSelectNodesAction(\n  action: AnyAction\n): action is SelectNodesAction {\n  return action.type === ACTION_SELECT_NODES;\n}\n","import { AnyAction } from \"redux\";\n\nimport { Point } from \"@/geometry\";\n\nexport const ACTION_FIELD_DRAG_START_SELECT = \"@field/drag/start/select\" as const;\nexport const fieldDragStartSelect = (p: Point, circuitId: string) => ({\n  type: ACTION_FIELD_DRAG_START_SELECT,\n  payload: {\n    ...p,\n    circuitId,\n  },\n});\nexport type FieldDragStartSelectAction = ReturnType<\n  typeof fieldDragStartSelect\n>;\nexport function isFieldDragStartSelectAction(\n  action: AnyAction\n): action is FieldDragStartSelectAction {\n  return action.type === ACTION_FIELD_DRAG_START_SELECT;\n}\n","import { isFieldDragStartSelectAction } from \"@/actions/field-drag-start-select\";\n\nimport { createCircuitEditorUiDragReducer } from \"../utils\";\n\nexport default createCircuitEditorUiDragReducer((state, action) => {\n  if (!isFieldDragStartSelectAction(action)) {\n    return state;\n  }\n\n  const { x, y, circuitId } = action.payload;\n\n  return {\n    ...state,\n    dragMode: \"select\",\n    dragCircuitId: circuitId,\n    dragStart: {\n      x,\n      y,\n    },\n  };\n});\n","import { AnyAction } from \"redux\";\n\nimport { Point } from \"@/geometry\";\nimport { NodePin } from \"@/services/node-graph/types\";\n\nexport const ACTION_FIELD_DRAG_START_WIRE = \"@field/drag/start/wire\" as const;\nexport const fieldDragStartWire = (dragStart: Point, pin: NodePin) => ({\n  type: ACTION_FIELD_DRAG_START_WIRE,\n  payload: {\n    dragStart,\n    pin,\n  },\n});\nexport type FieldDragStartWireAction = ReturnType<typeof fieldDragStartWire>;\nexport function isFieldDragStartWireAction(\n  action: AnyAction\n): action is FieldDragStartWireAction {\n  return action.type === ACTION_FIELD_DRAG_START_WIRE;\n}\n","import { isFieldDragStartWireAction } from \"@/actions/field-drag-start-wire\";\nimport { nodeIdsByCircuitIdSelector } from \"@/services/circuits/selectors/nodes\";\nimport { AppState } from \"@/store\";\n\nimport { createCircuitEditorUiDragReducer } from \"../utils\";\n\nexport default createCircuitEditorUiDragReducer((state, action, rootState) => {\n  if (!isFieldDragStartWireAction(action)) {\n    return state;\n  }\n\n  const { dragStart, pin } = action.payload;\n\n  const circuitId = circuitIdForNode(pin.nodeId, rootState);\n  if (!circuitId) {\n    return state;\n  }\n\n  return {\n    ...state,\n    dragMode: \"wire\",\n    dragCircuitId: circuitId,\n    dragStart,\n    dragWireSource: pin,\n  };\n});\n\nfunction circuitIdForNode(nodeId: string, state: AppState) {\n  const nodeIdsByCircuit = nodeIdsByCircuitIdSelector(state);\n  for (const circuitId of Object.keys(nodeIdsByCircuit)) {\n    if (nodeIdsByCircuit[circuitId].indexOf(nodeId) !== -1) {\n      return circuitId;\n    }\n  }\n  return null;\n}\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_FIELD_MOUSE_LEAVE = \"@field/mouse/leave\" as const;\nexport const fieldMouseLeave = () => ({\n  type: ACTION_FIELD_MOUSE_LEAVE,\n});\nexport type FieldMouseLeaveAction = ReturnType<typeof fieldMouseLeave>;\nexport function isFieldMouseLeaveAction(\n  action: AnyAction\n): action is FieldMouseLeaveAction {\n  return action.type === ACTION_FIELD_MOUSE_LEAVE;\n}\n","import { concatReducers } from \"@/store/utils\";\n\nimport dragContinueReducer from \"./drag-continue\";\nimport dragEndReducer from \"./drag-end\";\nimport dragStartJointReducer from \"./drag-start-joint\";\nimport dragStartNewJointReducer from \"./drag-start-newjoint\";\nimport dragStartNodeReducer from \"./drag-start-node\";\nimport dragStartSelectReducer from \"./drag-start-select\";\nimport dragStartWireReducer from \"./drag-start-wire\";\nimport mouseLeaveReducer from \"./mouse-leave\";\n\nexport default concatReducers(\n  dragContinueReducer,\n  dragEndReducer,\n  dragStartJointReducer,\n  dragStartNewJointReducer,\n  dragStartNodeReducer,\n  dragStartSelectReducer,\n  dragStartWireReducer,\n  mouseLeaveReducer\n);\n","import { AnyAction } from \"redux\";\n\nimport { normalizeRectangle, pointSubtract } from \"@/geometry\";\nimport { fpSet } from \"@/utils\";\nimport { getSelectMode } from \"@/selection-mode\";\n\nimport { AppState, defaultAppState } from \"@/store\";\nimport rootReducer from \"@/store/reducer\";\n\nimport { isFieldDragEndAction } from \"@/actions/field-drag-end\";\nimport { selectRegion } from \"@/actions/select-region\";\nimport { moveSelection } from \"@/actions/selection-move\";\nimport { addWireJoint } from \"@/actions/wire-joint-add\";\nimport { attachWire } from \"@/actions/wire-attach\";\n\nimport {\n  applyGridJointSnapSelector,\n  applyGridNodeSnapSelector,\n} from \"../selectors/snap\";\nimport { dragWireTargetPinSelector } from \"../selectors/drag\";\n\nexport default function dragEndReducer(\n  state: AppState = defaultAppState,\n  action: AnyAction\n) {\n  if (!isFieldDragEndAction(action)) {\n    return state;\n  }\n\n  const { x, y, modifierKeys } = action.payload;\n\n  const {\n    dragMode,\n    dragStart,\n    dragCircuitId,\n    dragNewJointAfterJointId,\n    dragNewJointConnectionId,\n    dragWireSource,\n  } = state.services.circuitEditorUiDrag;\n\n  switch (dragMode) {\n    case \"select\": {\n      if (dragStart && dragCircuitId) {\n        const selectionMode = getSelectMode(modifierKeys);\n        const rect = normalizeRectangle(dragStart, { x, y });\n        state = rootReducer(\n          state,\n          selectRegion(rect, dragCircuitId, selectionMode)\n        );\n      }\n      break;\n    }\n    case \"move\": {\n      if (dragStart) {\n        let moveBy = pointSubtract({ x, y }, dragStart);\n        const hasNodes = state.services.selection.selectedNodeIds.length > 0;\n        if (!modifierKeys.ctrlMetaKey) {\n          // We apply the snap here because we want to snap the offset, not the resulting positions.\n          // Applying the snap in moveSelection can result in different objects moving different distances\n          // depending on their snap.\n          if (hasNodes) {\n            moveBy = applyGridNodeSnapSelector(state, moveBy);\n          } else {\n            moveBy = applyGridJointSnapSelector(state, moveBy);\n          }\n        }\n        state = rootReducer(state, moveSelection(moveBy.x, moveBy.y));\n      }\n      break;\n    }\n    case \"new-joint\": {\n      const position = applyGridJointSnapSelector(state, { x, y });\n      state = rootReducer(\n        state,\n        addWireJoint(\n          dragNewJointConnectionId!,\n          dragNewJointAfterJointId,\n          position\n        )\n      );\n      break;\n    }\n    case \"wire\": {\n      // We need to apply the actual drag end into the state for dragWireTargetPinSelector to process it.\n      // TODO: Split off a new (uncached) selector that takes the position to check for pins at.\n      const stateWithDragEnd = fpSet(\n        state,\n        \"services\",\n        \"circuitEditorUiDrag\",\n        \"dragEnd\",\n        { x, y }\n      );\n      const endPin = dragWireTargetPinSelector(stateWithDragEnd);\n      if (dragWireSource && endPin) {\n        state = rootReducer(state, attachWire(dragWireSource, endPin));\n      }\n      break;\n    }\n  }\n\n  state = fpSet(state, \"services\", \"circuitEditorUiDrag\", (value) => ({\n    ...value,\n    dragMode: null,\n    dragCircuitId: null,\n    dragModifierKeys: null,\n    dragStart: null,\n    dragEnd: null,\n    dragNewNodeType: null,\n    dragWireSource: null,\n  }));\n\n  return state;\n}\n","import { AnyAction } from \"redux\";\n\nimport { fpSet } from \"@/utils\";\nimport { getSelectMode } from \"@/selection-mode\";\n\nimport { AppState, defaultAppState } from \"@/store\";\nimport rootReducer from \"@/store/reducer\";\n\nimport { isFieldDragStartJointAction } from \"@/actions/field-drag-start-joint\";\nimport { selectWireJoints } from \"@/actions/select-wire-joints\";\n\nimport { isJointSelectedFromJointIdSelector } from \"@/services/selection/selectors/selection\";\nimport { circuitIdFromJointIdSelector } from \"@/services/circuits/selectors/joints\";\n\nexport default function dragStartJointReducer(\n  state: AppState = defaultAppState,\n  action: AnyAction\n) {\n  if (!isFieldDragStartJointAction(action)) {\n    return state;\n  }\n\n  const { jointId, x, y, modifierKeys } = action.payload;\n\n  state = fpSet(state, \"services\", \"circuitEditorUiDrag\", (value) => ({\n    ...value,\n    dragMode: \"move\" as const,\n    dragCircuitId: circuitIdFromJointIdSelector(state, jointId),\n    dragStart: {\n      x,\n      y,\n    },\n  }));\n\n  if (!isJointSelectedFromJointIdSelector(state, jointId)) {\n    const selectionMode = getSelectMode(modifierKeys);\n    // Dragging a node that was not previously selected.  Perform a selection on the node.\n    state = rootReducer(state, selectWireJoints(jointId, selectionMode));\n  }\n\n  return state;\n}\n","import { AnyAction } from \"redux\";\n\nimport { fpSet } from \"@/utils\";\nimport { getSelectMode } from \"@/selection-mode\";\n\nimport { AppState, defaultAppState } from \"@/store\";\nimport rootReducer from \"@/store/reducer\";\n\nimport { isFieldDragStartNodeAction } from \"@/actions/field-drag-start-node\";\nimport { selectNodes } from \"@/actions/select-nodes\";\n\nimport { isNodeSelectedFromNodeIdSelector } from \"@/services/selection/selectors/selection\";\nimport { circuitIdFromNodeIdSelector } from \"@/services/circuits/selectors/nodes\";\n\nexport default function dragStartNodeReducer(\n  state: AppState = defaultAppState,\n  action: AnyAction\n) {\n  if (!isFieldDragStartNodeAction(action)) {\n    return state;\n  }\n\n  const { nodeId, x, y, modifierKeys } = action.payload;\n\n  state = fpSet(state, \"services\", \"circuitEditorUiDrag\", (value) => ({\n    ...value,\n    dragMode: \"move\" as const,\n    dragCircuitId: circuitIdFromNodeIdSelector(state, nodeId),\n    dragStart: {\n      x,\n      y,\n    },\n  }));\n\n  if (!isNodeSelectedFromNodeIdSelector(state, nodeId)) {\n    const selectionMode = getSelectMode(modifierKeys);\n    // Dragging a node that was not previously selected.  Perform a selection on the node.\n    state = rootReducer(state, selectNodes(nodeId, selectionMode));\n  }\n\n  return state;\n}\n","import { isFieldMouseLeaveAction } from \"@/actions/field-mouse-leave\";\n\nimport { createCircuitEditorUiDragReducer } from \"../utils\";\n\nexport default createCircuitEditorUiDragReducer((state, action) => {\n  if (!isFieldMouseLeaveAction(action)) {\n    return state;\n  }\n\n  if (state.dragMode == null) {\n    return state;\n  }\n\n  return {\n    ...state,\n    dragEnd: null,\n  };\n});\n","import { isAddCircuitAction } from \"@/actions/circuit-add\";\nimport { createCircuitsReducer } from \"../utils\";\n\nexport default createCircuitsReducer((state, action) => {\n  if (!isAddCircuitAction(action)) {\n    return state;\n  }\n\n  const circuitId = action.payload.circuitId;\n  let circuitName = action.payload.circuitName;\n\n  if (!circuitName) {\n    circuitName = `Circuit ${\n      Object.keys(state.circuitNamesByCircuitId).length + 1\n    }`;\n  }\n\n  return {\n    ...state,\n    circuitNamesByCircuitId: {\n      ...state.circuitNamesByCircuitId,\n      [circuitId]: circuitName,\n    },\n    nodeIdsByCircuitId: {\n      ...state.nodeIdsByCircuitId,\n      [circuitId]: [],\n    },\n  };\n});\n","import pick from \"lodash/pick\";\nimport mapValues from \"lodash/mapValues\";\nimport difference from \"lodash/difference\";\n\nimport { isDeleteCircuitAction } from \"@/actions/circuit-delete\";\nimport { nodeIdsFromTypeSelector } from \"@/services/node-graph/selectors/nodes\";\nimport { circuitIdToNodeType } from \"@/nodes/definitions/integrated-circuits/utils\";\n\nimport { createCircuitsReducer } from \"../utils\";\n\nexport default createCircuitsReducer((state, action, rootState) => {\n  if (!isDeleteCircuitAction(action)) {\n    return state;\n  }\n\n  const { circuitId } = action.payload;\n\n  const remainingCircuitIds = Object.keys(state.circuitNamesByCircuitId).filter(\n    (x) => x !== circuitId\n  );\n\n  const circuitTypeNodeIds = nodeIdsFromTypeSelector(\n    rootState,\n    circuitIdToNodeType(circuitId)\n  );\n\n  let nodeIdsByCircuitId = pick(state.nodeIdsByCircuitId, remainingCircuitIds);\n\n  nodeIdsByCircuitId = mapValues(nodeIdsByCircuitId, (nodeIds) =>\n    difference(nodeIds, circuitTypeNodeIds)\n  );\n\n  return {\n    ...state,\n    nodeIdsByCircuitId: nodeIdsByCircuitId,\n    circuitNamesByCircuitId: pick(\n      state.circuitNamesByCircuitId,\n      remainingCircuitIds\n    ),\n  };\n});\n","import { isRenameCircuitAction } from \"@/actions/circuit-rename\";\nimport { createCircuitsReducer } from \"../utils\";\n\nexport default createCircuitsReducer((state, action) => {\n  if (!isRenameCircuitAction(action)) {\n    return state;\n  }\n\n  const { circuitId, circuitName } = action.payload;\n\n  const trimmedName = circuitName.trim();\n\n  if (trimmedName === \"\") {\n    return state;\n  }\n\n  return {\n    ...state,\n    circuitNamesByCircuitId: {\n      ...state.circuitNamesByCircuitId,\n      [circuitId]: trimmedName,\n    },\n  };\n});\n","import { isAddNodeAction } from \"@/actions/node-add\";\n\nimport { createCircuitsReducer } from \"../utils\";\n\nexport default createCircuitsReducer((state, action) => {\n  if (!isAddNodeAction(action)) {\n    return state;\n  }\n\n  const { nodeId, circuitId } = action.payload;\n\n  const targetCircuitId = circuitId;\n\n  return {\n    ...state,\n    nodeIdsByCircuitId: {\n      ...state.nodeIdsByCircuitId,\n      [targetCircuitId]: [...state.nodeIdsByCircuitId[targetCircuitId], nodeId],\n    },\n  };\n});\n","import { isDeleteNodeAction } from \"@/actions/node-delete\";\nimport mapValues from \"lodash/mapValues\";\n\nimport { createCircuitsReducer } from \"../utils\";\n\nexport default createCircuitsReducer((state, action) => {\n  if (!isDeleteNodeAction(action)) {\n    return state;\n  }\n\n  const { nodeIds } = action.payload;\n\n  return {\n    ...state,\n    nodeIdsByCircuitId: mapValues(state.nodeIdsByCircuitId, (circuitNodeIds) =>\n      circuitNodeIds.filter(\n        (circuitNodeId) => nodeIds.indexOf(circuitNodeId) === -1\n      )\n    ),\n  };\n});\n","import { concatReducers } from \"@/store/utils\";\n\nimport circuitAddReducer from \"./circuit-add\";\nimport circuitDeleteReducer from \"./circuit-delete\";\nimport circuitRenameReducer from \"./circuit-rename\";\nimport nodeAddReducer from \"./node-add\";\nimport nodeDeleteReducer from \"./node-delete\";\nimport projectNewReducer from \"./project-new\";\n\nexport default concatReducers(\n  circuitAddReducer,\n  circuitDeleteReducer,\n  circuitRenameReducer,\n  nodeAddReducer,\n  nodeDeleteReducer,\n  projectNewReducer\n);\n","import { isNewProjectAction } from \"@/actions/project-new\";\n\nimport { ROOT_CIRCUIT_ID } from \"../constants\";\nimport { createCircuitsReducer } from \"../utils\";\n\nexport default createCircuitsReducer((state, action) => {\n  if (!isNewProjectAction(action)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    circuitNamesByCircuitId: {\n      [ROOT_CIRCUIT_ID]: \"Root\",\n    },\n    nodeIdsByCircuitId: {\n      [ROOT_CIRCUIT_ID]: [],\n    },\n  };\n});\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_COPY_NODES = \"@clipboard/copy\" as const;\nexport const copyNodes = (nodeId: string | string[]) => ({\n  type: ACTION_COPY_NODES,\n  payload: {\n    nodeIds: Array.isArray(nodeId) ? nodeId : [nodeId],\n  },\n});\nexport type CopyNodesAction = ReturnType<typeof copyNodes>;\nexport function isCopyNodesAction(\n  action: AnyAction\n): action is CopyNodesAction {\n  return action.type === ACTION_COPY_NODES;\n}\n","import * as yup from \"yup\";\n\nexport interface Node {\n  /**\n   * The type of this node.\n   */\n  nodeType: string;\n\n  /**\n   * The user provided name of this node.\n   */\n  nodeName: string | null;\n}\n\n/**\n * Identifies a pin on a specific node.\n */\nexport interface NodePin {\n  nodeId: string;\n  pinId: string;\n}\nexport const nodePinSchema = yup.object().shape({\n  nodeId: yup.string().required().min(1),\n  pinId: yup.string().required().min(1),\n});\nexport function nodePinEquals(a: NodePin, b: NodePin) {\n  return a.nodeId === b.nodeId && a.pinId === b.pinId;\n}\n\n/**\n * A connection from a node output to a node input.\n */\nexport interface Connection {\n  /**\n   * The output pin on a node, sending a value outwards.\n   */\n  outputPin: NodePin;\n\n  /**\n   * The input pin on a node to receive the value.\n   */\n  inputPin: NodePin;\n}\n","import values from \"lodash/values\";\nimport uniq from \"lodash/uniq\";\nimport { createSelector } from \"reselect\";\n\nimport { NodeGraphServiceState } from \"../state\";\nimport { createNodeGraphSelector } from \"../utils\";\nimport { NodePin, nodePinEquals } from \"../types\";\n\nexport const connectionsByIdSelector = createNodeGraphSelector(\n  (s) => s.connectionsById\n);\n\nexport const connectionIdsSelector = createNodeGraphSelector(\n  createSelector(\n    (s) => s.connectionsById,\n    (connectionsById) => Object.keys(connectionsById)\n  )\n);\n\nexport const connectionFromConnectionIdSelector = createNodeGraphSelector(\n  (s: NodeGraphServiceState, connectionId: string) =>\n    s.connectionsById[connectionId]\n);\n\nexport const connectionsSelector = createNodeGraphSelector(\n  createSelector(\n    (state: NodeGraphServiceState) => state.connectionsById,\n    (connectionsById) => values(connectionsById)\n  )\n);\n\nexport const connectionIdFromInputPinSelector = createNodeGraphSelector(\n  (state: NodeGraphServiceState, pin: NodePin) => {\n    const { connectionsById } = state;\n    const connectionIds = Object.keys(connectionsById);\n    for (const connectionId of connectionIds) {\n      const connection = connectionsById[connectionId];\n      if (nodePinEquals(connection.inputPin, pin)) {\n        return connectionId;\n      }\n    }\n\n    return null;\n  }\n);\n\n/**\n * Gets an array of connection ids supplying input to the specified node.\n * WARN: Not react safe.  For reducer use only.\n */\nexport const nodeInputConnectionIdsFromNodeIdSelector = createNodeGraphSelector(\n  (state: NodeGraphServiceState, nodeId: string) =>\n    Object.keys(state.connectionsById).filter(\n      (connectionId) =>\n        state.connectionsById[connectionId].inputPin.nodeId === nodeId\n    )\n);\n\n/**\n * Gets an array of connection ids leaving the given node.\n * WARN: Not react safe.  For reducer use only.\n */\nexport const nodeOutputConnectionIdsFromNodeIdSelector = createNodeGraphSelector(\n  (state: NodeGraphServiceState, nodeId: string) =>\n    Object.keys(state.connectionsById).filter(\n      (connectionId) =>\n        state.connectionsById[connectionId].outputPin.nodeId === nodeId\n    )\n);\n\n/**\n * Gets an array of connection ids attached to the given node.\n * WARN: Not react safe.  For reducer use only.\n */\nexport const nodeConnectionIdsFromNodeIdSelector = createNodeGraphSelector(\n  (state: NodeGraphServiceState, nodeId: string) => {\n    const inputs = nodeInputConnectionIdsFromNodeIdSelector.local(\n      state,\n      nodeId\n    );\n    const outputs = nodeOutputConnectionIdsFromNodeIdSelector.local(\n      state,\n      nodeId\n    );\n    return uniq([...inputs, ...outputs]);\n  }\n);\n","import { AppState } from \"@/store\";\n\nimport { nodeDefinitionFromTypeSelector } from \"@/services/node-types/selectors/node-types\";\n\nimport { nodeTypeFromNodeIdSelector } from \"./nodes\";\n\nexport const nodeDefFromNodeIdSelector = (state: AppState, nodeId: string) => {\n  const nodeType = nodeTypeFromNodeIdSelector(state, nodeId);\n  if (!nodeType) {\n    return null;\n  }\n\n  const def = nodeDefinitionFromTypeSelector(state, nodeType);\n\n  return def;\n};\n","import { circuitIdFromNodeIdSelector } from \"@/services/circuits/selectors/nodes\";\nimport { circuitIdToNodeType } from \"@/nodes/definitions/integrated-circuits/utils\";\nimport { AppState } from \"@/store\";\n\nimport { NodePin } from \"../types\";\n\nimport { connectionsSelector } from \"./connections\";\nimport { nodeDefFromNodeIdSelector } from \"./node-def\";\nimport { nodeIdsFromTypeSelector, nodeTypeFromNodeIdSelector } from \"./nodes\";\n\nexport const pinDirectionFromNodePinSelector = (\n  state: AppState,\n  nodeId: string,\n  pinId: string\n) => {\n  const def = nodeDefFromNodeIdSelector(state, nodeId);\n  if (!def) {\n    return null;\n  }\n\n  const pinDef = def.pins[pinId];\n  if (!pinDef) {\n    return null;\n  }\n  return pinDef.direction;\n};\n\n/**\n * Gets a map of node input pins to their output sources given a node id.\n *\n * WARN: Not react safe.  For reducer use only\n */\nexport const nodeOutputSourcesByPinIdFromNodeIdSelector = (\n  state: AppState,\n  nodeId: string\n) => {\n  const connections = connectionsSelector(state);\n  const nodeDef = nodeDefFromNodeIdSelector(state, nodeId);\n\n  if (!nodeDef) {\n    return {};\n  }\n\n  let outputPins: string[] = [];\n  outputPins = Object.keys(nodeDef.pins).filter(\n    (x) => nodeDef.pins[x].direction === \"output\"\n  );\n\n  const outputConnections = connections.filter(\n    (x) => x.outputPin.nodeId === nodeId\n  );\n\n  const result: Record<string, NodePin[]> = {};\n  for (const pin of outputPins) {\n    result[pin] = [];\n  }\n\n  for (const connection of outputConnections) {\n    const { outputPin, inputPin } = connection;\n    result[outputPin.pinId].push(inputPin);\n  }\n\n  return result;\n};\n\nexport const nodePinsFromPinNodeSelector = (\n  state: AppState,\n  nodeId: string\n): NodePin[] => {\n  const nodeType = nodeTypeFromNodeIdSelector(state, nodeId);\n  if (nodeType !== \"pin-input\" && nodeType !== \"pin-output\") {\n    return [];\n  }\n\n  const circuitId = circuitIdFromNodeIdSelector(state, nodeId);\n  if (!circuitId) {\n    return [];\n  }\n\n  const icNodeType = circuitIdToNodeType(circuitId);\n  const icNodeIds = nodeIdsFromTypeSelector(state, icNodeType);\n\n  return icNodeIds.map((icNodeId) => ({ nodeId: icNodeId, pinId: nodeId }));\n};\n","import {\n  createServiceReducerCreator,\n  createServiceSelectorCreator,\n} from \"../service-state-utils\";\n\nexport const createClipboardReducer = createServiceReducerCreator(\"clipboard\");\nexport const createClipboardSelector = createServiceSelectorCreator(\n  \"clipboard\"\n);\n","import { concatReducers } from \"@/store/utils\";\n\nimport clipboardCopyReducer from \"./clipboard-copy\";\nimport clipboardPasteReducer from \"./clipboard-paste\";\n\nconst clipboardReducer = concatReducers(\n  clipboardCopyReducer,\n  clipboardPasteReducer\n);\n\nexport default clipboardReducer;\n","import { v4 as uuidV4 } from \"uuid\";\nimport map from \"lodash/map\";\nimport mapValues from \"lodash/mapValues\";\nimport findIndex from \"lodash/findIndex\";\nimport zipObject from \"lodash/zipObject\";\n\nimport { pointSubtract } from \"@/geometry\";\n\nimport { isCopyNodesAction } from \"@/actions/clipboard-copy\";\n\nimport { nodeFromNodeIdSelector } from \"@/services/node-graph/selectors/nodes\";\nimport { nodeOutputSourcesByPinIdFromNodeIdSelector } from \"@/services/node-graph/selectors/pins\";\nimport { nodePositionsByNodeIdSelector } from \"@/services/node-layout/selectors/node-positions\";\n\nimport { ClipboardNode } from \"../types\";\nimport { createClipboardReducer } from \"../utils\";\n\nexport default createClipboardReducer((state, action, appState) => {\n  if (!isCopyNodesAction(action)) {\n    return state;\n  }\n\n  const { nodeIds } = action.payload;\n  if (nodeIds.length === 0) {\n    return state;\n  }\n\n  const nodePositionsById = nodePositionsByNodeIdSelector(appState);\n\n  const copyIds = zipObject(\n    nodeIds,\n    map(nodeIds, () => uuidV4())\n  );\n\n  function nodeIsSelected(id: string): boolean {\n    return findIndex(nodeIds, (x) => x === id) !== -1;\n  }\n\n  const rootPosition = nodePositionsById[nodeIds[0]];\n\n  const copyNodes: ClipboardNode[] = nodeIds.map((nodeId) => {\n    const node = nodeFromNodeIdSelector(appState, nodeId);\n    const outputs = nodeOutputSourcesByPinIdFromNodeIdSelector(\n      appState,\n      nodeId\n    );\n    const copyNode: ClipboardNode = {\n      id: copyIds[nodeId],\n      nodeType: node.nodeType,\n      offset: pointSubtract(nodePositionsById[nodeId], rootPosition),\n      outputs: mapValues(outputs, (conns) =>\n        conns\n          .filter((x) => nodeIsSelected(x.nodeId))\n          .map((c) => ({ nodeId: copyIds[c.nodeId], pinId: c.pinId }))\n      ),\n    };\n    return copyNode;\n  });\n\n  return {\n    ...state,\n    clipboardNodes: copyNodes,\n    clipboardPasteOrigin: rootPosition,\n  };\n});\n","import { AnyAction } from \"redux\";\nimport zipObject from \"lodash/zipObject\";\nimport map from \"lodash/map\";\nimport values from \"lodash/values\";\nimport { v4 as uuidV4 } from \"uuid\";\n\nimport { pointAdd } from \"@/geometry\";\nimport { AppState, defaultAppState } from \"@/store\";\nimport { fpSet } from \"@/utils\";\n\nimport rootReducer from \"@/store/reducer\";\n\nimport { addNode } from \"@/actions/node-add\";\nimport { attachWire } from \"@/actions/wire-attach\";\nimport { isPasteAction } from \"@/actions/clipboard-paste\";\nimport { selectNodes } from \"@/actions/select-nodes\";\n\nimport { gridNodeSnapSelector } from \"@/services/circuit-editor-ui-drag/selectors/snap\";\n\nexport default function clipboardPasteReducer(\n  state: AppState = defaultAppState,\n  action: AnyAction\n): AppState {\n  if (!isPasteAction(action)) {\n    return state;\n  }\n\n  const { targetCircuitId } = action.payload;\n\n  const { clipboardNodes, clipboardPasteOrigin } = state.services.clipboard;\n  const gridSnap = gridNodeSnapSelector(state);\n  const pastePosition = pointAdd(clipboardPasteOrigin, {\n    x: gridSnap,\n    y: gridSnap,\n  });\n\n  const pasteIds = zipObject(\n    clipboardNodes.map((x) => x.id),\n    map(clipboardNodes, () => uuidV4())\n  );\n\n  // Two passes: Create and Wire.\n\n  // Create the nodes.\n  for (const node of clipboardNodes) {\n    const { id, nodeType, offset } = node;\n    const p = pointAdd(pastePosition, offset);\n    state = rootReducer(\n      state,\n      addNode(nodeType, targetCircuitId, p, { nodeId: pasteIds[id] })\n    );\n  }\n\n  // Wire the nodes\n  for (const node of clipboardNodes) {\n    const { id, outputs } = node;\n    const sourceId = pasteIds[id];\n    for (const outputPin of Object.keys(outputs)) {\n      for (const output of outputs[outputPin]) {\n        const { nodeId: targetCopyId, pinId: targetPin } = output;\n        const targetId = pasteIds[targetCopyId];\n        state = rootReducer(\n          state,\n          attachWire(\n            { nodeId: sourceId, pinId: outputPin },\n            { nodeId: targetId, pinId: targetPin }\n          )\n        );\n      }\n    }\n  }\n\n  state = fpSet(\n    state,\n    \"services\",\n    \"clipboard\",\n    \"clipboardPasteOrigin\",\n    pastePosition\n  );\n  state = rootReducer(state, selectNodes(values(pasteIds)));\n\n  return state;\n}\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_DIALOG_RESPONSE_ACCEPT = \"@dialog/response/accept\" as const;\nexport const acceptDialog = (result: any) => ({\n  type: ACTION_DIALOG_RESPONSE_ACCEPT,\n  payload: { result },\n});\nexport type AcceptDialogAction = ReturnType<typeof acceptDialog>;\nexport function isAcceptDialogAction(\n  action: AnyAction\n): action is AcceptDialogAction {\n  return action.type === ACTION_DIALOG_RESPONSE_ACCEPT;\n}\n","import {\n  createServiceReducerCreator,\n  createServiceSelectorCreator,\n} from \"../service-state-utils\";\n\nexport const createDialogReducer = createServiceReducerCreator(\"dialog\");\nexport const createDialogSelector = createServiceSelectorCreator(\"dialog\");\n","import { isAcceptDialogAction } from \"@/actions/dialog-response-accept\";\n\nimport { defaultDialogServiceState } from \"../state\";\nimport { createDialogReducer } from \"../utils\";\n\nexport default createDialogReducer((state, action) => {\n  if (!isAcceptDialogAction(action)) {\n    return state;\n  }\n\n  return defaultDialogServiceState;\n});\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_DIALOG_RESPONSE_CANCEL = \"@dialog/response/cancel\" as const;\nexport const cancelDialog = () => ({\n  type: ACTION_DIALOG_RESPONSE_CANCEL,\n});\nexport type CancelDialogAction = ReturnType<typeof cancelDialog>;\nexport function isCancelDialogAction(\n  action: AnyAction\n): action is CancelDialogAction {\n  return action.type === ACTION_DIALOG_RESPONSE_CANCEL;\n}\n","import { isCancelDialogAction } from \"@/actions/dialog-response-cancel\";\n\nimport { defaultDialogServiceState } from \"../state\";\nimport { createDialogReducer } from \"../utils\";\n\nexport default createDialogReducer((state, action) => {\n  if (!isCancelDialogAction(action)) {\n    return state;\n  }\n\n  return defaultDialogServiceState;\n});\n","import { AnyAction } from \"redux\";\n\nimport { DialogType } from \"@/services/dialog/state\";\n\nexport const ACTION_DIALOG_SHOW = \"@dialog/show\" as const;\nexport const showDialog = (dialogType: DialogType, data: any) => ({\n  type: ACTION_DIALOG_SHOW,\n  payload: { dialogType, data },\n});\nexport type ShowDialogAction = ReturnType<typeof showDialog>;\nexport function isShowDialogAction(\n  action: AnyAction\n): action is ShowDialogAction {\n  return action.type === ACTION_DIALOG_SHOW;\n}\n","import { concatReducers } from \"@/store/utils\";\n\nimport dialogResponseAcceptReducer from \"./dialog-response-accept\";\nimport dialogResponseCancelReducer from \"./dialog-response-cancel\";\nimport dialogShowReducer from \"./dialog-show\";\n\nexport default concatReducers(\n  dialogResponseAcceptReducer,\n  dialogResponseCancelReducer,\n  dialogShowReducer\n);\n","import { isShowDialogAction } from \"@/actions/dialog-show\";\nimport { createDialogReducer } from \"../utils\";\n\nexport default createDialogReducer((state, action) => {\n  if (!isShowDialogAction(action)) {\n    return state;\n  }\n\n  const { dialogType, data } = action.payload;\n\n  return {\n    ...state,\n    dialogType,\n    data,\n  };\n});\n","import { AppReducer } from \"./types\";\n\nexport const PRIORITY_PRE = -10;\nexport const PRIORITY_POST = 10;\nexport const PRIORITY_SAVE = 50;\n\nexport function reducerPriority(\n  priority: number,\n  reducer: AppReducer\n): AppReducer {\n  reducer.weight = priority;\n  return reducer;\n}\n\nexport function priorityBefore(reducer: AppReducer) {\n  return (reducer.weight ?? 0) - 1;\n}\n","import pick from \"lodash/pick\";\nimport difference from \"lodash/difference\";\nimport pickBy from \"lodash/pickBy\";\nimport flatMap from \"lodash/flatMap\";\n\nimport { AppState } from \"@/store\";\n\nimport { NodeGraphServiceState } from \"../../state\";\nimport { Connection, nodePinEquals } from \"../../types\";\nimport { nodePinsFromPinNodeSelector } from \"../../selectors/pins\";\n\nexport default function nodeDelete(\n  state: NodeGraphServiceState,\n  nodeIds: string[],\n  rootState: AppState\n): NodeGraphServiceState {\n  const remainingNodeIds = difference(Object.keys(state.nodesById), nodeIds);\n\n  const removedIcPins = flatMap(nodeIds, (nodeId) =>\n    nodePinsFromPinNodeSelector(rootState, nodeId)\n  );\n\n  function isRemainingConnection({ inputPin, outputPin }: Connection) {\n    if (\n      nodeIds.indexOf(inputPin.nodeId) !== -1 ||\n      nodeIds.indexOf(outputPin.nodeId) !== -1\n    ) {\n      // Connection went to a removed node\n      return false;\n    }\n\n    // Connection was to a removed node pin\n    if (\n      removedIcPins.some(\n        (pin) => nodePinEquals(pin, inputPin) || nodePinEquals(pin, outputPin)\n      )\n    ) {\n      return false;\n    }\n\n    return true;\n  }\n\n  return {\n    ...state,\n    nodesById: pick(state.nodesById, remainingNodeIds),\n    connectionsById: pickBy(state.connectionsById, isRemainingConnection),\n  };\n}\n","import { priorityBefore, reducerPriority } from \"@/store/priorities\";\n\nimport { isDeleteCircuitAction } from \"@/actions/circuit-delete\";\n\nimport { nodeIdsFromCircuitIdSelector } from \"@/services/circuits/selectors/nodes\";\nimport circuitsCircuitDeleteReducer from \"@/services/circuits/reducer/circuit-delete\";\nimport { circuitIdToNodeType } from \"@/nodes/definitions/integrated-circuits/utils\";\n\nimport { createNodeGraphReducer } from \"../utils\";\nimport { nodeIdsFromTypeSelector } from \"../selectors/nodes\";\n\nimport nodeDelete from \"./operations/node-delete\";\n\nexport default reducerPriority(\n  priorityBefore(circuitsCircuitDeleteReducer),\n  createNodeGraphReducer((state, action, rootState) => {\n    if (!isDeleteCircuitAction(action)) {\n      return state;\n    }\n\n    const { circuitId } = action.payload;\n\n    const inCircuitNodeIds = nodeIdsFromCircuitIdSelector(rootState, circuitId);\n\n    const circuitTypeNodeIds = nodeIdsFromTypeSelector(\n      rootState,\n      circuitIdToNodeType(circuitId)\n    );\n\n    const nodeIds = [...inCircuitNodeIds, ...circuitTypeNodeIds];\n\n    return nodeDelete(state, nodeIds, rootState);\n  })\n);\n","import { AnyAction } from \"redux\";\n\nimport { reducerPriority, PRIORITY_PRE } from \"@/store/priorities\";\n\nimport { isAddNodeAction } from \"@/actions/node-add\";\n\nimport { createNodeGraphReducer } from \"../utils\";\n\nexport default reducerPriority(\n  PRIORITY_PRE,\n  createNodeGraphReducer((state, action: AnyAction) => {\n    if (!isAddNodeAction(action)) {\n      return state;\n    }\n\n    const { nodeId: id, nodeType, nodeName } = action.payload;\n    return {\n      ...state,\n      nodesById: {\n        ...state.nodesById,\n        [id]: {\n          nodeType,\n          nodeName: nodeName ?? null,\n        },\n      },\n    };\n  })\n);\n","import { isDeleteNodeAction } from \"@/actions/node-delete\";\n\nimport { priorityBefore, reducerPriority } from \"@/store/priorities\";\n\nimport circuitsNodeDeleteReducer from \"@/services/circuits/reducer/node-delete\";\n\nimport { createNodeGraphReducer } from \"../utils\";\n\nimport nodeDelete from \"./operations/node-delete\";\n\n// We need to know what circuit the node was a part of\nexport default reducerPriority(\n  priorityBefore(circuitsNodeDeleteReducer),\n  createNodeGraphReducer((state, action, rootState) => {\n    if (!isDeleteNodeAction(action)) {\n      return state;\n    }\n\n    const { nodeIds } = action.payload;\n\n    return nodeDelete(state, nodeIds, rootState);\n  })\n);\n","import { AnyAction } from \"redux\";\n\nimport { isRenameNodeAction } from \"@/actions/node-rename\";\n\nimport { createNodeGraphReducer } from \"../utils\";\n\nexport default createNodeGraphReducer((state, action: AnyAction) => {\n  if (!isRenameNodeAction(action)) {\n    return state;\n  }\n\n  const { nodeId } = action.payload;\n  if (!state.nodesById[nodeId]) {\n    return state;\n  }\n\n  let nodeName: string | null = action.payload.nodeName;\n  if (!nodeName && nodeName.trim() === \"\") {\n    nodeName = null;\n  }\n\n  return {\n    ...state,\n    nodesById: {\n      ...state.nodesById,\n      [nodeId]: {\n        ...state.nodesById[nodeId],\n        nodeName: nodeName,\n      },\n    },\n  };\n});\n","import { concatReducers } from \"@/store/utils\";\n\nimport circuitDeleteReducer from \"./circuit-delete\";\nimport nodeAddReducer from \"./node-add\";\nimport nodeDeleteReducer from \"./node-delete\";\nimport nodeRenameReducer from \"./node-rename\";\nimport projectNewReducer from \"./project-new\";\nimport wireAttachReducer from \"./wire-attach\";\nimport wireDetatchReducer from \"./wire-detatch\";\n\nconst graphReducer = concatReducers(\n  circuitDeleteReducer,\n  nodeAddReducer,\n  projectNewReducer,\n  nodeDeleteReducer,\n  nodeRenameReducer,\n  wireAttachReducer,\n  wireDetatchReducer\n);\n\nexport default graphReducer;\n","import { isNewProjectAction } from \"@/actions/project-new\";\n\nimport { createNodeGraphReducer } from \"../utils\";\nimport { defaultNodeGraphServiceState } from \"../state\";\n\nexport default createNodeGraphReducer((state, action) => {\n  if (!isNewProjectAction(action)) {\n    return state;\n  }\n\n  return defaultNodeGraphServiceState;\n});\n","import find from \"lodash/find\";\n\nimport { AppState } from \"@/store\";\n\nimport { isAttachWireAction } from \"@/actions/wire-attach\";\n\nimport { nodeDefinitionFromTypeSelector } from \"@/services/node-types/selectors/node-types\";\n\nimport { createNodeGraphReducer } from \"../utils\";\nimport { Connection, NodePin, nodePinEquals } from \"../types\";\nimport { NodeGraphServiceState } from \"../state\";\n\nexport default createNodeGraphReducer((state, action, rootState) => {\n  if (!isAttachWireAction(action)) {\n    return state;\n  }\n\n  const { connectionId, p1, p2 } = action.payload;\n  const conn = pinsToConnection(state, p1, p2, rootState);\n  if (!conn) {\n    return state;\n  }\n\n  const { inputPin } = conn;\n\n  // Only one source per input.\n  if (find(state.connectionsById, (c) => nodePinEquals(c.inputPin, inputPin))) {\n    return state;\n  }\n\n  return {\n    ...state,\n    connectionsById: {\n      ...state.connectionsById,\n      [connectionId]: {\n        id: connectionId,\n        ...conn,\n      },\n    },\n  };\n});\n\n/**\n * Check two pins to see if they can form a valid connection.\n * Returns null if no connection can be made (both inputs or both outputs)\n *\n * Does not check to see if the pins are already connected, or other connections prevent this connection from forming.\n */\nexport function pinsToConnection(\n  state: NodeGraphServiceState,\n  p1: NodePin,\n  p2: NodePin,\n  rootState: AppState\n): Connection | null {\n  const p1Node = state.nodesById[p1.nodeId];\n  const p2Node = state.nodesById[p2.nodeId];\n\n  if (!p1Node || !p2Node) {\n    return null;\n  }\n\n  const p1Def = nodeDefinitionFromTypeSelector(rootState, p1Node.nodeType);\n  const p2Def = nodeDefinitionFromTypeSelector(rootState, p2Node.nodeType);\n\n  if (!p1Def || !p2Def) {\n    return null;\n  }\n\n  const p1Pin = p1Def.pins[p1.pinId];\n  const p2Pin = p2Def.pins[p2.pinId];\n\n  if (!p1Pin || !p2Pin) {\n    return null;\n  }\n\n  // Pins are in same direction and cannot be connected.\n  if (p1Pin.direction === p2Pin.direction) {\n    return null;\n  }\n\n  const outputPin = p1Pin.direction === \"output\" ? p1 : p2;\n  const inputPin = p1Pin.direction === \"input\" ? p1 : p2;\n\n  return {\n    outputPin,\n    inputPin,\n  };\n}\n","import pick from \"lodash/pick\";\n\nimport { isDetatchWireAction } from \"@/actions/wire-detatch\";\n\nimport { createNodeGraphReducer } from \"../utils\";\n\nexport default createNodeGraphReducer((state, action) => {\n  if (!isDetatchWireAction(action)) {\n    return state;\n  }\n\n  const { connectionId } = action.payload;\n\n  const remainingIds = Object.keys(state.connectionsById).filter(\n    (x) => x !== connectionId\n  );\n\n  return {\n    ...state,\n    connectionsById: pick(state.connectionsById, remainingIds),\n  };\n});\n","import difference from \"lodash/difference\";\nimport pick from \"lodash/pick\";\nimport flatMap from \"lodash/flatMap\";\n\nimport { AppState } from \"@/store\";\n\nimport {\n  connectionsByIdSelector,\n  nodeInputConnectionIdsFromNodeIdSelector,\n  nodeOutputConnectionIdsFromNodeIdSelector,\n} from \"@/services/node-graph/selectors/connections\";\n\nimport { NodeLayoutServiceState } from \"../../state\";\nimport { nodePinsFromPinNodeSelector } from \"@/services/node-graph/selectors/pins\";\nimport { nodePinEquals } from \"@/services/node-graph/types\";\n\nexport default function nodeDelete(\n  state: NodeLayoutServiceState,\n  nodeIds: string[],\n  rootState: AppState\n): NodeLayoutServiceState {\n  // Connection ids connected to nodes being removed.\n  const removingNodeConnectionIds = nodeIds.reduce((connectionIds, nodeId) => {\n    // Get all inputs and outputs to the node.\n    const inputs = nodeInputConnectionIdsFromNodeIdSelector(rootState, nodeId);\n    const outputs = nodeOutputConnectionIdsFromNodeIdSelector(\n      rootState,\n      nodeId\n    );\n\n    connectionIds.push(...inputs, ...outputs);\n\n    return connectionIds;\n  }, [] as string[]);\n\n  // Connections going to IC node pins whose pin nodes were removed.\n  const removedIcPins = flatMap(nodeIds, (nodeId) =>\n    // If not a pin, this will return an empty array.\n    nodePinsFromPinNodeSelector(rootState, nodeId)\n  );\n  const connectionsById = connectionsByIdSelector(rootState);\n  const removingPinConnectionIds = Object.keys(connectionsById).filter(\n    (connectionId) => {\n      const { inputPin, outputPin } = connectionsById[connectionId];\n      // We will need to remove this connection if it went to a pin generated by\n      // an input or output pin node being removed.\n      return removedIcPins.some(\n        (removedPin) =>\n          nodePinEquals(removedPin, inputPin) ||\n          nodePinEquals(removedPin, outputPin)\n      );\n    }\n  );\n\n  const removingConnectionIds = [\n    ...removingNodeConnectionIds,\n    ...removingPinConnectionIds,\n  ];\n\n  // Remove any joint that is part of a removed connection.\n  const removingJointIds = removingConnectionIds.reduce(\n    (jointIds, connectionId) => {\n      jointIds.push(...state.wireJointIdsByConnectionId[connectionId]);\n      return jointIds;\n    },\n    [] as string[]\n  );\n\n  const remainingConnectionIds = difference(\n    Object.keys(state.wireJointIdsByConnectionId),\n    removingNodeConnectionIds\n  );\n\n  const remainingJointIds = difference(\n    Object.keys(state.wireJointPositionsByJointId),\n    removingJointIds\n  );\n\n  const remainingNodeIds = difference(\n    Object.keys(state.nodePositionsById),\n    nodeIds\n  );\n\n  return {\n    ...state,\n    nodePositionsById: pick(state.nodePositionsById, remainingNodeIds),\n    wireJointIdsByConnectionId: pick(\n      state.wireJointIdsByConnectionId,\n      remainingConnectionIds\n    ),\n    wireJointPositionsByJointId: pick(\n      state.wireJointPositionsByJointId,\n      remainingJointIds\n    ),\n  };\n}\n","import { priorityBefore, reducerPriority } from \"@/store/priorities\";\n\nimport { isDeleteCircuitAction } from \"@/actions/circuit-delete\";\n\nimport nodeGraphCircuitDeleteReducer from \"@/services/node-graph/reducer/circuit-delete\";\nimport { nodeIdsFromCircuitIdSelector } from \"@/services/circuits/selectors/nodes\";\nimport { nodeIdsFromTypeSelector } from \"@/services/node-graph/selectors/nodes\";\nimport { circuitIdToNodeType } from \"@/nodes/definitions/integrated-circuits/utils\";\n\nimport { createNodeLayoutReducer } from \"../utils\";\n\nimport nodeDeleteOperation from \"./operations/node-delete\";\n\nexport default reducerPriority(\n  // We need to run this reducer before graph runs, as we want to check what wires are connected to the node being deleted.\n  priorityBefore(nodeGraphCircuitDeleteReducer),\n  createNodeLayoutReducer((state, action, rootState) => {\n    if (!isDeleteCircuitAction(action)) {\n      return state;\n    }\n\n    const { circuitId } = action.payload;\n    const inCircuitNodeIds = nodeIdsFromCircuitIdSelector(rootState, circuitId);\n\n    state = nodeDeleteOperation(state, inCircuitNodeIds, rootState);\n\n    const circuitTypeNodeIds = nodeIdsFromTypeSelector(\n      rootState,\n      circuitIdToNodeType(circuitId)\n    );\n\n    state = nodeDeleteOperation(state, circuitTypeNodeIds, rootState);\n\n    return state;\n  })\n);\n","import { fpSet } from \"@/utils\";\n\nimport { ZeroPoint } from \"@/geometry\";\nimport { isAddNodeAction } from \"@/actions/node-add\";\n\nimport { createNodeLayoutReducer } from \"../utils\";\n\nexport default createNodeLayoutReducer((state, action) => {\n  if (!isAddNodeAction(action)) {\n    return state;\n  }\n  const { nodeId, position = ZeroPoint } = action.payload;\n\n  return fpSet(state, \"nodePositionsById\", nodeId, position);\n});\n","import { priorityBefore, reducerPriority } from \"@/store/priorities\";\n\nimport { isDeleteNodeAction } from \"@/actions/node-delete\";\n\nimport nodeGraphNodeDeleteReducer from \"@/services/node-graph/reducer/node-delete\";\n\nimport { createNodeLayoutReducer } from \"../utils\";\n\nimport nodeDeleteOperation from \"./operations/node-delete\";\n\n// We need to run this reducer before graph runs, as we want to check what wires are connected to the node being deleted.\nexport default reducerPriority(\n  priorityBefore(nodeGraphNodeDeleteReducer),\n  createNodeLayoutReducer((state, action, rootState) => {\n    if (!isDeleteNodeAction(action)) {\n      return state;\n    }\n\n    const { nodeIds } = action.payload;\n\n    return nodeDeleteOperation(state, nodeIds, rootState);\n  })\n);\n","import { AnyAction } from \"redux\";\n\nimport { asArray, MaybeArray } from \"@/arrays\";\nimport { Point } from \"@/geometry\";\n\nexport interface MoveNodeOpts {\n  relative?: boolean;\n  snapMode?: \"none\" | \"node\";\n}\nexport const ACTION_NODE_MOVE = \"@node/move\" as const;\nexport const moveNode = (\n  nodeId: MaybeArray<string>,\n  position: Point,\n  opts: MoveNodeOpts = {}\n) => ({\n  type: ACTION_NODE_MOVE,\n  payload: {\n    nodeIds: asArray(nodeId),\n    position,\n    relative: opts.relative ?? false,\n    snapMode: opts.snapMode ?? \"none\",\n  },\n});\nexport type MoveNodeAction = ReturnType<typeof moveNode>;\nexport function isMoveNodeAction(action: AnyAction): action is MoveNodeAction {\n  return action.type === ACTION_NODE_MOVE;\n}\n","import mapValues from \"lodash/mapValues\";\nimport pick from \"lodash/pick\";\n\nimport { isMoveNodeAction } from \"@/actions/node-move\";\n\nimport { applyGridNodeSnapSelector } from \"@/services/circuit-editor-ui-drag/selectors/snap\";\n\nimport { createNodeLayoutReducer } from \"../utils\";\n\nexport default createNodeLayoutReducer((state, action, appState) => {\n  if (!isMoveNodeAction(action)) {\n    return state;\n  }\n\n  const { nodeIds, position, relative, snapMode } = action.payload;\n\n  const movedNodePositions = mapValues(\n    pick(state.nodePositionsById, nodeIds),\n    (p) => {\n      let movedP = {\n        x: relative ? p.x + position.x : position.x,\n        y: relative ? p.y + position.y : position.y,\n      };\n      if (snapMode === \"node\") {\n        movedP = applyGridNodeSnapSelector(appState, movedP);\n      }\n      return movedP;\n    }\n  );\n\n  return {\n    ...state,\n    nodePositionsById: {\n      ...state.nodePositionsById,\n      ...movedNodePositions,\n    },\n  };\n});\n","import { concatReducers } from \"@/store/utils\";\n\nimport circuitDeleteReducer from \"./circuit-delete\";\nimport nodeAddReducer from \"./node-add\";\nimport nodeDeleteReducer from \"./node-delete\";\nimport nodeMoveReducer from \"./node-move\";\nimport projectNewReducer from \"./project-new\";\nimport wireAttachReducer from \"./wire-attach\";\nimport wireDetatchReducer from \"./wire-detatch\";\nimport wireJointAddReducer from \"./wire-joint-add\";\nimport wireJointDeleteReducer from \"./wire-joint-delete\";\nimport wireJointMoveReducer from \"./wire-joint-move\";\n\nconst fieldReducer = concatReducers(\n  circuitDeleteReducer,\n  nodeAddReducer,\n  projectNewReducer,\n  nodeDeleteReducer,\n  nodeMoveReducer,\n  wireAttachReducer,\n  wireDetatchReducer,\n  wireJointAddReducer,\n  wireJointDeleteReducer,\n  wireJointMoveReducer\n);\n\nexport default fieldReducer;\n","import { isNewProjectAction } from \"@/actions/project-new\";\n\nimport { createNodeLayoutReducer } from \"../utils\";\nimport { defaultNodeLayoutServiceState } from \"../state\";\n\nexport default createNodeLayoutReducer((state, action) => {\n  if (!isNewProjectAction(action)) {\n    return state;\n  }\n\n  return defaultNodeLayoutServiceState;\n});\n","import { v4 as uuidV4 } from \"uuid\";\nimport zipObject from \"lodash/zipObject\";\n\nimport { isAttachWireAction } from \"@/actions/wire-attach\";\nimport { fpSet } from \"@/utils\";\n\nimport { createNodeLayoutReducer } from \"../utils\";\n\nexport default createNodeLayoutReducer((state, action) => {\n  if (!isAttachWireAction(action)) {\n    return state;\n  }\n\n  const { connectionId, joints } = action.payload;\n\n  // Might want to use addWireJoint action, but field is the only thing that cares about joints.\n  if (joints.length > 0) {\n    const jointIds = joints.map(() => uuidV4());\n    state = fpSet(state, \"wireJointIdsByConnectionId\", connectionId, jointIds);\n    state = fpSet(state, \"wireJointPositionsByJointId\", (value) => ({\n      ...value,\n      ...zipObject(jointIds, joints),\n    }));\n  } else {\n    state = fpSet(state, \"wireJointIdsByConnectionId\", connectionId, []);\n  }\n\n  return state;\n});\n","import pick from \"lodash/pick\";\nimport difference from \"lodash/difference\";\n\nimport { isDetatchWireAction } from \"@/actions/wire-detatch\";\n\nimport { createNodeLayoutReducer } from \"../utils\";\n\nexport default createNodeLayoutReducer((state, action) => {\n  if (!isDetatchWireAction(action)) {\n    return state;\n  }\n\n  const { connectionId } = action.payload;\n\n  const remainingConnectionIds = Object.keys(\n    state.wireJointIdsByConnectionId\n  ).filter((x) => x != connectionId);\n\n  const remainingJointIds = difference(\n    Object.keys(state.wireJointPositionsByJointId),\n    state.wireJointIdsByConnectionId[connectionId]\n  );\n\n  return {\n    ...state,\n    wireJointIdsByConnectionId: pick(\n      state.wireJointIdsByConnectionId,\n      remainingConnectionIds\n    ),\n    wireJointPositionsByJointId: pick(\n      state.wireJointPositionsByJointId,\n      remainingJointIds\n    ),\n  };\n});\n","import { isAddWireJointAction } from \"@/actions/wire-joint-add\";\n\nimport { createNodeLayoutReducer } from \"../utils\";\n\nexport default createNodeLayoutReducer((state, action) => {\n  if (!isAddWireJointAction(action)) {\n    return state;\n  }\n\n  const { connectionId, addAfterJointId, position, jointId } = action.payload;\n  let wireJoints = state.wireJointIdsByConnectionId[connectionId];\n  const insertionIndex = addAfterJointId\n    ? wireJoints.indexOf(addAfterJointId) + 1\n    : 0;\n\n  wireJoints = [\n    ...wireJoints.slice(0, insertionIndex),\n    jointId,\n    ...wireJoints.slice(insertionIndex),\n  ];\n\n  return {\n    ...state,\n    wireJointIdsByConnectionId: {\n      ...state.wireJointIdsByConnectionId,\n      [connectionId]: wireJoints,\n    },\n    wireJointPositionsByJointId: {\n      ...state.wireJointPositionsByJointId,\n      [jointId]: position,\n    },\n  };\n});\n","import pick from \"lodash/pick\";\nimport mapValues from \"lodash/mapValues\";\n\nimport { isDeleteWireJointAction } from \"@/actions/wire-joint-delete\";\n\nimport { createNodeLayoutReducer } from \"../utils\";\n\nexport default createNodeLayoutReducer((state, action) => {\n  if (!isDeleteWireJointAction(action)) {\n    return state;\n  }\n\n  const { jointId } = action.payload;\n\n  const remainingJointIds = Object.keys(\n    state.wireJointPositionsByJointId\n  ).filter((x) => x !== jointId);\n\n  return {\n    ...state,\n    wireJointIdsByConnectionId: mapValues(\n      state.wireJointIdsByConnectionId,\n      (connectionIds) => connectionIds.filter((x) => x !== jointId)\n    ),\n    wireJointPositionsByJointId: pick(\n      state.wireJointPositionsByJointId,\n      remainingJointIds\n    ),\n  };\n});\n","import mapValues from \"lodash/mapValues\";\nimport pick from \"lodash/pick\";\n\nimport { isMoveWireJointAction } from \"@/actions/wire-joint-move\";\n\nimport { createNodeLayoutReducer } from \"../utils\";\nimport {\n  applyGridJointSnapSelector,\n  applyGridNodeSnapSelector,\n} from \"@/services/circuit-editor-ui-drag/selectors/snap\";\n\nexport default createNodeLayoutReducer((state, action, appState) => {\n  if (!isMoveWireJointAction(action)) {\n    return state;\n  }\n\n  const { jointIds, position, relative, snapMode } = action.payload;\n\n  const movedJoints = mapValues(\n    pick(state.wireJointPositionsByJointId, jointIds),\n    (p) => {\n      let movedP = {\n        x: relative ? p.x + position.x : position.x,\n        y: relative ? p.y + position.y : position.y,\n      };\n\n      if (snapMode === \"node\") {\n        movedP = applyGridNodeSnapSelector(appState, movedP);\n      } else if (snapMode === \"joint\") {\n        movedP = applyGridJointSnapSelector(appState, movedP);\n      }\n\n      return movedP;\n    }\n  );\n\n  return {\n    ...state,\n    wireJointPositionsByJointId: {\n      ...state.wireJointPositionsByJointId,\n      ...movedJoints,\n    },\n  };\n});\n","import * as yup from \"yup\";\n\nimport { Point, pointSchema } from \"@/geometry\";\n\nimport { NodePin, nodePinSchema } from \"../node-graph/types\";\n\nexport interface SaveCircuit {\n  circuitId: string;\n  circuitName: string;\n}\nexport const saveCircuitSchema = yup.object().shape({\n  circuitId: yup.string().required().min(1),\n  circuitName: yup.string().required().min(1),\n});\n\nexport interface SaveNode {\n  nodeId: string;\n  nodeType: string;\n  nodeName: string | null;\n  circuitId: string;\n  x: number;\n  y: number;\n}\nexport const saveNodeSchema = yup.object().shape({\n  nodeId: yup.string().required().min(1),\n  nodeType: yup.string().required().min(1),\n  nodeName: yup.string().nullable().min(1),\n  circuitId: yup.string().required().min(1),\n  x: yup.number().required(),\n  y: yup.number().required(),\n});\n\nexport interface SaveWire {\n  output: NodePin;\n  input: NodePin;\n  joints: Point[];\n}\nexport const saveWireSchema = yup.object().shape({\n  output: nodePinSchema.required(),\n  input: nodePinSchema.required(),\n  // Cannot make this required, as yup says required on an array is min length 1...\n  joints: yup.array().of(pointSchema),\n});\n\nexport interface SaveData {\n  circuits: SaveCircuit[];\n  nodes: SaveNode[];\n  wires: SaveWire[];\n}\nexport const saveDataSchema = yup.object().shape({\n  circuits: yup.array().of(saveCircuitSchema).min(0),\n  nodes: yup.array().of(saveNodeSchema).min(0),\n  wires: yup.array().of(saveWireSchema).min(0),\n});\n","import flatMap from \"lodash/flatMap\";\nimport uniq from \"lodash/uniq\";\n\nimport { AppState } from \"@/store\";\nimport { Point, pointAdd, ZeroPoint } from \"@/geometry\";\n\nimport { NodeDefinition } from \"@/nodes/types\";\nimport { nodeDefFromNodeIdSelector } from \"@/services/node-graph/selectors/node-def\";\nimport { nodeConnectionIdsFromNodeIdSelector } from \"@/services/node-graph/selectors/connections\";\n\nimport { createNodeLayoutSelector } from \"../utils\";\nimport { NodeLayoutServiceState } from \"../state\";\n\nimport { nodePositionFromNodeIdSelector } from \"./node-positions\";\nimport { nodeIdsFromCircuitIdSelector } from \"@/services/circuits/selectors/nodes\";\n\ninterface PositionCache {\n  inputNodeDef: NodeDefinition;\n  inputNodePosition: Point;\n  outputPosition: Point;\n}\n\n// TODO: These build up forever, need to wipe it on occasion.\n// Probably should use LRU cache.\n// Not fixing it right now as we previously used re-reselect, which\n//  also builds up forever.\nconst startPositionCacheByConnectionId: Record<string, PositionCache> = {};\nconst endPositionCacheByConnectionId: Record<string, PositionCache> = {};\n\nexport const wireStartPositionFromConnectionIdSelector = (\n  state: AppState,\n  connectionId: string\n) => {\n  const {\n    outputPin: { nodeId, pinId },\n  } = state.services.nodeGraph.connectionsById[connectionId];\n\n  const nodeDef = nodeDefFromNodeIdSelector(state, nodeId);\n  if (!nodeDef) {\n    return ZeroPoint;\n  }\n\n  const nodePosition = nodePositionFromNodeIdSelector(state, nodeId);\n\n  // Caching is to get a consistent reference to avoid component rerenders.\n  //  We are not concerned about performance here.\n  const cacheData = startPositionCacheByConnectionId[connectionId];\n  if (\n    cacheData &&\n    cacheData.inputNodeDef === nodeDef &&\n    cacheData.inputNodePosition.x === nodePosition.x &&\n    cacheData.inputNodePosition.y === nodePosition.y\n  ) {\n    return cacheData.outputPosition;\n  }\n\n  let offset = ZeroPoint;\n  if (nodeDef && nodeDef.pins[pinId]) {\n    offset = nodeDef.pins[pinId];\n  }\n  const position = pointAdd(nodePosition, offset);\n  startPositionCacheByConnectionId[connectionId] = {\n    inputNodeDef: nodeDef,\n    inputNodePosition: nodePosition,\n    outputPosition: position,\n  };\n\n  return position;\n};\n\nexport const wireEndPositionFromConnectionIdSelector = (\n  state: AppState,\n  connectionId: string\n) => {\n  const {\n    inputPin: { nodeId, pinId },\n  } = state.services.nodeGraph.connectionsById[connectionId];\n  const nodeDef = nodeDefFromNodeIdSelector(state, nodeId);\n  if (!nodeDef) {\n    return ZeroPoint;\n  }\n\n  const nodePosition = nodePositionFromNodeIdSelector(state, nodeId);\n\n  // Caching is to get a consistent reference to avoid component rerenders.\n  //  We are not concerned about performance here.\n  const cacheData = endPositionCacheByConnectionId[connectionId];\n  if (\n    cacheData &&\n    cacheData.inputNodeDef === nodeDef &&\n    cacheData.inputNodePosition.x === nodePosition.x &&\n    cacheData.inputNodePosition.y === nodePosition.y\n  ) {\n    return cacheData.outputPosition;\n  }\n\n  let offset = ZeroPoint;\n  if (nodeDef && nodeDef.pins[pinId]) {\n    offset = nodeDef.pins[pinId];\n  }\n  const position = pointAdd(nodePosition, offset);\n  endPositionCacheByConnectionId[connectionId] = {\n    inputNodeDef: nodeDef,\n    inputNodePosition: nodePosition,\n    outputPosition: position,\n  };\n\n  return position;\n};\n\n// WARN: Returns new object with each invocation.  Not safe for react use.\n//  Currently used to get all joint ids in reducers.\nexport const jointIdsSelector = createNodeLayoutSelector(\n  (state: NodeLayoutServiceState) =>\n    Object.keys(state.wireJointPositionsByJointId)\n);\n\n/**\n * Gets all joint ids in the editing circuit.\n * WARN: Not react safe, for reducer use only.\n */\nexport const jointIdsFromCircuitIdSelector = (\n  state: AppState,\n  circuitId: string\n) => {\n  const nodeIds = nodeIdsFromCircuitIdSelector(state, circuitId);\n  const connectionIds = flatMap(nodeIds, (nodeId) =>\n    nodeConnectionIdsFromNodeIdSelector(state, nodeId)\n  );\n  const jointIds = flatMap(connectionIds, (connectionId) =>\n    wireJointIdsFromConnectionIdSelector(state, connectionId)\n  );\n  return uniq(jointIds);\n};\n\nexport const wireJointIdsByConnectionIdSelector = createNodeLayoutSelector(\n  (state) => state.wireJointIdsByConnectionId\n);\n\nexport const wireJointIdsFromConnectionIdSelector = createNodeLayoutSelector(\n  (state: NodeLayoutServiceState, connectionId: string) =>\n    state.wireJointIdsByConnectionId[connectionId]\n);\n\nexport const wireJointPositionFromJointIdSelector = createNodeLayoutSelector(\n  (state: NodeLayoutServiceState, jointId: string) =>\n    state.wireJointPositionsByJointId[jointId]\n);\n\n// WARN: Returns new object with each invocation.  Not safe for react use.\n//  Currently used to get all joint ids in reducers.\nexport const wireJointPositionsByJointIdSelector = createNodeLayoutSelector(\n  (state: NodeLayoutServiceState) => {\n    return state.wireJointPositionsByJointId;\n  }\n);\n","export class SaveFormatError extends Error {\n  code: string;\n\n  constructor(message: string) {\n    super(message);\n    this.message = message;\n    this.code = \"SAVE_FORMAT_ERROR\";\n  }\n}\n","import {\n  SaveCircuit,\n  SaveData,\n  saveDataSchema,\n  SaveNode,\n  SaveWire,\n} from \"./types\";\n\nimport { AppState, defaultAppState } from \"@/store\";\nimport rootReducer from \"@/store/reducer\";\n\nimport { addNode } from \"@/actions/node-add\";\nimport { attachWire } from \"@/actions/wire-attach\";\n\nimport {\n  nodeIdsSelector,\n  nodeFromNodeIdSelector,\n} from \"../node-graph/selectors/nodes\";\nimport {\n  connectionIdsSelector,\n  connectionFromConnectionIdSelector,\n} from \"../node-graph/selectors/connections\";\nimport { nodePositionFromNodeIdSelector } from \"../node-layout/selectors/node-positions\";\nimport {\n  circuitIdsSelector,\n  circuitNameFromIdSelector,\n} from \"../circuits/selectors/circuits\";\nimport { ROOT_CIRCUIT_ID } from \"../circuits/constants\";\n\nimport { circuitIdFromNodeIdSelector } from \"../circuits/selectors/nodes\";\nimport {\n  wireJointPositionsByJointIdSelector,\n  wireJointIdsFromConnectionIdSelector,\n} from \"../node-layout/selectors/wires\";\n\nimport { SaveFormatError } from \"./errors\";\nimport { addCircuit } from \"@/actions/circuit-add\";\n\nexport function createSave(state: AppState): SaveData {\n  const jointPositions = wireJointPositionsByJointIdSelector(state);\n  return {\n    circuits: circuitIdsSelector(state).map((circuitId) => {\n      const circuitName = circuitNameFromIdSelector(state, circuitId);\n      const saveCircuit: SaveCircuit = {\n        circuitId,\n        circuitName,\n      };\n      return saveCircuit;\n    }),\n    nodes: nodeIdsSelector(state).map((nodeId) => {\n      const node = nodeFromNodeIdSelector(state, nodeId);\n      const position = nodePositionFromNodeIdSelector(state, nodeId);\n      const circuitId = circuitIdFromNodeIdSelector(state, nodeId);\n      const saveNode: SaveNode = {\n        nodeId: nodeId,\n        nodeType: node.nodeType,\n        nodeName: node.nodeName,\n        circuitId: circuitId ?? ROOT_CIRCUIT_ID,\n        x: position.x,\n        y: position.y,\n      };\n      return saveNode;\n    }),\n    wires: connectionIdsSelector(state).map((connectionId) => {\n      const wire = connectionFromConnectionIdSelector(state, connectionId);\n      const jointIds = wireJointIdsFromConnectionIdSelector(\n        state,\n        connectionId\n      );\n      const saveWire: SaveWire = {\n        input: wire.inputPin,\n        output: wire.outputPin,\n        joints: jointIds.map((jointId) => jointPositions[jointId]),\n      };\n      return saveWire;\n    }),\n  };\n}\n\nexport function loadSave(state: AppState, save: SaveData): AppState {\n  try {\n    saveDataSchema.validateSync(save);\n  } catch (e) {\n    throw new SaveFormatError(e.message);\n  }\n\n  // TODO: There may be some services that want to persist data across projects.\n  state = defaultAppState;\n\n  try {\n    state = (save.circuits ?? []).reduce(\n      (state, { circuitId, circuitName }) =>\n        rootReducer(state, addCircuit({ circuitId, circuitName })),\n      state\n    );\n\n    state = (save.nodes ?? []).reduce(\n      (state, node) =>\n        rootReducer(\n          state,\n          addNode(\n            node.nodeType,\n            node.circuitId,\n            { x: node.x, y: node.y },\n            {\n              nodeId: node.nodeId,\n              nodeName: node.nodeName ?? undefined,\n            }\n          )\n        ),\n      state\n    );\n\n    state = (save.wires ?? []).reduce(\n      (state, wire) =>\n        rootReducer(\n          state,\n          attachWire(wire.output, wire.input, { joints: wire.joints })\n        ),\n      state\n    );\n  } catch (e) {\n    console.error(\"Failed to rehydrate SaveData:\", e);\n    throw new SaveFormatError(\"Failed to load project.\");\n  }\n\n  return state;\n}\n\nexport function storeAutosave(save: SaveData): void {\n  localStorage.setItem(\"autosave\", JSON.stringify(save));\n}\n\nexport function loadAutosave(): SaveData | null {\n  const str = localStorage.getItem(\"autosave\");\n  if (!str) {\n    return null;\n  }\n\n  try {\n    return JSON.parse(str);\n  } catch {\n    return null;\n  }\n}\n\nexport function deleteAutosave() {\n  localStorage.removeItem(\"autosave\");\n}\n","import { AnyAction } from \"redux\";\n\nimport { AppState, defaultAppState } from \"@/store\";\nimport { reducerPriority, PRIORITY_SAVE } from \"@/store/priorities\";\nimport { isProjectMutationAction } from \"@/project-mutation-actions\";\n\nimport { createSave, storeAutosave } from \"@/services/savedata/api\";\n\nexport default reducerPriority(\n  PRIORITY_SAVE,\n  (state: AppState = defaultAppState, action: AnyAction): AppState => {\n    if (!isProjectMutationAction(action)) {\n      return state;\n    }\n\n    const save = createSave(state);\n    storeAutosave(save);\n\n    return state;\n  }\n);\n","import {\n  createServiceReducerCreator,\n  createServiceSelectorCreator,\n} from \"../service-state-utils\";\n\nexport const createProjectReducer = createServiceReducerCreator(\"project\");\nexport const createProjectSelector = createServiceSelectorCreator(\"project\");\n","import { isProjectMutationAction } from \"@/project-mutation-actions\";\nimport { createProjectReducer } from \"../utils\";\n\nexport default createProjectReducer((state, action) => {\n  if (!isProjectMutationAction(action)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    projectModified: true,\n  };\n});\n","import { isNewProjectAction } from \"@/actions/project-new\";\n\nimport { deleteAutosave } from \"@/services/savedata/api\";\nimport { createProjectReducer } from \"../utils\";\n\nexport default createProjectReducer((state, action) => {\n  if (!isNewProjectAction(action)) {\n    return state;\n  }\n\n  // FIXME: Side effect, move to saga.\n  deleteAutosave();\n\n  return {\n    ...state,\n    projectName: \"New Project\",\n    projectModified: false,\n  };\n});\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_PROJECT_RENAME = \"@project/rename\" as const;\nexport const renameProject = (projectName: string) => ({\n  type: ACTION_PROJECT_RENAME,\n  payload: { projectName },\n});\nexport type RenameProjectAction = ReturnType<typeof renameProject>;\nexport function isRenameProjectAction(\n  action: AnyAction\n): action is RenameProjectAction {\n  return action.type === ACTION_PROJECT_RENAME;\n}\n","import { isRenameProjectAction } from \"@/actions/project-rename\";\n\nimport { createProjectReducer } from \"../utils\";\n\nexport default createProjectReducer((state, action) => {\n  if (!isRenameProjectAction(action)) {\n    return state;\n  }\n\n  let { projectName } = action.payload;\n  projectName = projectName.trim();\n\n  if (projectName === \"\") {\n    return state;\n  }\n\n  return {\n    ...state,\n    projectName,\n  };\n});\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_PROJECT_SAVE = \"@project/save\" as const;\nexport const saveProject = () => ({\n  type: ACTION_PROJECT_SAVE,\n});\nexport type SaveProjectAction = ReturnType<typeof saveProject>;\nexport function isSaveProjectAction(\n  action: AnyAction\n): action is SaveProjectAction {\n  return action.type === ACTION_PROJECT_SAVE;\n}\n\nexport const ACTION_PROJECT_SAVE_SUCCESS = \"@project/save:success\" as const;\nexport const saveProjectSuccess = () => ({\n  type: ACTION_PROJECT_SAVE_SUCCESS,\n});\nexport type SaveProjectSuccessAction = ReturnType<typeof saveProjectSuccess>;\nexport function isSaveProjectSuccessAction(\n  action: AnyAction\n): action is SaveProjectSuccessAction {\n  return action.type === ACTION_PROJECT_SAVE_SUCCESS;\n}\n","import { concatReducers } from \"@/store/utils\";\n\nimport autosaveReducer from \"./autosave\";\nimport initReducer from \"./init\";\nimport projectModifiedReducer from \"./project-modified\";\nimport projectNewReducer from \"./project-new\";\nimport projectReceiveReducer from \"./project-receive\";\nimport projectRenameReducer from \"./project-rename\";\nimport projectSaveSuccessReducer from \"./project-save-success\";\n\nexport default concatReducers(\n  autosaveReducer,\n  initReducer,\n  projectModifiedReducer,\n  projectNewReducer,\n  projectReceiveReducer,\n  projectRenameReducer,\n  projectSaveSuccessReducer\n);\n","import { AnyAction } from \"redux\";\nimport { AppState, defaultAppState } from \"@/store\";\n\nimport { isInitAction } from \"@/actions/init\";\n\nimport { loadAutosave, loadSave } from \"@/services/savedata/api\";\nimport { fpSet } from \"@/utils\";\n\nexport default function initReducer(\n  state: AppState = defaultAppState,\n  action: AnyAction\n): AppState {\n  if (!isInitAction(action)) {\n    return state;\n  }\n\n  const save = loadAutosave();\n  if (!save) {\n    return state;\n  }\n\n  try {\n    state = loadSave(state, save);\n    state = fpSet(state, \"services\", \"project\", (state) => ({\n      ...state,\n      projectName: \"Previous Project\",\n      projectModified: true,\n    }));\n  } catch {\n    // TODO: Reprot error\n  }\n\n  return state;\n}\n","import { AnyAction } from \"redux\";\n\nimport { AppState, defaultAppState } from \"@/store\";\nimport { fpSet } from \"@/utils\";\n\nimport { isReceiveProjectAction } from \"@/actions/project-receive\";\n\nimport { loadSave } from \"@/services/savedata/api\";\n\nexport default function projectReceiveReducer(\n  state: AppState = defaultAppState,\n  action: AnyAction\n): AppState {\n  if (!isReceiveProjectAction(action)) {\n    return state;\n  }\n\n  const { fileName, saveData } = action.payload;\n\n  try {\n    state = loadSave(state, saveData);\n    state = fpSet(state, \"services\", \"project\", (state) => ({\n      ...state,\n      projectName: fileName,\n      projectModified: false,\n    }));\n  } catch (e) {\n    // TODO: display error\n    console.error(\"Failed to load save\", e);\n  }\n\n  return state;\n}\n","import { isSaveProjectSuccessAction } from \"@/actions/project-save\";\nimport { createProjectReducer } from \"../utils\";\n\nexport default createProjectReducer((state, action) => {\n  if (!isSaveProjectSuccessAction(action)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    projectModified: false,\n  };\n});\n","import difference from \"lodash/difference\";\n\nimport { isDeleteNodeAction } from \"@/actions/node-delete\";\n\nimport { createSelectionReducer } from \"../utils\";\n\nexport default createSelectionReducer((state, action) => {\n  if (!isDeleteNodeAction(action)) {\n    return state;\n  }\n\n  const { nodeIds } = action.payload;\n\n  return {\n    ...state,\n    selectedNodeIds: difference(state.selectedNodeIds, nodeIds),\n    selectedConnectionIds: [], // Might be removing a node attached to a selected wire\n  };\n});\n","import { isNewProjectAction } from \"@/actions/project-new\";\n\nimport { createSelectionReducer } from \"../utils\";\nimport { defaultSelectionServiceState } from \"../state\";\n\nexport default createSelectionReducer((state, action) => {\n  if (!isNewProjectAction(action)) {\n    return state;\n  }\n\n  return defaultSelectionServiceState;\n});\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_SELECT_CLEAR = \"@select/all\" as const;\nexport const selectAll = (circuitId: string) => ({\n  type: ACTION_SELECT_CLEAR,\n  payload: { circuitId },\n});\nexport type SelectAllAction = ReturnType<typeof selectAll>;\nexport function isSelectAllAction(\n  action: AnyAction\n): action is SelectAllAction {\n  return action.type === ACTION_SELECT_CLEAR;\n}\n","import flatten from \"lodash/flatten\";\n\nimport { isSelectAllAction } from \"@/actions/select-all\";\n\nimport {\n  connectionIdsSelector,\n  connectionsByIdSelector,\n} from \"@/services/node-graph/selectors/connections\";\nimport { wireJointIdsByConnectionIdSelector } from \"@/services/node-layout/selectors/wires\";\nimport { nodeIdsFromCircuitIdSelector } from \"@/services/circuits/selectors/nodes\";\n\nimport { createSelectionReducer } from \"../utils\";\n\nexport default createSelectionReducer((state, action, appState) => {\n  if (!isSelectAllAction(action)) {\n    return state;\n  }\n\n  const { circuitId } = action.payload;\n  const nodeIds = nodeIdsFromCircuitIdSelector(appState, circuitId);\n\n  let connectionIds = connectionIdsSelector(appState);\n  const connectionsById = connectionsByIdSelector(appState);\n  connectionIds = connectionIds.filter((connectionId) => {\n    const { inputPin, outputPin } = connectionsById[connectionId];\n    if (\n      nodeIds.indexOf(inputPin.nodeId) === -1 ||\n      nodeIds.indexOf(outputPin.nodeId) === -1\n    ) {\n      return false;\n    }\n    return true;\n  });\n\n  const wireJointIdsFromConnectionId = wireJointIdsByConnectionIdSelector(\n    appState\n  );\n  const jointIds = flatten(\n    connectionIds.map((connId) => wireJointIdsFromConnectionId[connId])\n  );\n\n  return {\n    ...state,\n    selectedNodeIds: nodeIds,\n    selectedConnectionIds: connectionIds,\n    selectedJointIds: jointIds,\n  };\n});\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_SELECT_CLEAR = \"@select/clear\" as const;\nexport const clearSelection = () => ({\n  type: ACTION_SELECT_CLEAR,\n});\nexport type ClearSelectionAction = ReturnType<typeof clearSelection>;\nexport function isClearSelectionAction(\n  action: AnyAction\n): action is ClearSelectionAction {\n  return action.type === ACTION_SELECT_CLEAR;\n}\n","import { isClearSelectionAction } from \"@/actions/select-clear\";\n\nimport { createSelectionReducer } from \"../utils\";\n\nexport default createSelectionReducer((state, action) => {\n  if (!isClearSelectionAction(action)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    selectedNodeIds: [],\n    selectedConnectionIds: [],\n    selectedJointIds: [],\n  };\n});\n","import { combineSelection } from \"@/selection-mode\";\n\nimport { isSelectWireJointsAction } from \"@/actions/select-wire-joints\";\n\nimport { createSelectionReducer } from \"../utils\";\n\nexport default createSelectionReducer((state, action) => {\n  if (!isSelectWireJointsAction(action)) {\n    return state;\n  }\n\n  const { jointIds, mode } = action.payload;\n\n  return {\n    ...state,\n    selectedNodeIds: mode === \"set\" ? [] : state.selectedNodeIds,\n    selectedConnectionIds: mode === \"set\" ? [] : state.selectedConnectionIds,\n    selectedJointIds: combineSelection(state.selectedJointIds, jointIds, mode),\n  };\n});\n","import { combineSelection } from \"@/selection-mode\";\n\nimport { isSelectNodesAction } from \"@/actions/select-nodes\";\n\nimport { createSelectionReducer } from \"../utils\";\n\nexport default createSelectionReducer((state, action) => {\n  if (!isSelectNodesAction(action)) {\n    return state;\n  }\n\n  const { nodeIds, mode } = action.payload;\n\n  return {\n    ...state,\n    selectedNodeIds: combineSelection(state.selectedNodeIds, nodeIds, mode),\n    selectedConnectionIds: mode === \"set\" ? [] : state.selectedConnectionIds,\n    selectedJointIds: mode === \"set\" ? [] : state.selectedJointIds,\n  };\n});\n","import { createSelector } from \"reselect\";\n\nimport mapValues from \"lodash/mapValues\";\n\nimport { offsetRectangle, ZeroRect } from \"@/geometry\";\n\nimport { nodeTypesByNodeIdSelector } from \"@/services/node-graph/selectors/nodes\";\nimport { nodeDefinitionsByTypeSelector } from \"@/services/node-types/selectors/node-types\";\n\nimport { nodePositionsByNodeIdSelector } from \"./node-positions\";\n\nexport const nodeRectsByIdSelector = createSelector(\n  nodePositionsByNodeIdSelector,\n  nodeDefinitionsByTypeSelector,\n  nodeTypesByNodeIdSelector,\n  (positionsById, nodeDefsByType, nodeTypesById) =>\n    mapValues(positionsById, (position, id) => {\n      const type = nodeTypesById[id];\n      if (!type) {\n        return ZeroRect;\n      }\n      const def = nodeDefsByType[type];\n      if (!def) {\n        return ZeroRect;\n      }\n\n      return offsetRectangle(def.visual.hitRect, position);\n    })\n);\n","import forOwn from \"lodash/forOwn\";\nimport pick from \"lodash/pick\";\n\nimport { intersects, pointIntersects } from \"@/geometry\";\nimport { combineSelection } from \"@/selection-mode\";\n\nimport { isSelectRegionAction } from \"@/actions/select-region\";\n\nimport { nodeIdsFromCircuitIdSelector } from \"@/services/circuits/selectors/nodes\";\nimport { nodeRectsByIdSelector } from \"@/services/node-layout/selectors/node-bounds\";\nimport {\n  wireJointPositionsByJointIdSelector,\n  jointIdsFromCircuitIdSelector,\n} from \"@/services/node-layout/selectors/wires\";\n\nimport { createSelectionReducer } from \"../utils\";\n\nexport default createSelectionReducer((state, action, appState) => {\n  if (!isSelectRegionAction(action)) {\n    return state;\n  }\n\n  const { region, circuitId, mode } = action.payload;\n\n  const nodeIds = nodeIdsFromCircuitIdSelector(appState, circuitId);\n  const rects = pick(nodeRectsByIdSelector(appState), nodeIds);\n\n  const chosenNodeIds: string[] = [];\n  forOwn(rects, (rect, id) => {\n    if (intersects(rect, region)) {\n      chosenNodeIds.push(id);\n    }\n  });\n\n  const jointPositions = wireJointPositionsByJointIdSelector(appState);\n  const jointIds = jointIdsFromCircuitIdSelector(appState, circuitId);\n  const chosenJointIds = jointIds.filter((jointId) => {\n    const position = jointPositions[jointId];\n    return pointIntersects(position, region);\n  });\n\n  return {\n    ...state,\n    selectedNodeIds: combineSelection(\n      state.selectedNodeIds,\n      chosenNodeIds,\n      mode\n    ),\n    selectedConnectionIds: mode === \"set\" ? [] : state.selectedConnectionIds,\n    selectedJointIds: combineSelection(\n      state.selectedJointIds,\n      chosenJointIds,\n      mode\n    ),\n  };\n});\n","import { AnyAction } from \"redux\";\n\nimport { SelectionMode } from \"@/selection-mode\";\n\nexport const ACTION_SELECT_WIRES = \"@select/wires\" as const;\nexport const selectWires = (\n  connectionId: string | string[],\n  mode: SelectionMode = \"set\"\n) => ({\n  type: ACTION_SELECT_WIRES,\n  payload: {\n    connectionIds: Array.isArray(connectionId) ? connectionId : [connectionId],\n    mode,\n  },\n});\nexport type SelectWiresAction = ReturnType<typeof selectWires>;\nexport function isSelectWiresAction(\n  action: AnyAction\n): action is SelectWiresAction {\n  return action.type === ACTION_SELECT_WIRES;\n}\n","import { combineSelection } from \"@/selection-mode\";\n\nimport { isSelectWiresAction } from \"@/actions/select-wires\";\n\nimport { createSelectionReducer } from \"../utils\";\n\nexport default createSelectionReducer((state, action) => {\n  if (!isSelectWiresAction(action)) {\n    return state;\n  }\n\n  const { connectionIds, mode } = action.payload;\n\n  return {\n    ...state,\n    selectedNodeIds: mode === \"set\" ? [] : state.selectedNodeIds,\n    selectedConnectionIds: combineSelection(\n      state.selectedConnectionIds,\n      connectionIds,\n      mode\n    ),\n    selectedJointIds: mode === \"set\" ? [] : state.selectedJointIds,\n  };\n});\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_SELECTION_COPY = \"@selection/copy\" as const;\nexport const copySelection = () => ({\n  type: ACTION_SELECTION_COPY,\n});\nexport type CopySelectionAction = ReturnType<typeof copySelection>;\nexport function isCopySelectionAction(\n  action: AnyAction\n): action is CopySelectionAction {\n  return action.type === ACTION_SELECTION_COPY;\n}\n","import { concatReducers } from \"@/store/utils\";\n\nimport nodeDeleteReducer from \"./node-delete\";\nimport projectNewReducer from \"./project-new\";\nimport selectAllReducer from \"./select-all\";\nimport selectClearReducer from \"./select-clear\";\nimport selectJointsReducer from \"./select-joints\";\nimport selectNodesReducer from \"./select-nodes\";\nimport selectRegionReducer from \"./select-region\";\nimport selectWiresReducer from \"./select-wires\";\nimport selectionAlignToGrid from \"./selection-align-to-grid\";\nimport selectionCopyReducer from \"./selection-copy\";\nimport selectionDeleteReducer from \"./selection-delete\";\nimport selectionMoveReducer from \"./selection-move\";\nimport wireDetatchReducer from \"./wire-detatch\";\n\nconst selectionReducer = concatReducers(\n  projectNewReducer,\n  nodeDeleteReducer,\n  selectAllReducer,\n  selectClearReducer,\n  selectJointsReducer,\n  selectNodesReducer,\n  selectRegionReducer,\n  selectWiresReducer,\n  selectionAlignToGrid,\n  selectionCopyReducer,\n  selectionDeleteReducer,\n  selectionMoveReducer,\n  wireDetatchReducer\n);\n\nexport default selectionReducer;\n","import { AnyAction } from \"redux\";\n\nimport { AppState, defaultAppState } from \"@/store\";\nimport rootReducer from \"@/store/reducer\";\nimport { pointEquals } from \"@/geometry\";\n\nimport { isSelectionAlignToGridAction } from \"@/actions/selection-align-to-grid\";\nimport { moveNode } from \"@/actions/node-move\";\nimport { moveWireJoint } from \"@/actions/wire-joint-move\";\n\nimport { nodePositionsByNodeIdSelector } from \"@/services/node-layout/selectors/node-positions\";\nimport {\n  applyGridJointSnapSelector,\n  applyGridNodeSnapSelector,\n} from \"@/services/circuit-editor-ui-drag/selectors/snap\";\nimport { wireJointPositionsByJointIdSelector } from \"@/services/node-layout/selectors/wires\";\n\nexport default function selectionAlignToGridReducer(\n  state: AppState = defaultAppState,\n  action: AnyAction\n): AppState {\n  if (!isSelectionAlignToGridAction(action)) {\n    return state;\n  }\n\n  const { selectedNodeIds, selectedJointIds } = state.services.selection;\n\n  // Align nodes.\n  const nodePositions = nodePositionsByNodeIdSelector(state);\n  for (const nodeId of selectedNodeIds) {\n    const nodePos = nodePositions[nodeId];\n    if (!nodePos) {\n      continue;\n    }\n\n    const snappedPos = applyGridNodeSnapSelector(state, nodePos);\n    if (!pointEquals(nodePos, snappedPos)) {\n      state = rootReducer(state, moveNode(nodeId, snappedPos));\n    }\n  }\n\n  // Align joints.\n  const jointPositions = wireJointPositionsByJointIdSelector(state);\n  for (const jointId of selectedJointIds) {\n    const jointPos = jointPositions[jointId];\n    if (!jointPos) {\n      continue;\n    }\n\n    const snappedPos = applyGridJointSnapSelector(state, jointPos);\n    if (!pointEquals(jointPos, snappedPos)) {\n      state = rootReducer(state, moveWireJoint(jointId, snappedPos));\n    }\n  }\n\n  return state;\n}\n","import { AnyAction } from \"redux\";\n\nimport { AppState, defaultAppState } from \"@/store\";\nimport rootReducer from \"@/store/reducer\";\n\nimport { isCopySelectionAction } from \"@/actions/selection-copy\";\nimport { copyNodes } from \"@/actions/clipboard-copy\";\n\nimport { selectedNodeIdsSelector } from \"@/services/selection/selectors/selection\";\n\nexport default function selectionCopyReducer(\n  state: AppState = defaultAppState,\n  action: AnyAction\n): AppState {\n  if (!isCopySelectionAction(action)) {\n    return state;\n  }\n\n  const selectedNodes = selectedNodeIdsSelector(state);\n  if (selectedNodes.length === 0) {\n    return state;\n  }\n\n  return rootReducer(state, copyNodes(selectedNodes));\n}\n","import { AnyAction } from \"redux\";\n\nimport { AppState, defaultAppState } from \"@/store\";\nimport rootReducer from \"@/store/reducer\";\n\nimport { isDeleteSelectionAction } from \"@/actions/selection-delete\";\nimport { deleteNode } from \"@/actions/node-delete\";\nimport { detatchWire } from \"@/actions/wire-detatch\";\nimport { deleteWireJoint } from \"@/actions/wire-joint-delete\";\n\nexport default function selectionDeleteReducer(\n  state: AppState = defaultAppState,\n  action: AnyAction\n): AppState {\n  if (!isDeleteSelectionAction(action)) {\n    return state;\n  }\n\n  const {\n    selectedNodeIds,\n    selectedConnectionIds,\n    selectedJointIds,\n  } = state.services.selection;\n\n  if (selectedNodeIds.length > 0) {\n    state = rootReducer(state, deleteNode(selectedNodeIds));\n  }\n  state = selectedConnectionIds.reduce(\n    (state, connectionId) => rootReducer(state, detatchWire(connectionId)),\n    state\n  );\n  state = selectedJointIds.reduce(\n    (state, jointId) => rootReducer(state, deleteWireJoint(jointId)),\n    state\n  );\n\n  return state;\n}\n","import { AnyAction } from \"redux\";\n\nimport { Point } from \"@/geometry\";\nimport { AppState, defaultAppState } from \"@/store\";\nimport rootReducer from \"@/store/reducer\";\n\nimport { isMoveSelectionAction } from \"@/actions/selection-move\";\nimport { moveNode, MoveNodeOpts } from \"@/actions/node-move\";\nimport { moveWireJoint, MoveWireJointOpts } from \"@/actions/wire-joint-move\";\n\nimport {\n  selectedNodeIdsSelector,\n  selectedJointIdsSelector,\n} from \"@/services/selection/selectors/selection\";\n\nexport default function selectionMoveReducer(\n  state: AppState = defaultAppState,\n  action: AnyAction\n) {\n  if (!isMoveSelectionAction(action)) {\n    return state;\n  }\n\n  const { offsetX, offsetY, snapMode } = action.payload;\n\n  const nodeIds = selectedNodeIdsSelector(state);\n  const jointIds = selectedJointIdsSelector(state);\n\n  const offset: Point = {\n    x: offsetX,\n    y: offsetY,\n  };\n\n  let nodeSnapMode: MoveNodeOpts[\"snapMode\"] = \"none\";\n  if (snapMode === \"node\" || snapMode === \"by-type\") {\n    nodeSnapMode = \"node\";\n  }\n\n  let jointSnapMode: MoveWireJointOpts[\"snapMode\"] = \"none\";\n  if (snapMode === \"by-type\") {\n    jointSnapMode = \"joint\";\n  } else {\n    jointSnapMode = snapMode;\n  }\n\n  state = rootReducer(\n    state,\n    moveNode(nodeIds, offset, { relative: true, snapMode: nodeSnapMode })\n  );\n  state = rootReducer(\n    state,\n    moveWireJoint(jointIds, offset, { relative: true, snapMode: jointSnapMode })\n  );\n\n  return state;\n}\n","import { isDetatchWireAction } from \"@/actions/wire-detatch\";\n\nimport { createSelectionReducer } from \"../utils\";\n\nexport default createSelectionReducer((state, action) => {\n  if (!isDetatchWireAction(action)) {\n    return state;\n  }\n\n  const { connectionId } = action.payload;\n\n  return {\n    ...state,\n    selectedConnectionIds: state.selectedConnectionIds.filter(\n      (x) => x !== connectionId\n    ),\n  };\n});\n","import {\n  createServiceReducerCreator,\n  createServiceSelectorCreator,\n} from \"../service-state-utils\";\n\nexport const createSimulatorReducer = createServiceReducerCreator(\"simulator\");\nexport const createSimulatorSelector = createServiceSelectorCreator(\n  \"simulator\"\n);\n","import { isProjectMutationAction } from \"@/project-mutation-actions\";\n\nimport { defaultSimulatorServiceState } from \"../state\";\nimport { createSimulatorReducer } from \"../utils\";\n\nexport default createSimulatorReducer((state, action) => {\n  if (!isProjectMutationAction(action)) {\n    return state;\n  }\n\n  return defaultSimulatorServiceState;\n});\n","import { ElementDefinition } from \"../types\";\n\nfunction asElementDef(module: any): ElementDefinition {\n  return module.default as ElementDefinition;\n}\n\nexport const ElementDefinitionsByType = {\n  \"input-momentary\": asElementDef(require(\"./input-momentary\")),\n  \"input-toggle\": asElementDef(require(\"./input-toggle\")),\n\n  \"logic-and\": asElementDef(require(\"./logic-and\")),\n  \"logic-buffer\": asElementDef(require(\"./logic-buffer\")),\n  \"logic-nand\": asElementDef(require(\"./logic-nand\")),\n  \"logic-nor\": asElementDef(require(\"./logic-nor\")),\n  \"logic-not\": asElementDef(require(\"./logic-not\")),\n  \"logic-or\": asElementDef(require(\"./logic-or\")),\n  \"logic-xor\": asElementDef(require(\"./logic-xor\")),\n\n  \"output-led\": asElementDef(require(\"./output-led\")),\n  \"output-seg7\": asElementDef(require(\"./output-seg7\")),\n\n  \"pin-high\": asElementDef(require(\"./pin-high\")),\n};\nexport type ElementType = keyof typeof ElementDefinitionsByType;\n","import flatMap from \"lodash/flatMap\";\nimport get from \"lodash/get\";\n\nimport {\n  SimulatorNodeIdMappingTreeItem,\n  SimulatorNodeIdToCircuitNodeIdMap,\n} from \"./types\";\n\nexport function walkSimulatorNodeIdToCircuitNodeIdMap(\n  map: SimulatorNodeIdToCircuitNodeIdMap,\n  visit: (circuitNodeIdPath: string[], simulatorNodeId: string) => void,\n  circuitNodeIdPath: string[] = []\n) {\n  const circuitNodeIds = Object.keys(map);\n  for (const circuitNodeId of circuitNodeIds) {\n    const { simulatorNodeId, subCircuitIds } = map[circuitNodeId];\n    const currentPath = [...circuitNodeIdPath, circuitNodeId];\n    if (simulatorNodeId) {\n      visit(currentPath, simulatorNodeId);\n    }\n    walkSimulatorNodeIdToCircuitNodeIdMap(subCircuitIds, visit, currentPath);\n  }\n}\n\nexport function getSimulatorNodeIdFromCircuitNodeIdPath(\n  map: SimulatorNodeIdToCircuitNodeIdMap,\n  circuitNodeIdPath: string[]\n): string | null {\n  // Look up the path through the ic nodes to reach this node.\n  const simulatorNodeIdPath = flatMap(circuitNodeIdPath, (icNodeId) => [\n    icNodeId,\n    \"subCircuitIds\",\n  ]);\n\n  // Remove the last subCircuitIds\n  simulatorNodeIdPath.pop();\n\n  const simulatorNodeIdItem: SimulatorNodeIdMappingTreeItem = get(\n    map,\n    simulatorNodeIdPath\n  );\n\n  if (!simulatorNodeIdItem) {\n    return null;\n  }\n\n  const { simulatorNodeId } = simulatorNodeIdItem;\n  return simulatorNodeId ?? null;\n}\n","import get from \"lodash/get\";\nimport merge from \"lodash/merge\";\nimport { v4 as uuidV4 } from \"uuid\";\n\nimport {\n  CircuitNodeElementProduction,\n  ElementNodeElementProduction,\n  normalizeElementProduction,\n} from \"../../nodes/types/element-production\";\n\nimport {\n  SimulatorGraph,\n  SimulatorGraphDependencies,\n  SimulatorNode,\n  SimulatorNodeIdMappingTreeItem,\n  SimulatorNodePin,\n} from \"./types\";\n\ntype CircuitProductionResult = SimulatorGraph & {\n  inputElementPinsByCircuitPinId: Record<string, SimulatorNodePin[]>;\n  outputElementPinsByCircuitPinId: Record<string, SimulatorNodePin>;\n};\n\nconst EMPTY_PRODUCTION = Object.freeze<CircuitProductionResult>({\n  simulatorNodesById: {},\n  simulatorNodeIdsByCircuitNodeId: {},\n  inputElementPinsByCircuitPinId: {},\n  outputElementPinsByCircuitPinId: {},\n});\n\nexport function produceCircuitGraph(\n  circuitId: string,\n  dependencies: SimulatorGraphDependencies,\n  path: string[] = []\n): CircuitProductionResult {\n  if (path.indexOf(circuitId) !== -1) {\n    throw new Error(\n      `Circuit graph encountered loop on ${path.join(\n        \" => \"\n      )} while trying to add circuit ${circuitId}`\n    );\n  }\n\n  path = [...path, circuitId];\n\n  const simulatorNodesById: Record<string, SimulatorNode> = {};\n  const simulatorNodeIdsByCircuitNodeId: Record<\n    string,\n    SimulatorNodeIdMappingTreeItem\n  > = {};\n  const inputElementPinsByCircuitPinId: Record<string, SimulatorNodePin[]> = {};\n  const outputElementPinsByCircuitPinId: Record<string, SimulatorNodePin> = {};\n\n  const inputCircuitNodeIds: string[] = [];\n  const outputCircuitNodeIds: string[] = [];\n\n  // 1. Create new elements\n  // 2. Wire elements amongs themselves.\n  // 3. Pass input and output mapping to parent.\n\n  const circuitNodeInputPinsByPinIdByNodeId: Record<\n    string,\n    Record<string, SimulatorNodePin[]>\n  > = {};\n  const circuitNodeOutputPinsByPinIdByNodeId: Record<\n    string,\n    Record<string, SimulatorNodePin>\n  > = {};\n\n  const circuitNodeIds = dependencies.nodeIdsByCircuitId[circuitId] ?? [];\n  for (const circuitNodeId of circuitNodeIds) {\n    const nodeType = dependencies.nodeTypesByNodeId[circuitNodeId];\n    if (!nodeType) {\n      continue;\n    }\n\n    // If this node is a pin, remember it to calculate circuit inputs and outputs.\n    if (nodeType === \"pin-input\") {\n      inputCircuitNodeIds.push(circuitNodeId);\n      inputElementPinsByCircuitPinId[circuitNodeId] = [];\n      continue;\n    } else if (nodeType === \"pin-output\") {\n      outputCircuitNodeIds.push(circuitNodeId);\n      continue;\n    }\n\n    const productionResult = produceNode(circuitNodeId, dependencies, path);\n\n    // Merge the produced simulator nodes.\n    merge(simulatorNodesById, productionResult.simulatorNodesById);\n\n    // Merge the mapping from circuit node to simulator node.\n    merge(\n      simulatorNodeIdsByCircuitNodeId,\n      productionResult.simulatorNodeIdsByCircuitNodeId\n    );\n\n    // Remember what these circuit node pins translate to.\n    circuitNodeInputPinsByPinIdByNodeId[circuitNodeId] =\n      productionResult.inputElementPinsByCircuitPinId;\n    circuitNodeOutputPinsByPinIdByNodeId[circuitNodeId] =\n      productionResult.outputElementPinsByCircuitPinId;\n  }\n\n  const circuitConnectionsById = dependencies.connectionsById;\n  for (const connectionId of Object.keys(circuitConnectionsById)) {\n    const { inputPin, outputPin } = circuitConnectionsById[connectionId];\n    // We are only interested in connections within this circuit.\n    // There should not be any cross-circuit connections.\n    // It might be ok to skip this step, and rely on not finding the node mapping.\n\n    if (\n      circuitNodeIds.indexOf(inputPin.nodeId) === -1 ||\n      circuitNodeIds.indexOf(outputPin.nodeId) === -1\n    ) {\n      continue;\n    }\n\n    // We need to find the one output, and connect it to all inputs that match.\n    // There might be more than one input if the input was on an IC / circuit production.\n    const outputSimPin = get(circuitNodeOutputPinsByPinIdByNodeId, [\n      outputPin.nodeId,\n      outputPin.pinId,\n    ]);\n    const inputSimPins = get(circuitNodeInputPinsByPinIdByNodeId, [\n      inputPin.nodeId,\n      inputPin.pinId,\n    ]);\n\n    // If the output is one of our input nodes, then the inputs\n    //  need to be saved for our circuit inputs\n    if (inputCircuitNodeIds.indexOf(outputPin.nodeId) !== -1 && inputSimPins) {\n      // pin id is the pin-input nodeId\n      inputElementPinsByCircuitPinId[outputPin.nodeId].push(...inputSimPins);\n      continue;\n    } else if (\n      outputCircuitNodeIds.indexOf(inputPin.nodeId) !== -1 &&\n      outputSimPin\n    ) {\n      outputElementPinsByCircuitPinId[inputPin.nodeId] = outputSimPin;\n      continue;\n    }\n\n    if (!outputSimPin || !inputSimPins) {\n      continue;\n    }\n\n    const outputSimNode = simulatorNodesById[outputSimPin.simulatorNodeId];\n    let outputsByOutputPin = outputSimNode.outputsByPin[outputSimPin.pinId];\n    if (outputsByOutputPin == null) {\n      outputSimNode.outputsByPin[outputSimPin.pinId] = outputsByOutputPin = [];\n    }\n\n    // Wire up the output to all of the inputs\n    for (const inputSimPin of inputSimPins) {\n      outputsByOutputPin.push({\n        simulatorNodeId: inputSimPin.simulatorNodeId,\n        pinId: inputSimPin.pinId,\n      });\n\n      const inputNode = simulatorNodesById[inputSimPin.simulatorNodeId];\n      inputNode.inputsByPin[inputSimPin.pinId] = {\n        simulatorNodeId: outputSimPin.simulatorNodeId,\n        pinId: outputSimPin.pinId,\n      };\n    }\n  }\n\n  return {\n    simulatorNodesById,\n    simulatorNodeIdsByCircuitNodeId,\n    inputElementPinsByCircuitPinId,\n    outputElementPinsByCircuitPinId,\n  };\n}\n\nfunction produceNode(\n  circuitNodeId: string,\n  dependencies: SimulatorGraphDependencies,\n  path: string[]\n): CircuitProductionResult {\n  const nodeType = dependencies.nodeTypesByNodeId[circuitNodeId];\n  if (!nodeType) {\n    return EMPTY_PRODUCTION;\n  }\n\n  const nodeDef = dependencies.nodeDefsByType[nodeType];\n  if (!nodeDef || !nodeDef.elementProduction) {\n    return EMPTY_PRODUCTION;\n  }\n\n  const production = normalizeElementProduction(nodeDef.elementProduction);\n  switch (production.type) {\n    case \"element\":\n      return produceElementNode(circuitNodeId, production, dependencies);\n    case \"circuit\":\n      return produceCircuitNode(circuitNodeId, production, dependencies, path);\n    default:\n      throw new Error(\n        \"Unsupported production type \" + (production as any).type\n      );\n  }\n}\n\nfunction produceElementNode(\n  circuitNodeId: string,\n  production: ElementNodeElementProduction,\n  { nodeTypesByNodeId, nodeDefsByType }: SimulatorGraphDependencies\n): CircuitProductionResult {\n  const nodeType = nodeTypesByNodeId[circuitNodeId];\n  const nodeDef = nodeDefsByType[nodeType];\n  if (!nodeDef) {\n    return EMPTY_PRODUCTION;\n  }\n\n  const simulatorNodesById: Record<string, SimulatorNode> = {};\n  const simulatorNodeIdsByCircuitNodeId: Record<\n    string,\n    SimulatorNodeIdMappingTreeItem\n  > = {};\n\n  const simulatorNodeId = uuidV4();\n  simulatorNodesById[simulatorNodeId] = {\n    elementType: production.elementType,\n    // We do not have any internal pins.\n    // These will be wired by produceCircuit as\n    // it completes is cross-circuit connections.\n    inputsByPin: {},\n    outputsByPin: {},\n  };\n\n  simulatorNodeIdsByCircuitNodeId[circuitNodeId] = {\n    simulatorNodeId,\n    subCircuitIds: {},\n  };\n\n  const inputElementPinsByCircuitPinId: Record<string, SimulatorNodePin[]> = {};\n  const outputElementPinsByCircuitPinId: Record<string, SimulatorNodePin> = {};\n\n  // We have a one to one pin mapping between node and element\n  for (const pinId of Object.keys(nodeDef.pins)) {\n    const { direction } = nodeDef.pins[pinId];\n    if (direction === \"input\") {\n      inputElementPinsByCircuitPinId[pinId] = [\n        {\n          pinId,\n          simulatorNodeId,\n        },\n      ];\n    } else if (direction === \"output\") {\n      outputElementPinsByCircuitPinId[pinId] = {\n        pinId,\n        simulatorNodeId,\n      };\n    }\n  }\n\n  return {\n    simulatorNodesById,\n    simulatorNodeIdsByCircuitNodeId,\n    inputElementPinsByCircuitPinId,\n    outputElementPinsByCircuitPinId,\n  };\n}\n\nfunction produceCircuitNode(\n  circuitNodeId: string,\n  production: CircuitNodeElementProduction,\n  dependencies: SimulatorGraphDependencies,\n  path: string[]\n): CircuitProductionResult {\n  const circuitProuction = produceCircuitGraph(\n    production.circuitId,\n    dependencies,\n    path\n  );\n\n  return {\n    ...circuitProuction,\n    simulatorNodeIdsByCircuitNodeId: {\n      [circuitNodeId]: {\n        simulatorNodeId: null,\n        subCircuitIds: circuitProuction.simulatorNodeIdsByCircuitNodeId,\n      },\n    },\n  };\n}\n","import { ElementType } from \"@/elements\";\n\nexport interface NodeElementProductionBase {\n  type: string;\n}\n\nexport interface ElementNodeElementProduction {\n  type: \"element\";\n  elementType: ElementType;\n}\n\nexport interface CircuitNodeElementProduction {\n  type: \"circuit\";\n  circuitId: string;\n}\n\nexport type NodeElementProductionObject =\n  | ElementNodeElementProduction\n  | CircuitNodeElementProduction;\n\nexport type NodeElementProduction = ElementType | NodeElementProductionObject;\n\nexport function normalizeElementProduction(\n  elementProduction: NodeElementProduction\n): NodeElementProductionObject {\n  if (typeof elementProduction === \"string\") {\n    return {\n      type: \"element\",\n      elementType: elementProduction,\n    };\n  }\n\n  return elementProduction;\n}\n","import { ElementType } from \"@/elements\";\nimport { Connection } from \"../node-graph/types\";\nimport { NodeDefinition } from \"../../nodes/types\";\n\nexport interface SimulatorNodePin {\n  simulatorNodeId: string;\n  pinId: string;\n}\n\nexport interface SimulatorNode {\n  /**\n   * The element type of this node.\n   */\n  elementType: ElementType;\n\n  /**\n   * Input source pins by input pin id.\n   *\n   * This is redundant with the opposing node's outputsByPin,\n   * to increase lookup speed.\n   */\n  inputsByPin: Record<string, SimulatorNodePin>;\n\n  /**\n   * Output source pins by output pin id.\n   *\n   * This is redundant with the opposing node's inputsByPin,\n   * to increase lookup speed.\n   */\n  outputsByPin: Record<string, SimulatorNodePin[]>;\n}\n\nexport interface SimulatorNodeIdMappingTreeItem {\n  simulatorNodeId: string | null;\n  subCircuitIds: SimulatorNodeIdToCircuitNodeIdMap;\n}\n\nexport type SimulatorNodeIdToCircuitNodeIdMap = Record<\n  string,\n  SimulatorNodeIdMappingTreeItem\n>;\n\nexport interface SimulatorGraphDependencies {\n  nodeIdsByCircuitId: Record<string, string[]>;\n  nodeTypesByNodeId: Record<string, string>;\n  connectionsById: Record<string, Connection>;\n  nodeDefsByType: Record<string, NodeDefinition>;\n}\n\nexport interface SimulatorGraph {\n  /**\n   * A map of all simulator nodes by simulator node id.\n   */\n  simulatorNodesById: Record<string, SimulatorNode>;\n\n  /**\n   * A map of simulator node ids by the circuit node id that generated them.\n   */\n  simulatorNodeIdsByCircuitNodeId: SimulatorNodeIdToCircuitNodeIdMap;\n}\n\nexport const EmptySimulatorGraph: SimulatorGraph = Object.freeze({\n  simulatorNodesById: {},\n  simulatorNodeIdsByCircuitNodeId: {},\n});\n","import { createSelector } from \"reselect\";\n\nimport { nodeIdsByCircuitIdSelector } from \"@/services/circuits/selectors/nodes\";\nimport { nodeTypesByNodeIdSelector } from \"@/services/node-graph/selectors/nodes\";\nimport { connectionsByIdSelector } from \"@/services/node-graph/selectors/connections\";\nimport { nodeDefinitionsByTypeSelector } from \"@/services/node-types/selectors/node-types\";\nimport { ROOT_CIRCUIT_ID } from \"@/services/circuits/constants\";\n\nimport { produceCircuitGraph } from \"../graph-production\";\nimport { EmptySimulatorGraph } from \"../types\";\n\nexport const rootNodeGraphSelector = createSelector(\n  nodeIdsByCircuitIdSelector,\n  nodeTypesByNodeIdSelector,\n  connectionsByIdSelector,\n  nodeDefinitionsByTypeSelector,\n  (nodeIdsByCircuitId, nodeTypesByNodeId, connectionsById, nodeDefsByType) => {\n    // FIXME: Display this error to the user.\n    try {\n      return produceCircuitGraph(ROOT_CIRCUIT_ID, {\n        nodeIdsByCircuitId,\n        nodeTypesByNodeId,\n        connectionsById,\n        nodeDefsByType,\n      });\n    } catch (e) {\n      console.error(e);\n      return EmptySimulatorGraph;\n    }\n  }\n);\n","import { AppState } from \"@/store\";\nimport { ElementDefinitionsByType } from \"@/elements\";\n\nimport { getSimulatorNodeIdFromCircuitNodeIdPath } from \"../utils\";\n\nimport { rootNodeGraphSelector } from \"./graph\";\n\nexport const simulatorNodeIdsByCircuitNodeIdSelector = (state: AppState) =>\n  rootNodeGraphSelector(state).simulatorNodeIdsByCircuitNodeId;\n\n/**\n * Gets the simulator node id for a given circuit node id.\n */\nexport const simulatorNodeIdFromCircuitNodeIdSelector = (\n  state: AppState,\n  circuitNodeIdPath: string[]\n) => {\n  const { simulatorNodeIdsByCircuitNodeId } = rootNodeGraphSelector(state);\n  return getSimulatorNodeIdFromCircuitNodeIdPath(\n    simulatorNodeIdsByCircuitNodeId,\n    circuitNodeIdPath\n  );\n};\n\n/**\n * Get all simulator node ids.\n *\n * WARN: Not react safe.\n */\nexport const simulatorNodeIdsSelector = (state: AppState) => {\n  const { simulatorNodesById } = rootNodeGraphSelector(state);\n  return Object.keys(simulatorNodesById);\n};\n\nexport const elementTypeFromSimulatorNodeId = (\n  state: AppState,\n  simulatorNodeId: string\n) => {\n  const { simulatorNodesById } = rootNodeGraphSelector(state);\n  const simulatorNode = simulatorNodesById[simulatorNodeId];\n  if (!simulatorNode) {\n    return null;\n  }\n\n  return simulatorNode.elementType;\n};\n\nexport const elementDefFromSimulatorNodeId = (\n  state: AppState,\n  nodeId: string\n) => {\n  const type = elementTypeFromSimulatorNodeId(state, nodeId);\n  if (!type) {\n    return null;\n  }\n\n  return ElementDefinitionsByType[type] ?? null;\n};\n","import values from \"lodash/values\";\nimport flatMap from \"lodash/flatMap\";\n\nimport { AppState } from \"@/store\";\n\nimport { rootNodeGraphSelector } from \"./graph\";\nimport { SimulatorNodePin } from \"../types\";\n\nconst EmptyPinArray = Object.freeze([] as string[]);\nconst EmptyPinInputs = Object.freeze({} as Record<string, SimulatorNodePin>);\n\n/**\n * Gets an array of simulator node ids connected to the outputs of the given node id.\n * WARN: Not react safe.  For reducer use only.\n */\nexport const outputSimulatorNodeIdsFromSimulatorNodeIdSelector = (\n  state: AppState,\n  simulatorNodeId: string\n) => {\n  const { simulatorNodesById } = rootNodeGraphSelector(state);\n\n  const simulatorNode = simulatorNodesById[simulatorNodeId];\n  if (!simulatorNode) {\n    return EmptyPinArray;\n  }\n\n  return flatMap(values(simulatorNode.outputsByPin), (pins) =>\n    pins.map((x) => x.simulatorNodeId)\n  );\n};\n\n/**\n * Gets a map of node input pins to their output sources given a node id.\n */\nexport const inputPinsByPinIdFromSimulatorNodeIdSelector = (\n  state: AppState,\n  simulatorNodeId: string\n) => {\n  const { simulatorNodesById } = rootNodeGraphSelector(state);\n  const simulatorNode = simulatorNodesById[simulatorNodeId];\n  if (!simulatorNode) {\n    return EmptyPinInputs;\n  }\n\n  return simulatorNode.inputsByPin;\n};\n","import binarySearch from \"binary-search\";\nimport { v4 as uuidV4 } from \"uuid\";\nimport pick from \"lodash/pick\";\nimport difference from \"lodash/difference\";\n\nimport { fpSet } from \"@/utils\";\nimport { asArray, dropIndexFp } from \"@/arrays\";\nimport { AppState } from \"@/store\";\nimport { EvolutionResult, OutputTransition } from \"@/logic\";\n\nimport {\n  inputPinsByPinIdFromSimulatorNodeIdSelector,\n  outputSimulatorNodeIdsFromSimulatorNodeIdSelector,\n} from \"@/services/simulator-graph/selectors/connections\";\nimport {\n  simulatorNodeIdsSelector,\n  elementDefFromSimulatorNodeId,\n} from \"@/services/simulator-graph/selectors/nodes\";\n\nimport { SimulatorServiceState, defaultSimulatorServiceState } from \"../state\";\nimport { SimTransitionWindow, SimNodePinTransition } from \"../types\";\n\nexport function simInit(\n  state: Readonly<SimulatorServiceState>,\n  appState: Readonly<AppState>\n): SimulatorServiceState {\n  const nodeIds = simulatorNodeIdsSelector(appState);\n\n  state = defaultSimulatorServiceState;\n\n  state = nodeIds.reduce(\n    (state, nodeId) => initNode(state, nodeId, appState),\n    state\n  );\n\n  state = nodeIds.reduce(\n    (state, nodeId) => collectNodeTransitions(state, nodeId, appState),\n    state\n  );\n\n  return Object.assign({}, state, { initialized: true });\n}\n\nfunction initNode(\n  state: Readonly<SimulatorServiceState>,\n  nodeId: string,\n  appState: Readonly<AppState>\n): SimulatorServiceState {\n  const def = elementDefFromSimulatorNodeId(appState, nodeId);\n  if (!def) {\n    return state;\n  }\n\n  const outputValues: Record<string, boolean> = {};\n  def.outputPins.forEach((output) => {\n    outputValues[output] = false;\n  });\n\n  return fpSet(state, \"nodeOutputValuesByNodeId\", nodeId, outputValues);\n}\n\nexport function simTick(\n  state: Readonly<SimulatorServiceState>,\n  tickCount: number,\n  appState: Readonly<AppState>\n): SimulatorServiceState {\n  const endTick = state.tick + tickCount;\n\n  // We cannot grab the windows ahead of time, as some windows might generate more windows\n  //  for future ticks.\n\n  // Pre-clone windows as we wil be repeatedly modifying it.\n  state = Object.assign({}, state, {\n    transitionWindows: state.transitionWindows.slice(),\n  });\n\n  let saftyCount = tickCount + 1;\n  while (\n    state.transitionWindows.length > 0 &&\n    state.transitionWindows[0].tick <= endTick\n  ) {\n    if (--saftyCount === 0) {\n      // If we have seen more windows than ticks, something is creating windows for past ticks.\n      throw new Error(\n        `Maximum ticks per sim evolution exceeded.  This is an indication that windows are being generated for past ticks.`\n      );\n    }\n\n    // We can safely mutate here, as even if the array is regenerated\n    //  from a tick it will still be a fresh copy that has not yet been\n    //  consumed by redux.\n    const window = state.transitionWindows.shift()!;\n    state = tickWindow(state, window, appState);\n  }\n\n  // If we did not encounter a window on our last tick, jump ahead to that tick.\n  if (state.tick != endTick) {\n    state = Object.assign({}, state, {\n      tick: endTick,\n    });\n  }\n\n  return state;\n}\n\nfunction tickWindow(\n  readonlyState: Readonly<SimulatorServiceState>,\n  window: SimTransitionWindow,\n  appState: Readonly<AppState>\n): SimulatorServiceState {\n  if (window.transitionIds.length === 0) {\n    return readonlyState;\n  }\n\n  // Update the current tick, as it is referenced\n  //  during transition collection.\n  let state = Object.assign({}, readonlyState, {\n    tick: window.tick,\n    // pre-clone outputs for mutation below\n    nodeOutputValuesByNodeId: Object.assign(\n      {},\n      readonlyState.nodeOutputValuesByNodeId\n    ),\n  }) as SimulatorServiceState;\n\n  // Could benefit from being changed to a Set, although nodes usually arent hooked up to too many\n  //  outputs at a time.\n  const updatedNodes = new Set<string>();\n  window.transitionIds.forEach((tid) => {\n    const { nodeId, valuesByOutputPin } = state.transitionsById[tid];\n\n    if (\n      !isOutputsUpdated(\n        state.nodeOutputValuesByNodeId[nodeId],\n        valuesByOutputPin\n      )\n    ) {\n      // Values are unchanged from current, node will not update.\n      return;\n    }\n\n    // nodeOutputValuesByNodeId is pre-cloned\n    state.nodeOutputValuesByNodeId[nodeId] = Object.assign(\n      {},\n      state.nodeOutputValuesByNodeId[nodeId],\n      valuesByOutputPin\n    );\n\n    // Add each node we output to, to the output list.\n    const outputNodeIds = outputSimulatorNodeIdsFromSimulatorNodeIdSelector(\n      appState,\n      nodeId\n    );\n    outputNodeIds.forEach((nodeId) => updatedNodes.add(nodeId));\n  });\n\n  // Remove all window transitions as they have been consumed.\n  // State is cloned above\n  state.transitionsById = pick(\n    state.transitionsById,\n    difference(Object.keys(state.transitionsById), window.transitionIds)\n  );\n\n  for (const nodeId of updatedNodes) {\n    state = collectNodeTransitions(state, nodeId, appState);\n  }\n\n  return state;\n}\n\nfunction isOutputsUpdated(\n  outputs: Record<string, boolean>,\n  updates: Record<string, boolean>\n) {\n  return Object.keys(updates).some((key) => outputs[key] !== updates[key]);\n}\n\nexport function collectNodeTransitions(\n  state: Readonly<SimulatorServiceState>,\n  nodeId: string,\n  appState: Readonly<AppState>\n): SimulatorServiceState {\n  const def = elementDefFromSimulatorNodeId(appState, nodeId);\n  if (!def || !def.evolve) {\n    return state;\n  }\n\n  // Build the current input state from the connected pins.\n  const inputs = collectNodeInputs(state, nodeId, appState);\n  const result = def.evolve(\n    state.nodeStatesByNodeId[nodeId],\n    inputs,\n    state.tick\n  );\n\n  return applyEvolutionResult(state, nodeId, result);\n}\n\nexport function applyEvolutionResult(\n  state: Readonly<SimulatorServiceState>,\n  nodeId: string,\n  evolutionResult: EvolutionResult\n) {\n  const { state: nodeState, transitions } = evolutionResult;\n\n  if (nodeState) {\n    state = fpSet(state, \"nodeStatesByNodeId\", nodeId, nodeState);\n  }\n\n  if (transitions) {\n    const transitionsArray = asArray(transitions);\n    state = transitionsArray.reduce(\n      (state, transition, i) =>\n        applyOutputTransition(\n          state,\n          nodeId,\n          transition,\n          i === 0 ? \"replace\" : \"append\"\n        ),\n      state\n    );\n  }\n\n  return state;\n}\n\nfunction collectNodeInputs(\n  state: Readonly<SimulatorServiceState>,\n  nodeId: string,\n  appState: Readonly<AppState>\n): Record<string, boolean> {\n  // Build the current input state from the connected pins.\n  const inputs: Record<string, boolean> = {};\n  const inputSourcesByPin = inputPinsByPinIdFromSimulatorNodeIdSelector(\n    appState,\n    nodeId\n  );\n\n  Object.keys(inputSourcesByPin).forEach((inputPin) => {\n    const inputConn = inputSourcesByPin[inputPin];\n    if (!inputConn) {\n      inputs[inputPin] = false;\n      return;\n    }\n\n    const { simulatorNodeId: sourceNodeId, pinId: sourcePinId } = inputConn;\n    inputs[inputPin] =\n      state.nodeOutputValuesByNodeId[sourceNodeId]?.[sourcePinId] || false;\n  });\n\n  return inputs;\n}\n\nfunction applyOutputTransition(\n  state: Readonly<SimulatorServiceState>,\n  nodeId: string,\n  transition: OutputTransition,\n  defaultMerger: \"replace\" | \"append\" = \"replace\"\n): SimulatorServiceState {\n  const {\n    tickOffset,\n    valuesByPin,\n    transitionMerger = defaultMerger,\n  } = transition;\n\n  // Sanity check that we are not producing transitions for the past or current tick.\n  const transitionTick = state.tick + (tickOffset > 0 ? tickOffset : 1);\n\n  // We originally removed old transitions when scheduling new transitions.\n  //  Experimenting without this.\n  if (transitionMerger === \"replace\") {\n    state = removeTransitionsByNodeId(state, nodeId);\n  }\n\n  return addTransition(state, nodeId, transitionTick, valuesByPin);\n}\n\nfunction addTransition(\n  state: Readonly<SimulatorServiceState>,\n  nodeId: string,\n  tick: number,\n  valuesByOutputPin: Record<string, boolean>\n): SimulatorServiceState {\n  const transitionId = uuidV4();\n\n  const newTransition: SimNodePinTransition = {\n    nodeId,\n    tick,\n    valuesByOutputPin,\n  };\n\n  // Prepare the new transition window.\n  const transitionWindows = state.transitionWindows.slice();\n\n  let index = binarySearch(transitionWindows, tick, (a, b) => a.tick - b);\n  if (index < 0) {\n    // Need to create a new window\n    index = -index - 1;\n    const newWindow: SimTransitionWindow = {\n      tick,\n      transitionIds: [],\n    };\n    transitionWindows.splice(index, 0, newWindow);\n  }\n\n  const transitionIds = transitionWindows[index].transitionIds.slice();\n  transitionIds.push(transitionId);\n\n  transitionWindows[index] = Object.assign({}, transitionWindows[index], {\n    transitionIds,\n  });\n\n  const transitionsById = Object.assign({}, state.transitionsById, {\n    [transitionId]: newTransition,\n  });\n\n  return Object.assign({}, state, {\n    // Add the new transition window to the id mapping.\n    transitionsById,\n    transitionWindows,\n  });\n}\n\nfunction removeTransitionsByNodeId(\n  state: Readonly<SimulatorServiceState>,\n  nodeId: string\n): SimulatorServiceState {\n  function isNodeTransition(transition: SimNodePinTransition) {\n    return transition.nodeId === nodeId;\n  }\n\n  const transitionIds = Object.keys(state.transitionsById).filter((id) =>\n    isNodeTransition(state.transitionsById[id])\n  );\n\n  return transitionIds.reduce(\n    (state, transitionId) => removeTransitionById(state, transitionId),\n    state\n  );\n}\n\nexport function removeTransitionById(\n  state: Readonly<SimulatorServiceState>,\n  transitionId: string\n): SimulatorServiceState {\n  const transition = state.transitionsById[transitionId];\n  if (!transition) {\n    return state;\n  }\n\n  const transitionsById = pick(\n    state.transitionsById,\n    Object.keys(state.transitionsById).filter((x) => x !== transitionId)\n  );\n  let transitionWindows = state.transitionWindows;\n\n  const transitionWindowIndex = binarySearch(\n    transitionWindows,\n    transition.tick,\n    (a, b) => a.tick - b\n  );\n  if (transitionWindowIndex >= 0) {\n    const transitionWindow = transitionWindows[transitionWindowIndex];\n    const { transitionIds } = transitionWindow;\n\n    const tickWindowTransitionIndex = transitionWindow.transitionIds.indexOf(\n      transitionId\n    );\n    if (tickWindowTransitionIndex !== -1) {\n      if (transitionWindow.transitionIds.length === 1) {\n        // Only one element left, remove the window.\n        transitionWindows = dropIndexFp(\n          transitionWindows,\n          transitionWindowIndex\n        );\n      } else {\n        // Remove the transition from the tick window.\n        transitionWindows = transitionWindows.slice();\n        transitionWindows[transitionWindowIndex] = Object.assign(\n          {},\n          transitionWindows[transitionWindowIndex],\n          {\n            transitionIds: dropIndexFp(\n              transitionIds,\n              tickWindowTransitionIndex\n            ),\n          }\n        );\n      }\n    }\n  }\n\n  return Object.assign({}, state, {\n    transitionsById,\n    transitionWindows,\n  });\n}\n","import { ElementDefinitionsByType } from \"@/elements\";\n\nimport { isInteractNodeAction } from \"@/actions/node-interact\";\nimport {\n  simulatorNodeIdFromCircuitNodeIdSelector,\n  elementTypeFromSimulatorNodeId,\n} from \"@/services/simulator-graph/selectors/nodes\";\n\nimport { createSimulatorReducer } from \"../utils\";\n\nimport { applyEvolutionResult } from \"./utils\";\n\nexport default createSimulatorReducer((state, action, appState) => {\n  if (!isInteractNodeAction(action)) {\n    return state;\n  }\n\n  const { circuitNodeIdPath, data } = action.payload;\n  const simulatorNodeId = simulatorNodeIdFromCircuitNodeIdSelector(\n    appState,\n    circuitNodeIdPath\n  );\n\n  if (!simulatorNodeId) {\n    return state;\n  }\n\n  const elementType = elementTypeFromSimulatorNodeId(appState, simulatorNodeId);\n  if (!elementType) {\n    return state;\n  }\n\n  const def = ElementDefinitionsByType[elementType];\n  if (!def || !def.interact) {\n    return state;\n  }\n\n  const nodeState = state.nodeStatesByNodeId[simulatorNodeId];\n  const evolutionResult = def.interact(nodeState, data);\n\n  return applyEvolutionResult(state, simulatorNodeId, evolutionResult);\n});\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_SIM_FASTFORWARD = \"@sim/fastforward\" as const;\nexport const fastForwardSim = () => ({\n  type: ACTION_SIM_FASTFORWARD,\n});\nexport type FastForwardSimAction = ReturnType<typeof fastForwardSim>;\nexport function isFastForwardSimAction(\n  action: AnyAction\n): action is FastForwardSimAction {\n  return action.type === ACTION_SIM_FASTFORWARD;\n}\n","import { isFastForwardSimAction } from \"@/actions/sim-fastforward\";\n\nimport { createSimulatorReducer } from \"../utils\";\n\nimport { simTick } from \"./utils\";\n\nexport default createSimulatorReducer((state, action, appState) => {\n  if (!isFastForwardSimAction(action)) {\n    return state;\n  }\n\n  const { tick, transitionWindows } = state;\n\n  if (transitionWindows.length === 0) {\n    return state;\n  }\n\n  const nextWindowTick = transitionWindows[0].tick - tick;\n  return simTick(state, nextWindowTick, appState);\n});\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_SIM_START = \"@sim/start\" as const;\nexport const startSim = () => ({\n  type: ACTION_SIM_START,\n});\nexport type StartSimAction = ReturnType<typeof startSim>;\nexport function isStartSimAction(action: AnyAction): action is StartSimAction {\n  return action.type === ACTION_SIM_START;\n}\n","import { isStartSimAction } from \"@/actions/sim-start\";\n\nimport { createSimulatorReducer } from \"../utils\";\n\nimport { simInit } from \"./utils\";\n\nexport default createSimulatorReducer((state, action, appState) => {\n  if (!isStartSimAction(action)) {\n    return state;\n  }\n\n  return simInit(state, appState);\n});\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_SIM_STEP = \"@sim/step\" as const;\nexport const stepSim = () => ({\n  type: ACTION_SIM_STEP,\n});\nexport type StepSimAction = ReturnType<typeof stepSim>;\nexport function isStepSimAction(action: AnyAction): action is StepSimAction {\n  return action.type === ACTION_SIM_STEP;\n}\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_SIM_TICK = \"@sim/tick\" as const;\nexport const tickSim = (tickCount: number) => ({\n  type: ACTION_SIM_TICK,\n  payload: { tickCount },\n});\nexport type TickSimAction = ReturnType<typeof tickSim>;\nexport function isTickSimAction(action: AnyAction): action is TickSimAction {\n  return action.type === ACTION_SIM_TICK;\n}\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_SIM_STOP = \"@sim/stop\" as const;\nexport const stopSim = () => ({\n  type: ACTION_SIM_STOP,\n});\nexport type StartSimAction = ReturnType<typeof stopSim>;\nexport function isStopSimAction(action: AnyAction): action is StartSimAction {\n  return action.type === ACTION_SIM_STOP;\n}\n","import { isStopSimAction } from \"@/actions/sim-stop\";\n\nimport { defaultSimulatorServiceState } from \"../state\";\n\nimport { createSimulatorReducer } from \"../utils\";\n\nexport default createSimulatorReducer((state, action) => {\n  if (!isStopSimAction(action)) {\n    return state;\n  }\n\n  return defaultSimulatorServiceState;\n});\n","import { concatReducers } from \"@/store/utils\";\n\nimport elementGraphInvalidatedReducer from \"./element-graph-invalidated\";\nimport nodeInteractReducer from \"./node-interact\";\nimport simFastforwardReducer from \"./sim-fastforward\";\nimport simStartReducer from \"./sim-start\";\nimport simStepReducer from \"./sim-step\";\nimport simStopReducer from \"./sim-stop\";\nimport simTickReducer from \"./sim-tick\";\n\nconst simulatorReducer = concatReducers(\n  elementGraphInvalidatedReducer,\n  nodeInteractReducer,\n  simFastforwardReducer,\n  simStartReducer,\n  simStepReducer,\n  simStopReducer,\n  simTickReducer\n);\n\nexport default simulatorReducer;\n","import { AnyAction } from \"redux\";\n\nimport { fpSet } from \"@/utils\";\n\nimport { AppState, defaultAppState } from \"@/store\";\nimport rootReducer from \"@/store/reducer\";\n\nimport { isStepSimAction } from \"@/actions/sim-step\";\nimport { tickSim } from \"@/actions/sim-tick\";\n\nimport { simInit } from \"./utils\";\n\nexport default function (\n  state: AppState = defaultAppState,\n  action: AnyAction\n): AppState {\n  if (!isStepSimAction(action)) {\n    return state;\n  }\n\n  const { initialized } = state.services.simulator;\n  if (!initialized) {\n    state = fpSet(state, \"services\", \"simulator\", (simState) =>\n      simInit(simState, state)\n    );\n  }\n\n  // These may have changed as a result of the init process.\n  const { tick, transitionWindows } = state.services.simulator;\n  if (transitionWindows.length === 0) {\n    return state;\n  }\n\n  const windowTick = transitionWindows[0].tick;\n\n  return rootReducer(state, tickSim(windowTick - tick));\n}\n","import { isTickSimAction } from \"@/actions/sim-tick\";\n\nimport { createSimulatorReducer } from \"../utils\";\n\nimport { simTick } from \"./utils\";\n\nexport default createSimulatorReducer((state, action, appState) => {\n  if (!isTickSimAction(action)) {\n    return state;\n  }\n\n  const { tickCount } = action.payload;\n\n  const start = performance.now();\n\n  state = simTick(state, tickCount, appState);\n\n  const end = performance.now();\n\n  const updateTime = end - start;\n  state = {\n    ...state,\n    lastTickProcessingTimeMs: updateTime,\n  };\n\n  return state;\n});\n","import {\n  createServiceReducerCreator,\n  createServiceSelectorCreator,\n} from \"../service-state-utils\";\n\nexport const createSimulatorControlReducer = createServiceReducerCreator(\n  \"simulatorControl\"\n);\nexport const createSimulatorControlSelector = createServiceSelectorCreator(\n  \"simulatorControl\"\n);\n","import { isProjectMutationAction } from \"@/project-mutation-actions\";\n\nimport { createSimulatorControlReducer } from \"../utils\";\n\nexport default createSimulatorControlReducer((state, action) => {\n  if (!isProjectMutationAction(action)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    mode: \"edit\",\n  };\n});\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_SIM_PAUSE = \"@sim/pause\" as const;\nexport const pauseSim = (mode: boolean | \"toggle\") => ({\n  type: ACTION_SIM_PAUSE,\n  payload: { mode },\n});\nexport type PauseSimAction = ReturnType<typeof pauseSim>;\nexport function isPauseSimAction(action: AnyAction): action is PauseSimAction {\n  return action.type === ACTION_SIM_PAUSE;\n}\n","import { createSimulatorControlSelector } from \"../utils\";\n\nexport const isSimActiveSelector = createSimulatorControlSelector(\n  (state) => state.mode !== \"edit\"\n);\n\nexport const isSimRunningSelector = createSimulatorControlSelector(\n  (state) => state.mode === \"run\"\n);\n\nexport const isSimPausedSelector = createSimulatorControlSelector(\n  (state) => state.mode === \"pause\"\n);\n\nexport const ticksPerSecondSelector = createSimulatorControlSelector(\n  (state) => state.ticksPerSecond\n);\n","import { concatReducers } from \"@/store/utils\";\n\nimport elementGraphInvalidatedReducer from \"./element-graph-invalidated\";\nimport simPauseReducer from \"./sim-pause\";\nimport simStartReducer from \"./sim-start\";\nimport simStepReducer from \"./sim-step\";\nimport simStopReducer from \"./sim-stop\";\n\nconst simulatorReducer = concatReducers(\n  elementGraphInvalidatedReducer,\n  simPauseReducer,\n  simStartReducer,\n  simStepReducer,\n  simStopReducer\n);\n\nexport default simulatorReducer;\n","import { isPauseSimAction } from \"@/actions/sim-pause\";\n\nimport { createSimulatorControlReducer } from \"../utils\";\nimport { isSimActiveSelector } from \"../selectors/run\";\n\nexport default createSimulatorControlReducer((state, action) => {\n  if (!isPauseSimAction(action)) {\n    return state;\n  }\n\n  const { mode } = action.payload;\n\n  if (!isSimActiveSelector.local(state)) {\n    return state;\n  }\n\n  let runMode = state.mode;\n\n  switch (mode) {\n    case true:\n      runMode = \"pause\";\n      break;\n    case false:\n      runMode = \"run\";\n      break;\n    case \"toggle\":\n      runMode = runMode == \"run\" ? \"pause\" : \"run\";\n  }\n\n  return {\n    ...state,\n    mode: runMode,\n  };\n});\n","import { isStartSimAction } from \"@/actions/sim-start\";\n\nimport { createSimulatorControlReducer } from \"../utils\";\n\nexport default createSimulatorControlReducer((state, action) => {\n  if (!isStartSimAction(action)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    mode: \"run\",\n  };\n});\n","import { isStepSimAction } from \"@/actions/sim-step\";\n\nimport { createSimulatorControlReducer } from \"../utils\";\n\nexport default createSimulatorControlReducer((state, action) => {\n  if (!isStepSimAction(action)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    mode: \"pause\",\n  };\n});\n","import { isStopSimAction } from \"@/actions/sim-stop\";\n\nimport { createSimulatorControlReducer } from \"../utils\";\n\nimport { defaultSimulatorControlServiceState } from \"../state\";\n\nexport default createSimulatorControlReducer((state, action) => {\n  if (!isStopSimAction(action)) {\n    return state;\n  }\n\n  // Reset the simulator but keep the ticks per second choice.\n  return {\n    ...defaultSimulatorControlServiceState,\n    ticksPerSecond: state.ticksPerSecond,\n  };\n});\n","import {\n  isTesselWindow,\n  normalizeTesselItem,\n  TesselValue,\n} from \"@/components/Tessel\";\nimport { walkTesselValues } from \"@/components/Tessel/utils\";\n\nimport { CIRCUIT_FIELD_WINDOW_ID } from \"@/pages/CircuitEditorPage/windows/CircuitFieldWindow/tessel-window\";\n\nimport {\n  createServiceReducerCreator,\n  createServiceSelectorCreator,\n} from \"../service-state-utils\";\n\nexport const createUiLayoutReducer = createServiceReducerCreator(\"uiLayout\");\nexport const createUiLayoutSelector = createServiceSelectorCreator(\"uiLayout\");\n\nexport function findDefaultActiveWindow(value: TesselValue | null): string[] {\n  let activePath: string[] = [];\n  if (!value) {\n    return activePath;\n  }\n\n  walkTesselValues(value, (item, path) => {\n    const normalized = normalizeTesselItem(item);\n    if (\n      isTesselWindow(normalized) &&\n      normalized.windowId === CIRCUIT_FIELD_WINDOW_ID\n    ) {\n      activePath = path;\n      return false;\n    }\n  });\n\n  return activePath;\n}\n","import { isDeleteCircuitAction } from \"@/actions/circuit-delete\";\n\nimport { filterTesselValues } from \"@/components/Tessel/utils\";\n\nimport { isCircuitFieldTesselWindow } from \"@/pages/CircuitEditorPage/windows/CircuitFieldWindow/tessel-window\";\n\nimport { createUiLayoutReducer, findDefaultActiveWindow } from \"../utils\";\n\nexport default createUiLayoutReducer((state, action) => {\n  if (!isDeleteCircuitAction(action)) {\n    return state;\n  }\n\n  if (!state.layout) {\n    return state;\n  }\n\n  const { circuitId } = action.payload;\n\n  const layout = filterTesselValues(state.layout, (value) => {\n    if (!isCircuitFieldTesselWindow(value)) {\n      return true;\n    }\n\n    if (value.windowProps.circuitId === circuitId) {\n      return false;\n    }\n\n    return true;\n  });\n\n  return {\n    ...state,\n    layout,\n    activeCircuitEditorPath: findDefaultActiveWindow(layout),\n  };\n});\n","import { AnyAction } from \"redux\";\n\nimport { TesselValue } from \"@/components/Tessel\";\n\nexport const ACTION_LAYOUT_REARRANGE = \"@layout/rearrange\" as const;\nexport const rearrangeLayout = (layout: TesselValue) => ({\n  type: ACTION_LAYOUT_REARRANGE,\n  payload: { layout },\n});\nexport type RearrangeLayoutActionType = ReturnType<typeof rearrangeLayout>;\nexport function isRearrangeLayoutAction(\n  action: AnyAction\n): action is RearrangeLayoutActionType {\n  return action.type === ACTION_LAYOUT_REARRANGE;\n}\n","import { isRearrangeLayoutAction } from \"@/actions/layout-rearrange\";\nimport { createUiLayoutReducer } from \"../utils\";\n\nexport default createUiLayoutReducer((state, action) => {\n  if (!isRearrangeLayoutAction(action)) {\n    return state;\n  }\n\n  const { layout } = action.payload;\n\n  return {\n    ...state,\n    layout,\n  };\n});\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_VIEW_ACTIVATE = \"@view/activate\" as const;\nexport const activateView = (tesselPath: string[]) => ({\n  type: ACTION_VIEW_ACTIVATE,\n  payload: { tesselPath },\n});\nexport type ActivateViewAction = ReturnType<typeof activateView>;\nexport function isActivateViewAction(\n  action: AnyAction\n): action is ActivateViewAction {\n  return action.type === ACTION_VIEW_ACTIVATE;\n}\n","import get from \"lodash/get\";\n\nimport { isActivateViewAction } from \"@/actions/view-activate\";\n\nimport { createUiLayoutReducer, findDefaultActiveWindow } from \"../utils\";\n\nexport default createUiLayoutReducer((state, action) => {\n  if (!isActivateViewAction(action)) {\n    return state;\n  }\n\n  let { tesselPath } = action.payload;\n\n  if (!get(state.layout, tesselPath)) {\n    tesselPath = findDefaultActiveWindow(state.layout);\n  }\n\n  return {\n    ...state,\n    activeCircuitEditorPath: tesselPath,\n  };\n});\n","import { AnyAction } from \"redux\";\n\ninterface ViewCircuitOpts {\n  newWindow?: boolean;\n  tesselPath?: string[];\n}\nexport const ACTION_VIEW_CIRCUIT = \"@view/circuit\" as const;\nexport const viewCircuit = (\n  circuitId: string,\n  circuitNodeIdPath: string[] | null = null,\n  opts: ViewCircuitOpts = {}\n) => ({\n  type: ACTION_VIEW_CIRCUIT,\n  payload: { circuitId, circuitNodeIdPath, ...opts },\n});\nexport type ViewCircuitAction = ReturnType<typeof viewCircuit>;\nexport function isViewCircuitAction(\n  action: AnyAction\n): action is ViewCircuitAction {\n  return action.type === ACTION_VIEW_CIRCUIT;\n}\n","import get from \"lodash/get\";\n\nimport { fpSetByArray } from \"@/utils\";\n\nimport { isViewCircuitAction } from \"@/actions/view-circuit\";\n\nimport { normalizeTesselItem, TesselValue } from \"@/components/Tessel\";\n\nimport { circuitFieldTesselWindow } from \"@/pages/CircuitEditorPage/windows/CircuitFieldWindow/tessel-window\";\n\nimport { circuitIdsSelector } from \"@/services/circuits/selectors/circuits\";\n\nimport { createUiLayoutReducer, findDefaultActiveWindow } from \"../utils\";\n\nexport default createUiLayoutReducer((state, action, appState) => {\n  if (!isViewCircuitAction(action)) {\n    return state;\n  }\n\n  const {\n    circuitId,\n    circuitNodeIdPath,\n    newWindow,\n    tesselPath,\n  } = action.payload;\n\n  if (circuitIdsSelector(appState).indexOf(circuitId) === -1) {\n    return state;\n  }\n\n  if (!state.layout) {\n    return state;\n  }\n\n  const window = circuitFieldTesselWindow(circuitId, circuitNodeIdPath ?? []);\n\n  let layout: TesselValue | null = state.layout;\n\n  let activeCircuitEditorPath = state.activeCircuitEditorPath;\n  if (!get(layout, activeCircuitEditorPath)) {\n    activeCircuitEditorPath = findDefaultActiveWindow(layout);\n  }\n\n  if (tesselPath) {\n    // We want to open at an explicit path\n    if (!get(layout, tesselPath)) {\n      // Path does not exist, do nothing.\n      return state;\n    }\n    layout = fpSetByArray(normalizeTesselItem(layout), tesselPath, window);\n    activeCircuitEditorPath = tesselPath;\n  } else if (newWindow || activeCircuitEditorPath.length === 0) {\n    // We want to open in a new window, or\n    // we want to open in the existing window but there is none.\n\n    if (activeCircuitEditorPath.length > 0) {\n      // We have an active window, insert to the side of it.\n      layout = fpSetByArray(\n        normalizeTesselItem(layout),\n        activeCircuitEditorPath,\n        (value: TesselValue) => {\n          return {\n            direction: \"row\",\n            division: 50,\n            first: value,\n            second: window,\n          };\n        }\n      );\n    } else {\n      // No active window, create a new one directly\n      layout = {\n        direction: \"row\",\n        division: {\n          firstSize: 200,\n        },\n        first: layout,\n        second: window,\n      };\n      activeCircuitEditorPath = [\"second\"];\n    }\n  } else {\n    // Target the existing window.\n    layout = fpSetByArray(\n      normalizeTesselItem(layout),\n      activeCircuitEditorPath,\n      window\n    );\n  }\n\n  return {\n    ...state,\n    layout,\n    activeCircuitEditorPath,\n  };\n});\n","import { AnyAction } from \"redux\";\n\nexport const VIEW_RESET = \"@view/reset\" as const;\nexport const resetView = () => ({\n  type: VIEW_RESET,\n});\nexport type ResetViewAction = ReturnType<typeof resetView>;\nexport function isResetViewAction(\n  action: AnyAction\n): action is ResetViewAction {\n  return action.type === VIEW_RESET;\n}\n","import { concatReducers } from \"@/store/utils\";\n\nimport circuitDeleteReducer from \"./circuit-delete\";\nimport layoutRearrangeReducer from \"./layout-rearrange\";\nimport viewActivate from \"./view-activate\";\nimport viewCircuitReducer from \"./view-circuit\";\nimport viewResetReducer from \"./view-reset\";\n\nexport default concatReducers(\n  circuitDeleteReducer,\n  layoutRearrangeReducer,\n  viewActivate,\n  viewCircuitReducer,\n  viewResetReducer\n);\n","import { isResetViewAction } from \"@/actions/view-reset\";\nimport { defaultUiLayoutServiceState } from \"../state\";\nimport { createUiLayoutReducer } from \"../utils\";\n\nexport default createUiLayoutReducer((state, action) => {\n  if (!isResetViewAction(action)) {\n    return state;\n  }\n\n  return defaultUiLayoutServiceState;\n});\n","import { AnyAction } from \"redux\";\n\nexport const VIEW_NODE_NAMES = \"@view/node-names\" as const;\nexport const viewNodeNames = (mode: \"all\" | \"named-only\" | \"none\") => ({\n  type: VIEW_NODE_NAMES,\n  payload: { mode },\n});\nexport type ViewNodeNamesAction = ReturnType<typeof viewNodeNames>;\nexport function isViewNodeNamesAction(\n  action: AnyAction\n): action is ViewNodeNamesAction {\n  return action.type === VIEW_NODE_NAMES;\n}\n","import {\n  createServiceReducerCreator,\n  createServiceSelectorCreator,\n} from \"../service-state-utils\";\n\nexport const createUiSettingsReducer = createServiceReducerCreator(\n  \"uiSettings\"\n);\nexport const createUiSettingsSelector = createServiceSelectorCreator(\n  \"uiSettings\"\n);\n","import { concatReducers } from \"@/store/utils\";\n\nimport viewNodeNamesReducer from \"./view-node-names\";\n\nexport default concatReducers(viewNodeNamesReducer);\n","import { isViewNodeNamesAction } from \"@/actions/view-node-names\";\nimport { createUiSettingsReducer } from \"../utils\";\n\nexport default createUiSettingsReducer((state, action) => {\n  if (!isViewNodeNamesAction(action)) {\n    return state;\n  }\n\n  const { mode } = action.payload;\n  return {\n    ...state,\n    nodeNameMode: mode,\n  };\n});\n","import servicesReducer from \"@/services/reducer\";\n\nimport { finalizeReducerList } from \"./utils\";\n\nconst reducer = finalizeReducerList(servicesReducer);\n\nexport default reducer;\n","import { concatReducers } from \"@/store/utils\";\n\nimport circuitEditorUiDragReducer from \"./circuit-editor-ui-drag/reducer\";\nimport circuitsReducer from \"./circuits/reducer\";\nimport clipboardReducer from \"./clipboard/reducer\";\nimport dialogReducer from \"./dialog/reducer\";\nimport nodeGraphReducer from \"./node-graph/reducer\";\nimport nodeLayoutReducer from \"./node-layout/reducer\";\nimport projectReducer from \"./project/reducer\";\nimport selectionReducer from \"./selection/reducer\";\nimport simulatorReducer from \"./simulator/reducer\";\nimport simulatorControlReducer from \"./simulator-control/reducers\";\nimport uiLayoutReducer from \"./ui-layout/reducer\";\nimport uiSettingsReducer from \"./ui-settings/reducer\";\n\nconst reducer = concatReducers(\n  circuitEditorUiDragReducer,\n  circuitsReducer,\n  clipboardReducer,\n  dialogReducer,\n  nodeGraphReducer,\n  nodeLayoutReducer,\n  projectReducer,\n  selectionReducer,\n  simulatorReducer,\n  simulatorControlReducer,\n  uiLayoutReducer,\n  uiSettingsReducer\n);\n\nexport default reducer;\n","import { AnyAction } from \"redux\";\n\nimport { AppState } from \"@/store\";\n\nimport { ACTION_FIELD_DRAG_CONTINUE } from \"@/actions/field-drag-continue\";\nimport { ACTION_FIELD_MOUSE_LEAVE } from \"@/actions/field-mouse-leave\";\nimport { ACTION_SIM_TICK } from \"@/actions/sim-tick\";\nimport { ACTION_WIRE_JOINT_MOVE } from \"@/actions/wire-joint-move\";\n\nexport const actionsBlacklist: string[] = [\n  ACTION_FIELD_DRAG_CONTINUE,\n  ACTION_FIELD_MOUSE_LEAVE,\n  ACTION_WIRE_JOINT_MOVE,\n  ACTION_SIM_TICK,\n];\n\nexport function actionSanitizer(action: AnyAction): AnyAction {\n  return action;\n}\n\nexport function stateSanitizer(state: AppState): any {\n  return state;\n}\n","import { SagaIterator } from \"redux-saga\";\nimport { put, take } from \"redux-saga/effects\";\n\nimport { showDialog } from \"@/actions/dialog-show\";\n\nimport { DialogType } from \"./state\";\nimport {\n  AcceptDialogAction,\n  ACTION_DIALOG_RESPONSE_ACCEPT,\n} from \"@/actions/dialog-response-accept\";\nimport {\n  CancelDialogAction,\n  ACTION_DIALOG_RESPONSE_CANCEL,\n} from \"@/actions/dialog-response-cancel\";\n\nexport function* displayDialogSaga(\n  dialogType: DialogType,\n  data?: any\n): SagaIterator<any> {\n  yield put(showDialog(dialogType, data));\n  const response: AcceptDialogAction | CancelDialogAction = yield take([\n    ACTION_DIALOG_RESPONSE_ACCEPT,\n    ACTION_DIALOG_RESPONSE_CANCEL,\n  ]);\n\n  if (response.type === ACTION_DIALOG_RESPONSE_ACCEPT) {\n    return response.payload.result;\n  }\n\n  return null;\n}\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_PROJECT_EXPORT_LINK = \"@project/export-link\" as const;\nexport const exportProjectLink = () => ({\n  type: ACTION_PROJECT_EXPORT_LINK,\n});\nexport type ExportProjectLinkAction = ReturnType<typeof exportProjectLink>;\nexport function isExportProjectLinkAction(\n  action: AnyAction\n): action is ExportProjectLinkAction {\n  return action.type === ACTION_PROJECT_EXPORT_LINK;\n}\n","import { call, select, takeEvery } from \"redux-saga/effects\";\nimport { Buffer } from \"buffer\";\nimport { deflate } from \"pako\";\n\nimport { rootUrl } from \"@/env\";\nimport history from \"@/history\";\n\nimport { AppState } from \"@/store\";\n\nimport { displayDialogSaga } from \"@/services/dialog/api\";\n\nimport { ACTION_PROJECT_EXPORT_LINK } from \"@/actions/project-export-link\";\n\nimport { createSave } from \"@/services/savedata/api\";\n\nexport default function* projectExportLinkSaga() {\n  yield takeEvery(ACTION_PROJECT_EXPORT_LINK, onExportLink);\n}\n\nfunction* onExportLink() {\n  const state: AppState = yield select();\n\n  try {\n    const save = createSave(state);\n    const saveText = JSON.stringify(save);\n    const encoded = deflate(saveText);\n\n    const encodedText = Buffer.from(encoded).toString(\"base64\");\n\n    const urlData = encodeURIComponent(encodedText);\n\n    const projectLink =\n      rootUrl +\n      history.createHref({\n        pathname: \"/import\",\n        search: `data=${urlData}`,\n      });\n\n    yield call(displayDialogSaga, \"export-project-link\", { projectLink });\n  } catch (e) {\n    // TODO: Warn user of failure\n    console.error(\"Failed to export project as link\", e);\n  }\n}\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_PROJECT_IMPORT_LINK = \"@project/import-link\" as const;\nexport const importProjectLink = (data: string) => ({\n  type: ACTION_PROJECT_IMPORT_LINK,\n  payload: { data },\n});\nexport type ImportProjectLinkAction = ReturnType<typeof importProjectLink>;\nexport function isImportProjectLinkAction(\n  action: AnyAction\n): action is ImportProjectLinkAction {\n  return action.type === ACTION_PROJECT_IMPORT_LINK;\n}\n","import { put, takeEvery } from \"redux-saga/effects\";\nimport { Buffer } from \"buffer\";\n\nimport { inflate } from \"pako\";\n\nimport {\n  ACTION_PROJECT_IMPORT_LINK,\n  ImportProjectLinkAction,\n} from \"@/actions/project-import-link\";\n\nimport { receiveProject } from \"@/actions/project-receive\";\nimport history from \"@/history\";\n\nexport default function* projectImportLinkSaga() {\n  yield takeEvery(ACTION_PROJECT_IMPORT_LINK, onImportLink);\n}\n\nfunction* onImportLink(action: ImportProjectLinkAction) {\n  const { data } = action.payload;\n  try {\n    const dewrapped = decodeURIComponent(data);\n    const deflated = Buffer.from(dewrapped, \"base64\");\n    const saveText = inflate(deflated, { to: \"string\" });\n    const save = JSON.parse(saveText);\n\n    yield put(receiveProject(\"Linked Project\", save));\n\n    history.push(\"/\");\n  } catch (e) {\n    console.error(\"Failed to import save from link\", e);\n  }\n}\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_PROJECT_LOAD = \"@project/load\" as const;\nexport const loadProject = () => ({\n  type: ACTION_PROJECT_LOAD,\n});\nexport type LoadProjectAction = ReturnType<typeof loadProject>;\nexport function isLoadProjectAction(\n  action: AnyAction\n): action is LoadProjectAction {\n  return action.type === ACTION_PROJECT_LOAD;\n}\n","import { SagaIterator } from \"redux-saga\";\nimport { call, put, takeEvery } from \"redux-saga/effects\";\nimport fileDialog from \"file-dialog\";\n\nimport { ACTION_PROJECT_LOAD } from \"@/actions/project-load\";\nimport { receiveProject } from \"@/actions/project-receive\";\n\nimport { SaveData } from \"@/services/savedata/types\";\n\nexport default function* projectLoadSaga() {\n  yield takeEvery(ACTION_PROJECT_LOAD, loadProject);\n}\n\nfunction* loadProject(): SagaIterator {\n  try {\n    const [file]: File[] = yield call(fileDialog, {\n      accept: \"application/json\",\n    });\n    const contents = yield call(file.text.bind(file));\n    const saveData: SaveData = JSON.parse(contents);\n    let fileName = file.name;\n    if (fileName) {\n      fileName = fileName.substr(0, fileName.lastIndexOf(\".json\"));\n    } else {\n      fileName = \"Unnamed Project\";\n    }\n    yield put(receiveProject(fileName, saveData));\n  } catch (e) {\n    // TODO: Handle error\n    console.warn(\"Failed to load project:\", e);\n  }\n}\n","import { createProjectSelector } from \"../utils\";\n\nexport const projectNameSelector = createProjectSelector(\n  (state) => state.projectName\n);\n\nexport const projectModifiedSelector = createProjectSelector(\n  (state) => state.projectModified\n);\n","import { SagaIterator } from \"redux-saga\";\nimport { call, put, select, takeEvery } from \"redux-saga/effects\";\nimport { saveAs } from \"file-saver\";\n\nimport { AppState } from \"@/store\";\n\nimport {\n  ACTION_PROJECT_SAVE,\n  saveProjectSuccess,\n} from \"@/actions/project-save\";\nimport { renameProject } from \"@/actions/project-rename\";\n\nimport { createSave } from \"@/services/savedata/api\";\n\nimport { projectNameSelector } from \"../selectors/project\";\n\nexport default function* projectSaveSaga() {\n  yield takeEvery(ACTION_PROJECT_SAVE, saveProject);\n}\n\nfunction* saveProject() {\n  const state: AppState = yield select();\n\n  try {\n    if (window.showSaveFilePicker) {\n      yield call(saveNativeFileApi, state);\n    } else {\n      yield call(saveLegacy, state);\n    }\n    yield put(saveProjectSuccess());\n  } catch (e) {\n    // TODO: Report error\n    console.warn(\"Failed to save project\", e);\n  }\n}\n\nfunction* saveNativeFileApi(state: AppState): SagaIterator {\n  const projectName = yield select(projectNameSelector);\n\n  const fileHandle: FileHandle | null = yield call(window.showSaveFilePicker!, {\n    // This isn't official yet, even with the not-official showSaveFilePicker\n    // https://github.com/WICG/file-system-access/blob/main/SuggestedNameAndDir.md#specifying-suggested-file-name-to-save-as\n    // It's so new, chrome does not yet support it, but it will:\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=1145102\n    suggestedName: projectName,\n    types: [\n      {\n        description: \"Discrelog Project Files\",\n        accept: {\n          \"application/json\": [\".json\"],\n        },\n      },\n    ],\n  });\n\n  if (!fileHandle) {\n    return;\n  }\n\n  // Some confusion over how to get the name of the file...\n  // fileHandle.name appears in the debugger for chrome, but does not\n  // seem to be documented.\n  // getFile().name is documented by mozilla, but gives me undefined.\n  let name = fileHandle.name;\n  if (!name) {\n    name = fileHandle.getFile().name;\n  }\n  if (name) {\n    name = name.substr(0, name.lastIndexOf(\".json\"));\n    yield put(renameProject(name));\n  }\n\n  const save = createSave(state);\n\n  const writable: FileSystemWritableStream = yield call(\n    fileHandle.createWritable.bind(fileHandle)\n  );\n  yield call(writable.write.bind(writable), JSON.stringify(save, null, 2));\n  yield call(writable.close.bind(writable));\n}\n\nfunction* saveLegacy(state: AppState): SagaIterator {\n  const projectName = yield select(projectNameSelector);\n\n  const save = createSave(state);\n  const blob = new Blob([JSON.stringify(save, null, 2)], {\n    type: \"application/json;charset=utf-8\",\n  });\n\n  saveAs(blob, `${projectName}.json`);\n}\n","import { fork } from \"redux-saga/effects\";\n\nimport projectExportLink from \"./project-export-link\";\nimport projectImportLink from \"./project-import-link\";\nimport projectLoadSaga from \"./project-load\";\nimport projectSaveSaga from \"./project-save\";\n\nexport default function* saveDataSaga() {\n  yield fork(projectExportLink);\n  yield fork(projectImportLink);\n  yield fork(projectLoadSaga);\n  yield fork(projectSaveSaga);\n}\n","import { SagaIterator } from \"redux-saga\";\nimport { takeLeading, select, put, delay } from \"redux-saga/effects\";\n\nimport { ACTION_SIM_START } from \"@/actions/sim-start\";\nimport { ACTION_SIM_PAUSE, pauseSim } from \"@/actions/sim-pause\";\nimport { ACTION_SIM_STEP } from \"@/actions/sim-step\";\n\nimport { tickSim } from \"@/actions/sim-tick\";\n\nimport { isSimRunningSelector, ticksPerSecondSelector } from \"../selectors/run\";\n\nexport default function* runModeSaga() {\n  yield takeLeading(\n    [ACTION_SIM_START, ACTION_SIM_PAUSE, ACTION_SIM_STEP],\n    handleRunSim\n  );\n}\n\nfunction* handleRunSim(): SagaIterator {\n  while (true) {\n    const isRunning = yield select(isSimRunningSelector);\n    if (!isRunning) {\n      break;\n    }\n\n    try {\n      yield put(tickSim(1));\n    } catch (e) {\n      console.error(e);\n      yield put(pauseSim(true));\n      return;\n    }\n\n    const tps = yield select(ticksPerSecondSelector);\n    const timeToWait = Math.max(Math.ceil(1000 / tps), 1);\n    yield delay(timeToWait);\n  }\n}\n","import { fork } from \"redux-saga/effects\";\n\nimport runModeSaga from \"./mode-run\";\n\nexport default function* simulatorSaga() {\n  yield fork(runModeSaga);\n}\n","import servicesSaga from \"@/services/saga\";\n\nexport default servicesSaga;\n","import {\n  createStore,\n  compose,\n  applyMiddleware,\n  AnyAction,\n  Middleware,\n} from \"redux\";\nimport freeze from \"redux-freeze\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport { isTruthy } from \"@/utils\";\nimport { isProd } from \"@/env\";\n\nimport { doInit } from \"@/actions/init\";\n\nimport undoReducer from \"@/undo/reducer\";\n\nimport {\n  actionSanitizer,\n  stateSanitizer,\n  actionsBlacklist,\n} from \"./devtool-sanitizer\";\n\nimport { AppState, defaultAppState } from \"./state\";\nimport saga from \"./saga\";\nimport rootReducer from \"./reducer\";\n\nfunction finalReducer(\n  state: AppState = defaultAppState,\n  action: AnyAction\n): AppState {\n  state = undoReducer(state, action);\n  state = rootReducer(state, action);\n  return state;\n}\n\nconst composeEnhancers =\n  (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n      actionSanitizer,\n      stateSanitizer,\n      actionsBlacklist,\n    })) ||\n  compose;\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst middleware: Middleware<any, any, any>[] = [\n  !isProd && freeze,\n  sagaMiddleware,\n].filter(isTruthy);\n\nexport const store = createStore(\n  finalReducer,\n  composeEnhancers(applyMiddleware(...middleware))\n);\n\nsagaMiddleware.run(saga);\nstore.dispatch(doInit());\n","import { AnyAction } from \"redux\";\n\nimport { AppState, defaultAppState } from \"@/store\";\n\nimport captureUndoStateReducer from \"./capture-undo-state\";\nimport redoReducer from \"./redo\";\nimport undoReducer from \"./undo\";\n\n// The undo reducer is special and returns a single reducer that is always ran outside of the primary reducer stack.\n// This is less for reducer priority and more to capture the effects of reentrant reducers like clipboard-paste.\n// FIXME: Moving this outside the services system means autosave cannot save undo/redo.  Either move autosave out\n//  as well or move undo into services.\nexport default function undoServiceReducer(\n  state: AppState = defaultAppState,\n  action: AnyAction\n): AppState {\n  state = captureUndoStateReducer(state, action);\n  state = redoReducer(state, action);\n  state = undoReducer(state, action);\n  return state;\n}\n","import { AnyAction } from \"redux\";\nimport last from \"lodash/last\";\n\nimport { AppState, defaultAppState } from \"@/store\";\nimport rootReducer from \"@/store/reducer\";\n\nimport { isUndoAction } from \"@/actions/undo\";\nimport { viewCircuit } from \"@/actions/view-circuit\";\n\nimport { captureUndoState } from \"../utils\";\n\nexport default function undoReducer(\n  state: AppState = defaultAppState,\n  action: AnyAction\n): AppState {\n  if (!isUndoAction(action)) {\n    return state;\n  }\n\n  const { undoStack, redoStack } = state.undo;\n\n  const stackItem = last(undoStack);\n  if (!stackItem) {\n    return state;\n  }\n\n  const { serviceStates, viewCircuitId } = stackItem;\n\n  state = {\n    ...state,\n    services: {\n      ...state.services,\n      ...serviceStates,\n    },\n    undo: {\n      ...state.undo,\n      undoStack: undoStack.slice(0, undoStack.length - 1),\n      redoStack: [...redoStack, captureUndoState(state)],\n    },\n  };\n\n  if (viewCircuitId) {\n    state = rootReducer(state, viewCircuit(viewCircuitId));\n  }\n\n  return state;\n}\n","import { AnyAction } from \"redux\";\nimport last from \"lodash/last\";\n\nimport { AppState, defaultAppState } from \"@/store\";\nimport rootReducer from \"@/store/reducer\";\n\nimport { isRedoAction } from \"@/actions/redo\";\nimport { viewCircuit } from \"@/actions/view-circuit\";\n\nimport { captureUndoState } from \"../utils\";\n\nexport default function redoReducer(\n  state: AppState = defaultAppState,\n  action: AnyAction\n): AppState {\n  if (!isRedoAction(action)) {\n    return state;\n  }\n\n  const { undoStack, redoStack } = state.undo;\n\n  const stackItem = last(redoStack);\n  if (!stackItem) {\n    return state;\n  }\n\n  const { serviceStates, viewCircuitId } = stackItem;\n\n  state = {\n    ...state,\n    services: {\n      ...state.services,\n      ...serviceStates,\n    },\n    undo: {\n      ...state.undo,\n      undoStack: [...undoStack, captureUndoState(state)],\n      redoStack: redoStack.slice(0, redoStack.length - 1),\n    },\n  };\n\n  if (viewCircuitId) {\n    state = rootReducer(state, viewCircuit(viewCircuitId));\n  }\n\n  return state;\n}\n","import { AnyAction } from \"redux\";\n\nimport { isProjectMutationAction } from \"@/project-mutation-actions\";\nimport { AppState, defaultAppState } from \"@/store\";\nimport { fpSet } from \"@/utils\";\n\nimport { isUndoAction } from \"@/actions/undo\";\nimport { isRedoAction } from \"@/actions/redo\";\n\nimport { captureUndoState } from \"../utils\";\n\n// If this was part of the normal reducer stack, we would want to give it a very low priority\n// so it occurs after all other reducers.\n// However, in order to capture reentrant reducers, our master undo reducer wraps\n// the root reducer especially and always occurs last.\nexport default function captureUndoStateReducer(\n  state: AppState = defaultAppState,\n  action: AnyAction\n): AppState {\n  if (\n    !isProjectMutationAction(action) ||\n    isUndoAction(action) ||\n    isRedoAction(action)\n  ) {\n    return state;\n  }\n\n  return fpSet(state, \"undo\", (undoState) => ({\n    ...undoState,\n    // Limiting undo to 25 entries, since we store the entire project every slice.\n    // TODO: Consider using a difference engine to store the minimal difference between the states.\n    //  This should let us store far more undo operations as the project gets larger.\n    // Could use https://www.npmjs.com/package/deep-diff\n    // Problem with this is it takes up time capturing the undo, which slows down all operations.\n    undoStack: [...undoState.undoStack.slice(0, 25), captureUndoState(state)],\n    redoStack: [],\n  }));\n}\n","import { useSelector as useSelectorRedux } from \"react-redux\";\n\nimport { AppState } from \"@/store\";\n\nexport default function useSelector<T>(selector: (s: AppState) => T) {\n  return useSelectorRedux<AppState, T>(selector);\n}\n","import { fork } from \"redux-saga/effects\";\n\nimport projectSaga from \"./project/saga\";\nimport simulatorControlSaga from \"./simulator-control/saga\";\n\nexport default function* appSaga() {\n  yield fork(projectSaga);\n  yield fork(simulatorControlSaga);\n}\n","import get from \"lodash/get\";\n\nimport { isCircuitFieldTesselWindow } from \"@/pages/CircuitEditorPage/windows/CircuitFieldWindow/tessel-window\";\n\nimport { UiLayoutServiceState } from \"../state\";\nimport { createUiLayoutSelector } from \"../utils\";\n\nexport const layoutSelector = createUiLayoutSelector((s) => s.layout);\n\nexport const circuitIdForTesselPathSelector = createUiLayoutSelector(\n  (s: UiLayoutServiceState, tesselPath: string[]) => {\n    const item = get(s.layout, tesselPath);\n    if (!isCircuitFieldTesselWindow(item)) {\n      return null;\n    }\n\n    return item.windowProps.circuitId;\n  }\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"button--Ui3Hp\"};","import Button from \"./Button\";\nexport default Button;\n","import * as React from \"react\";\n\nexport type ButtonProps = React.HTMLAttributes<HTMLButtonElement>;\n\nimport styles from \"./Button.module.css\";\n\nconst Button: React.FC<ButtonProps> = (props) => {\n  return (\n    <button className={styles[\"button\"]} type=\"button\" {...props}>\n      {props.children}\n    </button>\n  );\n};\n\nexport default Button;\n","import * as React from \"react\";\nimport last from \"lodash/last\";\nimport { useDispatch } from \"react-redux\";\n\nimport { cls } from \"@/utils\";\nimport useSelector from \"@/hooks/useSelector\";\n\nimport { viewCircuit } from \"@/actions/view-circuit\";\n\nimport {\n  nodeNameOrDefaultFromNodeIdSelector,\n  nodeTypeFromNodeIdSelector,\n} from \"@/services/node-graph/selectors/nodes\";\nimport { nodeTypeToCircuitId } from \"@/nodes/definitions/integrated-circuits/utils\";\nimport { circuitNameFromIdSelector } from \"@/services/circuits/selectors/circuits\";\nimport { ROOT_CIRCUIT_ID } from \"@/services/circuits/constants\";\n\nimport Button from \"../Button\";\n\nimport styles from \"./CircuitNodeBreadcrumb.module.css\";\nimport { useTesselPath } from \"../Tessel/TesselContext\";\n\nexport interface CircuitNodeBreadcrumbProps {\n  circuitId: string;\n  circuitNodeIdPath: string[];\n}\nconst CircuitNodeBreadcrumb: React.FC<CircuitNodeBreadcrumbProps> = ({\n  circuitId,\n  circuitNodeIdPath,\n}) => {\n  const elements: JSX.Element[] = circuitNodeIdPath.map(\n    (circuitNodeId, index) => {\n      const elementPath = circuitNodeIdPath.slice(0, index + 1);\n      return (\n        <React.Fragment key={circuitNodeId}>\n          <span>&gt;</span>\n          <CircuitNodeBreadcrumbItem circuitNodeIdPath={elementPath} />\n        </React.Fragment>\n      );\n    }\n  );\n\n  return (\n    <div\n      className={cls(\n        \"circuit-node-breadcrumb\",\n        styles[\"circuit-node-breadcrumb\"]\n      )}\n    >\n      <CircuitNodeBreadcrumbRootItem\n        circuitId={circuitId}\n        circuitNodeIdPath={circuitNodeIdPath}\n      />\n      {elements}\n    </div>\n  );\n};\n\nexport default CircuitNodeBreadcrumb;\n\ninterface CircuitNodeBreadcrumbRootItemProps {\n  circuitId: string;\n  circuitNodeIdPath: string[];\n}\nconst CircuitNodeBreadcrumbRootItem: React.FC<CircuitNodeBreadcrumbRootItemProps> = ({\n  circuitId,\n  circuitNodeIdPath,\n}) => {\n  const dispatch = useDispatch();\n  const tesselPath = useTesselPath();\n  const rootCircuitName = useSelector((state) =>\n    circuitNameFromIdSelector(state, ROOT_CIRCUIT_ID)\n  );\n  const circuitName = useSelector((state) =>\n    circuitNameFromIdSelector(state, circuitId)\n  );\n\n  const onClick = React.useCallback(\n    (e: React.MouseEvent) => {\n      e.preventDefault();\n      dispatch(viewCircuit(ROOT_CIRCUIT_ID, [], { tesselPath }));\n    },\n    [dispatch, tesselPath]\n  );\n\n  return (\n    <Button onClick={onClick}>\n      {circuitNodeIdPath.length === 0 ? circuitName : rootCircuitName}\n    </Button>\n  );\n};\n\ninterface CircuitNodeBreadcrumbItemProps {\n  circuitNodeIdPath: string[];\n}\n\nconst CircuitNodeBreadcrumbItem: React.FC<CircuitNodeBreadcrumbItemProps> = ({\n  circuitNodeIdPath,\n}) => {\n  const dispatch = useDispatch();\n  const tesselPath = useTesselPath();\n  const circuitNodeId = last(circuitNodeIdPath)!;\n\n  const nodeType = useSelector((state) =>\n    nodeTypeFromNodeIdSelector(state, circuitNodeId)\n  );\n  const nodeName = useSelector((state) =>\n    nodeNameOrDefaultFromNodeIdSelector(state, circuitNodeId)\n  );\n\n  const circuitId = nodeType ? nodeTypeToCircuitId(nodeType) : null;\n  const circuitName = useSelector((state) =>\n    circuitId ? circuitNameFromIdSelector(state, circuitId) : null\n  );\n\n  const onClick = React.useCallback(\n    (e: React.MouseEvent) => {\n      e.preventDefault();\n      if (!circuitId) {\n        return;\n      }\n      dispatch(viewCircuit(circuitId, circuitNodeIdPath, { tesselPath }));\n    },\n    [circuitId, circuitNodeIdPath, dispatch, tesselPath]\n  );\n\n  return (\n    <Button onClick={onClick}>\n      {nodeName} [{circuitName}]\n    </Button>\n  );\n};\n","import CircuitNodeBreadcrumb from \"./CircuitNodeBreadcrumb\";\nexport default CircuitNodeBreadcrumb;\n","// extracted by mini-css-extract-plugin\nexport default {\"circuit-node-breadcrumb\":\"circuit-node-breadcrumb--3Rx3N\"};","import { createSelector } from \"reselect\";\nimport values from \"lodash/values\";\n\nimport { Rectangle, union } from \"@/geometry\";\n\nimport { nodeRectsByIdSelector } from \"./node-bounds\";\nimport { wireJointPositionsByJointIdSelector } from \"./wires\";\n\nconst MinFieldRect: Readonly<Rectangle> = Object.freeze({\n  p1: {\n    x: -100,\n    y: -100,\n  },\n  p2: {\n    x: 100,\n    y: 100,\n  },\n});\n\nexport const fieldRectSelector = createSelector(\n  nodeRectsByIdSelector,\n  wireJointPositionsByJointIdSelector,\n  (nodeRectsById, wireJointsById) => {\n    const nodeRects = values(nodeRectsById);\n    const jointRects = values(wireJointsById).map((p) => ({ p1: p, p2: p }));\n\n    return [...nodeRects, ...jointRects].reduce(union, MinFieldRect);\n  }\n);\n","import * as React from \"react\";\n\nfunction noop() {\n  /* Do nothing */\n}\n\nconst MenuCloseContext = React.createContext<() => void>(noop);\n\nexport function useMenuCloseContext() {\n  return React.useContext(MenuCloseContext);\n}\n\nexport const MenuCloseContextProvider = MenuCloseContext.Provider;\n","import * as React from \"react\";\n\nexport interface PopoverChildContext {\n  registerPopoverChild(element: HTMLElement): void;\n  unregisterPopoverChild(element: HTMLElement): void;\n}\n\nfunction noop() {\n  // no op.\n}\nconst noopPopoverChildContext: PopoverChildContext = {\n  registerPopoverChild: noop,\n  unregisterPopoverChild: noop,\n};\n\nexport const PopoverChildContext = React.createContext<PopoverChildContext | null>(\n  null\n);\n\nexport const usePopoverChildContext = () =>\n  React.useContext(PopoverChildContext);\n\nexport const PopoverChildContextProvider: React.FC<PopoverChildContext> = ({\n  registerPopoverChild: contextRegister,\n  unregisterPopoverChild: contextUnregister,\n  children,\n}) => {\n  const parent = usePopoverChildContext();\n  const parentRegister = parent?.registerPopoverChild;\n  const parentUnregister = parent?.unregisterPopoverChild;\n\n  const registerPopoverChild = React.useCallback(\n    (element: HTMLElement) => {\n      if (parentRegister) {\n        parentRegister(element);\n      }\n      contextRegister(element);\n    },\n    [contextRegister, parentRegister]\n  );\n\n  const unregisterPopoverChild = React.useCallback(\n    (element: HTMLElement) => {\n      contextUnregister(element);\n      if (parentUnregister) {\n        parentUnregister;\n      }\n    },\n    [contextUnregister, parentUnregister]\n  );\n\n  const providedContext = React.useMemo(\n    () => ({\n      registerPopoverChild,\n      unregisterPopoverChild,\n    }),\n    [registerPopoverChild, unregisterPopoverChild]\n  );\n\n  return (\n    <PopoverChildContext.Provider value={providedContext}>\n      {children}\n    </PopoverChildContext.Provider>\n  );\n};\n\nexport function usePopoverChild(element: HTMLElement | null) {\n  const popoverContext =\n    React.useContext(PopoverChildContext) ?? noopPopoverChildContext;\n\n  // We do not want to trigger the effect when\n  //  the context changes, as the context will change\n  //  as a result of calling register and unregister.\n  // As a result, we will not function right if somehow our\n  //  element transfers to a different popup chain without re-rendering.\n  const ctxRef = React.useRef(popoverContext);\n  React.useEffect(() => {\n    ctxRef.current = popoverContext;\n  });\n\n  React.useEffect(() => {\n    if (element) {\n      ctxRef.current.registerPopoverChild(element);\n      return () => ctxRef.current.unregisterPopoverChild(element);\n    }\n  }, [element]);\n}\n","export * from \"./Popover\";\nimport Popover from \"./Popover\";\nexport default Popover;\n","import * as React from \"react\";\nimport { createPortal } from \"react-dom\";\n\nimport { Options, VirtualElement } from \"@popperjs/core\";\nimport { usePopper } from \"react-popper\";\n\nimport { useOutsideMouseEvent } from \"@/hooks/useOutsideMouseEvent\";\nimport { useArrayState } from \"@/hooks/useArrayState\";\n\nimport {\n  PopoverChildContextProvider,\n  usePopoverChild,\n} from \"./PopoverChildContext\";\n\nexport interface PopoverProps {\n  anchorEl: Element | VirtualElement | null;\n  placement?: Options[\"placement\"];\n  isOpen: boolean;\n  onRequestClose(): void;\n}\n\nconst Popover: React.FC<PopoverProps> = ({\n  isOpen,\n  anchorEl,\n  placement = \"auto\",\n  onRequestClose,\n  children,\n}) => {\n  const [popoverRef, setPopoverRef] = React.useState<HTMLDivElement | null>(\n    null\n  );\n  const { attributes, styles } = usePopper(\n    isOpen ? anchorEl : null,\n    popoverRef,\n    {\n      placement,\n    }\n  );\n\n  // Register us as a child of a parent popover, if any is present.\n  usePopoverChild(popoverRef);\n\n  const [\n    popoverChildren,\n    registerPopoverChild,\n    unregisterPopoverChild,\n  ] = useArrayState<HTMLElement>();\n\n  // Close when a click happens on the outside.\n  // We still want to handle this even if we are a child, as the user\n  // may have clicked on a parent popover which should close us.\n  const insideRefs = React.useMemo(() => [popoverRef, ...popoverChildren], [\n    popoverChildren,\n    popoverRef,\n  ]);\n  useOutsideMouseEvent(insideRefs, onRequestClose);\n\n  if (!isOpen) {\n    return null;\n  }\n\n  return createPortal(\n    <PopoverChildContextProvider\n      registerPopoverChild={registerPopoverChild}\n      unregisterPopoverChild={unregisterPopoverChild}\n    >\n      <div ref={setPopoverRef} style={styles.popper} {...attributes.popper}>\n        {children}\n      </div>\n    </PopoverChildContextProvider>,\n    document.body\n  );\n};\n\nexport default Popover;\n","import * as React from \"react\";\nimport difference from \"lodash/difference\";\n\nexport type UseArrayState<T> = [\n  items: T[],\n  addItem: (value: T) => void,\n  removeItem: (value: T) => void,\n  setItems: (items: T[]) => void\n];\n\nexport function useArrayState<T>(defaultValue: T[] = []): UseArrayState<T> {\n  const [items, setItems] = React.useState(defaultValue);\n  const addItem = React.useCallback(\n    (item: T) => {\n      setItems([...items, item]);\n    },\n    [items]\n  );\n  const removeItem = React.useCallback(\n    (item: T) => {\n      setItems(difference(items, [item]));\n    },\n    [items]\n  );\n\n  return [items, addItem, removeItem, setItems];\n}\n","import * as React from \"react\";\n\nimport { asArray, MaybeArray } from \"@/arrays\";\nimport { isTruthy } from \"@/utils\";\n\nexport function useOutsideMouseEvent(\n  element: MaybeArray<HTMLElement | null>,\n  onOutsideEvent: () => void,\n  when = true\n) {\n  const onEvent = React.useCallback(\n    (e: MouseEvent | TouchEvent) => {\n      const elements = asArray(element).filter(isTruthy);\n      if (!elements.length) {\n        return;\n      }\n\n      if (elements.every((element) => !element.contains(e.target as any))) {\n        onOutsideEvent();\n      }\n    },\n    [element, onOutsideEvent]\n  );\n\n  React.useEffect(() => {\n    if (!when) {\n      return;\n    }\n\n    document.addEventListener(\"mousedown\", onEvent);\n    document.addEventListener(\"touchstart\", onEvent);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", onEvent);\n      document.removeEventListener(\"touchstart\", onEvent);\n    };\n  }, [onEvent, when]);\n}\n","import * as React from \"react\";\nimport { VirtualElement } from \"@popperjs/core\";\n\nimport { Point } from \"@/geometry\";\n\nimport { MenuCloseContextProvider } from \"./Menus/MenuCloseContext\";\n\nimport Popover from \"./Popover\";\n\nexport interface ContextMenuProps {\n  x: number;\n  y: number;\n  open: boolean;\n  onRequestClose(): void;\n}\n\nconst ContextMenu: React.FC<ContextMenuProps> = ({\n  x,\n  y,\n  open,\n  onRequestClose,\n  children,\n}) => {\n  const anchorEl = React.useMemo<VirtualElement>(\n    () => ({\n      getBoundingClientRect: () => ({\n        left: x,\n        top: y,\n        right: x,\n        bottom: y,\n        width: 0,\n        height: 0,\n        x,\n        y,\n      }),\n    }),\n    [x, y]\n  );\n\n  return (\n    <MenuCloseContextProvider value={onRequestClose}>\n      <Popover\n        isOpen={open}\n        onRequestClose={onRequestClose}\n        anchorEl={anchorEl}\n        placement=\"bottom-start\"\n      >\n        {children}\n      </Popover>\n    </MenuCloseContextProvider>\n  );\n};\n\nexport default ContextMenu;\n\nexport interface UseContextMenu {\n  renderContextMenu(content: React.ReactNode): React.ReactNode;\n  openContextMenu(e: React.MouseEvent): void;\n}\nexport function useContextMenu(): UseContextMenu {\n  const [ctxPos, setCtxPos] = React.useState<Point | null>(null);\n\n  const openContextMenu = React.useCallback((e: React.MouseEvent) => {\n    setCtxPos({ x: e.pageX, y: e.pageY });\n  }, []);\n\n  const onCloseContextMenu = React.useCallback(() => {\n    setCtxPos(null);\n  }, []);\n\n  const renderContextMenu = React.useCallback(\n    (content: JSX.Element) => {\n      if (!ctxPos) {\n        return null;\n      }\n\n      return (\n        <ContextMenu\n          open\n          onRequestClose={onCloseContextMenu}\n          x={ctxPos.x}\n          y={ctxPos.y}\n        >\n          {content}\n        </ContextMenu>\n      );\n    },\n    [ctxPos, onCloseContextMenu]\n  );\n\n  return {\n    openContextMenu,\n    renderContextMenu,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"menu\":\"menu--3E86w\",\"menu-item\":\"menu-item--2dcyN\",\"menu-item--disabled\":\"menu-item--disabled--RJJTK\",\"menu-item-content\":\"menu-item-content--3s1DG\",\"menu-item-text\":\"menu-item-text--1F41V\",\"menu-item-secondary\":\"menu-item-secondary--2PJLF\",\"menu-item-icon\":\"menu-item-icon--JTlha\",\"menu-divider\":\"menu-divider--1QPGp\"};","import * as React from \"react\";\n\nimport styles from \"./Menus.module.css\";\n\nconst Menu: React.FC = ({ children }) => {\n  return <ul className={styles[\"menu\"]}>{children}</ul>;\n};\n\nexport default Menu;\n","import * as React from \"react\";\n\nimport { cls } from \"@/utils\";\n\nimport styles from \"./Menus.module.css\";\nimport { useMenuCloseContext } from \"./MenuCloseContext\";\n\nexport interface MenuItemProps {\n  disabled?: boolean;\n  secondary?: string;\n  onClick?(e: React.MouseEvent<HTMLElement>): void;\n}\nconst MenuItem: React.FC<MenuItemProps> = ({\n  disabled,\n  onClick,\n  secondary,\n  children,\n}) => {\n  const requestMenuClose = useMenuCloseContext();\n  const onItemClick = React.useCallback(\n    (e: React.MouseEvent<HTMLAnchorElement>) => {\n      if (onClick) {\n        onClick(e);\n      }\n      requestMenuClose();\n    },\n    [requestMenuClose, onClick]\n  );\n  return (\n    <li\n      className={cls(\n        styles[\"menu-item\"],\n        disabled && styles[\"menu-item--disabled\"]\n      )}\n    >\n      <a className={styles[\"menu-item-content\"]} onClick={onItemClick}>\n        <span className={styles[\"menu-item-text\"]}>{children}</span>\n        {secondary && (\n          <span className={styles[\"menu-item-secondary\"]}>{secondary}</span>\n        )}\n      </a>\n    </li>\n  );\n};\n\nexport default MenuItem;\n","import * as React from \"react\";\n\nimport styles from \"./Menus.module.css\";\n\nconst DividerMenuItem: React.FC = () => {\n  return <div className={styles[\"menu-divider\"]} />;\n};\n\nexport default DividerMenuItem;\n","import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport MenuItem from \"@/components/Menus/MenuItem\";\nimport DividerMenuItem from \"@/components/Menus/DividerMenuItem\";\n\nimport { selectionAlignToGrid } from \"@/actions/selection-align-to-grid\";\nimport { deleteSelection } from \"@/actions/selection-delete\";\n\nconst ContextMenuItems: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const onAlignToGrid = React.useCallback(() => {\n    dispatch(selectionAlignToGrid());\n  }, [dispatch]);\n  const onDelete = React.useCallback(() => {\n    dispatch(deleteSelection());\n  }, [dispatch]);\n  return (\n    <>\n      <MenuItem onClick={onAlignToGrid}>Align Selection To Grid</MenuItem>\n      <DividerMenuItem />\n      <MenuItem onClick={onDelete}>Delete Selected</MenuItem>\n    </>\n  );\n};\n\nexport default ContextMenuItems;\n","import * as React from \"react\";\n\nimport Menu from \"@/components/Menus/Menu\";\n\nimport ContextMenuItems from \"./ContextMenuItems\";\n\nconst FieldContextMenu: React.FC = () => {\n  return (\n    <Menu>\n      <ContextMenuItems />\n    </Menu>\n  );\n};\n\nexport default FieldContextMenu;\n","import { DragObjectWithType } from \"react-dnd\";\n\nexport const NEW_NODE_DRAG_OBJECT = \"@node/new\" as const;\nexport const newNodeDragObject = (nodeType: string) => ({\n  type: NEW_NODE_DRAG_OBJECT,\n  payload: { nodeType },\n});\nexport type NewNodeDragObject = ReturnType<typeof newNodeDragObject>;\nexport function isNewNodeDragObject(\n  item: DragObjectWithType\n): item is NewNodeDragObject {\n  return item.type === NEW_NODE_DRAG_OBJECT;\n}\n","import * as React from \"react\";\n\nexport interface FieldSvgElementContext {\n  svgRef: React.RefObject<SVGSVGElement | null>;\n  scalerRef: React.RefObject<SVGGraphicsElement | null>;\n}\nconst nullRef = { current: null };\nexport const fieldSvgElementContext = React.createContext<\n  FieldSvgElementContext\n>({ svgRef: nullRef, scalerRef: nullRef });\n\nconst ContextProvider = fieldSvgElementContext.Provider;\n\nexport const FieldSvgElementProvider: React.FC<{\n  svgRef: React.RefObject<SVGSVGElement | null>;\n  scalerRef: React.RefObject<SVGGraphicsElement | null>;\n}> = ({ svgRef, scalerRef, children }) => {\n  const context = React.useMemo(\n    () => ({\n      svgRef,\n      scalerRef,\n    }),\n    [svgRef, scalerRef]\n  );\n  return <ContextProvider value={context}>{children}</ContextProvider>;\n};\n","import { ROOT_CIRCUIT_ID } from \"@/services/circuits/constants\";\nimport * as React from \"react\";\n\nexport interface CircuitFieldContext {\n  circuitId: string;\n  circuitNodePath: string[];\n}\n\nconst circuitFieldContext = React.createContext<CircuitFieldContext>({\n  circuitId: ROOT_CIRCUIT_ID,\n  circuitNodePath: [],\n});\n\nexport function useCircuitField(): CircuitFieldContext {\n  return React.useContext(circuitFieldContext);\n}\n\ntype CircuitFieldProviderProps = CircuitFieldContext;\nexport const CircuitFieldProvider: React.FC<CircuitFieldProviderProps> = ({\n  circuitId,\n  circuitNodePath,\n  children,\n}) => {\n  const context = React.useMemo<CircuitFieldContext>(\n    () => ({\n      circuitId,\n      circuitNodePath,\n    }),\n    [circuitId, circuitNodePath]\n  );\n  return (\n    <circuitFieldContext.Provider value={context}>\n      {children}\n    </circuitFieldContext.Provider>\n  );\n};\n","import { Point } from \"@/geometry\";\n\nexport function getFieldCoord(\n  field: SVGSVGElement,\n  scaler: SVGGraphicsElement,\n  p: Point\n) {\n  const ctm = scaler.getScreenCTM();\n  if (!ctm) {\n    return p;\n  }\n\n  const pt = field.createSVGPoint();\n  pt.x = p.x;\n  pt.y = p.y;\n  const translated = pt.matrixTransform(ctm.inverse());\n  return { x: translated.x, y: translated.y };\n}\n","import * as React from \"react\";\n\nimport { Point, ZeroPoint } from \"@/geometry\";\n\nimport { fieldSvgElementContext } from \"../contexts/fieldSvgElement\";\nimport { getFieldCoord } from \"../../../utils\";\n\nexport function useMouseCoords(): (p: Point) => Point {\n  const { svgRef, scalerRef } = React.useContext(fieldSvgElementContext);\n  return React.useCallback(\n    (p: Point) => {\n      if (!svgRef.current || !scalerRef.current) {\n        return p;\n      }\n      return getFieldCoord(svgRef.current, scalerRef.current, p);\n    },\n    [svgRef, scalerRef]\n  );\n}\n\nexport function useEventMouseCoords(): (\n  e: MouseEvent | React.MouseEvent\n) => Point {\n  const { svgRef, scalerRef } = React.useContext(fieldSvgElementContext);\n  return React.useCallback(\n    (e: MouseEvent | React.MouseEvent) => {\n      if (!svgRef.current || !scalerRef.current) {\n        return ZeroPoint;\n      }\n      const p: Point = {\n        x: e.pageX,\n        y: e.pageY,\n      };\n      return getFieldCoord(svgRef.current, scalerRef.current, p);\n    },\n    [svgRef, scalerRef]\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"text-unselectable\":\"text-unselectable--2tvXe\"};","import { AppState } from \"@/store\";\n\nimport { getSimulatorNodeIdFromCircuitNodeIdPath } from \"@/services/simulator-graph/utils\";\nimport { rootNodeGraphSelector } from \"@/services/simulator-graph/selectors/graph\";\n\nexport const nodeStateFromCircuitNodeIdSelector = (\n  state: AppState,\n  circuitNodeIdPath: string[]\n) => {\n  const { simulatorNodeIdsByCircuitNodeId } = rootNodeGraphSelector(state);\n  const nodeStatesBySimulatorNodeId =\n    state.services.simulator.nodeStatesByNodeId;\n\n  const simulatorNodeId = getSimulatorNodeIdFromCircuitNodeIdPath(\n    simulatorNodeIdsByCircuitNodeId,\n    circuitNodeIdPath\n  );\n  if (!simulatorNodeId) {\n    return undefined;\n  }\n\n  return nodeStatesBySimulatorNodeId[simulatorNodeId];\n};\n\nexport const nodeOutputsFromCircuitNodeIdSelector = (\n  state: AppState,\n  circuitNodeIdPath: string[]\n) => {\n  const { simulatorNodeIdsByCircuitNodeId } = rootNodeGraphSelector(state);\n  const nodeOutputsBySimulatorNodeId =\n    state.services.simulator.nodeOutputValuesByNodeId;\n\n  const simulatorNodeId = getSimulatorNodeIdFromCircuitNodeIdPath(\n    simulatorNodeIdsByCircuitNodeId,\n    circuitNodeIdPath\n  );\n  if (!simulatorNodeId) {\n    return undefined;\n  }\n\n  return nodeOutputsBySimulatorNodeId[simulatorNodeId];\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"node-interaction-toggle\":\"node-interaction-toggle--1eXWD\",\"node-interaction-momentary\":\"node-interaction-momentary--16GBy\"};","import * as React from \"react\";\n\nimport { NodeComponentType, NodeVisualDefinition } from \"@/nodes/types\";\n\nimport { IntegratedCircuitVisual } from \"./IntegratedCircuitNode\";\nimport { MomentaryInteractionNode } from \"./MomentaryInteractionNode\";\nimport { ToggleInteractionNode } from \"./ToggleInteractionNode\";\n\nconst NamedNodeComponents: Record<string, NodeComponentType> = {\n  \"integrated-circuit\": IntegratedCircuitVisual,\n  \"interaction-momentary\": MomentaryInteractionNode,\n  \"interaction-toggle\": ToggleInteractionNode,\n};\n\nconst ErrorComponent: React.FC<{ componentName: string }> = ({\n  componentName,\n}) => {\n  return (\n    <g>\n      <rect width={50} height={50} fill=\"red\" />\n      <text x={25} y={25} alignmentBaseline=\"middle\">\n        {componentName}\n      </text>\n    </g>\n  );\n};\n\nexport function getNodeVisualElement(\n  circuitNodeId: string | undefined,\n  circuitNodePath: string[] | undefined,\n  elementState: any,\n  visual: NodeVisualDefinition\n): JSX.Element {\n  const { component, componentProps } = visual;\n\n  const nodeProps = {\n    circuitNodeId,\n    circuitNodePath,\n    elementState,\n    ...componentProps,\n  };\n\n  let Component: NodeComponentType;\n  if (typeof component === \"string\") {\n    Component = NamedNodeComponents[component];\n    if (!Component) {\n      // Making a new component here each pass will invalidate the dom on every render,\n      //  but this only is for exceptional error cases anyway.\n      Component = () => <ErrorComponent componentName={component} />;\n    }\n  } else {\n    Component = component;\n  }\n\n  return <Component {...nodeProps} />;\n}\n","import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { cls } from \"@/utils\";\n\nimport { viewCircuit } from \"@/actions/view-circuit\";\n\nimport useSelector from \"@/hooks/useSelector\";\n\nimport interaction from \"@/styles/interaction.module.css\";\n\nimport { circuitNameFromIdSelector } from \"@/services/circuits/selectors/circuits\";\nimport { nodeNamesByNodeIdSelector } from \"@/services/node-graph/selectors/nodes\";\nimport { NodeComponentProps } from \"@/nodes/types\";\n\nimport { getICBorderPath } from \"@/nodes/definitions/integrated-circuits/utils\";\n\nexport interface IntegratedCircuitVisualProps {\n  circuitId: string;\n  inputPinIds: string[];\n  outputPinIds: string[];\n}\n\nexport const IntegratedCircuitVisual: React.FC<\n  IntegratedCircuitVisualProps & NodeComponentProps\n> = ({\n  circuitNodeId,\n  circuitNodePath,\n  circuitId,\n  inputPinIds,\n  outputPinIds,\n}) => {\n  const dispatch = useDispatch();\n  // TODO: Now that we are relying on components being in a tessel path, we\n  // definitely should move node components into children of CircuitEditor\n  // and connect to them from node-types using ids.\n  // More practically: this should ignore tessel path and instead rely on ui-layout\n  // to open us up in the last interacted with view.\n  const circuitName = useSelector((state) =>\n    circuitNameFromIdSelector(state, circuitId)\n  );\n\n  const nodeNamesById = useSelector(nodeNamesByNodeIdSelector);\n\n  const borderPath = getICBorderPath(inputPinIds.length, outputPinIds.length);\n\n  const onViewCircuit = React.useCallback(\n    (e: React.MouseEvent) => {\n      if (!circuitNodeId) {\n        return;\n      }\n\n      if (e.defaultPrevented) {\n        return;\n      }\n      e.preventDefault();\n\n      dispatch(\n        viewCircuit(circuitId, [...(circuitNodePath || []), circuitNodeId])\n      );\n    },\n    [circuitNodeId, dispatch, circuitId, circuitNodePath]\n  );\n\n  const inputPins = inputPinIds.map((pinId, i) => {\n    const y = i * 50 + 25;\n    return (\n      <g key={pinId}>\n        <line\n          className=\"node-select-highlight--stroke\"\n          stroke=\"black\"\n          strokeWidth={2}\n          x1={4}\n          y1={y}\n          x2={10}\n          y2={y}\n        />\n        <text\n          className={interaction[\"text-unselectable\"]}\n          x={15}\n          y={y}\n          alignmentBaseline=\"middle\"\n          fontSize=\".7em\"\n        >\n          {nodeNamesById[pinId]}\n        </text>\n      </g>\n    );\n  });\n\n  const outputPins = outputPinIds.map((pinId, i) => {\n    const y = i * 50 + 25;\n    return (\n      <g key={pinId}>\n        <line\n          key={i}\n          className=\"node-select-highlight--stroke\"\n          stroke=\"black\"\n          strokeWidth={2}\n          x1={90}\n          y1={y}\n          x2={100}\n          y2={y}\n        />\n        <text\n          className={interaction[\"text-unselectable\"]}\n          x={85}\n          y={y}\n          textAnchor=\"end\"\n          alignmentBaseline=\"middle\"\n          fontSize=\".7em\"\n        >\n          {nodeNamesById[pinId]}\n        </text>\n      </g>\n    );\n  });\n\n  return (\n    <g>\n      <text\n        className={cls(\n          interaction[\"text-unselectable\"],\n          \"node-select-highlight--fill\"\n        )}\n        textAnchor=\"middle\"\n        x={50}\n        y={0}\n      >\n        {circuitName}\n      </text>\n      <path\n        className=\"node-select-highlight--stroke node-select-highlight--fill\"\n        stroke=\"black\"\n        fill=\"transparent\"\n        d={borderPath}\n        onDoubleClick={onViewCircuit}\n      />\n      {inputPins}\n      {outputPins}\n    </g>\n  );\n};\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport interaction from \"@/styles/interaction.module.css\";\n\nimport useSelector from \"@/hooks/useSelector\";\n\nimport { interactNode } from \"@/actions/node-interact\";\n\nimport { NodeComponentProps } from \"@/nodes/types\";\nimport { nodeOutputsFromCircuitNodeIdSelector } from \"@/services/simulator/selectors/nodes\";\n\nimport styles from \"./node-visuals.module.css\";\nimport { isSimActiveSelector } from \"@/services/simulator-control/selectors/run\";\n\nexport const MomentaryInteractionNode: React.FC<NodeComponentProps> = ({\n  circuitNodeId,\n  circuitNodePath,\n}) => {\n  const dispatch = useDispatch();\n  const isSimActive = useSelector(isSimActiveSelector);\n\n  const circuitIdPath = React.useMemo(\n    () => [...(circuitNodePath || []), circuitNodeId ?? \"~~none\"],\n    [circuitNodePath, circuitNodeId]\n  );\n\n  const outputs = useSelector((state) =>\n    nodeOutputsFromCircuitNodeIdSelector(state, circuitIdPath)\n  );\n\n  const onPress = React.useCallback(\n    (e: React.MouseEvent) => {\n      if (!isSimActive) {\n        return;\n      }\n\n      if (e.defaultPrevented) {\n        return;\n      }\n      e.preventDefault();\n\n      dispatch(interactNode(circuitIdPath, true));\n    },\n    [circuitIdPath, dispatch, isSimActive]\n  );\n\n  const onRelease = React.useCallback(() => {\n    if (!isSimActive) {\n      return;\n    }\n\n    dispatch(interactNode(circuitIdPath, false));\n  }, [circuitIdPath, dispatch, isSimActive]);\n\n  let onColor = \"darkgreen\";\n  let onTextColor = \"lightgrey\";\n  if (outputs) {\n    if (outputs.OUT) {\n      onColor = \"lightgreen\";\n      onTextColor = \"black\";\n    }\n  }\n\n  return (\n    <g\n      onMouseDown={onPress}\n      onMouseUp={onRelease}\n      onMouseLeave={onRelease}\n      className={styles[\"node-interaction-toggle\"]}\n    >\n      <rect\n        className=\"node-select-highlight--stroke node-select-highlight--fill\"\n        x={5}\n        y={5}\n        width={40}\n        height={40}\n        stroke=\"black\"\n        fill=\"#AFAFAF\"\n        strokeWidth={1}\n      />\n\n      <line x1={45} y1={25} x2={50} y2={25} stroke=\"black\" strokeWidth={2} />\n\n      <circle cx={25} cy={25} r={17} fill={onColor} />\n\n      <text\n        className={interaction[\"text-unselectable\"]}\n        x={25}\n        y={25}\n        fontSize=\".8em\"\n        fill={onTextColor}\n        textAnchor=\"middle\"\n        alignmentBaseline=\"middle\"\n      >\n        Push\n      </text>\n    </g>\n  );\n};\n","import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport interaction from \"@/styles/interaction.module.css\";\n\nimport { interactNode } from \"@/actions/node-interact\";\n\nimport { NodeComponentProps } from \"@/nodes/types\";\n\nimport { ToggleElementState } from \"@/elements/definitions/input-toggle\";\n\nimport styles from \"./node-visuals.module.css\";\n\nexport const ToggleInteractionNode: React.FC<NodeComponentProps<\n  ToggleElementState\n>> = ({ circuitNodeId, circuitNodePath, elementState }) => {\n  const dispatch = useDispatch();\n\n  const onClick = React.useCallback(\n    (e: React.MouseEvent) => {\n      if (!circuitNodeId) {\n        return;\n      }\n\n      if (e.defaultPrevented) {\n        return;\n      }\n\n      e.preventDefault();\n\n      dispatch(interactNode([...(circuitNodePath || []), circuitNodeId]));\n    },\n    [circuitNodeId, dispatch, circuitNodePath]\n  );\n\n  let onColor = \"darkgreen\";\n  let onTextColor = \"lightgrey\";\n  let offColor = \"darkred\";\n  if (elementState) {\n    const { toggleState } = elementState;\n    if (toggleState) {\n      onColor = \"lightgreen\";\n      onTextColor = \"black\";\n    } else {\n      offColor = \"red\";\n    }\n  }\n\n  return (\n    <g onClick={onClick} className={styles[\"node-interaction-toggle\"]}>\n      <rect\n        className=\"node-select-highlight--stroke node-select-highlight--fill\"\n        x={5}\n        y={5}\n        width={40}\n        height={40}\n        stroke=\"black\"\n        fill=\"#AFAFAF\"\n        strokeWidth={1}\n      />\n      <line x1={45} y1={25} x2={50} y2={25} stroke=\"black\" strokeWidth={2} />\n      <rect\n        x={10}\n        y={10}\n        width={30}\n        height={15}\n        strokeWidth={0}\n        fill={onColor}\n      />\n      <text\n        className={interaction[\"text-unselectable\"]}\n        x={25}\n        y={19}\n        fontSize=\".8em\"\n        fill={onTextColor}\n        textAnchor=\"middle\"\n        alignmentBaseline=\"middle\"\n      >\n        On\n      </text>\n      <rect\n        x={10}\n        y={25}\n        width={30}\n        height={15}\n        strokeWidth={0}\n        fill={offColor}\n      />\n      <text\n        className={interaction[\"text-unselectable\"]}\n        x={25}\n        y={34}\n        fontSize=\".8em\"\n        fill=\"lightgrey\"\n        textAnchor=\"middle\"\n        alignmentBaseline=\"middle\"\n      >\n        Off\n      </text>\n    </g>\n  );\n};\n","import * as React from \"react\";\n\nimport { cls } from \"@/utils\";\n\nimport useSelector from \"@/hooks/useSelector\";\n\nimport { nodeDefinitionFromTypeSelector } from \"@/services/node-types/selectors/node-types\";\nimport { getNodeVisualElement } from \"@/nodes/visuals\";\n\nexport interface NodeVisualProps {\n  className?: string;\n  circuitNodeId?: string;\n  x?: number;\n  y?: number;\n  nodeType: string;\n}\n\nconst EmptyState = Object.freeze({});\n\nconst NodeVisual: React.FC<NodeVisualProps> = React.memo(function NodeVisual({\n  className,\n  circuitNodeId,\n  x = 0,\n  y = 0,\n  nodeType,\n}) {\n  const def = useSelector((state) =>\n    nodeDefinitionFromTypeSelector(state, nodeType)\n  );\n\n  let body: React.ReactNode;\n  if (!def) {\n    body = <rect x={x} y={y} width={50} height={50} fill=\"red\" />;\n  } else {\n    body = getNodeVisualElement(circuitNodeId, [], EmptyState, def.visual);\n  }\n\n  const transform = x != 0 || y != 0 ? `translate(${x}, ${y})` : undefined;\n  return (\n    <g className={cls(className, \"node-visual\")} transform={transform}>\n      {body}\n    </g>\n  );\n});\n\nexport default NodeVisual;\n","import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useDrop } from \"react-dnd\";\n\nimport { Point, snapPoint } from \"@/geometry\";\n\nimport useSelector from \"@/hooks/useSelector\";\n\nimport { addNode } from \"@/actions/node-add\";\n\nimport { nodeTypeToCircuitId } from \"@/nodes/definitions/integrated-circuits/utils\";\n\nimport { gridNodeSnapSelector } from \"@/services/circuit-editor-ui-drag/selectors/snap\";\nimport { circuitWouldRecurseSelector } from \"@/services/circuits/selectors/circuits\";\n\nimport {\n  isNewNodeDragObject,\n  NEW_NODE_DRAG_OBJECT,\n} from \"../../../drag-items/new-node\";\n\nimport { useCircuitField } from \"../../../circuit-field-context\";\n\nimport { useMouseCoords } from \"../hooks/useMouseCoords\";\n\nimport NodeVisual from \"./NodeVisual\";\n\nconst DragNewNodeLayer: React.FC = React.memo(function DragNewNodeLayer() {\n  const dispatch = useDispatch();\n  const { circuitId } = useCircuitField();\n  const snap = useSelector(gridNodeSnapSelector);\n  const getMouseCoords = useMouseCoords();\n\n  const [dragType, setDragType] = React.useState<string | null>(null);\n  const [dragPos, setDragPos] = React.useState<Point | null>(null);\n\n  const dropTargetWouldRecurse = useSelector((state) =>\n    circuitWouldRecurseSelector(state, nodeTypeToCircuitId(dragType), circuitId)\n  );\n\n  const [, dropRef] = useDrop(\n    {\n      accept: NEW_NODE_DRAG_OBJECT,\n      collect: (monitor) => {\n        // We need to clear this out on mouse out\n        if (!monitor.isOver()) {\n          setDragPos(null);\n          setDragType(null);\n        }\n      },\n      hover: (item, monitor) => {\n        if (!isNewNodeDragObject(item)) {\n          setDragPos(null);\n          setDragType(null);\n          return;\n        }\n\n        const pos = monitor.getClientOffset();\n        if (!pos) {\n          return;\n        }\n        const coords = getMouseCoords({ x: pos.x, y: pos.y });\n        setDragType(item.payload.nodeType);\n        setDragPos(coords);\n      },\n      drop: (item, monitor) => {\n        if (!isNewNodeDragObject(item)) {\n          return;\n        }\n\n        if (dropTargetWouldRecurse) {\n          return;\n        }\n\n        const pos = monitor.getClientOffset();\n        if (!pos) {\n          return;\n        }\n        const coords = getMouseCoords({ x: pos.x, y: pos.y });\n        dispatch(\n          addNode(item.payload.nodeType, circuitId, snapPoint(coords, snap))\n        );\n      },\n    },\n    [circuitId, getMouseCoords, snap, dropTargetWouldRecurse]\n  );\n\n  const snapDragPos = dragPos && snapPoint(dragPos, snap);\n\n  return (\n    <g id=\"drag-new-node-layer\">\n      {!dropTargetWouldRecurse && snapDragPos && dragType && (\n        <g opacity={0.5}>\n          <NodeVisual x={snapDragPos.x} y={snapDragPos.y} nodeType={dragType} />\n        </g>\n      )}\n      {dropTargetWouldRecurse && (\n        <g>\n          <rect width=\"100%\" height=\"100%\" opacity={0.7} fill=\"black\" />\n          {/* FIXME: Should center this text in the screen viewport. */}\n          <text x=\"100\" y=\"25%\" fill=\"white\">\n            The current circuit is already inside the dragged IC.\n          </text>\n        </g>\n      )}\n      <rect ref={dropRef} width=\"100%\" height=\"100%\" fill=\"transparent\" />\n    </g>\n  );\n});\n\nexport default DragNewNodeLayer;\n","import * as React from \"react\";\n\nimport pick from \"lodash/pick\";\nimport mapValues from \"lodash/mapValues\";\nimport values from \"lodash/values\";\n\nimport { createSelector } from \"reselect\";\n\nimport { nodeTypesByNodeIdSelector } from \"@/services/node-graph/selectors/nodes\";\nimport { nodePositionsByNodeIdSelector } from \"@/services/node-layout/selectors/node-positions\";\nimport { selectedNodeIdsSelector } from \"@/services/selection/selectors/selection\";\nimport {\n  dragMoveOffsetSelector,\n  isDragForCircuitSelector,\n} from \"@/services/circuit-editor-ui-drag/selectors/drag\";\n\nimport useSelector from \"@/hooks/useSelector\";\n\nimport { useCircuitField } from \"../../../circuit-field-context\";\n\nimport NodeVisual from \"./NodeVisual\";\n\nconst selectedNodePositionsByIdSelector = createSelector(\n  selectedNodeIdsSelector,\n  nodePositionsByNodeIdSelector,\n  (selectedNodeIds, nodePositionsById) =>\n    pick(nodePositionsById, selectedNodeIds)\n);\n\nconst selectedNodeTypesByIdSelector = createSelector(\n  selectedNodeIdsSelector,\n  nodeTypesByNodeIdSelector,\n  (selectedNodeIds, nodeTypesById) => pick(nodeTypesById, selectedNodeIds)\n);\n\nconst DragNodePreviewLayer: React.FC = React.memo(\n  function DragNodePreviewLayer() {\n    const { circuitId } = useCircuitField();\n    const isDragForSelf = useSelector((state) =>\n      isDragForCircuitSelector(state, circuitId)\n    );\n\n    const selectedNodePositionsById = useSelector(\n      selectedNodePositionsByIdSelector\n    );\n    const selectedNodeTypesById = useSelector(selectedNodeTypesByIdSelector);\n    const dragMoveOffset = useSelector(dragMoveOffsetSelector);\n\n    if (!isDragForSelf || !dragMoveOffset) {\n      return null;\n    }\n\n    let elements: React.ReactNode | null = null;\n    if (dragMoveOffset) {\n      elements = values(\n        mapValues(selectedNodePositionsById, (p, nodeId) => (\n          <NodeVisual\n            key={nodeId}\n            nodeType={selectedNodeTypesById[nodeId]}\n            x={p.x + dragMoveOffset.x}\n            y={p.y + dragMoveOffset.y}\n          />\n        ))\n      );\n    }\n    return (\n      <g id=\"drag-node-preview-layer\" opacity={0.3}>\n        {elements}\n      </g>\n    );\n  }\n);\n\nexport default DragNodePreviewLayer;\n","import * as React from \"react\";\n\nimport { cls } from \"@/utils\";\n\nimport styles from \"./WireJointVisual.module.css\";\n\ninterface WireJointVisualProps extends React.SVGProps<SVGCircleElement> {\n  x: number;\n  y: number;\n  interactable?: boolean;\n  selected?: boolean;\n}\n\nconst WireJointVisual: React.FC<WireJointVisualProps> = ({\n  x,\n  y,\n  interactable = true,\n  selected = false,\n  ...props\n}) => {\n  const [mouseOver, setMouseOver] = React.useState(false);\n\n  const onMouseOver = React.useCallback(() => {\n    if (!interactable) {\n      return;\n    }\n    setMouseOver(true);\n  }, [interactable]);\n\n  const onMouseOut = React.useCallback(() => {\n    setMouseOver(false);\n  }, []);\n\n  return (\n    <circle\n      className={cls(styles[\"wire-joint\"], selected && styles[\"selected\"])}\n      cx={x}\n      cy={y}\n      r={(interactable && mouseOver) || selected ? 4 : 2}\n      onMouseOver={onMouseOver}\n      onMouseOut={onMouseOut}\n      {...props}\n    />\n  );\n};\n\nexport default WireJointVisual;\n","import WireJointVisual from \"./WireJointVisual\";\nexport default WireJointVisual;\n","// extracted by mini-css-extract-plugin\nexport default {\"wire-joint\":\"wire-joint--16G5Q\",\"selected\":\"selected--1wUHn\"};","import * as React from \"react\";\nimport { createSelector } from \"reselect\";\nimport pick from \"lodash/pick\";\nimport values from \"lodash/values\";\n\nimport useSelector from \"@/hooks/useSelector\";\n\nimport {\n  dragMoveOffsetSelector,\n  dragNewJointPositionSelector,\n  isDragForCircuitSelector,\n} from \"@/services/circuit-editor-ui-drag/selectors/drag\";\nimport { selectedJointIdsSelector } from \"@/services/selection/selectors/selection\";\nimport { wireJointPositionsByJointIdSelector } from \"@/services/node-layout/selectors/wires\";\n\nimport { useCircuitField } from \"../../../circuit-field-context\";\n\nimport WireJointVisual from \"./WireJointVisual\";\n\nconst selectedJointPositionsByIdSelector = createSelector(\n  selectedJointIdsSelector,\n  wireJointPositionsByJointIdSelector,\n  (selectedJointIds, jointPositionsById) =>\n    pick(jointPositionsById, selectedJointIds)\n);\n\nconst DragJointPreviewLayer: React.FC = React.memo(\n  function DragJointPreviewLayer() {\n    const { circuitId } = useCircuitField();\n    const isDragForSelf = useSelector((state) =>\n      isDragForCircuitSelector(state, circuitId)\n    );\n\n    const dragMoveOffset = useSelector(dragMoveOffsetSelector);\n    const selectedNodePositionsById = useSelector(\n      selectedJointPositionsByIdSelector\n    );\n\n    const newJointPosition = useSelector(dragNewJointPositionSelector);\n\n    if (!isDragForSelf || (!dragMoveOffset && !newJointPosition)) {\n      return null;\n    }\n\n    let elements: React.ReactNode | null = null;\n    if (dragMoveOffset) {\n      elements = values(selectedNodePositionsById).map((p, index) => (\n        <WireJointVisual\n          key={index}\n          interactable={false}\n          x={p.x + dragMoveOffset.x}\n          y={p.y + dragMoveOffset.y}\n          opacity={0.5}\n        />\n      ));\n    }\n\n    let newJointElement: React.ReactNode | null = null;\n    if (newJointPosition) {\n      newJointElement = (\n        <WireJointVisual\n          interactable={false}\n          x={newJointPosition.x}\n          y={newJointPosition.y}\n          opacity={0.5}\n        />\n      );\n    }\n\n    // TODO: Draw transparent lines connecting the joint.\n\n    return (\n      <g id=\"drag-joint-preview-layer\" opacity={0.3}>\n        {elements}\n        {newJointElement}\n      </g>\n    );\n  }\n);\n\nexport default DragJointPreviewLayer;\n","import * as React from \"react\";\nimport { Point, ZeroPoint, pointSubtract } from \"@/geometry\";\n\nexport interface UseMouseTracking {\n  startTracking(e: React.MouseEvent): void;\n  cancelTracking(): void;\n}\n\nexport interface MouseTrackingOptions {\n  dragThreshold?: number;\n  onClick?(e: MouseEvent): void;\n  onDragStart?(e: MouseEvent): void;\n  onDragMove?(offset: Point, e: MouseEvent): void;\n  onDragEnd?(offset: Point, e: MouseEvent): void;\n}\n\nexport default function useMouseTracking(\n  opts: MouseTrackingOptions\n): UseMouseTracking {\n  const {\n    dragThreshold = 5,\n    onClick,\n    onDragStart,\n    onDragMove,\n    onDragEnd,\n  } = opts;\n\n  // We need both state and ref for this.\n  //  State lets us trigger a rerender / useEffect.\n  //  Ref lets us check for cancellation when handling document events.\n  //  We seem to get a few rogue onMouseMove events after we try to stop tracking.\n  const [isTracking, setTracking] = React.useState(false);\n  const isTrackingRef = React.useRef(false);\n\n  const isDraggingRef = React.useRef(false);\n  const mouseDownRef = React.useRef<Point>(ZeroPoint);\n\n  const startTracking = React.useCallback((e: React.MouseEvent) => {\n    if (isTrackingRef.current) {\n      return;\n    }\n\n    isTrackingRef.current = true;\n    setTracking(true);\n    mouseDownRef.current = { x: e.pageX, y: e.pageY };\n  }, []);\n\n  const cancelTracking = React.useCallback(() => {\n    isTrackingRef.current = false;\n    setTracking(false);\n    isDraggingRef.current = false;\n    mouseDownRef.current = ZeroPoint;\n  }, []);\n\n  const onMouseMove = React.useCallback(\n    (e: MouseEvent) => {\n      if (!isTrackingRef.current) {\n        return;\n      }\n\n      if (isDraggingRef.current) {\n        if (onDragMove) {\n          const offset = pointSubtract(\n            { x: e.pageX, y: e.pageY },\n            mouseDownRef.current\n          );\n          onDragMove(offset, e);\n        }\n      } else {\n        const d = mouseDownRef.current;\n        if (\n          Math.abs(d.x - e.pageX) >= dragThreshold ||\n          Math.abs(d.y - e.pageY) >= dragThreshold\n        ) {\n          isDraggingRef.current = true;\n          if (onDragStart) {\n            onDragStart(e);\n          }\n        }\n      }\n    },\n    [dragThreshold, onDragMove, onDragStart]\n  );\n\n  const onMouseUp = React.useCallback(\n    (e: MouseEvent) => {\n      if (!isTrackingRef.current) {\n        return;\n      }\n\n      if (isDraggingRef.current) {\n        if (onDragEnd) {\n          const offset = pointSubtract(\n            { x: e.pageX, y: e.pageY },\n            mouseDownRef.current\n          );\n          onDragEnd(offset, e);\n        }\n      } else {\n        if (onClick) {\n          onClick(e);\n        }\n      }\n\n      cancelTracking();\n    },\n    [cancelTracking, onClick, onDragEnd]\n  );\n\n  React.useEffect(() => {\n    if (!isTracking) {\n      return;\n    }\n\n    document.addEventListener(\"mousemove\", onMouseMove);\n    document.addEventListener(\"mouseup\", onMouseUp);\n\n    return () => {\n      document.removeEventListener(\"mousemove\", onMouseMove);\n      document.removeEventListener(\"mouseup\", onMouseUp);\n    };\n  }, [isTracking, onMouseMove, onMouseUp]);\n\n  return {\n    startTracking,\n    cancelTracking,\n  };\n}\n","import * as React from \"react\";\n\nexport interface ViewportContext {\n  zoomFactor: number;\n  zoom(factor: number): void;\n}\n\nconst viewportContext = React.createContext<ViewportContext>({\n  zoomFactor: 1,\n  zoom: () => {\n    /* no op */\n  },\n});\n\nexport function useViewportContext(): ViewportContext {\n  return React.useContext(viewportContext);\n}\n\nconst SCALE_FACTOR = 1.03;\n\nexport const ViewportContextProvider: React.FC = ({ children }) => {\n  const [zoomFactor, setZoomFactor] = React.useState(1);\n  const zoom = React.useCallback((delta: number) => {\n    setZoomFactor((zoomFactor) =>\n      delta > 0\n        ? zoomFactor * delta * SCALE_FACTOR\n        : zoomFactor / (-delta * SCALE_FACTOR)\n    );\n  }, []);\n\n  const context = React.useMemo<ViewportContext>(\n    () => ({\n      zoomFactor,\n      zoom,\n    }),\n    [zoom, zoomFactor]\n  );\n  return (\n    <viewportContext.Provider value={context}>\n      {children}\n    </viewportContext.Provider>\n  );\n};\n","import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport useSelector from \"@/hooks/useSelector\";\nimport { Point } from \"@/geometry\";\nimport { getModifiers } from \"@/modifier-keys\";\n\nimport useMouseTracking from \"@/hooks/useMouseTracking\";\n\nimport {\n  isDragForCircuitSelector,\n  selectionRectSelector,\n} from \"@/services/circuit-editor-ui-drag/selectors/drag\";\n\nimport { clearSelection } from \"@/actions/select-clear\";\nimport { fieldDragStartSelect } from \"@/actions/field-drag-start-select\";\nimport { fieldDragContinue } from \"@/actions/field-drag-continue\";\nimport { fieldDragEnd } from \"@/actions/field-drag-end\";\n\nimport { useViewportContext } from \"../../../viewport-context\";\n\nimport { useCircuitField } from \"../../../circuit-field-context\";\n\nimport { useEventMouseCoords } from \"../hooks/useMouseCoords\";\n\nconst DragSelectLayer: React.FC = React.memo(function DragSelectLayer() {\n  const dispatch = useDispatch();\n  const { circuitId } = useCircuitField();\n  const { zoomFactor } = useViewportContext();\n  const isDragForSelf = useSelector((state) =>\n    isDragForCircuitSelector(state, circuitId)\n  );\n\n  const selectionRect = useSelector(selectionRectSelector);\n\n  function counterScale(value: number) {\n    return value * (1 / zoomFactor);\n  }\n\n  const getCoords = useEventMouseCoords();\n\n  const onClick = React.useCallback(\n    (e: MouseEvent) => {\n      if (e.button !== 0) {\n        return;\n      }\n      const modifiers = getModifiers(e);\n      if (!modifiers.ctrlMetaKey && !modifiers.shiftKey) {\n        dispatch(clearSelection());\n      }\n    },\n    [dispatch]\n  );\n\n  const onDragStart = React.useCallback(\n    (e: MouseEvent) => {\n      const p = getCoords(e);\n      dispatch(fieldDragStartSelect(p, circuitId));\n    },\n    [circuitId, dispatch, getCoords]\n  );\n\n  const onDragMove = React.useCallback(\n    (offset: Point, e: MouseEvent) => {\n      const p = getCoords(e);\n      const modifierKeys = getModifiers(e);\n      dispatch(fieldDragContinue(p, modifierKeys));\n    },\n    [dispatch, getCoords]\n  );\n\n  const onDragEnd = React.useCallback(\n    (offset: Point, e: MouseEvent) => {\n      const p = getCoords(e);\n      const modifiers = getModifiers(e);\n      dispatch(fieldDragEnd(p, modifiers));\n    },\n    [dispatch, getCoords]\n  );\n\n  const { startTracking } = useMouseTracking({\n    onClick,\n    onDragStart,\n    onDragMove,\n    onDragEnd,\n  });\n  const onMouseDown = React.useCallback(\n    (e: React.MouseEvent) => {\n      if (e.defaultPrevented) {\n        return;\n      }\n      e.preventDefault();\n      startTracking(e);\n    },\n    [startTracking]\n  );\n\n  return (\n    <g id=\"drag-select-layer\">\n      <rect\n        /*\n         Our width and height get scaled by the parent scaler.\n         We have to be inside the parent scaler to make our mouse coordinate values match up.\n         Scale us back out so we continue to cover the whole screen.\n         */\n        width={`${counterScale(1) * 100}%`}\n        height={`${counterScale(1) * 100}%`}\n        fill=\"transparent\"\n        onMouseDown={onMouseDown}\n      />\n      {isDragForSelf && selectionRect && (\n        <g\n          transform={`translate(${selectionRect.p1.x}, ${selectionRect.p1.y})`}\n        >\n          <rect\n            width={selectionRect.p2.x - selectionRect.p1.x}\n            height={selectionRect.p2.y - selectionRect.p1.y}\n            strokeWidth={counterScale(2)}\n            strokeDasharray={`${counterScale(5)} ${counterScale(3)}`}\n            stroke=\"skyblue\"\n            fill=\"transparent\"\n          />\n        </g>\n      )}\n    </g>\n  );\n});\n\nexport default DragSelectLayer;\n","import * as React from \"react\";\nimport { v4 as uuidV4 } from \"uuid\";\n\nimport { useViewportContext } from \"../../../viewport-context\";\n\nconst GridBackground: React.FC = React.memo(function GridBackground() {\n  const [gridId] = React.useState(`grid-${uuidV4()}`);\n  const { zoomFactor } = useViewportContext();\n\n  const gridSize = 50 * zoomFactor;\n\n  return (\n    <svg width=\"100%\" height=\"100%\" xmlns=\"http://www.w3.org/2000/svg\">\n      <defs>\n        <pattern\n          id={gridId}\n          width={gridSize}\n          height={gridSize}\n          patternUnits=\"userSpaceOnUse\"\n        >\n          <path\n            d={`M ${gridSize} 0 L 0 0 0 ${gridSize}`}\n            fill=\"none\"\n            stroke=\"gray\"\n            strokeWidth={0.5}\n          />\n        </pattern>\n      </defs>\n\n      <rect width=\"100%\" height=\"100%\" fill={`url(#${gridId})`} />\n    </svg>\n  );\n});\n\nexport default GridBackground;\n","import { AppState } from \"@/store\";\n\nimport {\n  nodeNameFromNodeIdSelector,\n  nodeNameOrDefaultFromNodeIdSelector,\n} from \"@/services/node-graph/selectors/nodes\";\nimport { createUiSettingsSelector } from \"../utils\";\n\nexport const nodeNameModeSelector = createUiSettingsSelector(\n  (s) => s.nodeNameMode\n);\n\nexport const nodeFieldDisplayNameFromNodeId = (\n  state: AppState,\n  nodeId: string\n) => {\n  const mode = state.services.uiSettings.nodeNameMode;\n  switch (mode) {\n    case \"all\":\n    default:\n      return nodeNameOrDefaultFromNodeIdSelector(state, nodeId);\n    case \"named-only\":\n      return nodeNameFromNodeIdSelector(state, nodeId);\n    case \"none\":\n      return null;\n  }\n};\n","import * as React from \"react\";\n\nexport interface AtomicTextInputProps {\n  className?: string;\n  autoFocus?: boolean;\n  defaultValue?: string;\n  value?: string;\n  onChange?(e: React.ChangeEvent<HTMLInputElement>): void;\n  onBeginEdit?(): void;\n  onCommit?(value: string): void;\n  onCancel?(): void;\n  onKeyUp?(e: React.KeyboardEvent<HTMLInputElement>): void;\n  onBlur?(e: React.FocusEvent<HTMLInputElement>): void;\n}\n\nconst AtomicTextInput = React.forwardRef<\n  HTMLInputElement,\n  AtomicTextInputProps\n>(\n  (\n    {\n      className,\n      autoFocus,\n      defaultValue,\n      value,\n      onChange,\n      onBeginEdit,\n      onCommit,\n      onCancel,\n      onBlur,\n      onKeyUp,\n    },\n    ref\n  ) => {\n    const [editValue, setEditValue] = React.useState<string | null>(null);\n\n    const onInputChange = React.useCallback(\n      (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (editValue == null && onBeginEdit) {\n          onBeginEdit();\n        }\n\n        setEditValue(e.target.value);\n\n        if (onChange) {\n          onChange(e);\n        }\n      },\n      [editValue, onBeginEdit, onChange]\n    );\n\n    const onInputKeyUp = React.useCallback(\n      (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (onKeyUp) {\n          onKeyUp(e);\n        }\n        if (e.defaultPrevented) {\n          return;\n        }\n\n        if (editValue == null) {\n          return;\n        }\n\n        if (e.key === \"Escape\") {\n          e.preventDefault();\n          if (onCancel) {\n            onCancel();\n          }\n        } else if (e.key === \"Enter\") {\n          e.preventDefault();\n          if (onCommit) {\n            onCommit(editValue);\n          }\n        }\n      },\n      [onKeyUp, editValue, onCancel, onCommit]\n    );\n\n    const onInputBlur = React.useCallback(\n      (e: React.FocusEvent<HTMLInputElement>) => {\n        if (onBlur) {\n          onBlur(e);\n        }\n\n        if (editValue != null && onCommit) {\n          onCommit(editValue);\n        }\n      },\n      [onBlur, editValue, onCommit]\n    );\n\n    return (\n      <input\n        ref={ref}\n        className={className}\n        autoFocus={autoFocus}\n        defaultValue={defaultValue}\n        value={value}\n        type=\"text\"\n        onChange={onInputChange}\n        onKeyUp={onInputKeyUp}\n        onBlur={onInputBlur}\n      />\n    );\n  }\n);\n\nexport default AtomicTextInput;\n","import { cls } from \"@/utils\";\nimport * as React from \"react\";\nimport AtomicTextInput from \"./AtomicTextInput\";\n\nexport interface EditableTextProps {\n  className?: string;\n  textClassname?: string;\n  inputClassname?: string;\n  label?: JSX.Element;\n  defaultValue: string;\n  isEditing: boolean;\n  onRequestEdit?(): void;\n  onCommit(value: string): void;\n  onCancel(): void;\n}\n\nconst EditableText: React.FC<EditableTextProps> = ({\n  className,\n  textClassname,\n  inputClassname,\n  label,\n  defaultValue,\n  isEditing,\n  onRequestEdit,\n  onCommit,\n  onCancel,\n}) => {\n  const inputRef = React.useRef<HTMLInputElement | null>(null);\n\n  const onSpanDoubleClick = React.useCallback(\n    (e: React.MouseEvent) => {\n      if (!onRequestEdit) {\n        return;\n      }\n      if (e.defaultPrevented) {\n        return;\n      }\n      e.preventDefault();\n      onRequestEdit();\n    },\n    [onRequestEdit]\n  );\n\n  // AtomicTextInput enters editing mode when the user changes something.\n  // It will not call cancel on blur.\n  // We want to exit when blurred\n  const onKeyUp = React.useCallback(\n    (e: React.KeyboardEvent<HTMLInputElement>) => {\n      if (e.key === \"Escape\" && isEditing) {\n        onCancel();\n      }\n    },\n    [isEditing, onCancel]\n  );\n\n  const onBlur = React.useCallback(() => {\n    if (isEditing) {\n      onCancel();\n    }\n  }, [isEditing, onCancel]);\n\n  React.useEffect(() => {\n    if (isEditing && inputRef.current) {\n      inputRef.current.select();\n    }\n  }, [isEditing]);\n\n  if (!isEditing) {\n    return (\n      <span\n        className={cls(className, textClassname)}\n        onDoubleClick={onSpanDoubleClick}\n      >\n        {label ?? defaultValue}\n      </span>\n    );\n  }\n\n  return (\n    <AtomicTextInput\n      ref={inputRef}\n      className={cls(className, inputClassname)}\n      autoFocus\n      defaultValue={defaultValue}\n      onBlur={onBlur}\n      onKeyUp={onKeyUp}\n      onCommit={onCommit}\n      onCancel={onCancel}\n    />\n  );\n};\n\nexport default EditableText;\n","import * as React from \"react\";\n\nimport EditableText, { EditableTextProps } from \"../EditableText\";\n\nimport { useMenuCloseContext } from \"./MenuCloseContext\";\n\nimport styles from \"./Menus.module.css\";\n\nexport type EditableTextMenuItemProps = EditableTextProps;\nconst EditableTextMenuItem: React.FC<EditableTextMenuItemProps> = (props) => {\n  const { onRequestEdit, onCommit } = props;\n\n  const requestMenuClose = useMenuCloseContext();\n\n  const onClick = React.useCallback(() => {\n    if (onRequestEdit) {\n      onRequestEdit();\n    }\n  }, [onRequestEdit]);\n\n  const onEditableCommit = React.useCallback(\n    (value: string) => {\n      onCommit(value);\n      requestMenuClose();\n    },\n    [onCommit, requestMenuClose]\n  );\n\n  return (\n    <li className={styles[\"menu-item\"]} onClick={onClick}>\n      <EditableText {...props} onCommit={onEditableCommit} />\n    </li>\n  );\n};\n\nexport default EditableTextMenuItem;\n","import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport useSelector from \"@/hooks/useSelector\";\n\nimport { renameNode } from \"@/actions/node-rename\";\n\nimport {\n  nodeNameOrDefaultFromNodeIdSelector,\n  nodeTypeFromNodeIdSelector,\n} from \"@/services/node-graph/selectors/nodes\";\n\nimport Menu from \"@/components/Menus/Menu\";\nimport DividerMenuItem from \"@/components/Menus/DividerMenuItem\";\nimport EditableTextMenuItem from \"@/components/Menus/EditableTextMenuItem\";\n\nimport ContextMenuItems from \"../../ContextMenuItems\";\nimport { nodeTypeToCircuitId } from \"@/nodes/definitions/integrated-circuits/utils\";\nimport { viewCircuit } from \"@/actions/view-circuit\";\nimport { useCircuitField } from \"@/components/CircuitField/circuit-field-context\";\nimport MenuItem from \"@/components/Menus/MenuItem\";\n\nexport interface NodeContextMenuProps {\n  nodeId: string;\n}\n\nconst NodeContextMenu: React.FC<NodeContextMenuProps> = ({ nodeId }) => {\n  const dispatch = useDispatch();\n\n  const { circuitNodePath } = useCircuitField();\n\n  const nodeName = useSelector((state) =>\n    nodeNameOrDefaultFromNodeIdSelector(state, nodeId)\n  );\n  const nodeType = useSelector((state) =>\n    nodeTypeFromNodeIdSelector(state, nodeId)\n  );\n  const nodeCircuitId = nodeType ? nodeTypeToCircuitId(nodeType) : null;\n\n  const [isRenaming, setIsRenaming] = React.useState(false);\n  const onRename = React.useCallback(() => {\n    setIsRenaming(true);\n  }, []);\n  const onRenameCancel = React.useCallback(() => {\n    setIsRenaming(false);\n  }, []);\n  const onRenameCommit = React.useCallback(\n    (value: string) => {\n      setIsRenaming(false);\n      dispatch(renameNode(nodeId, value));\n    },\n    [dispatch, nodeId]\n  );\n\n  const onOpenCircuitInNewWindow = React.useCallback(() => {\n    if (!nodeCircuitId) {\n      return;\n    }\n    dispatch(\n      viewCircuit(nodeCircuitId, [...circuitNodePath, nodeId], {\n        newWindow: true,\n      })\n    );\n  }, [circuitNodePath, dispatch, nodeCircuitId, nodeId]);\n\n  return (\n    <Menu>\n      <EditableTextMenuItem\n        defaultValue={nodeName ?? \"<unknown>\"}\n        label={<span style={{ fontWeight: \"bold\" }}>{nodeName}</span>}\n        isEditing={isRenaming}\n        onRequestEdit={onRename}\n        onCommit={onRenameCommit}\n        onCancel={onRenameCancel}\n      />\n      <DividerMenuItem />\n      {nodeCircuitId && (\n        <>\n          <MenuItem onClick={onOpenCircuitInNewWindow}>\n            Open in New Window\n          </MenuItem>\n          <DividerMenuItem />\n        </>\n      )}\n      <ContextMenuItems />\n    </Menu>\n  );\n};\n\nexport default NodeContextMenu;\n","import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { cls } from \"@/utils\";\nimport { Point, Rectangle, ZeroPoint } from \"@/geometry\";\nimport { getModifiers } from \"@/modifier-keys\";\nimport { getSelectMode } from \"@/selection-mode\";\n\nimport { getNodeVisualElement } from \"@/nodes/visuals\";\n\nimport interaction from \"@/styles/interaction.module.css\";\n\nimport useSelector from \"@/hooks/useSelector\";\nimport useMouseTracking from \"@/hooks/useMouseTracking\";\n\nimport { nodeStateFromCircuitNodeIdSelector } from \"@/services/simulator/selectors/nodes\";\nimport { isNodeSelectedFromNodeIdSelector } from \"@/services/selection/selectors/selection\";\nimport { nodePositionFromNodeIdSelector } from \"@/services/node-layout/selectors/node-positions\";\nimport { isSimActiveSelector } from \"@/services/simulator-control/selectors/run\";\nimport { nodeDefFromNodeIdSelector } from \"@/services/node-graph/selectors/node-def\";\nimport { nodeFieldDisplayNameFromNodeId } from \"@/services/ui-settings/selectors/node-name\";\n\nimport { fieldDragStartNode } from \"@/actions/field-drag-start-node\";\nimport { fieldDragContinue } from \"@/actions/field-drag-continue\";\nimport { fieldDragEnd } from \"@/actions/field-drag-end\";\nimport { selectNodes } from \"@/actions/select-nodes\";\n\nimport { useContextMenu } from \"@/components/ContextMenu\";\n\nimport { useCircuitField } from \"../../../../circuit-field-context\";\nimport { useViewportContext } from \"../../../../viewport-context\";\n\nimport { useEventMouseCoords } from \"../../hooks/useMouseCoords\";\n\nimport NodeContextMenu from \"../NodeContextMenu\";\n\nimport \"./Node.module.css\";\n\nexport interface NodeProps {\n  nodeId: string;\n}\n\nconst Node: React.FC<NodeProps> = React.memo(function Node({ nodeId }) {\n  const dispatch = useDispatch();\n  const { circuitNodePath } = useCircuitField();\n  const isSimActive = useSelector(isSimActiveSelector);\n\n  const { openContextMenu, renderContextMenu } = useContextMenu();\n\n  const def = useSelector((state) => nodeDefFromNodeIdSelector(state, nodeId));\n  const { x, y } = useSelector((s) =>\n    nodePositionFromNodeIdSelector(s, nodeId)\n  );\n  const nodeState = useSelector((s) =>\n    nodeStateFromCircuitNodeIdSelector(s, [...circuitNodePath, nodeId])\n  );\n  const isSelected = useSelector((s) =>\n    isNodeSelectedFromNodeIdSelector(s, nodeId)\n  );\n\n  const getCoords = useEventMouseCoords();\n\n  const onClick = React.useCallback(\n    (e: MouseEvent) => {\n      if (isSimActive) {\n        return;\n      }\n\n      if (e.defaultPrevented) {\n        return;\n      }\n\n      if (e.button !== 0) {\n        return;\n      }\n\n      e.preventDefault();\n\n      const modifiers = getModifiers(e);\n      const selectionMode = getSelectMode(modifiers);\n      dispatch(selectNodes(nodeId, selectionMode));\n    },\n    [dispatch, isSimActive, nodeId]\n  );\n\n  const onContextMenu = React.useCallback(\n    (e: React.MouseEvent) => {\n      if (e.defaultPrevented) {\n        return;\n      }\n      e.preventDefault();\n\n      const modifiers = getModifiers(e);\n      const selectionMode = getSelectMode(modifiers, \"set-if-unselected\");\n      dispatch(selectNodes(nodeId, selectionMode));\n      openContextMenu(e);\n    },\n    [dispatch, nodeId, openContextMenu]\n  );\n\n  const onDragStart = React.useCallback(\n    (e: MouseEvent) => {\n      const p = getCoords(e);\n      const modifiers = getModifiers(e);\n      dispatch(fieldDragStartNode(nodeId, p, modifiers));\n    },\n    [getCoords, dispatch, nodeId]\n  );\n\n  const onDragMove = React.useCallback(\n    (offset: Point, e: MouseEvent) => {\n      const p = getCoords(e);\n      const modifierKeys = getModifiers(e);\n      dispatch(fieldDragContinue(p, modifierKeys));\n    },\n    [dispatch, getCoords]\n  );\n\n  const onDragEnd = React.useCallback(\n    (offset: Point, e: MouseEvent) => {\n      const p = getCoords(e);\n      const modifiers = getModifiers(e);\n      dispatch(fieldDragEnd(p, modifiers));\n    },\n    [dispatch, getCoords]\n  );\n\n  const { startTracking } = useMouseTracking({\n    onClick,\n    onDragStart,\n    onDragMove,\n    onDragEnd,\n  });\n  const onMouseDown = React.useCallback(\n    (e: React.MouseEvent) => {\n      if (e.defaultPrevented) {\n        return;\n      }\n      // Handle this regardless, to stop mosue clicks\n      // selecting nearby text.\n      e.preventDefault();\n\n      if (isSimActive) {\n        return;\n      }\n\n      if (e.button !== 0) {\n        return;\n      }\n\n      startTracking(e);\n    },\n    [isSimActive, startTracking]\n  );\n\n  if (!def) {\n    return null;\n  }\n\n  let body: React.ReactNode;\n  let rect: Rectangle;\n  if (!def) {\n    body = (\n      <rect\n        x={x}\n        y={y}\n        width={50}\n        height={50}\n        fill={isSelected ? \"goldenrod\" : \"red\"}\n      />\n    );\n    rect = { p1: ZeroPoint, p2: { x: 50, y: 50 } };\n  } else {\n    const { hitRect } = def.visual;\n    body = getNodeVisualElement(nodeId, circuitNodePath, nodeState, def.visual);\n    rect = hitRect;\n  }\n\n  const transform = x != 0 || y != 0 ? `translate(${x}, ${y})` : undefined;\n  return (\n    <g transform={transform}>\n      <g\n        className={cls(\"circuit-field-node\", isSelected && \"node-selected\")}\n        onMouseDown={onMouseDown}\n        onContextMenu={onContextMenu}\n      >\n        {body}\n      </g>\n      <NodeName nodeId={nodeId} hitRect={rect} />\n      {renderContextMenu(<NodeContextMenu nodeId={nodeId} />)}\n    </g>\n  );\n});\n\ninterface NodeNameProps extends NodeProps {\n  hitRect: Rectangle;\n}\nconst NodeName: React.FC<NodeNameProps> = React.memo(function NodeName({\n  nodeId,\n  hitRect,\n}) {\n  const { zoomFactor } = useViewportContext();\n  const nodeName = useSelector((s) =>\n    nodeFieldDisplayNameFromNodeId(s, nodeId)\n  );\n\n  // FIXME: This is really rough, especially the y offset.\n  // There is a noticable jump in position between >1 and >1 scale.\n  const textScale = Math.max(0.7, zoomFactor);\n  let textYOffset = 15;\n  if (textScale > 1) {\n    textYOffset -= textScale * 2;\n  } else {\n    textYOffset += (1 / textScale) * 7;\n  }\n\n  if (!nodeName) {\n    return null;\n  }\n\n  return (\n    <text\n      fontSize={`${1.2 / textScale}em`}\n      className={interaction[\"text-unselectable\"]}\n      textAnchor=\"middle\"\n      x={hitRect.p1.x + (hitRect.p2.x - hitRect.p1.x) / 2}\n      y={hitRect.p2.y + textYOffset}\n    >\n      {nodeName}\n    </text>\n  );\n});\n\nexport default Node;\n","import Node from \"./Node\";\nexport * from \"./Node\";\nexport default Node;\n","import * as React from \"react\";\n\nimport useSelector from \"@/hooks/useSelector\";\n\nimport { nodeIdsFromCircuitIdSelector } from \"@/services/circuits/selectors/nodes\";\n\nimport { useCircuitField } from \"../../../circuit-field-context\";\n\nimport Node from \"./Node\";\n\nconst NodesLayer: React.FC = React.memo(function NodesLayer() {\n  const { circuitId } = useCircuitField();\n  const nodeIds = useSelector((state) =>\n    nodeIdsFromCircuitIdSelector(state, circuitId)\n  );\n\n  const nodeElements = nodeIds.map((nodeId) => {\n    return <Node key={nodeId} nodeId={nodeId} />;\n  });\n\n  return <g id=\"nodes-layer\">{nodeElements}</g>;\n});\nexport default NodesLayer;\n","import { AppState } from \"@/store\";\n\nimport {\n  connectionFromConnectionIdSelector,\n  connectionIdFromInputPinSelector,\n} from \"@/services/node-graph/selectors/connections\";\nimport { nodeTypeFromNodeIdSelector } from \"@/services/node-graph/selectors/nodes\";\n\nimport { nodeOutputsFromCircuitNodeIdSelector } from \"./nodes\";\nimport { NodePin } from \"@/services/node-graph/types\";\n\n// Doesn't need caching for react since it returns primitives, but\n// the additional complexity of tracing IC pins might make it a bit heavy.\nexport const wireValueFromConnectionIdSelector = (\n  state: AppState,\n  icNodePath: string[],\n  connectionId: string\n): boolean => {\n  const connection = connectionFromConnectionIdSelector(state, connectionId);\n  if (!connection) {\n    return false;\n  }\n\n  const {\n    outputPin: { nodeId, pinId },\n  } = connection;\n\n  const nodeType = nodeTypeFromNodeIdSelector(state, nodeId);\n  if (nodeType === \"pin-input\") {\n    // TODO: The ultimate connection id from the input pin is a good candidate\n    // for caching in its own selector, as the ultimate source connection\n    // id of a pin is something that only changes with the simulator graph.\n\n    // The node id of the ic is the ic-node we are contained in.\n    const nextIcNodePath = icNodePath.slice(0, icNodePath.length - 1);\n    const nextPin: NodePin = {\n      nodeId: icNodePath[icNodePath.length - 1], // target node is our parent.\n      pinId: nodeId, // target pin is the same as the node id for the input node.\n    };\n\n    const nextConnectionId = connectionIdFromInputPinSelector(state, nextPin);\n    if (!nextConnectionId) {\n      return false;\n    }\n\n    return wireValueFromConnectionIdSelector(\n      state,\n      nextIcNodePath,\n      nextConnectionId\n    );\n  } else if (nodeType?.startsWith(\"ic-\")) {\n    // Target the ic our output comes from\n    const nextIcNodePath = [...icNodePath, nodeId];\n    const nextPin: NodePin = {\n      nodeId: pinId, // output node id is the same as the target pin id\n      pinId: \"IN\",\n    };\n\n    const nextConnectionId = connectionIdFromInputPinSelector(state, nextPin);\n    if (!nextConnectionId) {\n      return false;\n    }\n\n    return wireValueFromConnectionIdSelector(\n      state,\n      nextIcNodePath,\n      nextConnectionId\n    );\n  } else {\n    const outputs = nodeOutputsFromCircuitNodeIdSelector(state, [\n      ...icNodePath,\n      nodeId,\n    ]);\n    if (!outputs) {\n      return false;\n    }\n    return outputs[pinId] || false;\n  }\n};\n","import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport {\n  Point,\n  normalize,\n  pointSubtract,\n  dotProduct,\n  pointAdd,\n  scale,\n} from \"@/geometry\";\nimport { getModifiers } from \"@/modifier-keys\";\nimport { getSelectMode } from \"@/selection-mode\";\n\nimport useSelector from \"@/hooks/useSelector\";\nimport useMouseTracking from \"@/hooks/useMouseTracking\";\n\nimport { fieldDragStartNewJoint } from \"@/actions/field-drag-start-newjoint\";\nimport { fieldDragContinue } from \"@/actions/field-drag-continue\";\nimport { fieldDragEnd } from \"@/actions/field-drag-end\";\nimport { selectWires } from \"@/actions/select-wires\";\n\nimport {\n  wireJointPositionFromJointIdSelector,\n  wireStartPositionFromConnectionIdSelector,\n  wireEndPositionFromConnectionIdSelector,\n} from \"@/services/node-layout/selectors/wires\";\nimport { isSimActiveSelector } from \"@/services/simulator-control/selectors/run\";\nimport { isDraggingSelector } from \"@/services/circuit-editor-ui-drag/selectors/drag\";\n\nimport { useEventMouseCoords } from \"../hooks/useMouseCoords\";\n\nexport interface WireSegmentProps {\n  connectionId: string;\n  startJointId: string | null;\n  endJointId: string | null;\n}\nconst WireSegment: React.FC<WireSegmentProps> = React.memo(\n  function WireSegment({ connectionId, startJointId, endJointId }) {\n    const dispatch = useDispatch();\n    const getMouseCoords = useEventMouseCoords();\n    const isSimActive = useSelector(isSimActiveSelector);\n    const isDragging = useSelector(isDraggingSelector);\n\n    const start = useSelector((state) => {\n      if (startJointId == null) {\n        return wireStartPositionFromConnectionIdSelector(state, connectionId);\n      }\n      return wireJointPositionFromJointIdSelector(state, startJointId);\n    });\n\n    const end = useSelector((state) => {\n      if (endJointId == null) {\n        return wireEndPositionFromConnectionIdSelector(state, connectionId);\n      }\n      return wireJointPositionFromJointIdSelector(state, endJointId);\n    });\n\n    const [mousePos, setMousePos] = React.useState<Point | null>(null);\n\n    const onMouseMove = React.useCallback(\n      (e: React.MouseEvent) => {\n        const p = getMouseCoords(e);\n        setMousePos(p);\n      },\n      [getMouseCoords]\n    );\n\n    const onMouseLeave = React.useCallback(() => {\n      setMousePos(null);\n    }, []);\n\n    const onDragStart = React.useCallback(\n      (e: MouseEvent) => {\n        const p = getMouseCoords(e);\n        const modifiers = getModifiers(e);\n        dispatch(\n          fieldDragStartNewJoint(connectionId, startJointId, p, modifiers)\n        );\n      },\n      [getMouseCoords, dispatch, connectionId, startJointId]\n    );\n\n    const onDragMove = React.useCallback(\n      (_, e: MouseEvent) => {\n        const p = getMouseCoords(e);\n        const modifiers = getModifiers(e);\n        dispatch(fieldDragContinue(p, modifiers));\n      },\n      [dispatch, getMouseCoords]\n    );\n\n    const onDragEnd = React.useCallback(\n      (_, e: MouseEvent) => {\n        const p = getMouseCoords(e);\n        const modifiers = getModifiers(e);\n        dispatch(fieldDragEnd(p, modifiers));\n      },\n      [dispatch, getMouseCoords]\n    );\n\n    const onClick = React.useCallback(\n      (e: MouseEvent) => {\n        const modifiers = getModifiers(e);\n        const mode = getSelectMode(modifiers);\n        dispatch(selectWires(connectionId, mode));\n      },\n      [connectionId, dispatch]\n    );\n\n    const { startTracking } = useMouseTracking({\n      onClick,\n      onDragStart,\n      onDragMove,\n      onDragEnd,\n    });\n\n    const onJointInsertMouseDown = React.useCallback(\n      (e: React.MouseEvent) => {\n        e.preventDefault();\n        if (isSimActive) {\n          return;\n        }\n\n        startTracking(e);\n      },\n      [isSimActive, startTracking]\n    );\n\n    let insertJointPos: Point | undefined;\n    if (!isDragging && !isSimActive && mousePos) {\n      const lineDir = normalize(pointSubtract(end, start));\n      const v = pointSubtract(mousePos, start);\n      const d = dotProduct(v, lineDir);\n      insertJointPos = pointAdd(start, scale(lineDir, d));\n    }\n\n    return (\n      <g onMouseMove={onMouseMove} onMouseLeave={onMouseLeave}>\n        <line x1={start.x} y1={start.y} x2={end.x} y2={end.y} strokeWidth={2} />\n        {endJointId == null && <circle cx={end.x} cy={end.y} r={1.5} />}\n        {insertJointPos && (\n          <circle\n            cx={insertJointPos.x}\n            cy={insertJointPos.y}\n            r={3}\n            stroke=\"none\"\n            fill=\"red\"\n            onMouseDown={onJointInsertMouseDown}\n          />\n        )}\n      </g>\n    );\n  }\n);\n\nexport default WireSegment;\n","import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { Point } from \"@/geometry\";\nimport { getModifiers } from \"@/modifier-keys\";\nimport { getSelectMode } from \"@/selection-mode\";\n\nimport useSelector from \"@/hooks/useSelector\";\nimport useMouseTracking from \"@/hooks/useMouseTracking\";\n\nimport { wireJointPositionFromJointIdSelector } from \"@/services/node-layout/selectors/wires\";\nimport { isJointSelectedFromJointIdSelector } from \"@/services/selection/selectors/selection\";\nimport { isSimActiveSelector } from \"@/services/simulator-control/selectors/run\";\n\nimport { selectWireJoints } from \"@/actions/select-wire-joints\";\nimport { fieldDragStartJoint } from \"@/actions/field-drag-start-joint\";\nimport { fieldDragEnd } from \"@/actions/field-drag-end\";\nimport { fieldDragContinue } from \"@/actions/field-drag-continue\";\n\nimport { useEventMouseCoords } from \"../hooks/useMouseCoords\";\n\nimport WireJointVisual from \"./WireJointVisual\";\n\ninterface WireJointProps {\n  jointId: string;\n}\n\nconst WireJoint: React.FC<WireJointProps> = React.memo(function WireJoint({\n  jointId,\n}) {\n  const getMouseCoords = useEventMouseCoords();\n  const dispatch = useDispatch();\n  const isSimActive = useSelector(isSimActiveSelector);\n\n  const isSelected = useSelector((state) =>\n    isJointSelectedFromJointIdSelector(state, jointId)\n  );\n\n  const position = useSelector((state) =>\n    wireJointPositionFromJointIdSelector(state, jointId)\n  );\n  const onJointDragStart = React.useCallback(\n    (e: MouseEvent) => {\n      const p = getMouseCoords(e);\n      const modifiers = getModifiers(e);\n      dispatch(fieldDragStartJoint(jointId, p, modifiers));\n    },\n    [dispatch, getMouseCoords, jointId]\n  );\n\n  const onJointDragMove = React.useCallback(\n    (offset: Point, e: MouseEvent) => {\n      const p = getMouseCoords(e);\n      const modifiers = getModifiers(e);\n      dispatch(fieldDragContinue(p, modifiers));\n    },\n    [dispatch, getMouseCoords]\n  );\n\n  const onJointDragEnd = React.useCallback(\n    (offset: Point, e: MouseEvent) => {\n      const p = getMouseCoords(e);\n      const modifiers = getModifiers(e);\n      dispatch(fieldDragEnd(p, modifiers));\n    },\n    [dispatch, getMouseCoords]\n  );\n\n  const onClick = React.useCallback(\n    (e: MouseEvent) => {\n      const modifiers = getModifiers(e);\n      const mode = getSelectMode(modifiers);\n      dispatch(selectWireJoints(jointId, mode));\n    },\n    [dispatch, jointId]\n  );\n\n  const { startTracking: startMoveJointTracking } = useMouseTracking({\n    onClick,\n    onDragStart: onJointDragStart,\n    onDragMove: onJointDragMove,\n    onDragEnd: onJointDragEnd,\n  });\n\n  const mouseDown = React.useCallback(\n    (e: React.MouseEvent) => {\n      if (isSimActive) {\n        return;\n      }\n\n      if (e.defaultPrevented) {\n        return;\n      }\n      e.preventDefault();\n\n      startMoveJointTracking(e);\n    },\n    [isSimActive, startMoveJointTracking]\n  );\n\n  return (\n    <WireJointVisual\n      interactable={!isSimActive}\n      selected={isSelected}\n      x={position.x}\n      y={position.y}\n      onMouseDown={mouseDown}\n    />\n  );\n});\n\nexport default WireJoint;\n","import Wire from \"./Wire\";\nexport default Wire;\n","import * as React from \"react\";\n\nimport { cls } from \"@/utils\";\nimport useSelector from \"@/hooks/useSelector\";\n\nimport { wireJointIdsFromConnectionIdSelector } from \"@/services/node-layout/selectors/wires\";\nimport { isWireSelectedFromConnectionIdSelector } from \"@/services/selection/selectors/selection\";\nimport { wireValueFromConnectionIdSelector } from \"@/services/simulator/selectors/wires\";\n\nimport { useCircuitField } from \"../../../../circuit-field-context\";\n\nimport WireSegment from \"../WireSegment\";\nimport WireJoint from \"../WireJoint\";\n\nimport styles from \"./Wire.module.css\";\n\nexport interface WireProps {\n  connectionId: string;\n}\n\nconst Wire: React.FC<WireProps> = React.memo(function Wire({ connectionId }) {\n  const { circuitNodePath } = useCircuitField();\n\n  const jointIds = useSelector((state) =>\n    wireJointIdsFromConnectionIdSelector(state, connectionId)\n  );\n  const isPowered = useSelector((state) =>\n    wireValueFromConnectionIdSelector(state, circuitNodePath, connectionId)\n  );\n  const isSelected = useSelector((state) =>\n    isWireSelectedFromConnectionIdSelector(state, connectionId)\n  );\n\n  // We need one extra array entry for starting on the last jointId and ending at null (end of wire)\n  const segmentElements = [...jointIds, null].map((endJointId, index) => {\n    const startJointId = index > 0 ? jointIds[index - 1] : null;\n    return (\n      <WireSegment\n        key={index}\n        connectionId={connectionId}\n        startJointId={startJointId}\n        endJointId={endJointId}\n      />\n    );\n  });\n\n  const jointElements = jointIds.map((jointId) => (\n    <WireJoint key={jointId} jointId={jointId} />\n  ));\n\n  return (\n    <g\n      className={cls(\n        styles[\"wire\"],\n        isPowered && styles[\"powered\"],\n        isSelected && styles[\"selected\"]\n      )}\n    >\n      {segmentElements}\n      {jointElements}\n    </g>\n  );\n});\n\nexport default Wire;\n","// extracted by mini-css-extract-plugin\nexport default {\"wire\":\"wire--2ESXn\",\"powered\":\"powered--317-6\",\"selected\":\"selected--2WM72\"};","import * as React from \"react\";\n\nimport useSelector from \"@/hooks/useSelector\";\n\nimport { connectionIdsByCircuitIdSelector } from \"@/services/circuits/selectors/connections\";\n\nimport { useCircuitField } from \"../../../circuit-field-context\";\n\nimport Wire from \"./Wire\";\n\nconst WiresLayer: React.FC = React.memo(function WiresLayer() {\n  const { circuitId } = useCircuitField();\n  const connectionIds = useSelector((state) =>\n    connectionIdsByCircuitIdSelector(state, circuitId)\n  );\n  const connectorElements = connectionIds.map((connectionId) => (\n    <Wire key={connectionId} connectionId={connectionId} />\n  ));\n\n  return <g id=\"wires-layer\">{connectorElements}</g>;\n});\nexport default WiresLayer;\n","// extracted by mini-css-extract-plugin\nexport default {\"node-pin-output\":\"node-pin-output--2MDEG\",\"highlight\":\"highlight--1PHIy\",\"is-drag-target\":\"is-drag-target--2mBxU\",\"node-pin-input\":\"node-pin-input--2AbG5\"};","import NodePin from \"./NodePin\";\nexport default NodePin;\n","import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { cls } from \"@/utils\";\nimport { Point } from \"@/geometry\";\nimport { getModifiers } from \"@/modifier-keys\";\nimport { describeArc } from \"@/svg\";\n\nimport useSelector from \"@/hooks/useSelector\";\nimport useMouseTracking from \"@/hooks/useMouseTracking\";\n\nimport { nodePinPositionFromNodePinSelector } from \"@/services/node-layout/selectors/node-pin-positions\";\nimport { pinDirectionFromNodePinSelector } from \"@/services/node-graph/selectors/pins\";\nimport { dragWireTargetPinSelector } from \"@/services/circuit-editor-ui-drag/selectors/drag\";\n\nimport { fieldDragStartWire } from \"@/actions/field-drag-start-wire\";\nimport { fieldDragEnd } from \"@/actions/field-drag-end\";\nimport { fieldDragContinue } from \"@/actions/field-drag-continue\";\n\nimport { useEventMouseCoords } from \"../../hooks/useMouseCoords\";\n\nimport styles from \"./NodePin.module.css\";\n\nexport interface NodePinProps {\n  nodeId: string;\n  pinId: string;\n}\n\nconst NodePin: React.FC<NodePinProps> = React.memo(function NodePin({\n  nodeId,\n  pinId,\n}) {\n  const getMouseCoords = useEventMouseCoords();\n  const [highlight, setHighlight] = React.useState(false);\n  const dispatch = useDispatch();\n\n  const position = useSelector((s) =>\n    nodePinPositionFromNodePinSelector(s, nodeId, pinId)\n  );\n  const direction = useSelector((s) =>\n    pinDirectionFromNodePinSelector(s, nodeId, pinId)\n  );\n\n  const dragTargetPin = useSelector(dragWireTargetPinSelector);\n\n  const onDragStart = React.useCallback(\n    (e) => {\n      const p = getMouseCoords(e);\n      dispatch(fieldDragStartWire(p, { nodeId, pinId }));\n    },\n    [dispatch, getMouseCoords, nodeId, pinId]\n  );\n\n  const onDragMove = React.useCallback(\n    (offset: Point, e: MouseEvent) => {\n      const p = getMouseCoords(e);\n      const modifierKeys = getModifiers(e);\n      dispatch(fieldDragContinue(p, modifierKeys));\n    },\n    [dispatch, getMouseCoords]\n  );\n\n  const onDragEnd = React.useCallback(\n    (offset: Point, e: MouseEvent) => {\n      const p = getMouseCoords(e);\n      const modifiers = getModifiers(e);\n      dispatch(fieldDragEnd(p, modifiers));\n    },\n    [dispatch, getMouseCoords]\n  );\n\n  const { startTracking } = useMouseTracking({\n    onDragStart,\n    onDragMove,\n    onDragEnd,\n  });\n\n  const onMouseDown = React.useCallback(\n    (e: React.MouseEvent) => {\n      if (e.button !== 0) {\n        return;\n      }\n\n      if (e.defaultPrevented) {\n        return;\n      }\n      e.preventDefault();\n\n      e.stopPropagation();\n\n      startTracking(e);\n    },\n    [startTracking]\n  );\n\n  const onMouseEnter = React.useCallback(() => {\n    setHighlight(true);\n  }, []);\n  const onMouseLeave = React.useCallback(() => {\n    setHighlight(false);\n  }, []);\n\n  if (!position) {\n    return null;\n  }\n\n  const isDragTarget =\n    dragTargetPin != null &&\n    dragTargetPin.nodeId === nodeId &&\n    dragTargetPin.pinId === pinId;\n\n  const { x, y } = position;\n\n  let pinVisual: JSX.Element;\n\n  if (direction === \"input\") {\n    pinVisual = (\n      <path\n        d={describeArc(x, y, 4, -45, 225)}\n        strokeWidth={2}\n        className={cls(\n          styles[\"node-pin-input\"],\n          isDragTarget && styles[\"is-drag-target\"],\n          highlight && styles.highlight\n        )}\n      />\n    );\n  } else {\n    pinVisual = (\n      <circle\n        className={cls(\n          styles[\"node-pin-output\"],\n          isDragTarget && styles[\"is-drag-target\"],\n          highlight && styles.highlight\n        )}\n        cx={x}\n        cy={y}\n        r={3}\n      />\n    );\n  }\n\n  return (\n    <g onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave}>\n      {pinVisual}\n      <circle\n        stroke=\"none\"\n        fill=\"transparent\"\n        cx={x}\n        cy={y}\n        r={5}\n        onMouseDown={onMouseDown}\n      />\n    </g>\n  );\n});\n\nexport default NodePin;\n","import * as React from \"react\";\n\nimport useSelector from \"@/hooks/useSelector\";\n\nimport { nodeDefFromNodeIdSelector } from \"@/services/node-graph/selectors/node-def\";\n\nimport NodePin from \"./NodePin\";\n\nexport interface NodePinsProps {\n  nodeId: string;\n}\n\nconst NodePins: React.FC<NodePinsProps> = React.memo(function NodePins({\n  nodeId,\n}) {\n  const def = useSelector((state) => nodeDefFromNodeIdSelector(state, nodeId));\n\n  const pins = def?.pins ?? {};\n\n  const elements = Object.keys(pins).map((pinId) => (\n    <NodePin key={pinId} nodeId={nodeId} pinId={pinId} />\n  ));\n\n  return <>{elements}</>;\n});\n\nexport default NodePins;\n","import * as React from \"react\";\n\nimport useSelector from \"@/hooks/useSelector\";\n\nimport { nodeIdsFromCircuitIdSelector } from \"@/services/circuits/selectors/nodes\";\n\nimport { useCircuitField } from \"../../../circuit-field-context\";\n\nimport NodePins from \"./NodePins\";\n\nconst NodePinsLayer: React.FC = React.memo(function NodePinsLayer() {\n  const { circuitId } = useCircuitField();\n  const nodeIds = useSelector((state) =>\n    nodeIdsFromCircuitIdSelector(state, circuitId)\n  );\n\n  const elements = nodeIds.map((nodeId) => (\n    <NodePins key={nodeId} nodeId={nodeId} />\n  ));\n\n  return <g id=\"node-pins-layer\">{elements}</g>;\n});\n\nexport default NodePinsLayer;\n","import * as React from \"react\";\n\nimport useSelector from \"@/hooks/useSelector\";\n\nimport {\n  dragEndSelector,\n  dragModeSelector,\n  dragStartSelector,\n  isDragForCircuitSelector,\n} from \"@/services/circuit-editor-ui-drag/selectors/drag\";\n\nimport { useCircuitField } from \"../../../circuit-field-context\";\n\nconst DragAttachWirePreviewLayer: React.FC = React.memo(\n  function DragAttachWirePreviewLayer() {\n    const { circuitId } = useCircuitField();\n    const isDragForSelf = useSelector((state) =>\n      isDragForCircuitSelector(state, circuitId)\n    );\n    const dragMode = useSelector(dragModeSelector);\n    const dragStart = useSelector(dragStartSelector);\n    const dragEnd = useSelector(dragEndSelector);\n\n    if (!isDragForSelf || dragMode != \"wire\" || !dragStart || !dragEnd) {\n      return null;\n    }\n\n    return (\n      <line\n        x1={dragStart.x}\n        y1={dragStart.y}\n        x2={dragEnd.x}\n        y2={dragEnd.y}\n        stroke=\"black\"\n        strokeWidth={1}\n      />\n    );\n  }\n);\n\nexport default DragAttachWirePreviewLayer;\n","import CircuitFieldSurface from \"./CircuitFieldSurface\";\nexport default CircuitFieldSurface;\n","import * as React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useDrop } from \"react-dnd\";\n\nimport { fieldMouseLeave } from \"@/actions/field-mouse-leave\";\n\nimport { NEW_NODE_DRAG_OBJECT } from \"../../drag-items/new-node\";\n\nimport { FieldSvgElementProvider } from \"./contexts/fieldSvgElement\";\n\nimport DragNewNodeLayer from \"./components/DragNewNodeLayer\";\nimport DragNodePreviewLayer from \"./components/DragNodePreviewLayer\";\nimport DragJointPreviewLayer from \"./components/DragJointPreviewLayer\";\nimport DragSelectLayer from \"./components/DragSelectLayer\";\nimport GridBackground from \"./components/GridBackground\";\nimport NodesLayer from \"./components/NodesLayer\";\nimport WiresLayer from \"./components/WiresLayer\";\nimport NodePinsLayer from \"./components/NodePinsLayer\";\nimport DragAttachWirePreviewLayer from \"./components/DragAttachWirePreviewLayer\";\n\nimport styles from \"./CircuitFieldSurface.module.css\";\nimport { useViewportContext } from \"../../viewport-context\";\n\nexport interface CircuitFieldSurfaceProps {\n  width: number;\n  height: number;\n  onContextMenu(e: React.MouseEvent): void;\n}\nconst CircuitFieldSurface: React.FC<CircuitFieldSurfaceProps> = ({\n  width,\n  height,\n  onContextMenu: openContextMenu,\n}) => {\n  const dispatch = useDispatch();\n  const { zoomFactor } = useViewportContext();\n\n  const svgRef = React.useRef<SVGSVGElement | null>(null);\n  const scalerRef = React.useRef<SVGGElement | null>(null);\n\n  const onMouseDown = React.useCallback(() => {\n    svgRef.current?.focus();\n  }, []);\n\n  const onMouseLeave = React.useCallback(() => {\n    dispatch(fieldMouseLeave());\n  }, [dispatch]);\n\n  const onContextMenu = React.useCallback(\n    (e: React.MouseEvent) => {\n      if (e.defaultPrevented) {\n        return;\n      }\n      e.preventDefault();\n      openContextMenu(e);\n    },\n    [openContextMenu]\n  );\n\n  // We need to capture the drag event at a deeper parent,\n  // because mouse events cannot pass through DragNewNodeLayer's\n  // drag capture rect to the underlying DragSelectLayer and other elements.\n  // In contrast, we cannot handle the drag here as\n  // we do not know the coordinate system from our scaler.\n  // Instead, just capture whether or not we are being dragged into,\n  // and enable the new node drag layer only when we are dragging.\n  const [{ isDragging }, dragRef] = useDrop({\n    accept: NEW_NODE_DRAG_OBJECT,\n    collect: (monitor) => {\n      return {\n        isDragging: monitor.isOver(),\n      };\n    },\n  });\n\n  return (\n    <svg\n      tabIndex={-1}\n      ref={(ref) => {\n        svgRef.current = ref;\n        dragRef(ref);\n      }}\n      width={width}\n      height={height}\n      onMouseDown={onMouseDown}\n      onMouseLeave={onMouseLeave}\n      onContextMenu={onContextMenu}\n      className={styles[\"circuit-field-svg\"]}\n    >\n      <GridBackground />\n      <g\n        ref={scalerRef}\n        transform-origin=\"0 0\"\n        transform={`scale(${zoomFactor})`}\n      >\n        <FieldSvgElementProvider svgRef={svgRef} scalerRef={scalerRef}>\n          <DragSelectLayer />\n          <NodesLayer />\n          <WiresLayer />\n          <NodePinsLayer />\n          <DragAttachWirePreviewLayer />\n          <DragNodePreviewLayer />\n          <DragJointPreviewLayer />\n          {isDragging && <DragNewNodeLayer />}\n        </FieldSvgElementProvider>\n      </g>\n    </svg>\n  );\n};\n\nexport default CircuitFieldSurface;\n","// extracted by mini-css-extract-plugin\nexport default {\"circuit-field-svg\":\"circuit-field-svg--1lQh_\"};","import * as React from \"react\";\n\nimport { cls } from \"@/utils\";\nimport { calcSize } from \"@/geometry\";\n\nimport useSelector from \"@/hooks/useSelector\";\nimport { useNativeEvent } from \"@/hooks/useNativeEvent\";\nimport { useComponentBounds } from \"@/hooks/useComponentBounds\";\n\nimport { fieldRectSelector } from \"@/services/node-layout/selectors/field\";\nimport { isSimActiveSelector } from \"@/services/simulator-control/selectors/run\";\n\nimport { useContextMenu } from \"@/components/ContextMenu\";\n\nimport FieldContextMenu from \"./components/FieldContextMenu\";\nimport CircuitFieldSurface from \"./components/CircuitFieldSurface\";\n\nimport { CircuitFieldProvider } from \"./circuit-field-context\";\n\nimport styles from \"./CircuitField.module.css\";\nimport {\n  useViewportContext,\n  ViewportContextProvider,\n} from \"./viewport-context\";\n\nexport interface CircuitFieldProps {\n  className?: string;\n  circuitId: string;\n  circuitNodePath: string[];\n}\n\nconst CircuitField: React.FC<CircuitFieldProps> = ({\n  className,\n  circuitId,\n  circuitNodePath,\n}) => {\n  const isSimActive = useSelector(isSimActiveSelector);\n\n  const { openContextMenu, renderContextMenu } = useContextMenu();\n\n  // svg seems to have an implicit bottom margin against its parent div\n  // Wrapping it in a div of the same size fixes it.\n  return (\n    <CircuitFieldProvider\n      circuitId={circuitId}\n      circuitNodePath={circuitNodePath}\n    >\n      <div\n        className={cls(\n          \"circuit-field\",\n          styles[\"circuit-field\"],\n          isSimActive && \"simulator-active\",\n          className\n        )}\n      >\n        <div className={styles[\"circuit-field-scrollarea\"]}>\n          <ViewportContextProvider>\n            <ZoomingCircuitFieldSurface onContextMenu={openContextMenu} />\n          </ViewportContextProvider>\n        </div>\n        {renderContextMenu(<FieldContextMenu />)}\n      </div>\n    </CircuitFieldProvider>\n  );\n};\n\ninterface ZoomingCircuitFieldSurface {\n  onContextMenu(e: React.MouseEvent): void;\n}\nconst ZoomingCircuitFieldSurface: React.FC<ZoomingCircuitFieldSurface> = ({\n  onContextMenu,\n}) => {\n  const sizeRef = React.useRef<HTMLDivElement | null>(null);\n  const { width: componentWidth, height: componentHeight } = useComponentBounds(\n    sizeRef\n  );\n\n  const { zoomFactor, zoom } = useViewportContext();\n\n  const fieldRect = useSelector(fieldRectSelector);\n  const { width: fieldWidth, height: fieldHeight } = calcSize(fieldRect);\n\n  const width = Math.max(componentWidth, fieldWidth * zoomFactor);\n  const height = Math.max(componentHeight, fieldHeight * zoomFactor);\n\n  const onWheel = React.useCallback(\n    (e: WheelEvent) => {\n      if (e.defaultPrevented) {\n        return;\n      }\n\n      if (e.ctrlKey) {\n        zoom(e.deltaY > 0 ? -1 : 1);\n        e.preventDefault();\n        e.stopPropagation();\n      }\n    },\n    [zoom]\n  );\n\n  // React listens to the root listener for all events,\n  //  and chrome assumes the root event listener for mouse events\n  //  never wants to preventDefault.\n  // We need to take a local event listener and mark it as not passive.\n  // https://github.com/facebook/react/issues/14856\n  useNativeEvent(sizeRef, \"wheel\", onWheel, { passive: false });\n\n  return (\n    <div ref={sizeRef} style={{ width: \"100%\", height: \"100%\" }}>\n      <CircuitFieldSurface\n        width={width}\n        height={height}\n        onContextMenu={onContextMenu}\n      />\n    </div>\n  );\n};\n\nexport default CircuitField;\n","import * as React from \"react\";\n\nexport function useNativeEvent<\n  T extends GlobalEventHandlers,\n  K extends keyof GlobalEventHandlersEventMap\n>(\n  ref: React.RefObject<T | null>,\n  type: K,\n  listener: (\n    this: GlobalEventHandlers,\n    ev: GlobalEventHandlersEventMap[K]\n  ) => any,\n  options?: boolean | AddEventListenerOptions\n) {\n  React.useEffect(() => {\n    if (!ref.current) {\n      return;\n    }\n\n    // De-reference the target so we remove from the right element.\n    const listenTarget = ref.current;\n\n    listenTarget.addEventListener(type, listener, options);\n    return () => {\n      listenTarget.removeEventListener(type, listener, options);\n    };\n  }, [type, listener, ref, options]);\n}\n","import CircuitField from \"./CircuitField\";\nexport default CircuitField;\n","// extracted by mini-css-extract-plugin\nexport default {\"circuit-field\":\"circuit-field--3PQBN\",\"circuit-field-scrollarea\":\"circuit-field-scrollarea--vyu82\"};","// extracted by mini-css-extract-plugin\nexport default {\"icon\":\"icon--3Vly6\"};","import * as React from \"react\";\n\nimport { cls } from \"@/utils\";\n\nimport styles from \"./Icons.module.css\";\n\nconst CloseIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => {\n  return (\n    <svg\n      width={16}\n      height={16}\n      {...props}\n      className={cls(styles.icon, props.className)}\n    >\n      <path d=\"M4,4 L12,12 M4,12 L12,4\" />\n    </svg>\n  );\n};\n\nexport default CloseIcon;\n","import * as React from \"react\";\n\nimport { useDrag } from \"react-dnd\";\n\nimport { cls } from \"@/utils\";\n\nimport { tesselWindowDragObject } from \"./drag-items/tessel-window\";\n\nimport { useTesselInteraction, useTesselPath } from \"./TesselContext\";\nimport TesselDropCapture from \"./TesselDropCapture\";\n\nimport styles from \"./Tessel.module.css\";\nimport CloseIcon from \"../Icons/Close\";\n\nexport interface TesselWindowProps {\n  className?: string;\n  title: string;\n}\nconst TesselWindow: React.FC<TesselWindowProps> = ({\n  title,\n  className,\n  children,\n}) => {\n  const path = useTesselPath();\n\n  const { closeWindow } = useTesselInteraction();\n  const onCloseWindow = React.useCallback(() => {\n    closeWindow(path);\n  }, [closeWindow, path]);\n\n  const [, dragSourceRef] = useDrag({\n    item: tesselWindowDragObject(path),\n  });\n\n  return (\n    <TesselDropCapture className={styles[\"tessel-window\"]}>\n      <div ref={dragSourceRef} className={styles[\"tessel-window-titlebar\"]}>\n        <div className={styles[\"tessel-window-title\"]}>{title}</div>\n        <div className={styles[\"tessel-window-controls\"]}>\n          <CloseIcon\n            className={styles[\"tessel-window-controls-close\"]}\n            onClick={onCloseWindow}\n          />\n        </div>\n      </div>\n      <div className={cls(styles[\"tessel-window-content\"], className)}>\n        {children}\n      </div>\n    </TesselDropCapture>\n  );\n};\n\nexport default TesselWindow;\n","import { keyboardCommandModifier } from \"@/runtime-env\";\n\nexport const KEYMAP_SIM_STEP = \"keymap:CircuitEditor/SimStep\" as const;\nexport const KEYMAP_SIM_FASTFORWARD = \"keymap:CircuitEditor/SimFastForward\" as const;\nexport const KEYMAP_SELECT_ALL = \"keymap:CircuitEditor/SelectAll\" as const;\nexport const KEYMAP_COPY = \"keymap:CircuitEditor/Copy\" as const;\nexport const KEYMAP_PASTE = \"keymap:CircuitEditor/Paste\" as const;\nexport const KEYMAP_DELETE = \"keymap:CircuitEditor/Delete\" as const;\nexport const KEYMAP_UNDO = \"keymap:CircuitEditor/Undo\" as const;\nexport const KEYMAP_REDO = \"keymap:CircuitEditor/Redo\" as const;\n\nconst keymap = {\n  [KEYMAP_SIM_STEP]: \"space\",\n  [KEYMAP_SIM_FASTFORWARD]: \"shift+space\",\n  [KEYMAP_SELECT_ALL]: `${keyboardCommandModifier}+a`,\n  [KEYMAP_COPY]: `${keyboardCommandModifier}+c`,\n  [KEYMAP_PASTE]: `${keyboardCommandModifier}+v`,\n  [KEYMAP_DELETE]: [\"backspace\", \"del\"],\n  [KEYMAP_UNDO]: `${keyboardCommandModifier}+z`,\n  [KEYMAP_REDO]: [\n    `${keyboardCommandModifier}+y`,\n    `${keyboardCommandModifier}+shift+z`,\n  ],\n};\nexport default keymap;\n\nexport type KeymapKeys = keyof typeof keymap;\nexport type KeymapHandler = Record<KeymapKeys, HotkeyHandler>;\n","import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { HotKeys } from \"react-hotkeys\";\nimport { AnyAction } from \"redux\";\n\nimport { cls } from \"@/utils\";\nimport useSelector from \"@/hooks/useSelector\";\n\nimport sizing from \"@/styles/sizing.module.css\";\nimport flex from \"@/styles/flex.module.css\";\n\nimport { tickSim } from \"@/actions/sim-tick\";\nimport { fastForwardSim } from \"@/actions/sim-fastforward\";\nimport { paste } from \"@/actions/clipboard-paste\";\nimport { copySelection } from \"@/actions/selection-copy\";\nimport { deleteSelection } from \"@/actions/selection-delete\";\nimport { selectAll } from \"@/actions/select-all\";\nimport { undo } from \"@/actions/undo\";\nimport { redo } from \"@/actions/redo\";\nimport { activateView } from \"@/actions/view-activate\";\n\nimport CircuitNodeBreadcrumb from \"@/components/CircuitNodeBreadcrumb\";\nimport CircuitField from \"@/components/CircuitField\";\nimport TesselWindow from \"@/components/Tessel/TesselWindow\";\nimport { useTesselPath } from \"@/components/Tessel/TesselContext\";\n\nimport keymap, {\n  KeymapHandler,\n  KEYMAP_SIM_STEP,\n  KEYMAP_SIM_FASTFORWARD,\n  KEYMAP_COPY,\n  KEYMAP_PASTE,\n  KEYMAP_DELETE,\n  KEYMAP_SELECT_ALL,\n  KEYMAP_UNDO,\n  KEYMAP_REDO,\n} from \"./keymap\";\nimport { circuitNameFromIdSelector } from \"@/services/circuits/selectors/circuits\";\n\nexport interface CircuitFieldWindowProps {\n  circuitId: string;\n  circuitNodeIdPath: string[];\n}\nconst CircuitFieldWindow: React.FC<CircuitFieldWindowProps> = ({\n  circuitId,\n  circuitNodeIdPath,\n}) => {\n  const dispatch = useDispatch();\n  const tesselPath = useTesselPath();\n\n  const circuitName =\n    useSelector((state) => circuitNameFromIdSelector(state, circuitId)) ??\n    \"<Circuit Missing>\";\n\n  const keyHandlers = React.useMemo(() => {\n    function createEventDispatcher(action: AnyAction): HotkeyHandler {\n      return (e?: KeyboardEvent) => {\n        if (e) {\n          if (e.defaultPrevented) {\n            return;\n          }\n          e.preventDefault();\n        }\n        dispatch(action);\n      };\n    }\n    const keyHandlers: KeymapHandler = {\n      [KEYMAP_SIM_STEP]: createEventDispatcher(tickSim(1)),\n      [KEYMAP_SIM_FASTFORWARD]: createEventDispatcher(fastForwardSim()),\n      [KEYMAP_SELECT_ALL]: createEventDispatcher(selectAll(circuitId)),\n      [KEYMAP_COPY]: createEventDispatcher(copySelection()),\n      [KEYMAP_PASTE]: createEventDispatcher(paste(circuitId)),\n      [KEYMAP_DELETE]: createEventDispatcher(deleteSelection()),\n      [KEYMAP_UNDO]: createEventDispatcher(undo()),\n      [KEYMAP_REDO]: createEventDispatcher(redo()),\n    };\n    return keyHandlers;\n  }, [dispatch, circuitId]);\n\n  const onViewActivated = React.useCallback(() => {\n    dispatch(activateView(tesselPath));\n  }, [dispatch, tesselPath]);\n\n  if (!circuitId || !circuitNodeIdPath) {\n    return (\n      <div>\n        Misconfigured circuit field window. Window must have a circuit id and\n        circuit node id path.\n      </div>\n    );\n  }\n\n  return (\n    <TesselWindow title={`${circuitName} [Circuit]`}>\n      <HotKeys keyMap={keymap} handlers={keyHandlers} component={FillParent}>\n        <div\n          onFocus={onViewActivated}\n          className={cls(\n            \"circuit-field-view\",\n            sizing[\"fill-parent\"],\n            flex[\"flex-column\"]\n          )}\n        >\n          <CircuitNodeBreadcrumb\n            circuitId={circuitId}\n            circuitNodeIdPath={circuitNodeIdPath}\n          />\n          <CircuitField\n            className={cls(sizing[\"fill-parent\"], flex[\"flexitem-shrink\"])}\n            circuitId={circuitId}\n            circuitNodePath={circuitNodeIdPath}\n          />\n        </div>\n      </HotKeys>\n    </TesselWindow>\n  );\n};\n\nconst FillParent: React.FC = ({ children, ...props }) => {\n  return (\n    <div {...props} className={sizing[\"fill-parent\"]}>\n      {children}\n    </div>\n  );\n};\n\nexport default CircuitFieldWindow;\n","import * as React from \"react\";\n\nimport { cls } from \"@/utils\";\n\nimport interaction from \"@/styles/interaction.module.css\";\n\nimport styles from \"./SelectionList.module.css\";\n\nexport interface SelectionListItem {\n  value: string;\n  label: React.ReactNode;\n  isSelected?: boolean;\n}\n\nexport interface SelectionListProps {\n  className?: string;\n  items: SelectionListItem[];\n  onItemSelected(value: string): void;\n}\n\nconst SelectionList: React.FC<SelectionListProps> = ({\n  className,\n  items,\n  onItemSelected,\n}) => {\n  return (\n    <ul className={cls(\"selection-list\", styles[\"selection-list\"], className)}>\n      {items.map((item) => (\n        <SelectionListItemNode\n          key={item.value}\n          {...item}\n          onItemSelected={onItemSelected}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default SelectionList;\n\ninterface SelectionListItemNodeProps extends SelectionListItem {\n  onItemSelected(value: string): void;\n}\n\nconst SelectionListItemNode: React.FC<SelectionListItemNodeProps> = ({\n  value,\n  label,\n  isSelected,\n  onItemSelected,\n}) => {\n  const onClick = React.useCallback(\n    (e: React.MouseEvent) => {\n      if (e.defaultPrevented) {\n        return;\n      }\n\n      e.preventDefault();\n      onItemSelected(value);\n    },\n    [onItemSelected, value]\n  );\n\n  return (\n    <li\n      className={cls(\n        \"selection-list-item\",\n        styles[\"selection-list-item\"],\n        isSelected && styles[\"selection-list-item--selected\"]\n      )}\n      onClick={onClick}\n    >\n      <div\n        className={cls(\n          styles[\"selection-list-item-content\"],\n          interaction[\"text-unselectable\"]\n        )}\n      >\n        {label}\n      </div>\n    </li>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"selection-list\":\"selection-list--3yujH\",\"selection-list-item\":\"selection-list-item--errDr\",\"selection-list-item--selected\":\"selection-list-item--selected--3MkqB\",\"selection-list-item-content\":\"selection-list-item-content--321YU\"};","import SelectionList from \"./SelectionList\";\nexport * from \"./SelectionList\";\nexport default SelectionList;\n","import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { cls } from \"@/utils\";\n\nimport sizing from \"@/styles/sizing.module.css\";\n\nimport useSelector from \"@/hooks/useSelector\";\n\nimport { deleteCircuit } from \"@/actions/circuit-delete\";\nimport { viewCircuit } from \"@/actions/view-circuit\";\nimport { addCircuit } from \"@/actions/circuit-add\";\nimport { renameCircuit } from \"@/actions/circuit-rename\";\n\nimport {\n  circuitNameFromIdSelector,\n  circuitNamesByIdSelector,\n} from \"@/services/circuits/selectors/circuits\";\nimport { ROOT_CIRCUIT_ID } from \"@/services/circuits/constants\";\n\nimport { useContextMenu } from \"@/components/ContextMenu\";\nimport Menu from \"@/components/Menus/Menu\";\nimport MenuItem from \"@/components/Menus/MenuItem\";\nimport DividerMenuItem from \"@/components/Menus/DividerMenuItem\";\nimport SelectionList, { SelectionListItem } from \"@/components/SelectionList\";\nimport EditableText from \"@/components/EditableText\";\nimport TesselWindow from \"@/components/Tessel/TesselWindow\";\n\nimport styles from \"./CircuitsTreeWindow.module.css\";\n\nconst CircuitsTreeWindow: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const circuitNamesById = useSelector(circuitNamesByIdSelector);\n\n  const { openContextMenu, renderContextMenu } = useContextMenu();\n\n  const onCircuitSelected = React.useCallback(\n    (circuitId: string) => {\n      dispatch(viewCircuit(circuitId));\n    },\n    [dispatch]\n  );\n\n  const onContextMenu = React.useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      e.preventDefault();\n      openContextMenu(e);\n    },\n    [openContextMenu]\n  );\n\n  const listItems: SelectionListItem[] = React.useMemo(\n    () =>\n      Object.keys(circuitNamesById).map((circuitId) => {\n        return {\n          value: circuitId,\n          label: <CircuitTreeNodeCircuitLabel circuitId={circuitId} />,\n        };\n      }),\n    [circuitNamesById]\n  );\n\n  return (\n    <TesselWindow title=\"Circuits\" className={cls(styles.circuitstree)}>\n      <div className={sizing[\"fill-parent\"]} onContextMenu={onContextMenu}>\n        <SelectionList\n          className={sizing[\"fill-parent\"]}\n          items={listItems}\n          onItemSelected={onCircuitSelected}\n        />\n      </div>\n      {renderContextMenu(<CircuitTreeContextMenu />)}\n    </TesselWindow>\n  );\n};\n\nexport default CircuitsTreeWindow;\n\ninterface CircuitTreeNodeLabelProps {\n  circuitId: string;\n}\n\nconst CircuitTreeNodeCircuitLabel: React.FC<CircuitTreeNodeLabelProps> = ({\n  circuitId,\n}) => {\n  const dispatch = useDispatch();\n  const circuitName = useSelector((state) =>\n    circuitNameFromIdSelector(state, circuitId)\n  );\n  const [isRenaming, setIsRenaming] = React.useState(false);\n\n  const { openContextMenu, renderContextMenu } = useContextMenu();\n\n  const onRequestRename = React.useCallback(() => {\n    if (circuitId === ROOT_CIRCUIT_ID) {\n      return;\n    }\n    setIsRenaming(true);\n  }, [circuitId]);\n\n  const onCancelRename = React.useCallback(() => {\n    setIsRenaming(false);\n  }, []);\n\n  const onRename = React.useCallback(\n    (newName) => {\n      dispatch(renameCircuit(circuitId, newName));\n      setIsRenaming(false);\n    },\n    [circuitId, dispatch]\n  );\n\n  const onOpenNewWindow = React.useCallback(\n    (e: React.MouseEvent) => {\n      e.preventDefault();\n      dispatch(viewCircuit(circuitId, null, { newWindow: true }));\n    },\n    [circuitId, dispatch]\n  );\n\n  const onDelete = React.useCallback(\n    (e: React.MouseEvent) => {\n      e.preventDefault();\n      dispatch(deleteCircuit(circuitId));\n    },\n    [dispatch, circuitId]\n  );\n\n  const onContextMenu = React.useCallback(\n    (e: React.MouseEvent<HTMLElement>) => {\n      e.preventDefault();\n      e.stopPropagation();\n      openContextMenu(e);\n    },\n    [openContextMenu]\n  );\n\n  return (\n    <div\n      style={{ width: \"100%\" }}\n      onContextMenu={onContextMenu}\n      onDoubleClick={onRequestRename}\n    >\n      <EditableText\n        defaultValue={circuitName}\n        isEditing={isRenaming}\n        onRequestEdit={onRequestRename}\n        onCommit={onRename}\n        onCancel={onCancelRename}\n      />\n      {renderContextMenu(\n        <Menu>\n          {circuitId !== ROOT_CIRCUIT_ID && (\n            <>\n              <MenuItem onClick={onRequestRename}>Rename Circuit</MenuItem>\n              <DividerMenuItem />\n            </>\n          )}\n          <MenuItem onClick={onOpenNewWindow}>Open in New Window</MenuItem>\n          {circuitId !== ROOT_CIRCUIT_ID && (\n            <>\n              <DividerMenuItem />\n              <MenuItem onClick={onDelete}>Delete Circuit</MenuItem>\n            </>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nconst CircuitTreeContextMenu: React.FC = () => {\n  const dispatch = useDispatch();\n  const onNewCircuit = React.useCallback(() => {\n    dispatch(addCircuit());\n  }, [dispatch]);\n\n  return (\n    <Menu>\n      <MenuItem onClick={onNewCircuit}>New Circuit</MenuItem>\n    </Menu>\n  );\n};\n","import Tooltip from \"./Tooltip\";\nexport default Tooltip;\n","import * as React from \"react\";\nimport { createPortal } from \"react-dom\";\n\nimport { Options, VirtualElement } from \"@popperjs/core\";\nimport { usePopper } from \"react-popper\";\n\nexport interface PopoverProps {\n  anchorEl: Element | VirtualElement | null;\n  placement?: Options[\"placement\"];\n  isOpen: boolean;\n}\n\nimport styles from \"./Tooltip.module.css\";\n\nconst Tooltip: React.FC<PopoverProps> = ({\n  isOpen,\n  anchorEl,\n  placement = \"auto\",\n  children,\n}) => {\n  const [popoverRef, setPopoverRef] = React.useState<HTMLDivElement | null>(\n    null\n  );\n  const [arrowRef, setArrowRef] = React.useState<HTMLDivElement | null>(null);\n\n  const { attributes, styles: popperStyles } = usePopper(\n    isOpen ? anchorEl : null,\n    popoverRef,\n    {\n      placement,\n      modifiers: [\n        {\n          name: \"arrow\",\n          options: {\n            element: arrowRef,\n          },\n        },\n        {\n          name: \"offset\",\n          options: {\n            offset: [0, 8],\n          },\n        },\n      ],\n    }\n  );\n\n  if (!isOpen) {\n    return null;\n  }\n\n  return createPortal(\n    <div\n      ref={setPopoverRef}\n      className={styles[\"tooltip\"]}\n      style={popperStyles.popper}\n      role=\"tooltip\"\n      {...attributes.popper}\n    >\n      {children}\n      <div\n        ref={setArrowRef}\n        data-popper-arrow\n        className={styles[\"tooltip-arrow\"]}\n        style={popperStyles.arrow}\n        {...attributes.arrow}\n      />\n    </div>,\n    document.body\n  );\n};\n\nexport default Tooltip;\n","// extracted by mini-css-extract-plugin\nexport default {\"tooltip\":\"tooltip--2yxRI\",\"tooltip-arrow\":\"tooltip-arrow--2mJMo\"};","import * as React from \"react\";\nimport uniq from \"lodash/uniq\";\nimport { useDrag } from \"react-dnd\";\n\nimport interaction from \"@/styles/interaction.module.css\";\n\nimport useSelector from \"@/hooks/useSelector\";\n\nimport {\n  nodeDefinitionFromTypeSelector,\n  nodeDefinitionsSelector,\n} from \"@/services/node-types/selectors/node-types\";\nimport { NodeComponentProps, NodeDefinition } from \"@/nodes/types\";\n\nimport { newNodeDragObject } from \"@/components/CircuitField/drag-items/new-node\";\nimport TesselWindow from \"@/components/Tessel/TesselWindow\";\nimport Tooltip from \"@/components/Tooltip\";\n\nimport styles from \"./NodeTrayWindow.module.css\";\nimport { getNodeVisualElement } from \"@/nodes/visuals\";\n\nconst CategoryNames: Record<NodeDefinition[\"category\"], string> = {\n  \"input-output\": \"I/O\",\n  \"integrated-circuit\": \"Integrated Circuits\",\n  logic: \"Logic\",\n};\n\nconst NodeTrayWindow: React.FC = () => {\n  const nodeDefinitions = useSelector(nodeDefinitionsSelector);\n  const categories = uniq(nodeDefinitions.map((x) => x.category));\n\n  return (\n    <TesselWindow title=\"Elements\" className={styles[\"node-tray\"]}>\n      <ul className={styles[\"node-tray-elements\"]}>\n        {categories.map((category) => (\n          <TrayCategory key={category} category={category} />\n        ))}\n      </ul>\n    </TesselWindow>\n  );\n};\nexport default NodeTrayWindow;\n\ninterface TrayCategoryProps {\n  category: NodeDefinition[\"category\"];\n}\n\nconst TrayCategory: React.FC<TrayCategoryProps> = ({ category }) => {\n  const nodeDefinitions = useSelector(nodeDefinitionsSelector);\n  const defInCategory = nodeDefinitions.filter(\n    (def) => def.category === category\n  );\n\n  const nodes = defInCategory\n    .filter((def) => def.category === category)\n    .map((def) => {\n      return <TrayNode key={def.type} nodeType={def.type} />;\n    });\n\n  return (\n    <>\n      <li className={styles[\"node-tray-category\"]}>\n        {CategoryNames[category]}\n      </li>\n      {nodes}\n    </>\n  );\n};\n\ninterface TrayNodeProps {\n  nodeType: string;\n}\nconst TrayNode: React.FC<TrayNodeProps> = ({ nodeType }) => {\n  const [liRef, setLiRef] = React.useState<HTMLElement | null>(null);\n  const def = useSelector((state) =>\n    nodeDefinitionFromTypeSelector(state, nodeType)\n  );\n\n  const [showTooltip, setShowTooltip] = React.useState(false);\n  const onShowTooltip = React.useCallback((e: React.MouseEvent) => {\n    e.preventDefault();\n    setShowTooltip(true);\n  }, []);\n  const onHideTooltip = React.useCallback(\n    (e: React.MouseEvent) => {\n      if (e.target !== liRef) {\n        return;\n      }\n      setShowTooltip(false);\n    },\n    [liRef]\n  );\n\n  const [, dragRef] = useDrag({\n    item: newNodeDragObject(nodeType),\n  });\n\n  let nodeTrayVisual: JSX.Element;\n  let displayName = nodeType;\n  let viewBox = \"0 0 50 50\";\n  if (def) {\n    const { trayComponent, hitRect } = def.visual;\n    if (trayComponent) {\n      const TrayComponent = trayComponent;\n      nodeTrayVisual = <TrayComponent />;\n    } else {\n      nodeTrayVisual = getNodeVisualElement(\n        undefined,\n        [],\n        undefined,\n        def.visual\n      );\n      viewBox = `${hitRect.p1.x} ${hitRect.p1.y} ${hitRect.p2.x} ${hitRect.p2.y}`;\n    }\n    displayName = def.displayName;\n  } else {\n    nodeTrayVisual = <NodeTrayErrorComponent />;\n  }\n\n  return (\n    <li\n      ref={(ref) => {\n        setLiRef(ref);\n        dragRef(ref);\n      }}\n      className={styles[\"node-tray-item\"]}\n      onClick={onShowTooltip}\n      onMouseOut={onHideTooltip}\n    >\n      <Tooltip placement=\"top\" isOpen={showTooltip} anchorEl={liRef}>\n        Click and drag to create a new circuit element.\n      </Tooltip>\n      <span className={styles[\"node-tray-item-preview\"]}>\n        <svg width={30} height={30} viewBox={viewBox}>\n          {nodeTrayVisual}\n        </svg>\n      </span>\n      <span className={interaction[\"text-unselectable\"]}>{displayName}</span>\n    </li>\n  );\n};\n\nconst NodeTrayErrorComponent = () => (\n  <rect fill=\"red\" x1={0} y1={0} x2={50} y2={50} />\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"node-tray\":\"node-tray--1uIvj\",\"node-tray-elements\":\"node-tray-elements--KiJGM\",\"node-tray-category\":\"node-tray-category---Phmh\",\"node-tray-item\":\"node-tray-item--2_AyH\",\"node-tray-item-preview\":\"node-tray-item-preview--2QFhF\"};","import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { cls } from \"@/utils\";\n\nimport sizing from \"@/styles/sizing.module.css\";\n\nimport { rearrangeLayout } from \"@/actions/layout-rearrange\";\n\nimport useSelector from \"@/hooks/useSelector\";\n\nimport Tessel, { TesselValue, TesselWindowItem } from \"@/components/Tessel\";\n\nimport { layoutSelector } from \"@/services/ui-layout/selectors/layout\";\n\nimport CircuitFieldWindow from \"./windows/CircuitFieldWindow\";\nimport CircuitsTreeWindow from \"./windows/CircuitsTreeWindow\";\nimport NodeTrayWindow from \"./windows/NodeTrayWindow\";\n\nconst WindowsById: Record<string, React.ComponentType<any>> = {\n  \"node-tray\": NodeTrayWindow,\n  \"circuit-field\": CircuitFieldWindow,\n  \"circuits-list\": CircuitsTreeWindow,\n};\n\nfunction renderWindow(window: TesselWindowItem): React.ReactElement | null {\n  const Component = WindowsById[window.windowId];\n  if (!Component) {\n    return null;\n  }\n  return <Component {...window.windowProps} />;\n}\n\nconst CircuitEditorPage: React.FC = () => {\n  const dispatch = useDispatch();\n  const layout = useSelector(layoutSelector);\n  const onLayoutChange = React.useCallback(\n    (layout: TesselValue) => {\n      dispatch(rearrangeLayout(layout));\n    },\n    [dispatch]\n  );\n\n  return (\n    <Tessel\n      className={cls(\"circuit-editor\", sizing[\"fill-parent\"])}\n      rootItem={layout}\n      onLayoutChange={onLayoutChange}\n      renderWindow={renderWindow}\n    />\n  );\n};\n\nexport default CircuitEditorPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"circuitstree\":\"circuitstree--1eZ0Q\"};","import CircuitEditorPage from \"./CircuitEditorPage\";\nexport default CircuitEditorPage;\n","import ProjectImporterPage from \"./ProjectImporterPage\";\nexport default ProjectImporterPage;\n","import { importProjectLink } from \"@/actions/project-import-link\";\nimport * as React from \"react\";\n\nimport { useDispatch } from \"react-redux\";\nimport { RouteChildrenProps } from \"react-router-dom\";\n\nconst ProjectImporterPage: React.FC<RouteChildrenProps> = ({ location }) => {\n  const dispatch = useDispatch();\n  const [importError, setImportError] = React.useState(false);\n\n  React.useEffect(() => {\n    let searchParams: URLSearchParams;\n    try {\n      searchParams = new URLSearchParams(location.search);\n    } catch (e) {\n      setImportError(true);\n      return;\n    }\n\n    const data = searchParams.get(\"data\");\n    if (!data) {\n      setImportError(true);\n      return;\n    }\n\n    dispatch(importProjectLink(data));\n\n    // This is an effect, these are not dependencies.  Stop warning me about this.\n    // We only want to run on page load.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // TODO: better styling.\n\n  if (importError) {\n    // TODO: Better error message\n    return <div>Failed to import project</div>;\n  }\n\n  return <div>Importing Project...</div>;\n};\n\nexport default ProjectImporterPage;\n","import * as React from \"react\";\n\nimport { Switch, Route } from \"react-router-dom\";\n\nimport CircuitEditorPage from \"@/pages/CircuitEditorPage\";\nimport ProjectImporterPage from \"@/pages/ProjectImporterPage\";\n\nconst Routes: React.FC = () => {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={CircuitEditorPage} />\n      <Route exact path=\"/import\" component={ProjectImporterPage} />\n    </Switch>\n  );\n};\n\nexport default Routes;\n","import * as React from \"react\";\nimport { Options } from \"@popperjs/core\";\n\nimport Popover from \"./Popover\";\nimport { MenuCloseContextProvider } from \"./Menus/MenuCloseContext\";\n\nexport interface AutoPopoverProps {\n  content: JSX.Element;\n  placement?: Options[\"placement\"];\n}\n\nconst AutoPopover: React.FC<AutoPopoverProps> = ({\n  content,\n  placement,\n  children,\n}) => {\n  const anchorEl = React.useRef<HTMLDivElement | null>(null);\n\n  const [open, setOpen] = React.useState(false);\n  const onClick = React.useCallback(() => {\n    setOpen(true);\n  }, []);\n  const onClose = React.useCallback(() => {\n    setOpen(false);\n  }, []);\n\n  return (\n    <MenuCloseContextProvider value={onClose}>\n      <div ref={anchorEl} onClick={onClick}>\n        {children}\n      </div>\n      <Popover\n        anchorEl={anchorEl.current}\n        isOpen={open}\n        placement={placement}\n        onRequestClose={onClose}\n      >\n        {open && content}\n      </Popover>\n    </MenuCloseContextProvider>\n  );\n};\n\nexport default AutoPopover;\n","import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AnyAction } from \"redux\";\n\nexport function useAction(actionCreator: () => AnyAction): () => AnyAction;\nexport function useAction<Args>(\n  actionCreator: (...args: Args[]) => AnyAction\n): (...args: Args[]) => AnyAction;\nexport function useAction<A0, Args>(\n  actionCreator: (a0: A0, ...args: Args[]) => AnyAction,\n  a0: A0\n): (...args: Args[]) => AnyAction;\nexport function useAction(\n  actionCreator: (...args: any[]) => AnyAction,\n  ...preBind: any[]\n): (...args: any[]) => AnyAction {\n  const dispatch = useDispatch();\n  return React.useCallback(\n    (...args: any[]) => {\n      const action = actionCreator(...[...preBind, ...args]);\n      if (action) {\n        dispatch(action);\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [dispatch, actionCreator, ...preBind]\n  ) as any;\n}\n\nexport function useClickAction(\n  actionCreator: (...args: any[]) => AnyAction,\n  ...preBind: any[]\n): (e: React.MouseEvent) => AnyAction {\n  const dispatch = useDispatch();\n  return React.useCallback(\n    (e: React.MouseEvent) => {\n      if (e.defaultPrevented) {\n        return;\n      }\n      e.preventDefault();\n      const action = actionCreator(...preBind);\n      if (action) {\n        dispatch(action);\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [dispatch, actionCreator, ...preBind]\n  ) as any;\n}\n","import * as React from \"react\";\n\nimport { useAction } from \"@/hooks/useAction\";\nimport { newProject } from \"@/actions/project-new\";\nimport { saveProject } from \"@/actions/project-save\";\nimport { loadProject } from \"@/actions/project-load\";\nimport { exportProjectLink } from \"@/actions/project-export-link\";\n\nimport Menu from \"./Menus/Menu\";\nimport MenuItem from \"./Menus/MenuItem\";\nimport DividerMenuItem from \"./Menus/DividerMenuItem\";\n\nconst FileMenu: React.FC = () => {\n  const onNewProject = useAction(newProject);\n  const onSaveProject = useAction(saveProject);\n  const onLoadProject = useAction(loadProject);\n  const onExportLink = useAction(exportProjectLink);\n\n  return (\n    <Menu>\n      <MenuItem onClick={onNewProject}>New</MenuItem>\n      <DividerMenuItem />\n      <MenuItem onClick={onLoadProject}>Load</MenuItem>\n      <MenuItem onClick={onSaveProject}>Save</MenuItem>\n      <DividerMenuItem />\n      <MenuItem onClick={onExportLink}>Export Link</MenuItem>\n    </Menu>\n  );\n};\n\nexport default FileMenu;\n","import { AppState } from \"@/store\";\n\nexport const canUndoSelector = (state: AppState) =>\n  state.undo.undoStack.length > 0;\nexport const canRedoSelector = (state: AppState) =>\n  state.undo.redoStack.length > 0;\n","import * as React from \"react\";\n\nimport { keyboardCommandModifier } from \"@/runtime-env\";\n\nimport { useAction } from \"@/hooks/useAction\";\nimport useSelector from \"@/hooks/useSelector\";\n\nimport { canRedoSelector, canUndoSelector } from \"@/undo/selectors\";\n\nimport { undo } from \"@/actions/undo\";\nimport { redo } from \"@/actions/redo\";\n\nimport Menu from \"./Menus/Menu\";\nimport MenuItem from \"./Menus/MenuItem\";\n\nconst EditMenu: React.FC = () => {\n  const canUndo = useSelector(canUndoSelector);\n  const onUndo = useAction(undo);\n  const canRedo = useSelector(canRedoSelector);\n  const onRedo = useAction(redo);\n\n  return (\n    <Menu>\n      <MenuItem\n        disabled={!canUndo}\n        secondary={`${keyboardCommandModifier}+z`}\n        onClick={onUndo}\n      >\n        Undo\n      </MenuItem>\n      <MenuItem\n        disabled={!canRedo}\n        secondary={`${keyboardCommandModifier}+shift+z`}\n        onClick={onRedo}\n      >\n        Redo\n      </MenuItem>\n    </Menu>\n  );\n};\n\nexport default EditMenu;\n","export * from \"./Checkbox\";\nimport Checkbox from \"./Checkbox\";\nexport default Checkbox;\n","import * as React from \"react\";\n\nimport styles from \"./Checkbox.module.css\";\n\nexport interface CheckboxProps {\n  className?: string;\n  value: boolean;\n  onChange(e: React.ChangeEvent<HTMLInputElement>): void;\n}\n\nconst Checkbox: React.FC<CheckboxProps> = ({\n  className,\n  value,\n  onChange,\n  children,\n}) => {\n  return (\n    <label className={className}>\n      <span className={styles[\"checkbox-span\"]}>\n        <input type=\"checkbox\" checked={value} onChange={onChange} />\n      </span>\n      {children}\n    </label>\n  );\n};\n\nexport default Checkbox;\n","// extracted by mini-css-extract-plugin\nexport default {\"checkbox-span\":\"checkbox-span--1EWGs\"};","import * as React from \"react\";\n\nimport { cls } from \"@/utils\";\n\nimport Checkbox from \"@/components/Checkbox\";\n\nimport styles from \"./Menus.module.css\";\n\nexport interface CheckboxMenuItemProps {\n  disabled?: boolean;\n  secondary?: string;\n  value: boolean;\n  onChange(e: React.ChangeEvent<HTMLInputElement>): void;\n}\nconst CheckboxMenuItem: React.FC<CheckboxMenuItemProps> = ({\n  disabled,\n  secondary,\n  value,\n  onChange,\n  children,\n}) => {\n  return (\n    <li\n      className={cls(\n        styles[\"menu-item\"],\n        disabled && styles[\"menu-item--disabled\"]\n      )}\n    >\n      <Checkbox\n        className={styles[\"menu-item-content\"]}\n        value={value}\n        onChange={onChange}\n      >\n        <span className={styles[\"menu-item-text\"]}>{children}</span>\n        {secondary && (\n          <span className={styles[\"menu-item-secondary\"]}>{secondary}</span>\n        )}\n      </Checkbox>\n    </li>\n  );\n};\n\nexport default CheckboxMenuItem;\n","import * as React from \"react\";\n\nimport { cls } from \"@/utils\";\n\nimport AutoPopover from \"@/components/AutoPopover\";\n\nimport styles from \"./Menus.module.css\";\n\nexport interface SubMenuItemProps {\n  disabled?: boolean;\n  secondary?: string;\n  content: JSX.Element;\n}\nconst SubMenuItem: React.FC<SubMenuItemProps> = ({\n  disabled,\n  secondary,\n  content,\n  children,\n}) => {\n  return (\n    <li\n      className={cls(\n        styles[\"menu-item\"],\n        disabled && styles[\"menu-item--disabled\"]\n      )}\n    >\n      <AutoPopover placement=\"right-start\" content={content}>\n        <a className={styles[\"menu-item-content\"]}>\n          <span className={styles[\"menu-item-text\"]}>{children}</span>\n          {secondary && (\n            <span className={styles[\"menu-item-secondary\"]}>{secondary}</span>\n          )}\n          <svg className={styles[\"menu-item-icon\"]} width={12} height={12}>\n            <path d=\"M0,0 l6,6 l-6,6 z\" fill=\"black\" strokeWidth={0} />\n          </svg>\n        </a>\n      </AutoPopover>\n    </li>\n  );\n};\n\nexport default SubMenuItem;\n","import * as React from \"react\";\n\nimport { useAction } from \"@/hooks/useAction\";\nimport useSelector from \"@/hooks/useSelector\";\n\nimport { viewNodeNames } from \"@/actions/view-node-names\";\nimport { resetView } from \"@/actions/view-reset\";\n\nimport { nodeNameModeSelector } from \"@/services/ui-settings/selectors/node-name\";\n\nimport Menu from \"./Menus/Menu\";\nimport CheckboxMenuItemItem from \"./Menus/CheckboxMenuItem\";\nimport SubMenuItem from \"./Menus/SubMenuItem\";\nimport DividerMenuItem from \"./Menus/DividerMenuItem\";\nimport MenuItem from \"./Menus/MenuItem\";\n\nconst ViewMenu: React.FC = () => {\n  const onResetView = useAction(resetView);\n  return (\n    <Menu>\n      <SubMenuItem content={<ElementNamesMenu />}>Element Names</SubMenuItem>\n      <DividerMenuItem />\n      <MenuItem onClick={onResetView}>Reset View</MenuItem>\n    </Menu>\n  );\n};\n\nconst ElementNamesMenu: React.FC = () => {\n  const mode = useSelector(nodeNameModeSelector);\n  const onAlwaysVisible = useAction(viewNodeNames, \"all\");\n  const onNamedOnly = useAction(viewNodeNames, \"named-only\");\n  const onHidden = useAction(viewNodeNames, \"none\");\n\n  return (\n    <Menu>\n      <CheckboxMenuItemItem value={mode === \"all\"} onChange={onAlwaysVisible}>\n        Always visible\n      </CheckboxMenuItemItem>\n      <CheckboxMenuItemItem\n        value={mode === \"named-only\"}\n        onChange={onNamedOnly}\n      >\n        Named Items Only\n      </CheckboxMenuItemItem>\n      <CheckboxMenuItemItem value={mode === \"none\"} onChange={onHidden}>\n        Hidden\n      </CheckboxMenuItemItem>\n    </Menu>\n  );\n};\n\nexport default ViewMenu;\n","import { createSimulatorSelector } from \"../utils\";\n\nexport const averageMsecsPerTickSelector = createSimulatorSelector(\n  (state) => state.lastTickProcessingTimeMs\n);\n","import * as React from \"react\";\n\nimport { cls } from \"@/utils\";\n\nimport styles from \"./Icons.module.css\";\n\nconst PlayIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => {\n  return (\n    <svg\n      width={16}\n      height={16}\n      {...props}\n      className={cls(styles.icon, props.className)}\n    >\n      <path d=\"M3,0 L13,8 L3,16 z\" />\n    </svg>\n  );\n};\n\nexport default PlayIcon;\n","import * as React from \"react\";\n\nimport { cls } from \"@/utils\";\n\nimport styles from \"./Icons.module.css\";\n\nconst StopIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => {\n  return (\n    <svg\n      width={16}\n      height={16}\n      {...props}\n      className={cls(styles.icon, props.className)}\n    >\n      <path d=\"M1,1 L15,1 L15,15 L1,15 z\" />\n    </svg>\n  );\n};\n\nexport default StopIcon;\n","import * as React from \"react\";\n\nimport { cls } from \"@/utils\";\n\nimport styles from \"./Icons.module.css\";\n\nconst PauseIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => {\n  return (\n    <svg\n      width={16}\n      height={16}\n      {...props}\n      className={cls(styles.icon, props.className)}\n    >\n      <path d=\"M2.5,1 L6.5,1 L6.5,15 L2.5,15 z M9.5,1 L13.5,1 L13.5,15 L9.5,15 z\" />\n    </svg>\n  );\n};\n\nexport default PauseIcon;\n","import * as React from \"react\";\n\nimport { cls } from \"@/utils\";\n\nimport styles from \"./Icons.module.css\";\n\nconst StepIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => {\n  return (\n    <svg\n      width={16}\n      height={16}\n      {...props}\n      className={cls(styles.icon, props.className)}\n    >\n      <path d=\"M3,0 L13,8 L3,16 z M11,1 l2,0 l0,14 l-2,0 z\" />\n    </svg>\n  );\n};\n\nexport default StepIcon;\n","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"button--1Syge\",\"button-play\":\"button-play--3gVDD\",\"button-stop\":\"button-stop--264bH\",\"button-pause\":\"button-pause--YWEL8\",\"selected\":\"selected--QetqX\",\"button-step\":\"button-step--WUfNJ\",\"button--disabled\":\"button--disabled--2BVJb\",\"simrate\":\"simrate--1LNMp\"};","import SimControls from \"./SimControls\";\nexport default SimControls;\n","import * as React from \"react\";\n\nimport { cls } from \"@/utils\";\n\nimport useSelector from \"@/hooks/useSelector\";\n\nimport { startSim } from \"@/actions/sim-start\";\nimport { stopSim } from \"@/actions/sim-stop\";\nimport { pauseSim } from \"@/actions/sim-pause\";\nimport { useClickAction } from \"@/hooks/useAction\";\nimport { stepSim } from \"@/actions/sim-step\";\n\nimport {\n  isSimActiveSelector,\n  isSimPausedSelector,\n} from \"@/services/simulator-control/selectors/run\";\nimport { averageMsecsPerTickSelector } from \"@/services/simulator/selectors/performance\";\n\nimport PlayIcon from \"../Icons/Play\";\nimport StopIcon from \"../Icons/Stop\";\nimport PauseIcon from \"../Icons/Pause\";\nimport StepIcon from \"../Icons/Step\";\n\nimport styles from \"./SimControls.module.css\";\n\nconst PlayPauseButton: React.FC = () => {\n  const isActive = useSelector(isSimActiveSelector);\n  const isPaused = useSelector(isSimPausedSelector);\n\n  const avgMsecsPerTick = useSelector(averageMsecsPerTickSelector);\n\n  const onPlayClick = useClickAction(startSim);\n  const onStopClick = useClickAction(stopSim);\n  const onPauseClick = useClickAction(pauseSim, \"toggle\");\n  const onStepClick = useClickAction(stepSim);\n\n  const onMuteMouseDown = React.useCallback((e: React.MouseEvent) => {\n    // Prevent rapid clicks from selecting nearby text.\n    e.preventDefault();\n  }, []);\n\n  return (\n    <span>\n      {isActive && (\n        <span className={styles[\"simrate\"]}>\n          {avgMsecsPerTick.toFixed(2)} ms\n        </span>\n      )}\n      {isActive ? (\n        <StopIcon\n          id=\"simctrl-stop\"\n          className={cls(styles[\"button\"], styles[\"button-stop\"])}\n          onClick={onStopClick}\n          onMouseDown={onMuteMouseDown}\n        />\n      ) : (\n        <PlayIcon\n          id=\"simctrl-run\"\n          className={cls(styles[\"button\"], styles[\"button-play\"])}\n          onClick={onPlayClick}\n          onMouseDown={onMuteMouseDown}\n        />\n      )}\n      <StepIcon\n        id=\"simctrl-step\"\n        className={cls(styles[\"button\"], styles[\"button-step\"])}\n        onClick={onStepClick}\n        onMouseDown={onMuteMouseDown}\n      />\n      <PauseIcon\n        id=\"simctrl-pause\"\n        className={cls(\n          styles[\"button\"],\n          styles[\"button-pause\"],\n          !isActive && styles[\"button--disabled\"],\n          isPaused && styles[\"selected\"]\n        )}\n        onClick={onPauseClick}\n        onMouseDown={onMuteMouseDown}\n      />\n    </span>\n  );\n};\n\nexport default PlayPauseButton;\n","import TitleBar from \"./TitleBar\";\nexport default TitleBar;\n","import * as React from \"react\";\n\nimport { cls } from \"@/utils\";\n\nimport useSelector from \"@/hooks/useSelector\";\n\nimport {\n  projectModifiedSelector,\n  projectNameSelector,\n} from \"@/services/project/selectors/project\";\n\nimport AutoPopover from \"../AutoPopover\";\nimport Button from \"../Button\";\nimport FileMenu from \"../FileMenu\";\nimport EditMenu from \"../EditMenu\";\nimport ViewMenu from \"../ViewMenu\";\nimport SimControls from \"../SimControls\";\n\nimport styles from \"./TitleBar.module.css\";\n\nexport interface TitleBarProps {\n  className?: string;\n}\nconst TitleBar: React.FC<TitleBarProps> = ({ className }) => {\n  const projectName = useSelector(projectNameSelector);\n  const projectModified = useSelector(projectModifiedSelector);\n  return (\n    <div className={cls(styles.titlebar, className)}>\n      <span className={styles[\"titlebar-heading\"]}>Discrelog</span>\n      <div className={styles[\"titlebar-divider\"]} />\n      <AutoPopover content={<FileMenu />} placement=\"bottom-start\">\n        <Button>File</Button>\n      </AutoPopover>\n      <AutoPopover content={<EditMenu />} placement=\"bottom-start\">\n        <Button>Edit</Button>\n      </AutoPopover>\n      <AutoPopover content={<ViewMenu />} placement=\"bottom-start\">\n        <Button>View</Button>\n      </AutoPopover>\n      <div className={styles[\"titlebar-projectname\"]}>\n        {projectName}\n        {projectModified && \"*\"}\n      </div>\n      <div className={styles[\"titlebar-controls\"]}>\n        <SimControls />\n      </div>\n    </div>\n  );\n};\n\nexport default TitleBar;\n","// extracted by mini-css-extract-plugin\nexport default {\"titlebar\":\"titlebar--3-TCE\",\"titlebar-heading\":\"titlebar-heading--3RAl1\",\"titlebar-projectname\":\"titlebar-projectname--1vIUJ\",\"titlebar-divider\":\"titlebar-divider--Wl_27\",\"titlebar-controls\":\"titlebar-controls--1R_l6\"};","import { createDialogSelector } from \"../utils\";\n\nexport const dialogTypeSelector = createDialogSelector((s) => s.dialogType);\nexport const dialogDataSelector = createDialogSelector((s) => s.data);\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"modal--25LBN\",\"modal-content\":\"modal-content--1H0T_\"};","export * from \"./Modal\";\nimport Modal from \"./Modal\";\nexport default Modal;\n","import { cls } from \"@/utils\";\nimport * as React from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { FocusOn, AutoFocusInside } from \"react-focus-on\";\n\nimport sizing from \"@/styles/sizing.module.css\";\n\nimport styles from \"./Modal.module.css\";\n\nexport interface ModalProps {\n  className?: string;\n  isOpen: boolean;\n  onRequestClose?(): void;\n}\n\nconst Modal: React.FC<ModalProps> = ({\n  className,\n  isOpen,\n  onRequestClose,\n  children,\n}) => {\n  if (!isOpen) {\n    return null;\n  }\n\n  return createPortal(\n    <div className={cls(\"modal\", styles[\"modal\"])}>\n      <FocusOn onClickOutside={onRequestClose} onEscapeKey={onRequestClose}>\n        <div className={cls(styles[\"modal-content\"], className)}>\n          <AutoFocusInside className={sizing[\"fill-parent\"]}>\n            {children}\n          </AutoFocusInside>\n        </div>\n      </FocusOn>\n    </div>,\n    document.body\n  );\n};\n\nexport default Modal;\n","export * from \"./Dialog\";\nimport Dialog from \"./Dialog\";\nexport default Dialog;\n","import * as React from \"react\";\n\nimport Button from \"@/components/Button\";\nimport Modal from \"@/components/Modal\";\n\nimport styles from \"./Dialog.module.css\";\n\nexport interface DialogProps {\n  isOpen: boolean;\n  acceptText?: string;\n  cancelText?: string;\n  footer?: React.ReactNode;\n  onAccept?(): void;\n  onCancel?(): void;\n}\n\nconst Dialog: React.FC<DialogProps> = ({\n  isOpen,\n  acceptText,\n  cancelText,\n  onAccept,\n  onCancel,\n  footer,\n  children,\n}) => {\n  return (\n    <Modal\n      className={styles[\"dialog\"]}\n      isOpen={isOpen}\n      onRequestClose={onCancel}\n    >\n      <div>{children}</div>\n      <div className={styles[\"dialog-footer\"]}>\n        {footer}\n        {onCancel && (\n          <Button onClick={onCancel}>{cancelText ?? \"Cancel\"}</Button>\n        )}\n        {onAccept && (\n          <Button onClick={onAccept}>{acceptText ?? \"Accept\"}</Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default Dialog;\n","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"dialog--1eQi6\",\"dialog-footer\":\"dialog-footer--2hYdr\"};","import * as React from \"react\";\n\nimport useSelector from \"@/hooks/useSelector\";\nimport { useAction } from \"@/hooks/useAction\";\n\nimport { acceptDialog } from \"@/actions/dialog-response-accept\";\n\nimport { dialogDataSelector } from \"@/services/dialog/selectors/dialog\";\nimport { ExportProjectLinkDialogData } from \"@/services/dialog/state\";\n\nimport Button from \"@/components/Button\";\nimport Dialog from \"@/components/Dialog\";\n\nimport styles from \"./ExportLinkDialog.module.css\";\n\nconst ExportProjectLinkDialog: React.FC = () => {\n  const onCloseDialog = useAction(acceptDialog);\n  const dialogData: ExportProjectLinkDialogData | null = useSelector(\n    dialogDataSelector\n  );\n\n  const projectLink = dialogData?.projectLink;\n\n  const onCopy = React.useCallback(() => {\n    if (!projectLink) {\n      return;\n    }\n    // TODO: Show link in dialog on failure\n    navigator.clipboard.writeText(projectLink).catch(() => {\n      /* do nothing */\n    });\n  }, [projectLink]);\n\n  if (!projectLink) {\n    return null;\n  }\n\n  const dialogFooter = <Button onClick={onCopy}>Copy to Clipboard</Button>;\n\n  return (\n    <Dialog\n      isOpen={true}\n      cancelText=\"Close\"\n      onCancel={onCloseDialog}\n      footer={dialogFooter}\n    >\n      <div className={styles[\"export-link-dialog-link-container\"]}>\n        <code className={styles[\"export-link-dialog-link\"]}>{projectLink}</code>\n      </div>\n    </Dialog>\n  );\n};\n\nexport default ExportProjectLinkDialog;\n","// extracted by mini-css-extract-plugin\nexport default {\"export-link-dialog-link-container\":\"export-link-dialog-link-container--Zas2L\",\"export-link-dialog-link\":\"export-link-dialog-link--7r7uE\"};","import DialogManager from \"./DialogManager\";\nexport default DialogManager;\n","import * as React from \"react\";\n\nimport useSelector from \"@/hooks/useSelector\";\nimport { dialogTypeSelector } from \"@/services/dialog/selectors/dialog\";\n\nimport ExportProjectLinkDialog from \"./dialogs/ExportLinkDialog\";\n\nconst DialogManager: React.FC = () => {\n  const dialogType = useSelector(dialogTypeSelector);\n\n  switch (dialogType) {\n    default:\n      return null;\n    case \"export-project-link\":\n      return <ExportProjectLinkDialog />;\n  }\n};\n\nexport default DialogManager;\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport \"resize-observer-polyfill\";\n\nimport { Provider } from \"react-redux\";\nimport { Router } from \"react-router-dom\";\n\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\n\nimport history from \"./history\";\nimport \"./styles\";\n\nimport { store } from \"./store\";\n\nimport App from \"./components/App\";\n\nconst rootEl = document.getElementById(\"root\");\n\nReactDOM.render(\n  <DndProvider backend={HTML5Backend}>\n    <Router history={history}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </Router>\n  </DndProvider>,\n  rootEl\n);\n","import * as React from \"react\";\n\nimport { cls } from \"@/utils\";\n\nimport flex from \"@/styles/flex.module.css\";\nimport sizing from \"@/styles/sizing.module.css\";\n\nimport Routes from \"@/router\";\n\nimport TitleBar from \"../TitleBar\";\nimport DialogManager from \"../DialogManager\";\n\nconst App: React.FC = () => {\n  return (\n    <div className={cls(sizing[\"fill-parent\"], flex[\"flex-column\"])}>\n      <TitleBar className={flex[\"flexitem-fix\"]} />\n      <div className={cls(sizing[\"fill-parent\"], flex[\"flexitem-shrink\"])}>\n        <Routes />\n      </div>\n      <DialogManager />\n    </div>\n  );\n};\n\nexport default App;\n","import { NodeDefinition } from \"../../types\";\n\nconst toggleElementDefinition: NodeDefinition = {\n  type: \"interaction-momentary\",\n  category: \"input-output\",\n  displayName: \"Momentary Switch\",\n  elementProduction: \"input-momentary\",\n  visual: {\n    hitRect: {\n      p1: { x: 5, y: 5 },\n      p2: { x: 45, y: 45 },\n    },\n    component: \"interaction-momentary\",\n  },\n  pins: {\n    OUT: {\n      direction: \"output\",\n      x: 50,\n      y: 25,\n    },\n  },\n};\n\nexport default toggleElementDefinition;\n","import { NodeDefinition } from \"../../types\";\n\nconst toggleElementDefinition: NodeDefinition = {\n  type: \"interaction-toggle\",\n  category: \"input-output\",\n  displayName: \"Toggle Switch\",\n  elementProduction: \"input-toggle\",\n  visual: {\n    hitRect: {\n      p1: { x: 5, y: 5 },\n      p2: { x: 45, y: 45 },\n    },\n    component: \"interaction-toggle\",\n  },\n  pins: {\n    OUT: {\n      direction: \"output\",\n      x: 50,\n      y: 25,\n    },\n  },\n};\n\nexport default toggleElementDefinition;\n","import * as React from \"react\";\nimport getBounds from \"svg-path-bounds\";\n\nimport { boundsToRect } from \"@/geometry\";\n\nimport { NodeDefinition } from \"../../types\";\nimport { createStaticNodeVisual } from \"../../visuals/static-node-visual\";\n\n// Shape path from https://commons.wikimedia.org/wiki/File:AND_ANSI.svg\n\nconst hitPath = `M30 5V45H50.47619c11.267908 0 20-9.000045 20-20s-8.732091-20-20-20H30z`;\n\nconst andNodeDefinition: NodeDefinition = {\n  type: \"logic-and\",\n  category: \"logic\",\n  displayName: \"AND\",\n  elementProduction: \"logic-and\",\n  visual: createStaticNodeVisual(\n    boundsToRect(getBounds(hitPath)),\n    <g>\n      <path d={hitPath} fill=\"transparent\" stroke=\"none\" />\n      <path\n        className=\"node-select-highlight--stroke\"\n        fill=\"none\"\n        stroke=\"#000\"\n        strokeWidth=\"2\"\n        d=\"M70,25 h30 M31,15 H5 M32,35 H5\"\n      />\n      <path\n        className=\"node-select-highlight--fill\"\n        d=\"M30 5V45H50.47619c11.267908 0 20-9.000045 20-20s-8.732091-20-20-20H30zm2.857143 2.857143H50.47619c9.760663 0 16.666667 7.639955 16.666667 17.142857 0 9.502902-7.382195 17.142857-17.142857 17.142857H32.857143V7.857143z\"\n      />\n    </g>\n  ),\n  pins: {\n    A: { direction: \"input\", x: 0, y: 14.5 },\n    B: { direction: \"input\", x: 0, y: 35 },\n    OUT: { direction: \"output\", x: 100, y: 25 },\n  },\n};\nexport default andNodeDefinition;\n","import * as React from \"react\";\nimport getBounds from \"svg-path-bounds\";\n\nimport { boundsToRect } from \"@/geometry\";\n\nimport { NodeDefinition } from \"../../types\";\nimport { createStaticNodeVisual } from \"../../visuals/static-node-visual\";\n\n// Shape path from https://commons.wikimedia.org/wiki/File:Buffer_ANSI.svg\n\nconst hitPath = `M 28.96875,2.59375 L 28.96875,5 L 28.96875,45 L 28.96875,47.40625 L 31.125,46.34375 L 72.15625,26.34375 L 75,25 L 72.15625,23.65625 L 31.125,3.65625 L 28.96875,2.59375 z`;\n\nconst bufferNodeDefinition: NodeDefinition = {\n  type: \"logic-buffer\",\n  category: \"logic\",\n  displayName: \"Buffer\",\n  elementProduction: \"logic-buffer\",\n  visual: createStaticNodeVisual(\n    boundsToRect(getBounds(hitPath)),\n    <g>\n      <path d={hitPath} fill=\"transparent\" stroke=\"none\" />\n      <path\n        className=\"node-select-highlight--stroke\"\n        fill=\"none\"\n        stroke=\"black\"\n        strokeWidth=\"2\"\n        d=\"M72,25 L 100,25\"\n      />\n      <path\n        className=\"node-select-highlight--stroke\"\n        fill=\"none\"\n        stroke=\"black\"\n        strokeWidth=\"2\"\n        d=\"M 29.043478,25 L 5.0434781,25\"\n      />\n      <path\n        className=\"node-select-highlight--fill\"\n        stroke=\"none\"\n        fill=\"black\"\n        d=\"M 28.96875,2.59375 L 28.96875,5 L 28.96875,45 L 28.96875,47.40625 L 31.125,46.34375 L 72.15625,26.34375 L 75,25 L 72.15625,23.65625 L 31.125,3.65625 L 28.96875,2.59375 z M 31.96875,7.40625 L 68.09375,25 L 31.96875,42.59375 L 31.96875,7.40625 z\"\n      />\n    </g>\n  ),\n  pins: {\n    IN: {\n      direction: \"input\",\n      x: 0,\n      y: 25,\n    },\n    OUT: {\n      direction: \"output\",\n      x: 100,\n      y: 25,\n    },\n  },\n};\nexport default bufferNodeDefinition;\n","import * as React from \"react\";\n\nimport { Rectangle } from \"@/geometry\";\n\nimport { NodeDefinition } from \"../../types\";\nimport { createStaticNodeVisual } from \"../../visuals/static-node-visual\";\n\n// Shape path from https://en.wikipedia.org/wiki/NAND_logic#/media/File:NAND_ANSI_Labelled.svg\n\nconst hitRect: Rectangle = {\n  p1: {\n    x: 24,\n    y: 5,\n  },\n  p2: {\n    x: 80,\n    y: 45,\n  },\n};\n\nconst nandNodeDefinition: NodeDefinition = {\n  type: \"logic-nand\",\n  category: \"logic\",\n  displayName: \"NAND\",\n  elementProduction: \"logic-nand\",\n  visual: createStaticNodeVisual(\n    hitRect,\n    <g transform=\"translate(-10,0)\">\n      <path\n        d=\"M 40,5 L 40,6.4285714 L 40,43.571429 L 40,45 L 41.428571,45 L 60.47619,45 C 71.744098,45 80.47619,35.999955 80.47619,25 C 80.47619,14.000045 71.744099,5.0000002 60.47619,5 C 60.47619,5 60.47619,5 41.428571,5 L 40,5 z\"\n        stroke=\"none\"\n        fill=\"transparent\"\n      />\n      <path\n        className=\"node-select-highlight--stroke\"\n        strokeWidth=\"2\"\n        stroke=\"black\"\n        fill=\"none\"\n        d=\"M 88,25 H110\"\n      />\n      <path\n        className=\"node-select-highlight--stroke\"\n        strokeWidth=\"2\"\n        stroke=\"black\"\n        fill=\"none\"\n        d=\"M 41,15 L 15,15\"\n      />\n      <path\n        className=\"node-select-highlight--stroke\"\n        strokeWidth=\"2\"\n        stroke=\"black\"\n        fill=\"none\"\n        d=\"M 42,35 L 15,35\"\n      />\n      <path\n        className=\"node-select-highlight--fill\"\n        d=\"M 40,5 L 40,6.4285714 L 40,43.571429 L 40,45 L 41.428571,45 L 60.47619,45 C 71.744098,45 80.47619,35.999955 80.47619,25 C 80.47619,14.000045 71.744099,5.0000002 60.47619,5 C 60.47619,5 60.47619,5 41.428571,5 L 40,5 z M 42.857143,7.8571429 C 50.834264,7.8571429 55.918368,7.8571429 58.095238,7.8571429 C 59.285714,7.8571429 59.880952,7.8571429 60.178571,7.8571429 C 60.327381,7.8571429 60.409227,7.8571429 60.446429,7.8571429 C 60.465029,7.8571429 60.471543,7.8571429 60.47619,7.8571429 C 70.236853,7.857143 77.142857,15.497098 77.142857,25 C 77.142857,34.502902 69.760662,42.142857 60,42.142857 L 42.857143,42.142857 L 42.857143,7.8571429 z\"\n      />\n      <path\n        className=\"node-select-highlight--stroke\"\n        strokeWidth=\"2\"\n        stroke=\"black\"\n        fill=\"none\"\n        d=\"M 79,25 A 4,4 0 1 1 71,25 A 4,4 0 1 1 79,25 z\"\n        transform=\"translate(9,0)\"\n      />\n    </g>\n  ),\n  pins: {\n    A: {\n      direction: \"input\",\n      x: 0,\n      y: 14.5,\n    },\n    B: {\n      direction: \"input\",\n      x: 0,\n      y: 35,\n    },\n    OUT: {\n      direction: \"output\",\n      x: 100,\n      y: 25,\n    },\n  },\n};\nexport default nandNodeDefinition;\n","import * as React from \"react\";\n\nimport { Rectangle } from \"@/geometry\";\n\nimport { NodeDefinition } from \"../../types\";\nimport { createStaticNodeVisual } from \"../../visuals/static-node-visual\";\n\n// Shape path from https://commons.wikimedia.org/wiki/File:NOR_ANSI.svg\n\nconst hitRect: Rectangle = {\n  p1: {\n    x: 24,\n    y: 5,\n  },\n  p2: {\n    x: 80,\n    y: 45,\n  },\n};\n\nconst norNodeDefinition: NodeDefinition = {\n  type: \"logic-nor\",\n  category: \"logic\",\n  displayName: \"NOR\",\n  elementProduction: \"logic-nor\",\n  visual: createStaticNodeVisual(\n    hitRect,\n    <g>\n      <path\n        fill=\"transparent\"\n        stroke=\"none\"\n        d=\"M24.09375 5l2 2.4375S31.75 14.437549 31.75 25s-5.65625 17.5625-5.65625 17.5625l-2 2.4375H41.25c2.408076.000001 7.689699.024514 13.625-2.40625s12.536536-7.343266 17.6875-16.875L71.25 25l1.3125-.71875C62.259387 5.21559 46.006574 5 41.25 5H24.09375z\"\n      />\n      <path\n        className=\"node-select-highlight--stroke\"\n        fill=\"none\"\n        stroke=\"#000\"\n        strokeWidth=\"2\"\n        d=\"M79,25 h21 M31,15 H5 M32,35 H5\"\n      />\n      <path\n        className=\"node-select-highlight--fill\"\n        fillRule=\"evenodd\"\n        d=\"M24.09375 5l2 2.4375S31.75 14.437549 31.75 25s-5.65625 17.5625-5.65625 17.5625l-2 2.4375H41.25c2.408076.000001 7.689699.024514 13.625-2.40625s12.536536-7.343266 17.6875-16.875L71.25 25l1.3125-.71875C62.259387 5.21559 46.006574 5 41.25 5H24.09375zm5.875 3H41.25c4.684173 0 18.28685-.130207 27.96875 17C64.451964 33.429075 58.697469 37.68391 53.5 39.8125 48.139339 42.007924 43.658075 42.000001 41.25 42H30c1.873588-3.108434 4.75-9.04935 4.75-17 0-7.973354-2.908531-13.900185-4.78125-17z\"\n      />\n      <path\n        className=\"node-select-highlight--stroke\"\n        fill=\"none\"\n        stroke=\"#000\"\n        strokeWidth=\"2\"\n        d=\"M79 25a4 4 0 1 1-8 0 4 4 0 1 1 8 0z\"\n      />\n    </g>\n  ),\n  pins: {\n    A: {\n      direction: \"input\",\n      x: 0,\n      y: 14.5,\n    },\n    B: {\n      direction: \"input\",\n      x: 0,\n      y: 35,\n    },\n    OUT: {\n      direction: \"output\",\n      x: 100,\n      y: 25,\n    },\n  },\n};\nexport default norNodeDefinition;\n","import * as React from \"react\";\n\nimport { Rectangle } from \"@/geometry\";\n\nimport { NodeDefinition } from \"../../types\";\nimport { createStaticNodeVisual } from \"../../visuals/static-node-visual\";\n\n// Shape path from https://commons.wikimedia.org/wiki/File:NOT_ANSI.svg\n\nconst hitRect: Rectangle = {\n  p1: {\n    x: 24,\n    y: 5,\n  },\n  p2: {\n    x: 80,\n    y: 45,\n  },\n};\n\nconst notNodeDefinition: NodeDefinition = {\n  type: \"logic-not\",\n  category: \"logic\",\n  displayName: \"NOT\",\n  elementProduction: \"logic-not\",\n  visual: createStaticNodeVisual(\n    hitRect,\n    <g>\n      <path\n        fill=\"transparent\"\n        stroke=\"none\"\n        d=\"M28.96875 2.59375v44.8125l2.15625-1.0625 41.03125-20v-2.6875l-41.03125-20-2.15625-1.0625z\"\n      />\n      <path\n        className=\"node-select-highlight--stroke\"\n        fill=\"none\"\n        stroke=\"#000\"\n        strokeWidth=\"2\"\n        d=\"M79,25 H100 M29,25 h-24\"\n      />\n      <path\n        className=\"node-select-highlight--fill\"\n        d=\"M28.96875 2.59375v44.8125l2.15625-1.0625 41.03125-20v-2.6875l-41.03125-20-2.15625-1.0625zm3 4.8125L68.09375 25l-36.125 17.59375V7.40625z\"\n      />\n      <path\n        className=\"node-select-highlight--stroke\"\n        fill=\"none\"\n        stroke=\"#000\"\n        strokeWidth=\"2\"\n        d=\"M79 25a4 4 0 1 1-8 0 4 4 0 1 1 8 0z\"\n      />\n    </g>\n  ),\n  pins: {\n    IN: {\n      direction: \"input\",\n      x: 0,\n      y: 25,\n    },\n    OUT: {\n      direction: \"output\",\n      x: 100,\n      y: 25,\n    },\n  },\n};\nexport default notNodeDefinition;\n","import * as React from \"react\";\nimport getBounds from \"svg-path-bounds\";\n\nimport { boundsToRect } from \"@/geometry\";\n\nimport { NodeDefinition } from \"../../types\";\nimport { createStaticNodeVisual } from \"../../visuals/static-node-visual\";\n\n// Shape path from https://commons.wikimedia.org/wiki/File:OR_ANSI.svg\n\nconst hitPath = `M24.09375 5l2 2.4375S31.75 14.437549 31.75 25s-5.65625 17.5625-5.65625 17.5625l-2 2.4375H41.25c2.408076.000001 7.689699.024514 13.625-2.40625s12.536536-7.343266 17.6875-16.875L71.25 25l1.3125-.71875C62.259387 5.21559 46.006574 5 41.25 5H24.09375z`;\n\nconst orNodeDefinition: NodeDefinition = {\n  type: \"logic-or\",\n  category: \"logic\",\n  displayName: \"OR\",\n  elementProduction: \"logic-or\",\n  visual: createStaticNodeVisual(\n    boundsToRect(getBounds(hitPath)),\n    <g>\n      <path d={hitPath} fill=\"transparent\" stroke=\"none\" />\n      <path\n        className=\"node-select-highlight--stroke\"\n        fill=\"none\"\n        stroke=\"#000\"\n        strokeWidth=\"2\"\n        d=\"M70,25 h30 M31,15 H5 M32,35 H5\"\n      />\n      <path\n        className=\"node-select-highlight--fill\"\n        fillRule=\"evenodd\"\n        d=\"M24.09375 5l2 2.4375S31.75 14.437549 31.75 25s-5.65625 17.5625-5.65625 17.5625l-2 2.4375H41.25c2.408076.000001 7.689699.024514 13.625-2.40625s12.536536-7.343266 17.6875-16.875L71.25 25l1.3125-.71875C62.259387 5.21559 46.006574 5 41.25 5H24.09375zm5.875 3H41.25c4.684173 0 18.28685-.130207 27.96875 17C64.451964 33.429075 58.697469 37.68391 53.5 39.8125 48.139339 42.007924 43.658075 42.000001 41.25 42H30c1.873588-3.108434 4.75-9.04935 4.75-17 0-7.973354-2.908531-13.900185-4.78125-17z\"\n      />\n    </g>\n  ),\n  pins: {\n    A: {\n      direction: \"input\",\n      x: 0,\n      y: 14.5,\n    },\n    B: {\n      direction: \"input\",\n      x: 0,\n      y: 35,\n    },\n    OUT: {\n      direction: \"output\",\n      x: 100,\n      y: 25,\n    },\n  },\n};\nexport default orNodeDefinition;\n","import * as React from \"react\";\nimport getBounds from \"svg-path-bounds\";\n\nimport { boundsToRect } from \"@/geometry\";\n\nimport { NodeDefinition } from \"../../types\";\nimport { createStaticNodeVisual } from \"../../visuals/static-node-visual\";\n\n// Shape path from https://commons.wikimedia.org/wiki/File:XOR_ANSI.svg\n\nconst hitPath = `M24.09375 5l2 2.4375S31.75 14.43755 31.75 25s-5.65625 17.5625-5.65625 17.5625l-2 2.4375H41.25c2.40808 0 7.6897.02451 13.625-2.40625s12.53654-7.34327 17.6875-16.875L71.25 25l1.3125-.71875C62.25939 5.21559 46.00657 5 41.25 5H24.09375z`;\n\nconst xorNodeDefinition: NodeDefinition = {\n  type: \"logic-xor\",\n  category: \"logic\",\n  displayName: \"XOR\",\n  elementProduction: \"logic-xor\",\n  visual: createStaticNodeVisual(\n    boundsToRect(getBounds(hitPath)),\n    <g>\n      <path d={hitPath} fill=\"transparent\" stroke=\"none\" />\n      <path\n        className=\"node-select-highlight--stroke\"\n        fill=\"none\"\n        stroke=\"#000\"\n        strokeWidth=\"2\"\n        d=\"M70,25 h30 M30,15 H5 M31,35 H5\"\n      />\n      <g fillRule=\"evenodd\" className=\"node-select-highlight--fill\">\n        <path d=\"M24.25 42C22.65263 44.6444 22 45 22 45h-3.65625l2-2.4375S26 35.56245 26 25 20.34375 7.4375 20.34375 7.4375l-2-2.4375H22c.78125.9375 1.42188 1.65625 2.21875 3C26.09147 11.09981 29 17.02665 29 25c0 7.95065-2.8967 13.87942-4.75 17z\" />\n        <path d=\"M24.09375 5l2 2.4375S31.75 14.43755 31.75 25s-5.65625 17.5625-5.65625 17.5625l-2 2.4375H41.25c2.40808 0 7.6897.02451 13.625-2.40625s12.53654-7.34327 17.6875-16.875L71.25 25l1.3125-.71875C62.25939 5.21559 46.00657 5 41.25 5H24.09375zm5.875 3H41.25c4.68417 0 18.28685-.1302 27.96875 17C64.45196 33.42907 58.69747 37.68391 53.5 39.8125 48.13934 42.00792 43.65808 42 41.25 42H30c1.87359-3.10843 4.75-9.04935 4.75-17 0-7.97335-2.90853-13.90019-4.78125-17z\" />\n      </g>\n    </g>\n  ),\n  pins: {\n    A: {\n      direction: \"input\",\n      x: 0,\n      y: 14.5,\n    },\n    B: {\n      direction: \"input\",\n      x: 0,\n      y: 35,\n    },\n    OUT: {\n      direction: \"output\",\n      x: 100,\n      y: 25,\n    },\n  },\n};\nexport default xorNodeDefinition;\n","import { LedElementState } from \"@/elements/definitions/output-led\";\n\nimport { NodeDefinition } from \"../../types\";\nimport { createShapePathVisual } from \"../../visuals/ShapePathNode\";\n\nfunction genCirclePath(cx: number, cy: number, r: number): string {\n  return `M ${cx - r}, ${cy}\n    a ${r},${r} 0 1,0 ${r * 2},0\n    a ${r},${r} 0 1,0 ${-(r * 2)},0`;\n}\n\nconst path = genCirclePath(25, 25, 20);\n\nconst ledNodeDefinition: NodeDefinition = {\n  type: \"output-led\",\n  category: \"input-output\",\n  displayName: \"Indicator Light\",\n  elementProduction: \"output-led\",\n  visual: createShapePathVisual(path, {\n    path,\n    stroke: \"black\",\n    strokeWidth: 3,\n    fill: (state: LedElementState) =>\n      state.value ? \"lightgreen\" : \"darkgreen\",\n  }),\n  pins: {\n    IN: {\n      direction: \"input\",\n      x: 0,\n      y: 25,\n    },\n  },\n};\nexport default ledNodeDefinition;\n","import { NodeDefinition } from \"../../types\";\nimport {\n  createShapePathVisual,\n  NodeVisualPathDefinition,\n} from \"../../visuals/ShapePathNode\";\n\n// Shape path from https://commons.wikimedia.org/wiki/File:7-segment_abcdefg.svg\n\nconst SCALE = 3;\nconst OFFSET = [15, 0];\n\n/**\n * Produce a visual path definition of a segment given a series of polygon points.\n * The path definition will color itself based on the state key specified by 'name'\n * @param name The state key to select color based on.  The key should represent a boolean value.\n * @param points An array of [x,y] pairs that make up the polygon.\n */\nfunction createSeg(\n  name: string,\n  points: [number, number][]\n): NodeVisualPathDefinition {\n  const start = points[0];\n  let path = `M${start[0] * SCALE + OFFSET[0]},${start[1] * SCALE + OFFSET[1]}`;\n  for (const p of points.slice(1)) {\n    const [x, y] = p;\n    path += `L${x * SCALE + OFFSET[0]},${y * SCALE + OFFSET[1]}`;\n  }\n  path += \"z\";\n  return {\n    path,\n    fill: (state) => (state[name] ? \"red\" : \"gray\"),\n    strokeWidth: 0,\n  };\n}\n\nconst seg7ElementDefinition: NodeDefinition = {\n  type: \"output-seg7\",\n  category: \"input-output\",\n  displayName: \"7-Segment Display\",\n  elementProduction: \"output-seg7\",\n  visual: createShapePathVisual(`M15,0 V63 H45 V0 z`, [\n    createSeg(\"A\", [\n      [1, 1],\n      [2, 0],\n      [8, 0],\n      [9, 1],\n      [8, 2],\n      [2, 2],\n    ]),\n    createSeg(\"B\", [\n      [9, 1],\n      [10, 2],\n      [10, 8],\n      [9, 9],\n      [8, 8],\n      [8, 2],\n    ]),\n    createSeg(\"C\", [\n      [9, 9],\n      [10, 10],\n      [10, 16],\n      [9, 17],\n      [8, 16],\n      [8, 10],\n    ]),\n    createSeg(\"D\", [\n      [9, 17],\n      [8, 18],\n      [2, 18],\n      [1, 17],\n      [2, 16],\n      [8, 16],\n    ]),\n    createSeg(\"E\", [\n      [1, 17],\n      [0, 16],\n      [0, 10],\n      [1, 9],\n      [2, 10],\n      [2, 16],\n    ]),\n    createSeg(\"F\", [\n      [1, 9],\n      [0, 8],\n      [0, 2],\n      [1, 1],\n      [2, 2],\n      [2, 8],\n    ]),\n    createSeg(\"G\", [\n      [1, 9],\n      [2, 8],\n      [8, 8],\n      [9, 9],\n      [8, 10],\n      [2, 10],\n    ]),\n  ]),\n  pins: {\n    A: {\n      direction: \"input\",\n      x: 0,\n      y: 5,\n    },\n    B: {\n      direction: \"input\",\n      x: 0,\n      y: 15,\n    },\n    C: {\n      direction: \"input\",\n      x: 0,\n      y: 25,\n    },\n    D: {\n      direction: \"input\",\n      x: 0,\n      y: 35,\n    },\n    E: {\n      direction: \"input\",\n      x: 0,\n      y: 45,\n    },\n    F: {\n      direction: \"input\",\n      x: 0,\n      y: 55,\n    },\n    G: {\n      direction: \"input\",\n      x: 0,\n      y: 65,\n    },\n  },\n};\nexport default seg7ElementDefinition;\n","import * as React from \"react\";\nimport getBounds from \"svg-path-bounds\";\n\nimport { boundsToRect } from \"@/geometry\";\n\nimport { NodeDefinition } from \"../../types\";\nimport { createStaticNodeVisual } from \"../../visuals/static-node-visual\";\n\nconst hitPath = `M15,25 a 10,10 0 1,0 20 0 a 10,10 0 1,0 -20,0`;\n\nconst pinHighElementDefinition: NodeDefinition = {\n  type: \"pin-high\",\n  category: \"input-output\",\n  elementProduction: \"pin-high\",\n  displayName: \"High Pin\",\n  visual: createStaticNodeVisual(\n    boundsToRect(getBounds(hitPath)),\n    <g>\n      <path d={hitPath} fill=\"transparent\" stroke=\"none\" />\n      <path\n        className=\"node-select-highlight--stroke\"\n        d=\"M15,25 a 10,10 0 1,0 20 0 a 10,10 0 1,0 -20,0 M35,25 h15\"\n        stroke=\"black\"\n        strokeWidth={2}\n        fill=\"none\"\n      />\n      <path\n        className=\"node-select-highlight--stroke\"\n        d=\"M25,20 v10 M20,25 h10\"\n        fill=\"none\"\n        stroke=\"black\"\n        strokeWidth={2}\n      />\n    </g>\n  ),\n  pins: {\n    OUT: {\n      direction: \"output\",\n      x: 50,\n      y: 25,\n    },\n  },\n};\nexport default pinHighElementDefinition;\n","import * as React from \"react\";\nimport getBounds from \"svg-path-bounds\";\n\nimport { boundsToRect } from \"@/geometry\";\nimport { describeArc } from \"@/svg\";\n\nimport { NodeDefinition } from \"../../types\";\nimport { createStaticNodeVisual } from \"../../visuals/static-node-visual\";\n\nconst hitPath = `M15,25 a 10,10 0 1,0 20 0 a 10,10 0 1,0 -20,0`;\n\nconst pinInputElementDefinition: NodeDefinition = {\n  type: \"pin-input\",\n  category: \"input-output\",\n  displayName: \"Input Pin\",\n  visual: createStaticNodeVisual(\n    boundsToRect(getBounds(hitPath)),\n    <g>\n      <path d={hitPath} fill=\"transparent\" stroke=\"none\" />\n      <path\n        className=\"node-select-highlight--stroke\"\n        d=\"M15,25 a 10,10 0 1,0 20 0 a 10,10 0 1,0 -20,0 M35,25 h15\"\n        stroke=\"black\"\n        strokeWidth={2}\n        fill=\"none\"\n      />\n      <path\n        className=\"node-select-highlight--stroke\"\n        d={describeArc(25, 25, 3, -45, 225)}\n        fill=\"none\"\n        stroke=\"black\"\n        strokeWidth={2}\n      />\n    </g>\n  ),\n  pins: {\n    OUT: {\n      direction: \"output\",\n      x: 50,\n      y: 25,\n    },\n  },\n};\nexport default pinInputElementDefinition;\n","import * as React from \"react\";\nimport getBounds from \"svg-path-bounds\";\n\nimport { boundsToRect } from \"@/geometry\";\n\nimport { NodeDefinition } from \"../../types\";\nimport { createStaticNodeVisual } from \"../../visuals/static-node-visual\";\n\nconst hitPath = `M15,25 a 10,10 0 1,0 20 0 a 10,10 0 1,0 -20,0`;\n\nconst pinOutputElementDefinition: NodeDefinition = {\n  type: \"pin-output\",\n  category: \"input-output\",\n  displayName: \"Output Pin\",\n  visual: createStaticNodeVisual(\n    boundsToRect(getBounds(hitPath)),\n    <g>\n      <path d={hitPath} fill=\"transparent\" stroke=\"none\" />\n      <path\n        className=\"node-select-highlight--stroke\"\n        d=\"M15,25 a 10,10 0 1,0 20 0 a 10,10 0 1,0 -20,0 M15,25 h-15\"\n        stroke=\"black\"\n        strokeWidth={2}\n        fill=\"none\"\n      />\n      <circle\n        className=\"node-select-highlight--fill\"\n        cx={25}\n        cy={25}\n        r={3}\n        fill=\"black\"\n        stroke=\"none\"\n      />\n    </g>\n  ),\n  pins: {\n    IN: {\n      direction: \"input\",\n      x: 0,\n      y: 25,\n    },\n  },\n};\nexport default pinOutputElementDefinition;\n","import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport getBounds from \"svg-path-bounds\";\n\nimport { boundsToRect, Rectangle } from \"@/geometry\";\n\nimport { interactNode } from \"@/actions/node-interact\";\n\nimport { NodeComponentProps, NodeVisualDefinition } from \"../types\";\n\nexport interface NodeVisualPathDefinition {\n  /**\n   * The svg path of this visual element.\n   */\n  path: string;\n  /**\n   * The fill or fill-producing function for this visual element.\n   */\n  fill?: string | ((state: any) => string);\n  stroke?: string | ((state: any) => string);\n  strokeWidth?: number | ((state: any) => number);\n}\n\nexport type NodeVisualPath = string | NodeVisualPathDefinition;\n\ninterface ShapePathNodeProps {\n  /**\n   * The path or paths that make up the visual component of this node.\n   */\n  shapePath: NodeVisualPath | NodeVisualPath[];\n  hitPath: string;\n}\n\nconst ShapePathNode: React.FC<ShapePathNodeProps & NodeComponentProps> = ({\n  circuitNodeId,\n  circuitNodePath,\n  shapePath,\n  hitPath,\n  elementState,\n}) => {\n  const dispatch = useDispatch();\n\n  const onClick = React.useCallback(\n    (e: React.MouseEvent) => {\n      if (!circuitNodeId) {\n        return;\n      }\n\n      if (e.defaultPrevented) {\n        return;\n      }\n\n      e.preventDefault();\n\n      dispatch(interactNode([...(circuitNodePath || []), circuitNodeId]));\n    },\n    [circuitNodeId, dispatch, circuitNodePath]\n  );\n\n  const visuals = normalizeVisuals(shapePath, elementState);\n  const body = visuals.map((v, i) => (\n    <path\n      key={i}\n      d={v.path}\n      className=\"node-select-highlight--stroke node-select-highlight--fill\"\n      fill={v.fill}\n      stroke={v.stroke}\n      strokeWidth={v.strokeWidth}\n    />\n  ));\n\n  return (\n    <g onClick={onClick}>\n      <path d={hitPath} fill=\"transparent\" stroke=\"none\" />\n      {body}\n    </g>\n  );\n};\n\ninterface TrayShapePathNodeProps {\n  shapePath: NodeVisualPath | NodeVisualPath[];\n  hitRect: Rectangle;\n}\nconst TrayShapePadding = 5;\nconst TrayShapePathNode: React.FC<TrayShapePathNodeProps> = ({\n  shapePath,\n  hitRect,\n}) => {\n  const visuals = normalizeVisuals(shapePath, {});\n  const body = visuals.map((v, i) => (\n    <path\n      key={i}\n      d={v.path}\n      className=\"node-select-highlight--stroke node-select-highlight--fill\"\n      fill={v.fill}\n      stroke={v.stroke}\n      strokeWidth={v.strokeWidth}\n    />\n  ));\n\n  return (\n    <svg\n      width={50}\n      height={50}\n      viewBox={`${hitRect.p1.x - TrayShapePadding} ${\n        hitRect.p1.y - TrayShapePadding\n      } ${hitRect.p2.x - hitRect.p1.x + TrayShapePadding * 2} ${\n        hitRect.p2.y - hitRect.p1.y + TrayShapePadding * 2\n      }`}\n    >\n      {body}\n    </svg>\n  );\n};\n\nexport function createShapePathVisual(\n  hitPath: string,\n  shapePath: NodeVisualPath | NodeVisualPath[]\n): NodeVisualDefinition {\n  const hitRect = boundsToRect(getBounds(hitPath));\n  return {\n    trayComponent: () => (\n      <TrayShapePathNode shapePath={shapePath} hitRect={hitRect} />\n    ),\n    component: (props: NodeComponentProps) => (\n      <ShapePathNode shapePath={shapePath} hitPath={hitPath} {...props} />\n    ),\n    hitRect,\n  };\n}\n\nfunction normalizeVisuals(\n  v: NodeVisualPath | NodeVisualPath[],\n  state: any\n): { path: string; fill?: string; stroke?: string; strokeWidth?: number }[] {\n  const asArray = Array.isArray(v) ? v : [v];\n\n  return asArray.map((x) => {\n    if (typeof x === \"string\") {\n      return {\n        path: x,\n        fill: \"black\",\n        stroke: \"black\",\n        strokeWidth: 2,\n      };\n    }\n    const fill = typeof x.fill === \"function\" ? x.fill(state || {}) : x.fill;\n    const stroke =\n      typeof x.stroke === \"function\" ? x.stroke(state || {}) : x.stroke;\n    const strokeWidth =\n      typeof x.strokeWidth === \"function\"\n        ? x.strokeWidth(state || {})\n        : x.strokeWidth;\n    return {\n      path: x.path,\n      fill,\n      stroke,\n      strokeWidth,\n    };\n  });\n}\n","import * as React from \"react\";\n\nimport { Rectangle } from \"@/geometry\";\n\nimport { NodeVisualDefinition } from \"../types\";\n\nconst TrayComponentPadding = 5;\n\nexport function createStaticNodeVisual(\n  hitRect: Rectangle,\n  element: JSX.Element\n): NodeVisualDefinition {\n  return {\n    hitRect,\n    trayComponent: () => (\n      <svg\n        width={50}\n        height={50}\n        viewBox={`${hitRect.p1.x - TrayComponentPadding} ${\n          hitRect.p1.y - TrayComponentPadding\n        } ${hitRect.p2.x - hitRect.p1.x + TrayComponentPadding * 2} ${\n          hitRect.p2.y - hitRect.p1.y + TrayComponentPadding * 2\n        }`}\n      >\n        {element}\n      </svg>\n    ),\n    component: () => element,\n  };\n}\n","import { Point } from \"./geometry\";\n\n// Arc code from https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\nexport function describeArc(\n  x: number,\n  y: number,\n  radius: number,\n  startAngle: number,\n  endAngle: number\n): string {\n  const start = polarToCartesian(x, y, radius, endAngle);\n  const end = polarToCartesian(x, y, radius, startAngle);\n\n  const largeArcFlag = endAngle - startAngle <= 180 ? \"0\" : \"1\";\n\n  const d = [\n    \"M\",\n    start.x,\n    start.y,\n    \"A\",\n    radius,\n    radius,\n    0,\n    largeArcFlag,\n    0,\n    end.x,\n    end.y,\n  ].join(\" \");\n\n  return d;\n}\n\nfunction polarToCartesian(\n  centerX: number,\n  centerY: number,\n  radius: number,\n  angleInDegrees: number\n): Point {\n  const angleInRadians = ((angleInDegrees - 90) * Math.PI) / 180.0;\n\n  return {\n    x: centerX + radius * Math.cos(angleInRadians),\n    y: centerY + radius * Math.sin(angleInRadians),\n  };\n}\n"],"sourceRoot":""}