{"version":3,"sources":["webpack://discrelog/./node_modules/history/esm/history.js"],"names":["addLeadingSlash","path","charAt","stripLeadingSlash","substr","createPath","location","pathname","search","hash","createLocation","state","key","currentLocation","hashIndex","indexOf","searchIndex","parsePath","undefined","decodeURI","e","URIError","createTransitionManager","prompt","listeners","setPrompt","nextPrompt","confirmTransitionTo","action","getUserConfirmation","callback","result","appendListener","fn","isActive","listener","apply","arguments","push","filter","item","notifyListeners","_len","length","args","Array","_key","forEach","canUseDOM","window","document","createElement","getConfirmation","message","confirm","HashChangeEvent$1","HashPathCoders","hashbang","encodePath","decodePath","noslash","slash","stripHash","url","slice","getHashPath","href","substring","replaceHashPath","replace","createHashHistory","props","globalHistory","history","_props","navigator","userAgent","_props$getUserConfirm","_props$hashType","hashType","basename","stripTrailingSlash","_HashPathCoders$hashT","getDOMLocation","prefix","toLowerCase","hasBasename","stripBasename","transitionManager","setState","nextState","forceNextPop","ignorePath","handleHashChange","a","b","encodedPath","prevLocation","ok","fromLocation","toLocation","toIndex","allPaths","lastIndexOf","fromIndex","delta","go","revertPop","handlePop","initialLocation","n","listenerCount","checkDOMListeners","addEventListener","removeEventListener","isBlocked","createHref","baseTag","querySelector","getAttribute","pushHashPath","prevIndex","nextPaths","goBack","goForward","block","unblock","listen","unlisten","clamp","lowerBound","upperBound","Math","min","max","createMemoryHistory","_props$initialEntries","initialEntries","_props$initialIndex","initialIndex","_props$keyLength","keyLength","entries","createKey","random","toString","index","map","entry","nextIndex","nextEntries","splice","canGo"],"mappings":"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","file":"npm.history.6e7d617c604ccd7da7e5.bundle.js","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport resolvePathname from 'resolve-pathname';\nimport valueEqual from 'value-equal';\nimport warning from 'tiny-warning';\nimport invariant from 'tiny-invariant';\n\nfunction addLeadingSlash(path) {\n  return path.charAt(0) === '/' ? path : '/' + path;\n}\nfunction stripLeadingSlash(path) {\n  return path.charAt(0) === '/' ? path.substr(1) : path;\n}\nfunction hasBasename(path, prefix) {\n  return path.toLowerCase().indexOf(prefix.toLowerCase()) === 0 && '/?#'.indexOf(path.charAt(prefix.length)) !== -1;\n}\nfunction stripBasename(path, prefix) {\n  return hasBasename(path, prefix) ? path.substr(prefix.length) : path;\n}\nfunction stripTrailingSlash(path) {\n  return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;\n}\nfunction parsePath(path) {\n  var pathname = path || '/';\n  var search = '';\n  var hash = '';\n  var hashIndex = pathname.indexOf('#');\n\n  if (hashIndex !== -1) {\n    hash = pathname.substr(hashIndex);\n    pathname = pathname.substr(0, hashIndex);\n  }\n\n  var searchIndex = pathname.indexOf('?');\n\n  if (searchIndex !== -1) {\n    search = pathname.substr(searchIndex);\n    pathname = pathname.substr(0, searchIndex);\n  }\n\n  return {\n    pathname: pathname,\n    search: search === '?' ? '' : search,\n    hash: hash === '#' ? '' : hash\n  };\n}\nfunction createPath(location) {\n  var pathname = location.pathname,\n      search = location.search,\n      hash = location.hash;\n  var path = pathname || '/';\n  if (search && search !== '?') path += search.charAt(0) === '?' ? search : \"?\" + search;\n  if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : \"#\" + hash;\n  return path;\n}\n\nfunction createLocation(path, state, key, currentLocation) {\n  var location;\n\n  if (typeof path === 'string') {\n    // Two-arg form: push(path, state)\n    location = parsePath(path);\n    location.state = state;\n  } else {\n    // One-arg form: push(location)\n    location = _extends({}, path);\n    if (location.pathname === undefined) location.pathname = '';\n\n    if (location.search) {\n      if (location.search.charAt(0) !== '?') location.search = '?' + location.search;\n    } else {\n      location.search = '';\n    }\n\n    if (location.hash) {\n      if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;\n    } else {\n      location.hash = '';\n    }\n\n    if (state !== undefined && location.state === undefined) location.state = state;\n  }\n\n  try {\n    location.pathname = decodeURI(location.pathname);\n  } catch (e) {\n    if (e instanceof URIError) {\n      throw new URIError('Pathname \"' + location.pathname + '\" could not be decoded. ' + 'This is likely caused by an invalid percent-encoding.');\n    } else {\n      throw e;\n    }\n  }\n\n  if (key) location.key = key;\n\n  if (currentLocation) {\n    // Resolve incomplete/relative pathname relative to current location.\n    if (!location.pathname) {\n      location.pathname = currentLocation.pathname;\n    } else if (location.pathname.charAt(0) !== '/') {\n      location.pathname = resolvePathname(location.pathname, currentLocation.pathname);\n    }\n  } else {\n    // When there is no prior location and pathname is empty, set it to /\n    if (!location.pathname) {\n      location.pathname = '/';\n    }\n  }\n\n  return location;\n}\nfunction locationsAreEqual(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && valueEqual(a.state, b.state);\n}\n\nfunction createTransitionManager() {\n  var prompt = null;\n\n  function setPrompt(nextPrompt) {\n    process.env.NODE_ENV !== \"production\" ? warning(prompt == null, 'A history supports only one prompt at a time') : void 0;\n    prompt = nextPrompt;\n    return function () {\n      if (prompt === nextPrompt) prompt = null;\n    };\n  }\n\n  function confirmTransitionTo(location, action, getUserConfirmation, callback) {\n    // TODO: If another transition starts while we're still confirming\n    // the previous one, we may end up in a weird state. Figure out the\n    // best way to handle this.\n    if (prompt != null) {\n      var result = typeof prompt === 'function' ? prompt(location, action) : prompt;\n\n      if (typeof result === 'string') {\n        if (typeof getUserConfirmation === 'function') {\n          getUserConfirmation(result, callback);\n        } else {\n          process.env.NODE_ENV !== \"production\" ? warning(false, 'A history needs a getUserConfirmation function in order to use a prompt message') : void 0;\n          callback(true);\n        }\n      } else {\n        // Return false from a transition hook to cancel the transition.\n        callback(result !== false);\n      }\n    } else {\n      callback(true);\n    }\n  }\n\n  var listeners = [];\n\n  function appendListener(fn) {\n    var isActive = true;\n\n    function listener() {\n      if (isActive) fn.apply(void 0, arguments);\n    }\n\n    listeners.push(listener);\n    return function () {\n      isActive = false;\n      listeners = listeners.filter(function (item) {\n        return item !== listener;\n      });\n    };\n  }\n\n  function notifyListeners() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    listeners.forEach(function (listener) {\n      return listener.apply(void 0, args);\n    });\n  }\n\n  return {\n    setPrompt: setPrompt,\n    confirmTransitionTo: confirmTransitionTo,\n    appendListener: appendListener,\n    notifyListeners: notifyListeners\n  };\n}\n\nvar canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\nfunction getConfirmation(message, callback) {\n  callback(window.confirm(message)); // eslint-disable-line no-alert\n}\n/**\n * Returns true if the HTML5 history API is supported. Taken from Modernizr.\n *\n * https://github.com/Modernizr/Modernizr/blob/master/LICENSE\n * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js\n * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586\n */\n\nfunction supportsHistory() {\n  var ua = window.navigator.userAgent;\n  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;\n  return window.history && 'pushState' in window.history;\n}\n/**\n * Returns true if browser fires popstate on hash change.\n * IE10 and IE11 do not.\n */\n\nfunction supportsPopStateOnHashChange() {\n  return window.navigator.userAgent.indexOf('Trident') === -1;\n}\n/**\n * Returns false if using go(n) with hash history causes a full page reload.\n */\n\nfunction supportsGoWithoutReloadUsingHash() {\n  return window.navigator.userAgent.indexOf('Firefox') === -1;\n}\n/**\n * Returns true if a given popstate event is an extraneous WebKit event.\n * Accounts for the fact that Chrome on iOS fires real popstate events\n * containing undefined state when pressing the back button.\n */\n\nfunction isExtraneousPopstateEvent(event) {\n  return event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;\n}\n\nvar PopStateEvent = 'popstate';\nvar HashChangeEvent = 'hashchange';\n\nfunction getHistoryState() {\n  try {\n    return window.history.state || {};\n  } catch (e) {\n    // IE 11 sometimes throws when accessing window.history.state\n    // See https://github.com/ReactTraining/history/pull/289\n    return {};\n  }\n}\n/**\n * Creates a history object that uses the HTML5 history API including\n * pushState, replaceState, and the popstate event.\n */\n\n\nfunction createBrowserHistory(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  !canUseDOM ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Browser history needs a DOM') : invariant(false) : void 0;\n  var globalHistory = window.history;\n  var canUseHistory = supportsHistory();\n  var needsHashChangeListener = !supportsPopStateOnHashChange();\n  var _props = props,\n      _props$forceRefresh = _props.forceRefresh,\n      forceRefresh = _props$forceRefresh === void 0 ? false : _props$forceRefresh,\n      _props$getUserConfirm = _props.getUserConfirmation,\n      getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,\n      _props$keyLength = _props.keyLength,\n      keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;\n  var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';\n\n  function getDOMLocation(historyState) {\n    var _ref = historyState || {},\n        key = _ref.key,\n        state = _ref.state;\n\n    var _window$location = window.location,\n        pathname = _window$location.pathname,\n        search = _window$location.search,\n        hash = _window$location.hash;\n    var path = pathname + search + hash;\n    process.env.NODE_ENV !== \"production\" ? warning(!basename || hasBasename(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path \"' + path + '\" to begin with \"' + basename + '\".') : void 0;\n    if (basename) path = stripBasename(path, basename);\n    return createLocation(path, state, key);\n  }\n\n  function createKey() {\n    return Math.random().toString(36).substr(2, keyLength);\n  }\n\n  var transitionManager = createTransitionManager();\n\n  function setState(nextState) {\n    _extends(history, nextState);\n\n    history.length = globalHistory.length;\n    transitionManager.notifyListeners(history.location, history.action);\n  }\n\n  function handlePopState(event) {\n    // Ignore extraneous popstate events in WebKit.\n    if (isExtraneousPopstateEvent(event)) return;\n    handlePop(getDOMLocation(event.state));\n  }\n\n  function handleHashChange() {\n    handlePop(getDOMLocation(getHistoryState()));\n  }\n\n  var forceNextPop = false;\n\n  function handlePop(location) {\n    if (forceNextPop) {\n      forceNextPop = false;\n      setState();\n    } else {\n      var action = 'POP';\n      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n        if (ok) {\n          setState({\n            action: action,\n            location: location\n          });\n        } else {\n          revertPop(location);\n        }\n      });\n    }\n  }\n\n  function revertPop(fromLocation) {\n    var toLocation = history.location; // TODO: We could probably make this more reliable by\n    // keeping a list of keys we've seen in sessionStorage.\n    // Instead, we just default to 0 for keys we don't know.\n\n    var toIndex = allKeys.indexOf(toLocation.key);\n    if (toIndex === -1) toIndex = 0;\n    var fromIndex = allKeys.indexOf(fromLocation.key);\n    if (fromIndex === -1) fromIndex = 0;\n    var delta = toIndex - fromIndex;\n\n    if (delta) {\n      forceNextPop = true;\n      go(delta);\n    }\n  }\n\n  var initialLocation = getDOMLocation(getHistoryState());\n  var allKeys = [initialLocation.key]; // Public interface\n\n  function createHref(location) {\n    return basename + createPath(location);\n  }\n\n  function push(path, state) {\n    process.env.NODE_ENV !== \"production\" ? warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : void 0;\n    var action = 'PUSH';\n    var location = createLocation(path, state, createKey(), history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var href = createHref(location);\n      var key = location.key,\n          state = location.state;\n\n      if (canUseHistory) {\n        globalHistory.pushState({\n          key: key,\n          state: state\n        }, null, href);\n\n        if (forceRefresh) {\n          window.location.href = href;\n        } else {\n          var prevIndex = allKeys.indexOf(history.location.key);\n          var nextKeys = allKeys.slice(0, prevIndex + 1);\n          nextKeys.push(location.key);\n          allKeys = nextKeys;\n          setState({\n            action: action,\n            location: location\n          });\n        }\n      } else {\n        process.env.NODE_ENV !== \"production\" ? warning(state === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history') : void 0;\n        window.location.href = href;\n      }\n    });\n  }\n\n  function replace(path, state) {\n    process.env.NODE_ENV !== \"production\" ? warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : void 0;\n    var action = 'REPLACE';\n    var location = createLocation(path, state, createKey(), history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var href = createHref(location);\n      var key = location.key,\n          state = location.state;\n\n      if (canUseHistory) {\n        globalHistory.replaceState({\n          key: key,\n          state: state\n        }, null, href);\n\n        if (forceRefresh) {\n          window.location.replace(href);\n        } else {\n          var prevIndex = allKeys.indexOf(history.location.key);\n          if (prevIndex !== -1) allKeys[prevIndex] = location.key;\n          setState({\n            action: action,\n            location: location\n          });\n        }\n      } else {\n        process.env.NODE_ENV !== \"production\" ? warning(state === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history') : void 0;\n        window.location.replace(href);\n      }\n    });\n  }\n\n  function go(n) {\n    globalHistory.go(n);\n  }\n\n  function goBack() {\n    go(-1);\n  }\n\n  function goForward() {\n    go(1);\n  }\n\n  var listenerCount = 0;\n\n  function checkDOMListeners(delta) {\n    listenerCount += delta;\n\n    if (listenerCount === 1 && delta === 1) {\n      window.addEventListener(PopStateEvent, handlePopState);\n      if (needsHashChangeListener) window.addEventListener(HashChangeEvent, handleHashChange);\n    } else if (listenerCount === 0) {\n      window.removeEventListener(PopStateEvent, handlePopState);\n      if (needsHashChangeListener) window.removeEventListener(HashChangeEvent, handleHashChange);\n    }\n  }\n\n  var isBlocked = false;\n\n  function block(prompt) {\n    if (prompt === void 0) {\n      prompt = false;\n    }\n\n    var unblock = transitionManager.setPrompt(prompt);\n\n    if (!isBlocked) {\n      checkDOMListeners(1);\n      isBlocked = true;\n    }\n\n    return function () {\n      if (isBlocked) {\n        isBlocked = false;\n        checkDOMListeners(-1);\n      }\n\n      return unblock();\n    };\n  }\n\n  function listen(listener) {\n    var unlisten = transitionManager.appendListener(listener);\n    checkDOMListeners(1);\n    return function () {\n      checkDOMListeners(-1);\n      unlisten();\n    };\n  }\n\n  var history = {\n    length: globalHistory.length,\n    action: 'POP',\n    location: initialLocation,\n    createHref: createHref,\n    push: push,\n    replace: replace,\n    go: go,\n    goBack: goBack,\n    goForward: goForward,\n    block: block,\n    listen: listen\n  };\n  return history;\n}\n\nvar HashChangeEvent$1 = 'hashchange';\nvar HashPathCoders = {\n  hashbang: {\n    encodePath: function encodePath(path) {\n      return path.charAt(0) === '!' ? path : '!/' + stripLeadingSlash(path);\n    },\n    decodePath: function decodePath(path) {\n      return path.charAt(0) === '!' ? path.substr(1) : path;\n    }\n  },\n  noslash: {\n    encodePath: stripLeadingSlash,\n    decodePath: addLeadingSlash\n  },\n  slash: {\n    encodePath: addLeadingSlash,\n    decodePath: addLeadingSlash\n  }\n};\n\nfunction stripHash(url) {\n  var hashIndex = url.indexOf('#');\n  return hashIndex === -1 ? url : url.slice(0, hashIndex);\n}\n\nfunction getHashPath() {\n  // We can't use window.location.hash here because it's not\n  // consistent across browsers - Firefox will pre-decode it!\n  var href = window.location.href;\n  var hashIndex = href.indexOf('#');\n  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);\n}\n\nfunction pushHashPath(path) {\n  window.location.hash = path;\n}\n\nfunction replaceHashPath(path) {\n  window.location.replace(stripHash(window.location.href) + '#' + path);\n}\n\nfunction createHashHistory(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  !canUseDOM ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Hash history needs a DOM') : invariant(false) : void 0;\n  var globalHistory = window.history;\n  var canGoWithoutReload = supportsGoWithoutReloadUsingHash();\n  var _props = props,\n      _props$getUserConfirm = _props.getUserConfirmation,\n      getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,\n      _props$hashType = _props.hashType,\n      hashType = _props$hashType === void 0 ? 'slash' : _props$hashType;\n  var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';\n  var _HashPathCoders$hashT = HashPathCoders[hashType],\n      encodePath = _HashPathCoders$hashT.encodePath,\n      decodePath = _HashPathCoders$hashT.decodePath;\n\n  function getDOMLocation() {\n    var path = decodePath(getHashPath());\n    process.env.NODE_ENV !== \"production\" ? warning(!basename || hasBasename(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path \"' + path + '\" to begin with \"' + basename + '\".') : void 0;\n    if (basename) path = stripBasename(path, basename);\n    return createLocation(path);\n  }\n\n  var transitionManager = createTransitionManager();\n\n  function setState(nextState) {\n    _extends(history, nextState);\n\n    history.length = globalHistory.length;\n    transitionManager.notifyListeners(history.location, history.action);\n  }\n\n  var forceNextPop = false;\n  var ignorePath = null;\n\n  function locationsAreEqual$$1(a, b) {\n    return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash;\n  }\n\n  function handleHashChange() {\n    var path = getHashPath();\n    var encodedPath = encodePath(path);\n\n    if (path !== encodedPath) {\n      // Ensure we always have a properly-encoded hash.\n      replaceHashPath(encodedPath);\n    } else {\n      var location = getDOMLocation();\n      var prevLocation = history.location;\n      if (!forceNextPop && locationsAreEqual$$1(prevLocation, location)) return; // A hashchange doesn't always == location change.\n\n      if (ignorePath === createPath(location)) return; // Ignore this change; we already setState in push/replace.\n\n      ignorePath = null;\n      handlePop(location);\n    }\n  }\n\n  function handlePop(location) {\n    if (forceNextPop) {\n      forceNextPop = false;\n      setState();\n    } else {\n      var action = 'POP';\n      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n        if (ok) {\n          setState({\n            action: action,\n            location: location\n          });\n        } else {\n          revertPop(location);\n        }\n      });\n    }\n  }\n\n  function revertPop(fromLocation) {\n    var toLocation = history.location; // TODO: We could probably make this more reliable by\n    // keeping a list of paths we've seen in sessionStorage.\n    // Instead, we just default to 0 for paths we don't know.\n\n    var toIndex = allPaths.lastIndexOf(createPath(toLocation));\n    if (toIndex === -1) toIndex = 0;\n    var fromIndex = allPaths.lastIndexOf(createPath(fromLocation));\n    if (fromIndex === -1) fromIndex = 0;\n    var delta = toIndex - fromIndex;\n\n    if (delta) {\n      forceNextPop = true;\n      go(delta);\n    }\n  } // Ensure the hash is encoded properly before doing anything else.\n\n\n  var path = getHashPath();\n  var encodedPath = encodePath(path);\n  if (path !== encodedPath) replaceHashPath(encodedPath);\n  var initialLocation = getDOMLocation();\n  var allPaths = [createPath(initialLocation)]; // Public interface\n\n  function createHref(location) {\n    var baseTag = document.querySelector('base');\n    var href = '';\n\n    if (baseTag && baseTag.getAttribute('href')) {\n      href = stripHash(window.location.href);\n    }\n\n    return href + '#' + encodePath(basename + createPath(location));\n  }\n\n  function push(path, state) {\n    process.env.NODE_ENV !== \"production\" ? warning(state === undefined, 'Hash history cannot push state; it is ignored') : void 0;\n    var action = 'PUSH';\n    var location = createLocation(path, undefined, undefined, history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var path = createPath(location);\n      var encodedPath = encodePath(basename + path);\n      var hashChanged = getHashPath() !== encodedPath;\n\n      if (hashChanged) {\n        // We cannot tell if a hashchange was caused by a PUSH, so we'd\n        // rather setState here and ignore the hashchange. The caveat here\n        // is that other hash histories in the page will consider it a POP.\n        ignorePath = path;\n        pushHashPath(encodedPath);\n        var prevIndex = allPaths.lastIndexOf(createPath(history.location));\n        var nextPaths = allPaths.slice(0, prevIndex + 1);\n        nextPaths.push(path);\n        allPaths = nextPaths;\n        setState({\n          action: action,\n          location: location\n        });\n      } else {\n        process.env.NODE_ENV !== \"production\" ? warning(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack') : void 0;\n        setState();\n      }\n    });\n  }\n\n  function replace(path, state) {\n    process.env.NODE_ENV !== \"production\" ? warning(state === undefined, 'Hash history cannot replace state; it is ignored') : void 0;\n    var action = 'REPLACE';\n    var location = createLocation(path, undefined, undefined, history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var path = createPath(location);\n      var encodedPath = encodePath(basename + path);\n      var hashChanged = getHashPath() !== encodedPath;\n\n      if (hashChanged) {\n        // We cannot tell if a hashchange was caused by a REPLACE, so we'd\n        // rather setState here and ignore the hashchange. The caveat here\n        // is that other hash histories in the page will consider it a POP.\n        ignorePath = path;\n        replaceHashPath(encodedPath);\n      }\n\n      var prevIndex = allPaths.indexOf(createPath(history.location));\n      if (prevIndex !== -1) allPaths[prevIndex] = path;\n      setState({\n        action: action,\n        location: location\n      });\n    });\n  }\n\n  function go(n) {\n    process.env.NODE_ENV !== \"production\" ? warning(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser') : void 0;\n    globalHistory.go(n);\n  }\n\n  function goBack() {\n    go(-1);\n  }\n\n  function goForward() {\n    go(1);\n  }\n\n  var listenerCount = 0;\n\n  function checkDOMListeners(delta) {\n    listenerCount += delta;\n\n    if (listenerCount === 1 && delta === 1) {\n      window.addEventListener(HashChangeEvent$1, handleHashChange);\n    } else if (listenerCount === 0) {\n      window.removeEventListener(HashChangeEvent$1, handleHashChange);\n    }\n  }\n\n  var isBlocked = false;\n\n  function block(prompt) {\n    if (prompt === void 0) {\n      prompt = false;\n    }\n\n    var unblock = transitionManager.setPrompt(prompt);\n\n    if (!isBlocked) {\n      checkDOMListeners(1);\n      isBlocked = true;\n    }\n\n    return function () {\n      if (isBlocked) {\n        isBlocked = false;\n        checkDOMListeners(-1);\n      }\n\n      return unblock();\n    };\n  }\n\n  function listen(listener) {\n    var unlisten = transitionManager.appendListener(listener);\n    checkDOMListeners(1);\n    return function () {\n      checkDOMListeners(-1);\n      unlisten();\n    };\n  }\n\n  var history = {\n    length: globalHistory.length,\n    action: 'POP',\n    location: initialLocation,\n    createHref: createHref,\n    push: push,\n    replace: replace,\n    go: go,\n    goBack: goBack,\n    goForward: goForward,\n    block: block,\n    listen: listen\n  };\n  return history;\n}\n\nfunction clamp(n, lowerBound, upperBound) {\n  return Math.min(Math.max(n, lowerBound), upperBound);\n}\n/**\n * Creates a history object that stores locations in memory.\n */\n\n\nfunction createMemoryHistory(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _props = props,\n      getUserConfirmation = _props.getUserConfirmation,\n      _props$initialEntries = _props.initialEntries,\n      initialEntries = _props$initialEntries === void 0 ? ['/'] : _props$initialEntries,\n      _props$initialIndex = _props.initialIndex,\n      initialIndex = _props$initialIndex === void 0 ? 0 : _props$initialIndex,\n      _props$keyLength = _props.keyLength,\n      keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;\n  var transitionManager = createTransitionManager();\n\n  function setState(nextState) {\n    _extends(history, nextState);\n\n    history.length = history.entries.length;\n    transitionManager.notifyListeners(history.location, history.action);\n  }\n\n  function createKey() {\n    return Math.random().toString(36).substr(2, keyLength);\n  }\n\n  var index = clamp(initialIndex, 0, initialEntries.length - 1);\n  var entries = initialEntries.map(function (entry) {\n    return typeof entry === 'string' ? createLocation(entry, undefined, createKey()) : createLocation(entry, undefined, entry.key || createKey());\n  }); // Public interface\n\n  var createHref = createPath;\n\n  function push(path, state) {\n    process.env.NODE_ENV !== \"production\" ? warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : void 0;\n    var action = 'PUSH';\n    var location = createLocation(path, state, createKey(), history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var prevIndex = history.index;\n      var nextIndex = prevIndex + 1;\n      var nextEntries = history.entries.slice(0);\n\n      if (nextEntries.length > nextIndex) {\n        nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);\n      } else {\n        nextEntries.push(location);\n      }\n\n      setState({\n        action: action,\n        location: location,\n        index: nextIndex,\n        entries: nextEntries\n      });\n    });\n  }\n\n  function replace(path, state) {\n    process.env.NODE_ENV !== \"production\" ? warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : void 0;\n    var action = 'REPLACE';\n    var location = createLocation(path, state, createKey(), history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      history.entries[history.index] = location;\n      setState({\n        action: action,\n        location: location\n      });\n    });\n  }\n\n  function go(n) {\n    var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);\n    var action = 'POP';\n    var location = history.entries[nextIndex];\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (ok) {\n        setState({\n          action: action,\n          location: location,\n          index: nextIndex\n        });\n      } else {\n        // Mimic the behavior of DOM histories by\n        // causing a render after a cancelled POP.\n        setState();\n      }\n    });\n  }\n\n  function goBack() {\n    go(-1);\n  }\n\n  function goForward() {\n    go(1);\n  }\n\n  function canGo(n) {\n    var nextIndex = history.index + n;\n    return nextIndex >= 0 && nextIndex < history.entries.length;\n  }\n\n  function block(prompt) {\n    if (prompt === void 0) {\n      prompt = false;\n    }\n\n    return transitionManager.setPrompt(prompt);\n  }\n\n  function listen(listener) {\n    return transitionManager.appendListener(listener);\n  }\n\n  var history = {\n    length: entries.length,\n    action: 'POP',\n    location: entries[index],\n    index: index,\n    entries: entries,\n    createHref: createHref,\n    push: push,\n    replace: replace,\n    go: go,\n    goBack: goBack,\n    goForward: goForward,\n    canGo: canGo,\n    block: block,\n    listen: listen\n  };\n  return history;\n}\n\nexport { createBrowserHistory, createHashHistory, createMemoryHistory, createLocation, locationsAreEqual, parsePath, createPath };\n"],"sourceRoot":""}