{"version":3,"sources":["webpack://discrelog/./node_modules/react-redux/es/components/Context.js","webpack://discrelog/./node_modules/react-redux/es/utils/batch.js","webpack://discrelog/./node_modules/react-redux/es/utils/Subscription.js","webpack://discrelog/./node_modules/react-redux/es/components/Provider.js","webpack://discrelog/./node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js","webpack://discrelog/./node_modules/react-redux/es/hooks/useReduxContext.js","webpack://discrelog/./node_modules/react-redux/es/hooks/useStore.js","webpack://discrelog/./node_modules/react-redux/es/hooks/useDispatch.js","webpack://discrelog/./node_modules/react-redux/es/hooks/useSelector.js","webpack://discrelog/./node_modules/react-redux/es/index.js"],"names":["batch","callback","getBatch","nullListeners","notify","Subscription","store","parentSub","this","unsubscribe","listeners","handleChangeWrapper","bind","_proto","prototype","addNestedSub","listener","trySubscribe","subscribe","notifyNestedSubs","onStateChange","isSubscribed","Boolean","first","last","clear","next","get","push","prev","createListenerCollection","tryUnsubscribe","_ref","context","children","contextValue","useMemo","subscription","previousState","getState","useEffect","Context","Provider","value","window","document","createElement","useLayoutEffect","useContext","createStoreHook","useReduxContext","createDispatchHook","useStore","dispatch","useDispatch","refEquality","a","b","createSelectorHook","selector","equalityFn","_useReduxContext","selectedState","contextSub","forceRender","useReducer","s","latestSubscriptionCallbackError","useRef","latestSelector","latestStoreState","latestSelectedState","storeState","current","err","message","stack","undefined","checkForUpdates","newSelectedState","useSelectorWithStoreAndSubscription","useDebugValue","newBatch","useSelector"],"mappings":"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","file":"npm.react-redux.4ca21ff80229fdaaff6c.bundle.js","sourcesContent":["import React from 'react';\nexport var ReactReduxContext = /*#__PURE__*/React.createContext(null);\n\nif (process.env.NODE_ENV !== 'production') {\n  ReactReduxContext.displayName = 'ReactRedux';\n}\n\nexport default ReactReduxContext;","// Default to a dummy \"batch\" implementation that just runs the callback\nfunction defaultNoopBatch(callback) {\n  callback();\n}\n\nvar batch = defaultNoopBatch; // Allow injecting another batching function later\n\nexport var setBatch = function setBatch(newBatch) {\n  return batch = newBatch;\n}; // Supply a getter just to skip dealing with ESM bindings\n\nexport var getBatch = function getBatch() {\n  return batch;\n};","import { getBatch } from './batch'; // encapsulates the subscription logic for connecting a component to the redux store, as\n// well as nesting subscriptions of descendant components, so that we can ensure the\n// ancestor components re-render before descendants\n\nvar nullListeners = {\n  notify: function notify() {}\n};\n\nfunction createListenerCollection() {\n  var batch = getBatch();\n  var first = null;\n  var last = null;\n  return {\n    clear: function clear() {\n      first = null;\n      last = null;\n    },\n    notify: function notify() {\n      batch(function () {\n        var listener = first;\n\n        while (listener) {\n          listener.callback();\n          listener = listener.next;\n        }\n      });\n    },\n    get: function get() {\n      var listeners = [];\n      var listener = first;\n\n      while (listener) {\n        listeners.push(listener);\n        listener = listener.next;\n      }\n\n      return listeners;\n    },\n    subscribe: function subscribe(callback) {\n      var isSubscribed = true;\n      var listener = last = {\n        callback: callback,\n        next: null,\n        prev: last\n      };\n\n      if (listener.prev) {\n        listener.prev.next = listener;\n      } else {\n        first = listener;\n      }\n\n      return function unsubscribe() {\n        if (!isSubscribed || first === null) return;\n        isSubscribed = false;\n\n        if (listener.next) {\n          listener.next.prev = listener.prev;\n        } else {\n          last = listener.prev;\n        }\n\n        if (listener.prev) {\n          listener.prev.next = listener.next;\n        } else {\n          first = listener.next;\n        }\n      };\n    }\n  };\n}\n\nvar Subscription = /*#__PURE__*/function () {\n  function Subscription(store, parentSub) {\n    this.store = store;\n    this.parentSub = parentSub;\n    this.unsubscribe = null;\n    this.listeners = nullListeners;\n    this.handleChangeWrapper = this.handleChangeWrapper.bind(this);\n  }\n\n  var _proto = Subscription.prototype;\n\n  _proto.addNestedSub = function addNestedSub(listener) {\n    this.trySubscribe();\n    return this.listeners.subscribe(listener);\n  };\n\n  _proto.notifyNestedSubs = function notifyNestedSubs() {\n    this.listeners.notify();\n  };\n\n  _proto.handleChangeWrapper = function handleChangeWrapper() {\n    if (this.onStateChange) {\n      this.onStateChange();\n    }\n  };\n\n  _proto.isSubscribed = function isSubscribed() {\n    return Boolean(this.unsubscribe);\n  };\n\n  _proto.trySubscribe = function trySubscribe() {\n    if (!this.unsubscribe) {\n      this.unsubscribe = this.parentSub ? this.parentSub.addNestedSub(this.handleChangeWrapper) : this.store.subscribe(this.handleChangeWrapper);\n      this.listeners = createListenerCollection();\n    }\n  };\n\n  _proto.tryUnsubscribe = function tryUnsubscribe() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n      this.unsubscribe = null;\n      this.listeners.clear();\n      this.listeners = nullListeners;\n    }\n  };\n\n  return Subscription;\n}();\n\nexport { Subscription as default };","import React, { useMemo, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { ReactReduxContext } from './Context';\nimport Subscription from '../utils/Subscription';\n\nfunction Provider(_ref) {\n  var store = _ref.store,\n      context = _ref.context,\n      children = _ref.children;\n  var contextValue = useMemo(function () {\n    var subscription = new Subscription(store);\n    subscription.onStateChange = subscription.notifyNestedSubs;\n    return {\n      store: store,\n      subscription: subscription\n    };\n  }, [store]);\n  var previousState = useMemo(function () {\n    return store.getState();\n  }, [store]);\n  useEffect(function () {\n    var subscription = contextValue.subscription;\n    subscription.trySubscribe();\n\n    if (previousState !== store.getState()) {\n      subscription.notifyNestedSubs();\n    }\n\n    return function () {\n      subscription.tryUnsubscribe();\n      subscription.onStateChange = null;\n    };\n  }, [contextValue, previousState]);\n  var Context = context || ReactReduxContext;\n  return /*#__PURE__*/React.createElement(Context.Provider, {\n    value: contextValue\n  }, children);\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  Provider.propTypes = {\n    store: PropTypes.shape({\n      subscribe: PropTypes.func.isRequired,\n      dispatch: PropTypes.func.isRequired,\n      getState: PropTypes.func.isRequired\n    }),\n    context: PropTypes.object,\n    children: PropTypes.any\n  };\n}\n\nexport default Provider;","import { useEffect, useLayoutEffect } from 'react'; // React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser. We need useLayoutEffect to ensure the store\n// subscription callback always has the selector from the latest render commit\n// available, otherwise a store update may happen between render and the effect,\n// which may cause missed updates; we also must ensure the store subscription\n// is created synchronously, otherwise a store update may occur before the\n// subscription is created and an inconsistent state may be observed\n\nexport var useIsomorphicLayoutEffect = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined' ? useLayoutEffect : useEffect;","import { useContext } from 'react';\nimport { ReactReduxContext } from '../components/Context';\n/**\n * A hook to access the value of the `ReactReduxContext`. This is a low-level\n * hook that you should usually not need to call directly.\n *\n * @returns {any} the value of the `ReactReduxContext`\n *\n * @example\n *\n * import React from 'react'\n * import { useReduxContext } from 'react-redux'\n *\n * export const CounterComponent = ({ value }) => {\n *   const { store } = useReduxContext()\n *   return <div>{store.getState()}</div>\n * }\n */\n\nexport function useReduxContext() {\n  var contextValue = useContext(ReactReduxContext);\n\n  if (process.env.NODE_ENV !== 'production' && !contextValue) {\n    throw new Error('could not find react-redux context value; please ensure the component is wrapped in a <Provider>');\n  }\n\n  return contextValue;\n}","import { useContext } from 'react';\nimport { ReactReduxContext } from '../components/Context';\nimport { useReduxContext as useDefaultReduxContext } from './useReduxContext';\n/**\n * Hook factory, which creates a `useStore` hook bound to a given context.\n *\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\n * @returns {Function} A `useStore` hook bound to the specified context.\n */\n\nexport function createStoreHook(context) {\n  if (context === void 0) {\n    context = ReactReduxContext;\n  }\n\n  var useReduxContext = context === ReactReduxContext ? useDefaultReduxContext : function () {\n    return useContext(context);\n  };\n  return function useStore() {\n    var _useReduxContext = useReduxContext(),\n        store = _useReduxContext.store;\n\n    return store;\n  };\n}\n/**\n * A hook to access the redux store.\n *\n * @returns {any} the redux store\n *\n * @example\n *\n * import React from 'react'\n * import { useStore } from 'react-redux'\n *\n * export const ExampleComponent = () => {\n *   const store = useStore()\n *   return <div>{store.getState()}</div>\n * }\n */\n\nexport var useStore = /*#__PURE__*/createStoreHook();","import { ReactReduxContext } from '../components/Context';\nimport { useStore as useDefaultStore, createStoreHook } from './useStore';\n/**\n * Hook factory, which creates a `useDispatch` hook bound to a given context.\n *\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\n * @returns {Function} A `useDispatch` hook bound to the specified context.\n */\n\nexport function createDispatchHook(context) {\n  if (context === void 0) {\n    context = ReactReduxContext;\n  }\n\n  var useStore = context === ReactReduxContext ? useDefaultStore : createStoreHook(context);\n  return function useDispatch() {\n    var store = useStore();\n    return store.dispatch;\n  };\n}\n/**\n * A hook to access the redux `dispatch` function.\n *\n * @returns {any|function} redux store's `dispatch` function\n *\n * @example\n *\n * import React, { useCallback } from 'react'\n * import { useDispatch } from 'react-redux'\n *\n * export const CounterComponent = ({ value }) => {\n *   const dispatch = useDispatch()\n *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])\n *   return (\n *     <div>\n *       <span>{value}</span>\n *       <button onClick={increaseCounter}>Increase counter</button>\n *     </div>\n *   )\n * }\n */\n\nexport var useDispatch = /*#__PURE__*/createDispatchHook();","import { useReducer, useRef, useMemo, useContext, useDebugValue } from 'react';\nimport { useReduxContext as useDefaultReduxContext } from './useReduxContext';\nimport Subscription from '../utils/Subscription';\nimport { useIsomorphicLayoutEffect } from '../utils/useIsomorphicLayoutEffect';\nimport { ReactReduxContext } from '../components/Context';\n\nvar refEquality = function refEquality(a, b) {\n  return a === b;\n};\n\nfunction useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub) {\n  var _useReducer = useReducer(function (s) {\n    return s + 1;\n  }, 0),\n      forceRender = _useReducer[1];\n\n  var subscription = useMemo(function () {\n    return new Subscription(store, contextSub);\n  }, [store, contextSub]);\n  var latestSubscriptionCallbackError = useRef();\n  var latestSelector = useRef();\n  var latestStoreState = useRef();\n  var latestSelectedState = useRef();\n  var storeState = store.getState();\n  var selectedState;\n\n  try {\n    if (selector !== latestSelector.current || storeState !== latestStoreState.current || latestSubscriptionCallbackError.current) {\n      selectedState = selector(storeState);\n    } else {\n      selectedState = latestSelectedState.current;\n    }\n  } catch (err) {\n    if (latestSubscriptionCallbackError.current) {\n      err.message += \"\\nThe error may be correlated with this previous error:\\n\" + latestSubscriptionCallbackError.current.stack + \"\\n\\n\";\n    }\n\n    throw err;\n  }\n\n  useIsomorphicLayoutEffect(function () {\n    latestSelector.current = selector;\n    latestStoreState.current = storeState;\n    latestSelectedState.current = selectedState;\n    latestSubscriptionCallbackError.current = undefined;\n  });\n  useIsomorphicLayoutEffect(function () {\n    function checkForUpdates() {\n      try {\n        var newSelectedState = latestSelector.current(store.getState());\n\n        if (equalityFn(newSelectedState, latestSelectedState.current)) {\n          return;\n        }\n\n        latestSelectedState.current = newSelectedState;\n      } catch (err) {\n        // we ignore all errors here, since when the component\n        // is re-rendered, the selectors are called again, and\n        // will throw again, if neither props nor store state\n        // changed\n        latestSubscriptionCallbackError.current = err;\n      }\n\n      forceRender();\n    }\n\n    subscription.onStateChange = checkForUpdates;\n    subscription.trySubscribe();\n    checkForUpdates();\n    return function () {\n      return subscription.tryUnsubscribe();\n    };\n  }, [store, subscription]);\n  return selectedState;\n}\n/**\n * Hook factory, which creates a `useSelector` hook bound to a given context.\n *\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\n * @returns {Function} A `useSelector` hook bound to the specified context.\n */\n\n\nexport function createSelectorHook(context) {\n  if (context === void 0) {\n    context = ReactReduxContext;\n  }\n\n  var useReduxContext = context === ReactReduxContext ? useDefaultReduxContext : function () {\n    return useContext(context);\n  };\n  return function useSelector(selector, equalityFn) {\n    if (equalityFn === void 0) {\n      equalityFn = refEquality;\n    }\n\n    if (process.env.NODE_ENV !== 'production' && !selector) {\n      throw new Error(\"You must pass a selector to useSelector\");\n    }\n\n    var _useReduxContext = useReduxContext(),\n        store = _useReduxContext.store,\n        contextSub = _useReduxContext.subscription;\n\n    var selectedState = useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub);\n    useDebugValue(selectedState);\n    return selectedState;\n  };\n}\n/**\n * A hook to access the redux store's state. This hook takes a selector function\n * as an argument. The selector is called with the store state.\n *\n * This hook takes an optional equality comparison function as the second parameter\n * that allows you to customize the way the selected state is compared to determine\n * whether the component needs to be re-rendered.\n *\n * @param {Function} selector the selector function\n * @param {Function=} equalityFn the function that will be used to determine equality\n *\n * @returns {any} the selected state\n *\n * @example\n *\n * import React from 'react'\n * import { useSelector } from 'react-redux'\n *\n * export const CounterComponent = () => {\n *   const counter = useSelector(state => state.counter)\n *   return <div>{counter}</div>\n * }\n */\n\nexport var useSelector = /*#__PURE__*/createSelectorHook();","import Provider from './components/Provider';\nimport connectAdvanced from './components/connectAdvanced';\nimport { ReactReduxContext } from './components/Context';\nimport connect from './connect/connect';\nimport { useDispatch, createDispatchHook } from './hooks/useDispatch';\nimport { useSelector, createSelectorHook } from './hooks/useSelector';\nimport { useStore, createStoreHook } from './hooks/useStore';\nimport { setBatch } from './utils/batch';\nimport { unstable_batchedUpdates as batch } from './utils/reactBatchedUpdates';\nimport shallowEqual from './utils/shallowEqual';\nsetBatch(batch);\nexport { Provider, connectAdvanced, ReactReduxContext, connect, batch, useDispatch, createDispatchHook, useSelector, createSelectorHook, useStore, createStoreHook, shallowEqual };"],"sourceRoot":""}