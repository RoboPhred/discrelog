import difference from "lodash/difference";
import pick from "lodash/pick";
import flatMap from "lodash/flatMap";

import { AppState } from "@/store";

import {
  connectionsByIdSelector,
  elementInputConnectionIdsFromElementIdSelector,
  elementOutputConnectionIdsFromElementIdSelector,
} from "@/services/element-graph/selectors/connections";

import { ElementLayoutServiceState } from "../../state";
import { elementPinsFromPinElementSelector } from "@/services/element-graph/selectors/pins";
import { elementPinEquals } from "@/services/element-graph/types";

export default function elementDelete(
  state: ElementLayoutServiceState,
  elementIds: string[],
  rootState: AppState
): ElementLayoutServiceState {
  // Connection ids connected to elements being removed.
  const removingElementConnectionIds = elementIds.reduce(
    (connectionIds, elementId) => {
      // Get all inputs and outputs to the node.
      const inputs = elementInputConnectionIdsFromElementIdSelector(
        rootState,
        elementId
      );
      const outputs = elementOutputConnectionIdsFromElementIdSelector(
        rootState,
        elementId
      );

      connectionIds.push(...inputs, ...outputs);

      return connectionIds;
    },
    [] as string[]
  );

  // Connections going to IC node pins whose pin elements were removed.
  const removedIcPins = flatMap(elementIds, (elementId) =>
    // If not a pin, this will return an empty array.
    elementPinsFromPinElementSelector(rootState, elementId)
  );
  const connectionsById = connectionsByIdSelector(rootState);
  const removingPinConnectionIds = Object.keys(connectionsById).filter(
    (connectionId) => {
      const { inputPin, outputPin } = connectionsById[connectionId];
      // We will need to remove this connection if it went to a pin generated by
      // an input or output pin node being removed.
      return removedIcPins.some(
        (removedPin) =>
          elementPinEquals(removedPin, inputPin) ||
          elementPinEquals(removedPin, outputPin)
      );
    }
  );

  const removingConnectionIds = [
    ...removingElementConnectionIds,
    ...removingPinConnectionIds,
  ];

  // Remove any joint that is part of a removed connection.
  const removingJointIds = removingConnectionIds.reduce(
    (jointIds, connectionId) => {
      jointIds.push(...state.wireJointIdsByConnectionId[connectionId]);
      return jointIds;
    },
    [] as string[]
  );

  const remainingConnectionIds = difference(
    Object.keys(state.wireJointIdsByConnectionId),
    removingElementConnectionIds
  );

  const remainingJointIds = difference(
    Object.keys(state.wireJointPositionsByJointId),
    removingJointIds
  );

  const remainingElementIds = difference(
    Object.keys(state.elementPositionsById),
    elementIds
  );

  return {
    ...state,
    elementPositionsById: pick(state.elementPositionsById, remainingElementIds),
    wireJointIdsByConnectionId: pick(
      state.wireJointIdsByConnectionId,
      remainingConnectionIds
    ),
    wireJointPositionsByJointId: pick(
      state.wireJointPositionsByJointId,
      remainingJointIds
    ),
  };
}
