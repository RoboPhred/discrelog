{"version":3,"sources":["webpack://discrelog/./src/element-defs/element-and.ts","webpack://discrelog/./src/element-defs/element-buffer.ts","webpack://discrelog/./src/element-defs/element-led.ts","webpack://discrelog/./src/element-defs/element-nor.ts","webpack://discrelog/./src/element-defs/element-not.ts","webpack://discrelog/./src/element-defs/element-or.ts","webpack://discrelog/./src/element-defs/element-seg7.ts","webpack://discrelog/./src/element-defs/element-toggle.ts","webpack://discrelog/./src/services/circuit-editor-ui/state.ts","webpack://discrelog/./src/services/circuit-graph/state.ts","webpack://discrelog/./src/services/circuit-layout/state.ts","webpack://discrelog/./src/geometry.ts","webpack://discrelog/./src/services/clipboard/state.ts","webpack://discrelog/./src/services/dialog/state.ts","webpack://discrelog/./src/services/selection/state.ts","webpack://discrelog/./src/services/simulator/state.ts","webpack://discrelog/./src/store/state.ts","webpack://discrelog/./src/actions/init.ts","webpack://discrelog/./src/actions/field-drag-continue.ts","webpack://discrelog/./src/actions/field-mouse-leave.ts","webpack://discrelog/./src/actions/sim-tick.ts","webpack://discrelog/./src/actions/view-zoom.ts","webpack://discrelog/./src/store/devtool-sanitizer.ts","webpack://discrelog/./src/actions/project-load.ts","webpack://discrelog/./src/actions/project-receive.ts","webpack://discrelog/./src/services/savedata/saga/project-load.ts","webpack://discrelog/./src/actions/project-save.ts","webpack://discrelog/./src/actions/dialog-show.ts","webpack://discrelog/./src/actions/dialog-response-accept.ts","webpack://discrelog/./src/actions/dialog-response-cancel.ts","webpack://discrelog/./src/services/dialog/api.ts","webpack://discrelog/./src/services/circuit-graph/types.ts","webpack://discrelog/./src/services/savedata/types.ts","webpack://discrelog/./src/store/utils.ts","webpack://discrelog/./src/utils.ts","webpack://discrelog/./src/services/service-state-utils.ts","webpack://discrelog/./src/services/circuit-editor-ui/utils.ts","webpack://discrelog/./src/services/circuit-editor-ui/reducer/drag-continue.ts","webpack://discrelog/./src/actions/field-drag-end.ts","webpack://discrelog/./src/actions/select-region.ts","webpack://discrelog/./src/actions/selection-move.ts","webpack://discrelog/./src/actions/element-add.ts","webpack://discrelog/./src/actions/wire-attach.ts","webpack://discrelog/./src/services/circuit-editor-ui/selectors/snap.ts","webpack://discrelog/./src/element-defs/utils.ts","webpack://discrelog/./src/element-defs/index.ts","webpack://discrelog/./src/services/circuit-graph/utils.ts","webpack://discrelog/./src/services/circuit-graph/selectors/nodes.ts","webpack://discrelog/./src/services/circuit-layout/utils.ts","webpack://discrelog/./src/services/circuit-layout/selectors/node-positions.ts","webpack://discrelog/./src/services/circuit-editor-ui/selectors/drag.ts","webpack://discrelog/./src/actions/field-drag-start-newnode.ts","webpack://discrelog/./src/services/circuit-editor-ui/reducer/drag-start-newnode.ts","webpack://discrelog/./src/actions/field-drag-start-node.ts","webpack://discrelog/./src/actions/select-nodes.ts","webpack://discrelog/./src/services/selection/utils.ts","webpack://discrelog/./src/services/selection/selectors/selection.ts","webpack://discrelog/./src/actions/field-drag-start-select.ts","webpack://discrelog/./src/services/circuit-editor-ui/reducer/drag-start-select.ts","webpack://discrelog/./src/actions/field-drag-start-wire.ts","webpack://discrelog/./src/services/circuit-editor-ui/reducer/index.ts","webpack://discrelog/./src/services/circuit-editor-ui/reducer/drag-end.ts","webpack://discrelog/./src/services/circuit-editor-ui/reducer/drag-start-node.ts","webpack://discrelog/./src/services/circuit-editor-ui/reducer/drag-start-wire.ts","webpack://discrelog/./src/services/circuit-editor-ui/reducer/mouse-leave.ts","webpack://discrelog/./src/services/circuit-editor-ui/reducer/view-zoom.ts","webpack://discrelog/./src/store/priorities.ts","webpack://discrelog/./src/services/circuit-graph/reducer/element-add.ts","webpack://discrelog/./src/arrays.ts","webpack://discrelog/./src/actions/node-delete.ts","webpack://discrelog/./src/services/circuit-graph/reducer/node-delete.ts","webpack://discrelog/./src/actions/project-new.ts","webpack://discrelog/./src/services/circuit-graph/reducer/project-new.ts","webpack://discrelog/./src/services/circuit-graph/reducer/wire-attach.ts","webpack://discrelog/./src/actions/wire-detatch.ts","webpack://discrelog/./src/services/circuit-graph/reducer/wire-detatch.ts","webpack://discrelog/./src/services/circuit-graph/reducer/index.ts","webpack://discrelog/./src/services/circuit-layout/reducer/element-add.ts","webpack://discrelog/./src/services/circuit-graph/selectors/connections.ts","webpack://discrelog/./src/services/circuit-layout/reducer/node-delete.ts","webpack://discrelog/./src/actions/node-move.ts","webpack://discrelog/./src/services/circuit-layout/reducer/node-move.ts","webpack://discrelog/./src/services/circuit-layout/reducer/project-new.ts","webpack://discrelog/./src/services/circuit-layout/reducer/wire-attach.ts","webpack://discrelog/./src/services/circuit-layout/reducer/wire-detatch.ts","webpack://discrelog/./src/actions/wire-joint-add.ts","webpack://discrelog/./src/services/circuit-layout/reducer/wire-joint-add.ts","webpack://discrelog/./src/actions/wire-joint-delete.ts","webpack://discrelog/./src/services/circuit-layout/reducer/wire-joint-delete.ts","webpack://discrelog/./src/actions/wire-joint-move.ts","webpack://discrelog/./src/services/circuit-layout/reducer/index.ts","webpack://discrelog/./src/services/circuit-layout/reducer/wire-joint-move.ts","webpack://discrelog/./src/actions/clipboard-copy.ts","webpack://discrelog/./src/services/circuit-graph/selectors/pins.ts","webpack://discrelog/./src/services/clipboard/utils.ts","webpack://discrelog/./src/services/clipboard/reducer/clipboard-copy.ts","webpack://discrelog/./src/actions/clipboard-paste.ts","webpack://discrelog/./src/services/clipboard/reducer/clipboard-paste.ts","webpack://discrelog/./src/services/clipboard/reducer/index.ts","webpack://discrelog/./src/services/dialog/utils.ts","webpack://discrelog/./src/services/dialog/reducer/index.ts","webpack://discrelog/./src/services/dialog/reducer/dialog-response-accept.ts","webpack://discrelog/./src/services/dialog/reducer/dialog-response-cancel.ts","webpack://discrelog/./src/services/dialog/reducer/dialog-show.ts","webpack://discrelog/./src/services/savedata/reducer/autosave.ts","webpack://discrelog/./src/services/savedata/reducer/index.ts","webpack://discrelog/./src/services/savedata/utils.ts","webpack://discrelog/./src/services/savedata/reducer/project-new.ts","webpack://discrelog/./src/services/savedata/reducer/init.ts","webpack://discrelog/./src/services/savedata/reducer/project-receive.ts","webpack://discrelog/./src/services/selection/reducer/node-delete.ts","webpack://discrelog/./src/services/selection/reducer/project-new.ts","webpack://discrelog/./src/actions/select-all.ts","webpack://discrelog/./src/services/circuit-layout/selectors/wires.ts","webpack://discrelog/./src/services/selection/reducer/select-all.ts","webpack://discrelog/./src/actions/select-clear.ts","webpack://discrelog/./src/services/selection/reducer/select-clear.ts","webpack://discrelog/./src/actions/select-wire-joints.ts","webpack://discrelog/./src/services/selection/reducer/select-joints.ts","webpack://discrelog/./src/services/selection/reducer/select-nodes.ts","webpack://discrelog/./src/services/simulator/utils.ts","webpack://discrelog/./src/services/simulator/selectors/nodes.ts","webpack://discrelog/./src/services/circuit-layout/selectors/node-bounds.ts","webpack://discrelog/./src/services/selection/reducer/select-region.ts","webpack://discrelog/./src/actions/select-wires.ts","webpack://discrelog/./src/services/selection/reducer/select-wires.ts","webpack://discrelog/./src/actions/selection-copy.ts","webpack://discrelog/./src/actions/selection-delete.ts","webpack://discrelog/./src/services/selection/reducer/index.ts","webpack://discrelog/./src/services/selection/reducer/selection-copy.ts","webpack://discrelog/./src/services/selection/reducer/selection-delete.ts","webpack://discrelog/./src/services/selection/reducer/selection-move.ts","webpack://discrelog/./src/services/selection/reducer/wire-detatch.ts","webpack://discrelog/./src/services/simulator/reducer/element-graph-invalidated.ts","webpack://discrelog/./src/actions/node-interact.ts","webpack://discrelog/./src/services/simulator-graph/selectors/nodes.ts","webpack://discrelog/./src/services/simulator-graph/selectors/connections.ts","webpack://discrelog/./src/services/simulator/reducer/utils.ts","webpack://discrelog/./src/services/simulator/reducer/node-interact.ts","webpack://discrelog/./src/services/simulator/reducer/sim-evolve.ts","webpack://discrelog/./src/actions/sim-fastforward.ts","webpack://discrelog/./src/actions/sim-pause.ts","webpack://discrelog/./src/services/simulator/selectors/run.ts","webpack://discrelog/./src/services/simulator/reducer/sim-pause.ts","webpack://discrelog/./src/actions/sim-start.ts","webpack://discrelog/./src/services/simulator/reducer/sim-start.ts","webpack://discrelog/./src/actions/sim-stop.ts","webpack://discrelog/./src/services/simulator/reducer/sim-stop.ts","webpack://discrelog/./src/services/simulator/reducer/index.ts","webpack://discrelog/./src/services/simulator/reducer/sim-fastforward.ts","webpack://discrelog/./src/store/reducer.ts","webpack://discrelog/./src/services/savedata/errors.ts","webpack://discrelog/./src/services/savedata/saga/project-save.ts","webpack://discrelog/./src/services/savedata/saga/index.ts","webpack://discrelog/./src/services/simulator/saga/mode-run.ts","webpack://discrelog/./src/services/simulator/saga/index.ts","webpack://discrelog/./src/store/store.ts","webpack://discrelog/./src/store/saga.ts","webpack://discrelog/./src/env.ts","webpack://discrelog/./src/styles/sizing.module.css?9a43","webpack://discrelog/./src/hooks/useSelector.ts","webpack://discrelog/./src/services/circuit-editor-ui/selectors/view.ts","webpack://discrelog/./src/runtime-env.ts","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/keymap.ts","webpack://discrelog/./src/services/circuit-layout/selectors/field.ts","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/contexts/fieldSvgElement.tsx","webpack://discrelog/./src/pages/CircuitEditor/components/ElementVisual.tsx","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/hooks/useMouseCoords.ts","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/utils.ts","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/DragNewNodeLayer.tsx","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/DragNodePreviewLayer.tsx","webpack://discrelog/./src/selection-mode.ts","webpack://discrelog/./src/hooks/useMouseTracking.ts","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/DragSelectLayer.tsx","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/GridBackground.tsx","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/Node.tsx","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/NodesLayer.tsx","webpack://discrelog/./src/services/simulator/selectors/wires.ts","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/WireSegment.tsx","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/WireJoint/index.ts","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/WireJoint/WireJoint.tsx","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/WireJoint/WireJoint.module.css?6a12","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/Wire/index.ts","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/Wire/Wire.tsx","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/Wire/Wire.module.css?6085","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/WiresLayer.tsx","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/NodePin/NodePin.module.css?2bdb","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/NodePin/NodePin.tsx","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/NodePin/index.ts","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/NodePinsLayer.tsx","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/components/DragAttachWirePreviewLayer.tsx","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/index.ts","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/CircuitField.tsx","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/components/CircuitField/CircuitField.module.css?be8b","webpack://discrelog/./src/pages/CircuitEditor/components/ElementTray/ElementTray.tsx","webpack://discrelog/./src/pages/CircuitEditor/components/ElementTray/index.ts","webpack://discrelog/./src/pages/CircuitEditor/components/ElementTray/ElementTray.module.css?5ca2","webpack://discrelog/./src/pages/CircuitEditor/CircuitEditor.tsx","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/CircuitFieldView.tsx","webpack://discrelog/./src/hooks/useNativeEvent.ts","webpack://discrelog/./src/pages/CircuitEditor/components/CircuitFieldView/CircuitFieldView.module.css?cd60","webpack://discrelog/./src/pages/CircuitEditor/index.ts","webpack://discrelog/./README.md","webpack://discrelog/./src/pages/Intro/index.ts","webpack://discrelog/./src/pages/Intro/Intro.tsx","webpack://discrelog/./src/pages/Intro/Intro.module.css?7ac8","webpack://discrelog/./src/hooks/useAction.ts","webpack://discrelog/./src/components/Icons/Play.tsx","webpack://discrelog/./src/components/Icons/Stop.tsx","webpack://discrelog/./src/components/Icons/Pause.tsx","webpack://discrelog/./src/components/SimControls/SimControls.module.css?8dc8","webpack://discrelog/./src/components/SimControls/index.ts","webpack://discrelog/./src/components/SimControls/SimControls.tsx","webpack://discrelog/./src/components/FileMenu.tsx","webpack://discrelog/./src/components/TitleBar.tsx","webpack://discrelog/./src/services/dialog/selectors/dialog.ts","webpack://discrelog/./src/components/DialogManager/dialogs/SaveProjectDialog.tsx","webpack://discrelog/./src/components/DialogManager/index.ts","webpack://discrelog/./src/components/DialogManager/DialogManager.tsx","webpack://discrelog/./src/index.tsx","webpack://discrelog/./src/components/App/App.tsx","webpack://discrelog/./src/styles/flex.module.css?f6f1"],"names":["type","visual","hitPath","shapePath","pins","A","name","direction","x","y","B","OUT","evolve","state","inputs","tick","transitions","tickOffset","valuesByPin","IN","genCirclePath","cx","cy","r","path","fill","value","OFFSET","createSeg","points","start","p","slice","C","D","E","F","G","defaultToggleState","toggleState","interact","defaultCircuitEditorUiState","Object","freeze","viewScale","dragMode","dragStart","dragEnd","dragNewElementType","dragWireSource","defaultCircuitGraphState","nodesById","connectionsById","defaultCircuitLayoutState","nodePositionsById","wireJointIdsByConnectionId","wireJointPositionsByJointId","pointSchema","shape","required","ZeroPoint","ZeroRect","p1","p2","magnitude","v","Math","sqrt","normalizeRectangle","args","length","min","max","pointAdd","pointSubtract","calcSize","width","height","union","r1","r2","defaultClipboardState","clipboardNodes","clipboardPasteOrigin","defaultDialogState","dialogType","data","defaultSelectionState","selectedNodeIds","selectedConnectionIds","selectedJointIds","defaultSimulatorState","mode","ticksPerSecond","nodeStatesByNodeId","nodeOutputValuesByNodeId","transitionsById","transitionWindows","_defaultAppState","services","circuitEditorUi","circuitGraph","circuitLayout","clipboard","dialog","selection","simulator","defaultAppState","ACTION_INIT","ACTION_FIELD_DRAG_CONTINUE","fieldDragContinue","payload","ACTION_FIELD_MOUSE_LEAVE","ACTION_SIM_TICK","tickSim","tickCount","ACTION_VIEW_ZOOM","actionsBlacklist","ACTION_PROJECT_LOAD","loadProject","ACTION_PROJECT_RECEIVE","projectLoadSaga","file","accept","contents","text","bind","saveData","JSON","parse","receiveProject","e","console","warn","ACTION_PROJECT_SAVE","saveProject","ACTION_DIALOG_SHOW","ACTION_DIALOG_RESPONSE_ACCEPT","acceptDialog","result","ACTION_DIALOG_RESPONSE_CANCEL","cancelDialog","displayDialogSaga","showDialog","response","nodePinSchema","nodeId","pinId","saveNodeSchema","elementType","saveWireSchema","output","input","joints","of","saveDataSchema","nodes","wires","concatReducers","reducers","concat","cls","values","filter","Boolean","join","fpSet","target","firstPaths","map","String","lastPath","newData","clone","seg","obj","Array","isArray","createServiceReducerCreator","service","reducer","action","newState","createServiceSelectorCreator","selector","appSelector","s","local","createCircuitEditorUiReducer","createCircuitEditorUiSelector","isFieldDragContinueAction","ACTION_FIELD_DRAG_END","fieldDragEnd","point","selectionMode","ACTION_SELECT_REGION","ACTION_SELECTION_MOVE","ACTION_ELEMENT_ADD","addElement","opts","isAddElementAction","ACTION_WIRE_ATTACH","attachWire","connectionId","isAttachWireAction","gridSnapSelector","applyGridSnapSelector","snap","round","normalizeVisuals","stroke","strokeWidth","ElementDefinitionsByType","and","or","nor","not","buffer","led","toggle","seg7","LargestElementSize","reduce","bounds","visuals","undefined","push","createCircuitGraphReducer","createCircuitGraphSelector","nodesByNodeIdSelector","nodeIdsSelector","createSelector","keys","elementTypesByNodeIdSelector","nodeFromNodeIdSelector","elementTypeFromNodeIdSelector","node","elementDefFromNodeIdSelector","nodePinsSelector","def","pin","createCircuitLayoutReducer","createCircuitLayoutSelector","nodePositionsByNodeIdSelector","nodePositionFromNodeIdSelector","nodePinPositionsByPinIdByNodeIdSelector","nodePositionsByNodeId","elementTypesByNodeId","nodePinPositionsByPinIdByNodeId","nodeIds","nodePinPositionsByPinId","nodePosition","pinIds","pinPosition","dragModeSelector","dragStartSelector","dragEndSelector","selectionRectSelector","dragMoveOffsetSelector","gridSnap","isDraggingNewNodeSelector","dragNewNodeTypeSelector","dragWireTargetPinSelector","pinPositionsByPinIdByNodeId","pinPositionsByPinId","ACTION_FIELD_DRAG_START_NEWNODE","isFieldDragStartNewNodeAction","nodeType","ACTION_FIELD_DRAG_START_NODE","ACTION_SELECT_NODES","selectNodes","createSelectionReducer","createSelectionSelector","combineSelection","selectedIds","chosenIds","selectedNodeIdsSelector","isNodeSelectedFromNodeIdSelector","indexOf","isWireSelectedFromConnectionIdSelector","selectedJointIdsSelector","isJointSelectedFromJointIdSelector","jointId","ACTION_FIELD_DRAG_START_SELECT","isFieldDragStartSelectAction","ACTION_FIELD_DRAG_START_WIRE","isFieldDragEndAction","rect","region","selectRegion","moveBy","offsetX","offsetY","position","endPin","isFieldDragStartNodeAction","isFieldDragStartWireAction","isFieldMouseLeaveAction","isViewZoomAction","scale","delta","reducerPriority","priority","weight","id","asArray","ACTION_NODE_DELETE","isDeleteNodeAction","remainingNodeIds","c","inputPin","outputPin","ACTION_PROJECT_NEW","newProject","isNewProjectAction","conn","p1Node","p2Node","p1Def","p2Def","p1Pin","p2Pin","pinsToConnection","nodePinEquals","a","b","ACTION_WIRE_DETATCH","isDetatchWireAction","remainingIds","connectionIdsSelector","wiresById","connectionFromConnectionIdSelector","connectionsSelector","nodeInputConnectionIdsFromNodeIdSelector","nodeOutputConnectionIdsFromNodeIdSelector","appState","removingConnectionIds","connectionIds","outputs","removingJointIds","jointIds","remainingConnectionIds","remainingJointIds","ACTION_NODE_MOVE","isMoveNodeAction","relative","movedNodePositions","ACTION_WIRE_JOINT_ADD","isAddWireJointAction","addAfterJointId","wireJoints","insertionIndex","ACTION_WIRE_JOINT_DELETE","isDeleteWireJointAction","wireJointsByJointId","ACTION_WIRE_JOINT_MOVE","moveWireJoint","isMoveWireJointAction","movedJoints","ACTION_COPY_NODES","pinDirectionFromNodePinSelector","pinDef","nodeOutputSourcesByPinIdFromNodeIdSelector","connections","nodeDef","outputPins","outputConnections","connection","createClipboardReducer","isCopyNodesAction","copyIds","rootPosition","copyNodes","offset","conns","nodeIsSelected","ACTION_PASTE","CLIPBOARD_PASTE_OFFSET","isPasteAction","pastePosition","pasteIds","sourceId","targetCopyId","targetPin","targetId","createDialogReducer","createDialogSelector","isAcceptDialogAction","isCancelDialogAction","isShowDialogAction","AUTOSAVE_TRIGGERS","save","createSave","localStorage","setItem","stringify","removeItem","isInitAction","str","getItem","loadAutosave","loadSave","isReceiveProjectAction","ACTION_SELECT_CLEAR","startPositionCacheByConnectionId","endPositionCacheByConnectionId","jointIdsSelector","wireJointIdsFromConnectionIdSelector","wireJointPositionFromJointIdSelector","wireJointPositionsByJointIdSelector","isSelectAllAction","isClearSelectionAction","ACTION_SELECT_WIRE_JOINTS","isSelectWireJointsAction","isSelectNodesAction","createSimulatorReducer","createSimulatorSelector","nodeStatesByIdSelector","nodeStateFromNodeIdSelector","nodeBoundsByIdSelector","nodeStateById","shapePaths","nodeRectsByIdSelector","positionsById","boundsById","isSelectRegionAction","rects","chosenNodeIds","chosenJointIds","jointPositions","pointIntersects","ACTION_SELECT_WIRES","isSelectWiresAction","ACTION_SELECTION_COPY","ACTION_SELECTION_DELETE","isSelectionCopyAction","selectedNodes","isSelectionDeleteAction","detatchWire","deleteWireJoint","isMoveSelectionAction","moveNode","SIM_INVALIDATE_ACTIONS","ACTION_NODE_INTERACT","elementTypeFromSimulatorNodeId","simNodeId","outputConnectionsFromSimulatorNodeIdSelector","inputNodesByPinIdFromSimulatorNodeIdSelector","_","inputPins","inputConnections","collectNodeTransitions","inputSourcesByPin","inputConn","sourceNodeId","sourcePinId","transition","transitionMerger","transitionTick","removeTransitionsByNodeId","addTransition","valuesByOutputPin","transitionId","newTransition","index","newWindow","transitionIds","splice","transitionWindowIndex","transitionWindow","tickWindowTransitionIndex","removeTransitionById","isInteractNodeAction","circuitNodeId","simulatorNodeId","simulatorNodeIdFromCircuitNodeIdSelector","nodeState","isTickSimAction","endTick","saftyCount","Error","window","shift","tickWindow","updatedNodes","tid","outputWires","outConn","ACTION_SIM_FASTFORWARD","ACTION_SIM_PAUSE","pauseSim","isSimActiveSelector","isSimRunningSelector","isSimPausedSelector","ticksPerSecondSelector","isPauseSimAction","runMode","ACTION_SIM_START","startSim","isStartSimAction","simulatorNodeIdsSelector","outputsOf","initNode","simInit","ACTION_SIM_STOP","stopSim","isStopSimAction","simulatorReducer","isFastForwardSimAction","nextWindowTick","finalizedList","finalizeReducerList","SaveFormatError","message","super","this","code","wire","validateSync","error","projectSaveSaga","fileName","blob","Blob","saveAs","saveDataSaga","runModeSaga","handleRunSim","tps","timeToWait","ceil","simulatorSaga","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","actionSanitizer","stateSanitizer","sagaMiddleware","store","run","dispatch","useSelector","viewScaleSelector","keyboardIsMac","test","os","toString","keyboardCommandModifier","KEYMAP_SIM_STEP","KEYMAP_SIM_FASTFORWARD","KEYMAP_SELECT_ALL","KEYMAP_COPY","KEYMAP_PASTE","KEYMAP_DELETE","MinFieldRect","fieldRectSelector","nodeRectsById","wireJointsById","ContextProvider","Provider","FieldSvgElementProvider","children","svgElement","setSvgElement","current","colorOverride","renderPin","onClick","onMouseDown","onMouseOver","onMouseUp","onMouseLeave","body","i","key","d","element","transform","className","useEventMouseCoords","fieldRef","pageX","pageY","field","ctm","getScreenCTM","pt","createSVGPoint","translated","matrixTransform","inverse","getMouseCoords","fieldRect","isDraggingNewNode","draggingNodeType","onMouseMove","opacity","selectedNodePositionsByIdSelector","selectedNodeTypesByIdSelector","nodeTypesById","selectedNodeStatesByIdSelector","nodeStatesById","selectedNodePositionsById","selectedNodeTypesById","selectedNodeStatesById","dragMoveOffset","elements","getModifiers","ctrlKey","altKey","shiftKey","metaKey","ctrlMetaKey","getSelectMode","modifiers","useMouseTracking","dragThreshold","onDragStart","onDragMove","onDragEnd","isTracking","setTracking","isTrackingRef","isDraggingRef","mouseDownRef","startTracking","cancelTracking","document","addEventListener","removeEventListener","abs","selectionRect","getCoords","fieldDragStartSelect","defaultPrevented","preventDefault","strokeDasharray","xmlns","patternUnits","isSimActive","isSelected","interactNode","fieldDragStartNode","nodeElements","Node","wireValueFromConnectionIdSelector","outputVauesByNodeId","startJointId","endJointId","cacheData","inputNodeDef","inputNodePosition","outputPosition","wireStartPositionFromConnectionIdSelector","end","wireEndPositionFromConnectionIdSelector","mousePos","setMousePos","addedJointRef","addWireJoint","selectWires","onJointInsertMouseDown","insertJointPos","lineDir","m","normalize","scaler","x1","y1","x2","y2","mouseOver","setMouseOver","onJointDragMove","selectWireJoints","startMoveJointTracking","onMouseOut","mouseDown","isPowered","segmentElements","jointElements","connectorElements","describeArc","radius","startAngle","endAngle","polarToCartesian","largeArcFlag","centerX","centerY","angleInDegrees","angleInRadians","PI","cos","sin","nodePinPositions","nodePinPositionFromNodePinSelector","dragTargetPin","stopPropagation","isDragTarget","svgRef","focus","style","tabIndex","ref","Element","fieldDragStartNewNode","WindowMap","viewRef","keyHandlers","createEventDispatcher","onWheel","deltaY","listener","options","passive","listenTarget","HotKeys","keyMap","handlers","renderTile","title","initialValue","first","second","splitPercentage","dismiss","href","source","useAction","actionCreator","preBind","props","isActive","isPaused","onPlayClick","onStopClick","onPauseClick","Stop","Play","Pause","onNewProject","onSaveProject","onLoadProject","icon","align","content","minimal","dialogTypeSelector","onCancelDialog","onAcceptDialog","projectName","setProjectName","onSetProjectName","onAccept","isOpen","onClose","canEscapeKeyClose","canOutsideClickClose","placeholder","onChange","intent","disabled","rootEl","getElementById","introShown","setIntroShown","onDismiss"],"mappings":"sHAEA,MA4CA,EA5CgD,CAC9CA,KAAM,MACNC,OAAQ,CACNC,QAAS,uFAITC,UAAW,oSAQbC,KAAM,CACJC,EAAG,CACDC,KAAM,IACNC,UAAW,QACXC,EAAG,EACHC,EAAG,MAELC,EAAG,CACDJ,KAAM,IACNC,UAAW,QACXC,EAAG,EACHC,EAAG,IAELE,IAAK,CACHL,KAAM,MACNC,UAAW,SACXC,EAAG,IACHC,EAAG,KAGPG,OAAM,CAACC,EAAOC,EAAQC,KACb,CACLC,YAAa,CACXC,WAAY,EACZC,YAAa,CAAEP,IAAKG,EAAOT,GAAKS,EAAOJ,Q,8CCvC/C,MAoCA,EApCmD,CACjDV,KAAM,SACNC,OAAQ,CACNC,QAAS,wLAITC,UAAW,wUAMbC,KAAM,CACJe,GAAI,CACFb,KAAM,KACNC,UAAW,QACXC,EAAG,EACHC,EAAG,IAELE,IAAK,CACHL,KAAM,MACNC,UAAW,SACXC,EAAG,IACHC,EAAG,KAGPG,OAAM,CAACC,EAAOC,EAAQC,KACb,CACLC,YAAa,CACXC,WAAY,EACZC,YAAa,CAAEP,IAAKG,EAAOK,S,6BC/BnC,SAASC,EAAcC,EAAYC,EAAYC,GAC7C,MAAO,KAAKF,EAAKE,MAAMD,YACjBC,KAAKA,WAAe,EAAJA,cAChBA,KAAKA,YAAiB,EAAJA,M,iBAG1B,MA2BA,EA3BgD,CAC9CvB,KAAM,MACNC,OAAQ,CACNE,UAAW,CACTiB,EAAc,GAAI,GAAI,IACtB,CACEI,KAAMJ,EAAc,GAAI,GAAI,IAC5BK,KAAOZ,GAAWA,EAAMa,MAAQ,aAAe,eAIrDtB,KAAM,CACJe,GAAI,CACFb,KAAM,KACNC,UAAW,QACXC,EAAG,EACHC,EAAG,KAGPG,OAAM,CAACC,EAAOC,EAAQC,KACb,CACLF,MAAO,CACLa,MAAOZ,EAAOK,Q,8CC5BtB,MA4CA,EA5CgD,CAC9CnB,KAAM,MACNC,OAAQ,CACNC,QAAS,qQAITC,UAAW,mlBAQbC,KAAM,CACJC,EAAG,CACDC,KAAM,IACNC,UAAW,QACXC,EAAG,EACHC,EAAG,MAELC,EAAG,CACDJ,KAAM,IACNC,UAAW,QACXC,EAAG,EACHC,EAAG,IAELE,IAAK,CACHL,KAAM,MACNC,UAAW,SACXC,EAAG,IACHC,EAAG,KAGPG,OAAM,CAACC,EAAOC,EAAQC,KACb,CACLC,YAAa,CACXC,WAAY,EACZC,YAAa,CAAEP,MAAOG,EAAOT,GAAKS,EAAOJ,S,8CCvCjD,MAsCA,EAtCgD,CAC9CV,KAAM,MACNC,OAAQ,CACNC,QAAS,wGAITC,UAAW,6PAQbC,KAAM,CACJe,GAAI,CACFb,KAAM,KACNC,UAAW,QACXC,EAAG,EACHC,EAAG,IAELE,IAAK,CACHL,KAAM,MACNC,UAAW,SACXC,EAAG,IACHC,EAAG,KAGPG,OAAM,CAACC,EAAOC,EAAQC,KACb,CACLC,YAAa,CACXC,WAAY,EACZC,YAAa,CAAEP,KAAMG,EAAOK,S,6CCjCpC,MA4CA,EA5C+C,CAC7CnB,KAAM,KACNC,OAAQ,CACNC,QAAS,qQAITC,UAAW,gjBAQbC,KAAM,CACJC,EAAG,CACDC,KAAM,IACNC,UAAW,QACXC,EAAG,EACHC,EAAG,MAELC,EAAG,CACDJ,KAAM,IACNC,UAAW,QACXC,EAAG,EACHC,EAAG,IAELE,IAAK,CACHL,KAAM,MACNC,UAAW,SACXC,EAAG,IACHC,EAAG,KAGPG,OAAM,CAACC,EAAOC,EAAQC,KACb,CACLC,YAAa,CACXC,WAAY,EACZC,YAAa,CAAEP,IAAKG,EAAOT,GAAKS,EAAOJ,Q,6CCvC/C,MACMiB,EAAS,CAAC,GAAI,GAQpB,SAASC,EACPtB,EACAuB,GAEA,MAAMC,EAAQD,EAAO,GACrB,IAAIL,EAAO,IAdC,EAcGM,EAAM,GAAaH,EAAO,MAd7B,EAcmCG,EAAM,GAAaH,EAAO,KACzE,IAAK,IAAII,KAAKF,EAAOG,MAAM,GAAI,CAC7B,MAAOxB,EAAGC,GAAKsB,EACfP,GAAQ,IAjBE,EAiBEhB,EAAYmB,EAAO,MAjBrB,EAiB2BlB,EAAYkB,EAAO,KAG1D,OADAH,GAAQ,IACD,CACLA,OACAC,KAAOZ,GAAWA,EAAMP,GAAQ,MAAQ,QAI5C,MAkHA,EAlHiD,CAC/CN,KAAM,OACNC,OAAQ,CACNC,QAAS,oBAETC,UAAW,CACTyB,EAAU,IAAK,CACb,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,KAENA,EAAU,IAAK,CACb,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,GAAI,GACL,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,KAENA,EAAU,IAAK,CACb,CAAC,EAAG,GACJ,CAAC,GAAI,IACL,CAAC,GAAI,IACL,CAAC,EAAG,IACJ,CAAC,EAAG,IACJ,CAAC,EAAG,MAENA,EAAU,IAAK,CACb,CAAC,EAAG,IACJ,CAAC,EAAG,IACJ,CAAC,EAAG,IACJ,CAAC,EAAG,IACJ,CAAC,EAAG,IACJ,CAAC,EAAG,MAENA,EAAU,IAAK,CACb,CAAC,EAAG,IACJ,CAAC,EAAG,IACJ,CAAC,EAAG,IACJ,CAAC,EAAG,GACJ,CAAC,EAAG,IACJ,CAAC,EAAG,MAENA,EAAU,IAAK,CACb,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,KAENA,EAAU,IAAK,CACb,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,IACJ,CAAC,EAAG,QAIVxB,KAAM,CACJC,EAAG,CACDC,KAAM,IACNC,UAAW,QACXC,EAAG,EACHC,EAAG,GAELC,EAAG,CACDJ,KAAM,IACNC,UAAW,QACXC,EAAG,EACHC,EAAG,IAELwB,EAAG,CACD3B,KAAM,IACNC,UAAW,QACXC,EAAG,EACHC,EAAG,IAELyB,EAAG,CACD5B,KAAM,IACNC,UAAW,QACXC,EAAG,EACHC,EAAG,IAEL0B,EAAG,CACD7B,KAAM,IACNC,UAAW,QACXC,EAAG,EACHC,EAAG,IAEL2B,EAAG,CACD9B,KAAM,IACNC,UAAW,QACXC,EAAG,EACHC,EAAG,IAEL4B,EAAG,CACD/B,KAAM,IACNC,UAAW,QACXC,EAAG,EACHC,EAAG,KAGPG,OAAM,CAACC,EAAOC,EAAQC,KACb,CACLF,MAAO,OAAF,UAAOC,O,8CCrIlB,MAAMwB,EAAkC,CACtCC,aAAa,GAmCf,EAhCmD,CACjDvC,KAAM,SACNC,OAAQ,CACNE,UAAW,CACTqB,KAAM,4BACNC,KAAOZ,GAAwBA,EAAM0B,YAAc,QAAU,QAGjEnC,KAAM,CACJO,IAAK,CACHL,KAAM,MACNC,UAAW,SACXC,EAAG,GACHC,EAAG,KAGP+B,SAAQ,CAAC3B,EAAqByB,IACrB,OAAP,wBACKzB,GAAK,CACR0B,aAAc1B,EAAM0B,cAGxB3B,OAAM,CAACC,EAAQyB,EAAoBxB,EAAQC,KAClC,CACLF,QACAG,YAAa,CACXC,WAAY,EACZC,YAAa,CAAEP,IAAKE,EAAM0B,kB,kECtBlC,MASaE,EAA8BC,OAAOC,OATN,CAC1CC,UAAW,EACXC,SAAU,KACVC,UAAW,KACXC,QAAS,KACTC,mBAAoB,KACpBC,eAAgB,OCDLC,EAA2BR,OAAOC,OALN,CACvCQ,UAAW,GACXC,gBAAiB,KCFNC,EAA0DX,OAAOC,OANpC,CACxCW,kBAAmB,GACnBC,2BAA4B,GAC5BC,4BAA6B,K,eCLxB,MAAMC,EAAc,OAAaC,MAAM,CAC5ClD,EAAG,OAAamD,WAChBlD,EAAG,OAAakD,aAaLC,EAAYlB,OAAOC,OAAO,CAAEnC,EAAG,EAAGC,EAAG,IACrCoD,EAAWnB,OAAOC,OAAO,CAAEmB,GAAIF,EAAWG,GAAIH,IAEpD,SAASI,EAAUC,GACxB,OAAOC,KAAKC,KAAKF,EAAEzD,EAAIyD,EAAEzD,EAAIyD,EAAExD,EAAIwD,EAAExD,GAoBhC,SAAS2D,KAAsBC,GACpC,IAAIP,EACAC,EACJ,GAAoB,IAAhBM,EAAKC,OAAc,CACrB,MAAM/C,EAAI8C,EAAK,GACfP,EAAKvC,EAAEuC,GACPC,EAAKxC,EAAEwC,QAEPD,EAAKO,EAAK,GACVN,EAAKM,EAAK,GAEZ,MAAO,CACLP,GAAI,CACFtD,EAAG0D,KAAKK,IAAIT,EAAGtD,EAAGuD,EAAGvD,GACrBC,EAAGyD,KAAKK,IAAIT,EAAGrD,EAAGsD,EAAGtD,IAEvBsD,GAAI,CACFvD,EAAG0D,KAAKM,IAAIV,EAAGtD,EAAGuD,EAAGvD,GACrBC,EAAGyD,KAAKM,IAAIV,EAAGrD,EAAGsD,EAAGtD,KAKpB,SAASgE,EAASX,EAAWC,GAClC,MAAO,CACLvD,EAAGsD,EAAGtD,EAAIuD,EAAGvD,EACbC,EAAGqD,EAAGrD,EAAIsD,EAAGtD,GAGV,SAASiE,EAAcZ,EAAWC,GACvC,MAAO,CACLvD,EAAGsD,EAAGtD,EAAIuD,EAAGvD,EACbC,EAAGqD,EAAGrD,EAAIsD,EAAGtD,GAkBV,SAASkE,EAASpD,GAEvB,MAAO,CACLqD,OAFFrD,EAAI6C,EAAmB7C,IAEZwC,GAAGvD,EAAIe,EAAEuC,GAAGtD,EACrBqE,OAAQtD,EAAEwC,GAAGtD,EAAIc,EAAEuC,GAAGrD,GAInB,SAASqE,EAAMC,EAAeC,GAGnC,OAFAD,EAAKX,EAAmBW,GACxBC,EAAKZ,EAAmBY,GACjB,CACLlB,GAAI,CACFtD,EAAG0D,KAAKK,IAAIQ,EAAGjB,GAAGtD,EAAGwE,EAAGlB,GAAGtD,GAC3BC,EAAGyD,KAAKK,IAAIQ,EAAGjB,GAAGrD,EAAGuE,EAAGlB,GAAGrD,IAE7BsD,GAAI,CACFvD,EAAG0D,KAAKM,IAAIO,EAAGhB,GAAGvD,EAAGwE,EAAGjB,GAAGvD,GAC3BC,EAAGyD,KAAKM,IAAIO,EAAGhB,GAAGtD,EAAGuE,EAAGjB,GAAGtD,KCxG1B,MAAMwE,EAAkDvC,OAAOC,OAAO,CAC3EuC,eAAgB,GAChBC,qBAAsBvB,ICYXwB,EAA8C1C,OAAOC,OAL7B,CACnC0C,WAAY,KACZC,KAAM,OCRKC,EAAwB7C,OAAOC,OANN,CACpC6C,gBAAiB,GACjBC,sBAAuB,GACvBC,iBAAkB,KC6CPC,EAAwBjD,OAAOC,OAVN,CACpCiD,KAAM,OACNC,eAAgB,IAChB9E,KAAM,EACN+E,mBAAoB,GACpBC,yBAA0B,GAC1BC,gBAAiB,GACjBC,kBAAmB,KCbfC,EAA6B,CACjCC,SAAU,CACRC,gBAAiB3D,EACjB4D,aAAcnD,EACdoD,cAAejD,EACfkD,UAAWtB,EACXuB,OAAQpB,EACRqB,UAAWlB,EACXmB,UAAWf,IAIFgB,EAAkBjE,OAAOC,OAAOuD,G,8CChDtC,MAAMU,EAAc,QCCdC,EAA6B,uBAC7BC,EAAqB/E,IAAa,CAC7C/B,KAAM6G,EACNE,QAAShF,ICJEiF,EAA2B,qBCA3BC,EAAkB,YAClBC,EAAWC,IAAsB,CAC5CnH,KAAMiH,EACNF,QAAS,CAAEI,eCHAC,EAAmB,aCOnBC,EAA6B,CACxCR,EACAG,EACAC,EACAG,G,mCCXK,MAAME,EAAsB,gBACtBC,EAAc,KAAM,CAC/BvH,KAAMsH,ICAKE,EAAyB,mBCIvB,SAAUC,UACjB,QAAUH,EAAqB,GAGvC,SAAU,IACR,IACE,MAAOI,SAAsB,QAAK,IAAY,CAC5CC,OAAQ,qBAEJC,QAAiB,QAAKF,EAAKG,KAAKC,KAAKJ,IACrCK,EAAqBC,KAAKC,MAAML,SAChC,QDdoB,CAACG,IAAuB,CACpD/H,KAAMwH,EACNT,QAAS,CAAEgB,cCYCG,CAAeH,IACzB,MAAOI,GAEPC,QAAQC,KAAK,0BAA2BF,I,eCpBrC,MAAMG,EAAsB,gBACtBC,EAAc,KAAM,CAC/BvI,KAAMsI,ICAKE,EAAqB,eCFrBC,EAAgC,0BAChCC,EAAgBC,IAAgB,CAC3C3I,KAAMyI,EACN1B,QAAS,CAAE4B,YCHAC,EAAgC,0BAChCC,EAAe,KAAM,CAChC7I,KAAM4I,ICWD,SAAUE,EACfzD,EACAC,SAEM,QHdkB,EAACD,EAAwBC,KAAc,CAC/DtF,KAAMwI,EACNzB,QAAS,CAAE1B,aAAYC,UGYbyD,CAAW1D,EAAYC,IACjC,MAAM0D,QAA0D,QAAK,CACnEP,EACAG,IAGF,OAAII,EAAShJ,OAASyI,EACbO,EAASjC,QAAQ4B,OAGnB,KCPF,MAAMM,GAAgB,OAAavF,MAAM,CAC9CwF,OAAQ,OAAavF,WAAWY,IAAI,GACpC4E,MAAO,OAAaxF,WAAWY,IAAI,KCXxB6E,GAAiB,OAAa1F,MAAM,CAC/CwF,OAAQ,OAAavF,WAAWY,IAAI,GACpC8E,YAAa,OAAa1F,WAAWY,IAAI,GACzC/D,EAAG,OAAamD,WAChBlD,EAAG,OAAakD,aAQL2F,GAAiB,OAAa5F,MAAM,CAC/C6F,OAAQN,GAActF,WACtB6F,MAAOP,GAActF,WAErB8F,OAAQ,OAAYC,GAAGjG,KAOZkG,GAAiB,OAAajG,MAAM,CAE/CkG,MAAO,OAAYF,GAAGN,IACtBS,MAAO,OAAYH,GAAGJ,M,2BC/BjB,SAASQ,MACXC,GAOH,MAAQ,GAAoBC,UAAUD,GChBjC,SAASE,MAAOC,GACrB,OAAOA,EAAOC,QAAQ3J,GAAM4J,QAAQ5J,IAAW,IAALA,IAAS6J,KAAK,KA2BnD,SAASC,MAASjG,GACvB,IAAIkG,EAASlG,EAAK,GAClB,MAAMmG,EAAanG,EAAKrC,MAAM,EAAGqC,EAAKC,OAAS,GAAGmG,IAAIC,QAChDC,EAAWtG,EAAKA,EAAKC,OAAS,GAC9B5C,EAAQ2C,EAAKA,EAAKC,OAAS,GAE3BsG,EAAUC,GAAMN,GACtBA,EAASK,EAET,IAAK,MAAME,KAAON,EAChBD,EAAOO,GAAOD,GAAMN,EAAOO,IAC3BP,EAASA,EAAOO,GASlB,OALEP,EAAOI,GADY,mBAAVjJ,EACUA,EAAM6I,EAAOI,IAEbjJ,EAGdkJ,EAGT,SAASC,GAAgCE,GACvC,OAAIC,MAAMC,QAAQF,GACT,IAAIA,GAEN,OAAP,UAAYA,GCrCP,SAASG,GACdC,GAIA,OAAQC,GACC,CAACvK,EAAkB8F,EAAiB0E,KACzC,MAAMC,EAAWF,EAAQvK,EAAMsF,SAASgF,GAAUE,EAAQxK,GAC1D,OAAIA,EAAMsF,SAASgF,IAAYG,EACtBhB,GAAMzJ,EAAO,WAAYsK,EAASG,GAEpCzK,GAyCN,SAAS0K,GACdJ,GAEA,OACEK,IAEA,MAAMC,EAAmB,CAACC,KAAgBrH,IACxCmH,EAASE,EAAEvF,SAASgF,MAAa9G,GAEnC,OADAoH,EAAYE,MAAQH,EACbC,GC1EJ,MAAMG,GAA+BV,GAC1C,mBAEWW,GAAgCN,GAC3C,mBCLF,GAAeK,IAA6B,CAAC/K,EAAOwK,InBK7C,SACLA,GAEA,OAAOA,EAAOrL,OAAS6G,EmBPlBiF,CAA0BT,GAIxB,OAAP,wBACKxK,GAAK,CACRkC,QAASsI,EAAOtE,UALTlG,ICDEkL,GAAwB,kBACxBC,GAAe,CAACC,EAAcC,KAAiC,CAC1ElM,KAAM+L,GACNhF,QAAS,OAAF,wBAAOkF,GAAK,CAAEC,oBCHVC,GAAuB,iBCHvBC,GAAwB,kB,gBCQ9B,MAAMC,GAAqB,eACrBC,GAAa,CACxBjD,EACAkD,KACG,CACHvM,KAAMqM,GACNtF,QAAS,OAAF,QAAImC,QAAQ,UAAUG,eAAiBkD,GAAQ,MAGjD,SAASC,GACdnB,GAEA,OAAOA,EAAOrL,OAASqM,GCZlB,MAAMI,GAAqB,eACrBC,GAAa,CACxB5I,EACAC,EACAwI,KACG,CACHvM,KAAMyM,GACN1F,QAAS,CACP4F,cAAc,UACd7I,KACAC,KACA0F,QAAQ8C,aAAI,EAAJA,EAAM9C,SAAU,MAIrB,SAASmD,GACdvB,GAEA,OAAOA,EAAOrL,OAASyM,GCxBlB,MAAMI,GAAmBhB,IAA+BH,GAAM,KAExDoB,GAAwB,CAACpB,EAAa3J,KACjD,MAAMgL,EAAOF,GAAiBnB,GAC9B,MAAO,CACLlL,EAAG0D,KAAK8I,MAAMjL,EAAEvB,EAAIuM,GAAQA,EAC5BtM,EAAGyD,KAAK8I,MAAMjL,EAAEtB,EAAIsM,GAAQA,I,qFCFzB,SAASE,GACdhJ,EACApD,GAIA,OAFgBmK,MAAMC,QAAQhH,GAAKA,EAAI,CAACA,IAEzBwG,KAAKjK,IAClB,GAAiB,iBAANA,EACT,MAAO,CACLgB,KAAMhB,EACNiB,KAAM,QACNyL,OAAQ,QACRC,YAAa,GAGjB,MAAM1L,EAAyB,mBAAXjB,EAAEiB,KAAsBjB,EAAEiB,KAAKZ,GAAS,IAAML,EAAEiB,KAC9DyL,EACgB,mBAAb1M,EAAE0M,OAAwB1M,EAAE0M,OAAOrM,GAAS,IAAML,EAAE0M,OACvDC,EACqB,mBAAlB3M,EAAE2M,YACL3M,EAAE2M,YAAYtM,GAAS,IACvBL,EAAE2M,YACR,MAAO,CACL3L,KAAMhB,EAAEgB,KACRC,OACAyL,SACAC,kBCnBC,MAAMC,GAA2B,CACtCC,IAAK,WACLC,GAAI,UACJC,IAAK,WACLC,IAAK,WACLC,OAAQ,WACRC,IAAK,WACLC,OAAQ,WACRC,KAAM,WAIKC,GAAqBlJ,EAChC,KAAOyI,IAA0BU,QAAO,CAACC,GAAU9N,aACjD,MAAM+N,EAAUf,GAAiBhN,EAAOE,eAAW8N,GAmBnD,OAlBIhO,EAAOC,SACT8N,EAAQE,KAAK,CAAE1M,KAAMvB,EAAOC,UAiBvB4E,EAAMiJ,EAfAC,EACVvD,KAAKjJ,IACJ,MAAMuM,EAAS,KAAUvM,EAAKA,MAC9B,MAAO,CACLsC,GAAI,CACFtD,EAAGuN,EAAO,GACVtN,EAAGsN,EAAO,IAEZhK,GAAI,CACFvD,EAAGuN,EAAO,GACVtN,EAAGsN,EAAO,QAIfD,OAAOhJ,EAAOjB,MAEhBA,I,kDCtCE,MAAMsK,GAA4BjD,GACvC,gBAEWkD,GAA6B7C,GACxC,gBCNW8C,GAAwBD,IAClC1C,GAAMA,EAAEvI,YAGEmL,GAAkBF,IAC7B,KAAAG,gBACEF,GAAsB1C,OACrBxI,GAAyCT,OAAO8L,KAAKrL,MAI7CsL,GAA+BL,IAC1C,KAAAG,gBACEF,GAAsB1C,OACrBxI,GACC,KAAUA,GAAY3C,GAAMA,EAAE6I,iBAIvBqF,GAAyBN,IACpC,CAAC1C,EAAsBxC,IAAmBwC,EAAEvI,UAAU+F,IAAW,OAGtDyF,GAAgCP,IAC3C,CAAC1C,EAAsBxC,KACrB,MAAM0F,EAAOF,GAAuB/C,MAAMD,EAAGxC,GAC7C,OAAK0F,EAGEA,EAAKvF,YAFH,QAMAwF,GAA+BT,IAC1C,CAAC1C,EAAsBxC,KACrB,MAAM0F,EAAOF,GAAuB/C,MAAMD,EAAGxC,GAC7C,OAAK0F,GAGExB,GAAyBwB,EAAKvF,cAF5B,QAMAyF,GAAmBV,IAC9B,KAAAG,iBACG7C,GAAMA,EAAEvI,YACRA,IACC,MAAM/C,EAAkB,GACxB,IAAK,MAAM8I,KAAUxG,OAAO8L,KAAKrL,GAAY,CAC3C,MAAMyL,EAAOzL,EAAU+F,GACjB6F,EAAM3B,GAAyBwB,EAAKvF,aACtC0F,GACF3O,EAAK8N,QACAxL,OAAO8L,KAAKO,EAAI3O,MAAMqK,KAAKuE,IAAQ,CACpC9F,OAAQA,EACRC,MAAO6F,OAKf,OAAO5O,MChEA6O,GAA6B/D,GACxC,iBAEWgE,GAA8B3D,GACzC,iBCYW4D,GAAgCD,IAC1CrO,GAAUA,EAAMyC,oBAGN8L,GAAiCF,IAC5C,CAACrO,EAA2BqI,IAAmBrI,EAAMyC,kBAAkB4F,KAG5DmG,IAA0C,KAAAd,gBACrDY,GACAV,IACA,CACEa,EACAC,K,MAEA,MAAMC,EAGF,GAEEC,EAAU/M,OAAO8L,KAAKe,GAC5B,IAAK,MAAMrG,KAAUuG,EAAS,CAC5B,MAAMC,EAAiD,GACvDF,EAAgCtG,GAAUwG,EAE1C,MAAMC,EAA4C,QAAhC,EAAGL,EAAsBpG,UAAO,QAAItF,EAEhDyF,EAAckG,EAAqBrG,GACzC,IAAKG,EACH,SAEF,MAAM0F,EAAM3B,GAAyB/D,GACrC,IAAK0F,EACH,SAGF,MAAMa,EAASlN,OAAO8L,KAAKO,EAAI3O,MAC/B,IAAK,MAAM+I,KAASyG,EAAQ,CAC1B,MACMC,EAAcpL,EAASkL,EADNZ,EAAI3O,KAAK+I,IAEhCuG,EAAwBvG,GAAS0G,GAIrC,OAAOL,KCvDEM,GAAmBjE,IAC7BH,GAAMA,EAAE7I,WAEEkN,GAAoBlE,IAC9BH,GAAMA,EAAE5I,YAEEkN,GAAkBnE,IAA+BH,GAAMA,EAAE3I,UAEzDkN,GAAwBpE,IACnC,KAAA0C,gBACEuB,GAAiBnE,MACjBoE,GAAkBpE,MAClBqE,GAAgBrE,OAChB,CAAC9I,EAAUC,EAAWC,IACP,WAAbF,GAAyBC,GAAaC,EAClCqB,EAAmBtB,EAAWC,GAC9B,QAIGmN,GAAyBrE,IACpC,KAAA0C,gBACEuB,GAAiBnE,MACjBoE,GAAkBpE,MAClBqE,GAAgBrE,MAChBkB,GAAiBlB,OACjB,CAAC9I,EAAUC,EAAWC,EAASoN,IAChB,SAAbtN,GAAuBC,GAAaC,EAChC,CACEvC,EAAG0D,KAAK8I,OAAOjK,EAAQvC,EAAIsC,EAAUtC,GAAK2P,GAAYA,EACtD1P,EAAGyD,KAAK8I,OAAOjK,EAAQtC,EAAIqC,EAAUrC,GAAK0P,GAAYA,GAExD,QAIGC,GAA4BvE,IACtCH,GAAqB,gBAAfA,EAAE7I,WAGEwN,GAA0BxE,IAA+BH,GACrD,gBAAfA,EAAE7I,SAA6B6I,EAAE1I,mBAAqB,OAG3CsN,IAA4B,KAAA/B,gBACvCuB,GACAE,GACAX,IACA,CAACxM,EAAUE,EAASwN,KAClB,GAAiB,SAAb1N,IAAwBE,EAC1B,OAAO,KAGT,MAAM0M,EAAU/M,OAAO8L,KAAK+B,GAC5B,IAAK,MAAMrH,KAAUuG,EAAS,CAC5B,MAAMe,EAAsBD,EAA4BrH,GAClD0G,EAASlN,OAAO8L,KAAKgC,GAC3B,IAAK,MAAMrH,KAASyG,EAIlB,GADe5L,EADAU,EAAc3B,EADTyN,EAAoBrH,MAG1B,EACZ,MAAO,CAAED,SAAQC,SAKvB,OAAO,QCzEEsH,GAAkC,gCCA/C,GAAe7E,IAA6B,CAAC/K,EAAOwK,KAClD,IDSK,SACLA,GAEA,OAAOA,EAAOrL,OAASyQ,GCZlBC,CAA8BrF,GACjC,OAAOxK,EAGT,MAAM,SAAE8P,GAAatF,EAAOtE,QAE5B,OAAO,OAAP,wBACKlG,GAAK,CACRgC,SAAU,cACVG,mBAAoB2N,OCTXC,GAA+B,yBCD/BC,GAAsB,gBACtBC,GAAc,CACzB5H,EACAtD,EAAsB,SACnB,CACH5F,KAAM6Q,GACN9J,QAAS,CACP0I,QAASzE,MAAMC,QAAQ/B,GAAUA,EAAS,CAACA,GAC3CtD,U,yECFG,MAAMmL,GAAyB7F,GAA4B,aACrD8F,GAA0BzF,GACrC,aAGK,SAAS0F,GACdC,EACAC,EACAvL,GAEA,OAAQA,GACN,IAAK,MACH,OAAOuL,EACT,IAAK,SACH,OAAO,KAAMD,EAAaC,GAC5B,IAAK,SACH,OAAO,KAAWD,EAAaC,GACjC,IAAK,SACH,OAAO,KAAWD,EAAaC,GAAWnH,OACxC,KAAWmH,EAAWD,IAK5B,OAAOC,ECzBF,MAAMC,GAA0BJ,IACpCnQ,GAAUA,EAAM2E,kBAGN6L,GAAmCL,IAC9C,CAACtF,EAAmBxC,KACqB,IAAvCwC,EAAElG,gBAAgB8L,QAAQpI,KAajBqI,KAV4B,KAAAhD,gBACvCF,GACA+C,IACA,CAACjO,EAAWqC,IAAoB,KAAKrC,EAAWqC,KAGLwL,IAC1CnQ,GAAUA,EAAM4E,wBAGmCuL,IACpD,CAACtF,EAAmBiB,KACiC,IAAnDjB,EAAEjG,sBAAsB6L,QAAQ3E,MAGvB6E,GAA2BR,IACrCnQ,GAAUA,EAAM6E,mBAGN+L,GAAqCT,IAChD,CAACtF,EAAmBgG,KACuB,IAAzChG,EAAEhG,iBAAiB4L,QAAQI,KCnClBC,GAAiC,2BCA9C,GAAe/F,IAA6B,CAAC/K,EAAOwK,KAClD,IDSK,SACLA,GAEA,OAAOA,EAAOrL,OAAS2R,GCZlBC,CAA6BvG,GAChC,OAAOxK,EAGT,MAAM,EAAEL,EAAC,EAAEC,GAAM4K,EAAOtE,QAExB,OAAO,OAAP,wBACKlG,GAAK,CACRgC,SAAU,SACVC,UAAW,CACTtC,IACAC,UCXOoR,GAA+B,yBCM5C,GAAe/H,GACb,ICMa,SACbjJ,EAAkB8F,EAClB0E,GAEA,IvBXK,SACLA,GAEA,OAAOA,EAAOrL,OAAS+L,GuBQlB+F,CAAqBzG,GACxB,OAAOxK,EAGT,MAAM,EAAEL,EAAC,EAAEC,EAAC,cAAEyL,GAAkBb,EAAOtE,SAEjC,SACJlE,EAAQ,UACRC,EAAS,QACTC,EAAO,mBACPC,EAAkB,eAClBC,GACEpC,EAAMsF,SAASC,gBAEnB,OAAQvD,GACN,IAAK,SACH,GAAIC,EAAW,CACb,MAAMiP,EAAO3N,EAAmBtB,EAAW,CAAEtC,IAAGC,MAChDI,EAAQ,GAAYA,EtBlCA,EAC1BmR,EACApM,EAAsB,SACnB,CACH5F,KAAMmM,GACNpF,QAAS,CACPiL,SACApM,UsB2B+BqM,CAAaF,EAAM7F,IAEhD,MAEF,IAAK,OACH,GAAIpJ,EAAW,CACb,IAAIoP,EAASxN,EAAc,CAAElE,IAAGC,KAAKqC,GACrCoP,EAASpF,GAAsBjM,EAAOqR,GACtCrR,EAAQ,GAAYA,GrB7CEsR,EqB6CmBD,EAAO1R,ErB7CT4R,EqB6CYF,EAAOzR,ErB7CC,CACjET,KAAMoM,GACNrF,QAAS,CAAEoL,UAASC,cqB6ChB,MAEF,IAAK,cACH,GAAIrP,EAAS,CACX,MAAMsP,EAAWvF,GAAsBjM,EAAOkC,GAC9ClC,EAAQ,GACNA,EACAyL,GAAWtJ,EAAqB,CAAEqP,cAGtC,MAEF,IAAK,OAAQ,CACX,MAAMC,EAAShC,GAA0BzP,GACrCoC,GAAkBF,GAAWuP,IAC/BzR,EAAQ,GAAYA,EAAO6L,GAAWzJ,EAAgBqP,KAExD,OrBhEuB,IAACH,EAAiBC,EqB6E7C,OATQ9H,GAAMzJ,EAAO,WAAY,mBAAoBa,GAAW,OAAD,wBAC1DA,GAAK,CACRmB,SAAU,KACVC,UAAW,KACXC,QAAS,KACTC,mBAAoB,KACpBC,eAAgB,WD/DlB,IEFa,SACbpC,EAAkB8F,EAClB0E,GAEA,ITGK,SACLA,GAEA,OAAOA,EAAOrL,OAAS4Q,GSNlB2B,CAA2BlH,GAC9B,OAAOxK,EAGT,MAAM,OAAEqI,EAAM,EAAE1I,EAAC,EAAEC,EAAC,cAAEyL,GAAkBb,EAAOtE,QAgB/C,OAdAlG,EAAQyJ,GAAMzJ,EAAO,WAAY,mBAAoBa,GAAW,OAAD,wBAC1DA,GAAK,CACRmB,SAAU,OACVC,UAAW,CACTtC,IACAC,SAIC4Q,GAAiCxQ,EAAOqI,KAE3CrI,EAAQ,GAAYA,EAAOiQ,GAAY5H,EAAQgD,KAG1CrL,IFpBP,GGZa+K,IAA6B,CAAC/K,EAAOwK,KAClD,IJSK,SACLA,GAEA,OAAOA,EAAOrL,OAAS6R,GIZlBW,CAA2BnH,GAC9B,OAAOxK,EAGT,MAAM,UAAEiC,EAAS,IAAEkM,GAAQ3D,EAAOtE,QAElC,OAAO,OAAP,wBACKlG,GAAK,CACRgC,SAAU,OACVC,YACAG,eAAgB+L,OCXLpD,IAA6B,CAAC/K,EAAOwK,I7CG7C,SACLA,GAEA,OAAOA,EAAOrL,OAASgH,E6CLlByL,CAAwBpH,GAIP,MAAlBxK,EAAMgC,SACDhC,EAGF,OAAP,wBACKA,GAAK,CACRkC,QAAS,OATFlC,ICDI+K,IAA6B,CAAC/K,EAAOwK,KAClD,I5CEK,SAA0BA,GAC/B,OAAOA,EAAOrL,OAASoH,E4CHlBsL,CAAiBrH,GACpB,OAAOxK,EAGT,MAAQ+B,UAAW+P,GAAU9R,GACvB,MAAE+R,GAAUvH,EAAOtE,QAEzB,OAAO,OAAP,wBACKlG,GAAK,CACR+B,UACEgQ,EAAQ,EACJD,EAAQC,EAdG,KAeXD,GAfW,MAeDC,SCZb,SAASC,GACdC,EACA1H,GAGA,OADAA,EAAQ2H,OAASD,EACV1H,ECHT,SAAeyH,IDNa,GCQ1B1E,IAA0B,CAACtN,EAAOwK,KAChC,IAAKmB,GAAmBnB,GACtB,OAAOxK,EAGT,MAAQqI,OAAQ8J,EAAE,YAAE3J,GAAgBgC,EAAOtE,QAC3C,OAAO,OAAP,wBACKlG,GAAK,CACRsC,UAAW,OAAF,wBACJtC,EAAMsC,WAAS,CAClB,CAAC6P,GAAK,CACJhT,KAAM,UACNqJ,uBCrBH,SAAS4J,GAAWvR,GACzB,OAAOsJ,MAAMC,QAAQvJ,GAASA,EAAQ,CAACA,GCElC,MAAMwR,GAAqB,eAM3B,SAASC,GACd9H,GAEA,OAAOA,EAAOrL,OAASkT,GCJzB,SAAe/E,IAA0B,CAACtN,EAAOwK,KAC/C,IAAK8H,GAAmB9H,GACtB,OAAOxK,EAGT,MAAM,QAAE4O,GAAYpE,EAAOtE,QAErBqM,EAAmB,KAAW1Q,OAAO8L,KAAK3N,EAAMsC,WAAYsM,GASlE,OAAO,OAAP,wBACK5O,GAAK,CACRsC,UAAW,KAAKtC,EAAMsC,UAAWiQ,GACjChQ,gBAAiB,KAAOvC,EAAMuC,iBAVhC,SAA+BiQ,GAC7B,OACmD,IAAjDD,EAAiB9B,QAAQ+B,EAAEC,SAASpK,UACc,IAAlDkK,EAAiB9B,QAAQ+B,EAAEE,UAAUrK,gBCnB9BsK,GAAqB,eACrBC,GAAa,KAAM,CAC9BzT,KAAMwT,KAGD,SAASE,GACdrI,GAEA,OAAOA,EAAOrL,OAASwT,GCLzB,SAAerF,IAA0B,CAACtN,EAAOwK,IAC1CqI,GAAmBrI,GAIjBnI,EAHErC,ICAX,GAAesN,IAA0B,CAACtN,EAAOwK,KAC/C,IAAKuB,GAAmBvB,GACtB,OAAOxK,EAGT,MAAM,aAAE8L,EAAY,GAAE7I,EAAE,GAAEC,GAAOsH,EAAOtE,QAClC4M,E3BWD,SACL9S,EACAiD,EACAC,GAEA,MAAM6P,EAAS/S,EAAMsC,UAAUW,EAAGoF,QAC5B2K,EAAShT,EAAMsC,UAAUY,EAAGmF,QAElC,IAAK0K,IAAWC,EACd,OAAO,KAGT,MAAMC,EAAQ1G,GAAyBwG,EAAOvK,aACxC0K,EAAQ3G,GAAyByG,EAAOxK,aAE9C,IAAKyK,IAAUC,EACb,OAAO,KAGT,MAAMC,EAAQ,KAAKF,EAAM1T,MAAOI,GAAMA,EAAEF,MAAQwD,EAAGqF,QAC7C8K,EAAQ,KAAKF,EAAM3T,MAAOI,GAAMA,EAAEF,MAAQyD,EAAGoF,QAEnD,OAAK6K,GAAUC,EAKXD,EAAMzT,YAAc0T,EAAM1T,UACrB,KAMF,CACLgT,UAJoC,WAApBS,EAAMzT,UAAyBuD,EAAKC,EAKpDuP,SAJmC,UAApBU,EAAMzT,UAAwBuD,EAAKC,GAT3C,K2BlCImQ,CAAiBrT,EAAOiD,EAAIC,GACzC,IAAK4P,EACH,OAAO9S,EAGT,MAAM,SAAEyS,GAAaK,EAGrB,OAAI,KAAK9S,EAAMuC,iBAAkBiQ,IAAMc,O1CKXC,E0CLyBf,EAAEC,S1CKfe,E0CLyBf,E1CM1Dc,EAAElL,SAAWmL,EAAEnL,QAAUkL,EAAEjL,QAAUkL,EAAElL,MADzC,IAAuBiL,EAAYC,K0CJ/BxT,EAGF,OAAP,wBACKA,GAAK,CACRuC,gBAAiB,OAAF,wBACVvC,EAAMuC,iBAAe,CACxB,CAACuJ,GAAe,OAAF,QACZqG,GAAIrG,GACDgH,UC7BEW,GAAsB,gBAQ5B,SAASC,GACdlJ,GAEA,OAAOA,EAAOrL,OAASsU,GCPzB,MCUA,GARqBxK,GACnB,GACA,GACA,GACA,GDNaqE,IAA0B,CAACtN,EAAOwK,KAC/C,IAAKkJ,GAAoBlJ,GACvB,OAAOxK,EAGT,MAAM,aAAE8L,GAAiBtB,EAAOtE,QAE1ByN,EAAe9R,OAAO8L,KAAK3N,EAAMuC,iBAAiB+G,QACrD3J,GAAMA,IAAMmM,IAGf,OAAO,OAAP,wBACK9L,GAAK,CACRuC,gBAAiB,KAAKvC,EAAMuC,gBAAiBoR,SEZjD,GAAevF,IAA2B,CAACpO,EAAOwK,KAChD,IAAKmB,GAAmBnB,GACtB,OAAOxK,EAET,MAAM,OAAEqI,EAAM,SAAEmJ,EAAWzO,GAAcyH,EAAOtE,QAEhD,OAAOuD,GAAMzJ,EAAO,oBAAqBqI,EAAQmJ,MCPtCoC,GAAwBrG,IACnC,KAAAG,iBACG7C,GAAMA,EAAEtI,kBACRsR,GAAchS,OAAO8L,KAAKkG,MAIlBC,GAAqCvG,IAChD,CAAC1C,EAAsBiB,IACrBjB,EAAEtI,gBAAgBuJ,KAGTiI,GAAsBxG,IACjC,KAAAG,iBACG1N,GAA6BA,EAAMuC,kBACnCsR,GAAc,KAAOA,MAQbG,GAA2CzG,IACtD,CAACvN,EAA0BqI,IACzBxG,OAAO8L,KAAK3N,EAAMuC,iBAAiB+G,QAChCwC,GACC9L,EAAMuC,gBAAgBuJ,GAAc2G,SAASpK,SAAWA,MAQnD4L,GAA4C1G,IACvD,CAACvN,EAA0BqI,IACzBxG,OAAO8L,KAAK3N,EAAMuC,iBAAiB+G,QAChCwC,GACC9L,EAAMuC,gBAAgBuJ,GAAc4G,UAAUrK,SAAWA,MC9BjE,GAAe2J,Ibba,Gae1B5D,IAA2B,CAACpO,EAAOwK,EAAQ0J,KACzC,IAAK5B,GAAmB9H,GACtB,OAAOxK,EAGT,MAAM,QAAE4O,GAAYpE,EAAOtE,QAErBqM,EAAmB,KACvB1Q,OAAO8L,KAAK3N,EAAMyC,mBAClBmM,GAOIuF,EAAwBvF,EAAQ3B,QAAO,CAACmH,EAAe/L,KAC3D,MAAMpI,EAAS+T,GAAyCE,EAAU7L,GAClE+L,EAAc/G,QAAQpN,GAEtB,MAAMoU,EAAUJ,GACdC,EACA7L,GAIF,OAFA+L,EAAc/G,QAAQgH,GAEfD,IACN,IAEGE,EAAmBH,EAAsBlH,QAC7C,CAACsH,EAAUzI,KACTyI,EAASlH,QAAQrN,EAAM0C,2BAA2BoJ,IAC3CyI,IAET,IAGIC,EAAyB,KAC7B3S,OAAO8L,KAAK3N,EAAM0C,4BAClByR,GAGIM,EAAoB,KACxB5S,OAAO8L,KAAK3N,EAAM2C,6BAClB2R,GAGF,OAAO,OAAP,wBACKtU,GAAK,CACRyC,kBAAmB,KAAKzC,EAAMyC,kBAAmB8P,GACjD7P,2BAA4B,KAC1B1C,EAAM0C,2BACN8R,GAEF7R,4BAA6B,KAC3B3C,EAAM2C,4BACN8R,SCpEKC,GAAmB,aCChC,GAAetG,IAA2B,CAACpO,EAAOwK,EAAQ0J,KACxD,IDQK,SAA0B1J,GAC/B,OAAOA,EAAOrL,OAASuV,GCTlBC,CAAiBnK,GACpB,OAAOxK,EAGT,MAAM,QAAE4O,EAAO,SAAE4C,EAAQ,SAAEoD,GAAapK,EAAOtE,QAEzC2O,EAAqB,KACzB,KAAK7U,EAAMyC,kBAAmBmM,IAC7B1N,IAAM,CACLvB,EAAGiV,EAAW1T,EAAEvB,EAAI6R,EAAS7R,EAAI6R,EAAS7R,EAC1CC,EAAGgV,EAAW1T,EAAEtB,EAAI4R,EAAS5R,EAAI4R,EAAS5R,MAI9C,OAAO,OAAP,wBACKI,GAAK,CACRyC,kBAAmB,OAAF,wBACZzC,EAAMyC,mBACNoS,QCpBT,GAAezG,IAA2B,CAACpO,EAAOwK,IAC3CqI,GAAmBrI,GAIjBhI,EAHExC,I,0BCCX,SAAeoO,IAA2B,CAACpO,EAAOwK,KAChD,IAAKuB,GAAmBvB,GACtB,OAAOxK,EAGT,MAAM,aAAE8L,EAAY,OAAElD,GAAW4B,EAAOtE,QAGxC,GAAI0C,EAAOnF,OAAS,EAAG,CACrB,MAAM8Q,EAAW3L,EAAOgB,KAAKjK,IAAM,YACnC8J,GAAMzJ,EAAO,6BAA8B8L,EAAcyI,GACzD9K,GAAMzJ,EAAO,+BAAgCa,GAAW,OAAD,wBAClDA,GACA,KAAU0T,EAAU3L,MAI3B,OAAOa,GAAMzJ,EAAO,6BAA8B8L,EAAc,OClBlE,GAAesC,IAA2B,CAACpO,EAAOwK,KAChD,IAAKkJ,GAAoBlJ,GACvB,OAAOxK,EAGT,MAAM,aAAE8L,GAAiBtB,EAAOtE,QAE1BsO,EAAyB3S,OAAO8L,KACpC3N,EAAM0C,4BACN4G,QAAQ3J,GAAMA,GAAKmM,IAEf2I,EAAoB,KACxB5S,OAAO8L,KAAK3N,EAAM2C,6BAClB3C,EAAM0C,2BAA2BoJ,IAGnC,OAAO,OAAP,wBACK9L,GAAK,CACR0C,2BAA4B,KAC1B1C,EAAM0C,2BACN8R,GAEF7R,4BAA6B,KAC3B3C,EAAM2C,4BACN8R,QC1BOK,GAAwB,kBCDrC,GAAe1G,IAA2B,CAACpO,EAAOwK,KAChD,IDgBK,SACLA,GAEA,OAAOA,EAAOrL,OAAS2V,GCnBlBC,CAAqBvK,GACxB,OAAOxK,EAGT,MAAM,aAAE8L,EAAY,gBAAEkJ,EAAe,SAAExD,EAAQ,QAAEX,GAAYrG,EAAOtE,QACpE,IAAI+O,EAAajV,EAAM0C,2BAA2BoJ,GAC9CoJ,EAAiBF,EACjBC,EAAWxE,QAAQuE,GAAmB,EACtC,EAQJ,OANAC,EAAa,IACRA,EAAW9T,MAAM,EAAG+T,GACvBrE,KACGoE,EAAW9T,MAAM+T,IAGf,OAAP,wBACKlV,GAAK,CACR0C,2BAA4B,OAAF,wBACrB1C,EAAM0C,4BAA0B,CACnC,CAACoJ,GAAemJ,IAElBtS,4BAA6B,OAAF,wBACtB3C,EAAM2C,6BAA2B,CACpC,CAACkO,GAAUW,SC3BJ2D,GAA2B,qBCKxC,GAAe/G,IAA2B,CAACpO,EAAOwK,KAChD,IDAK,SACLA,GAEA,OAAOA,EAAOrL,OAASgW,GCHlBC,CAAwB5K,GAC3B,OAAOxK,EAGT,MAAM,QAAE6Q,GAAYrG,EAAOtE,QAErBuO,EAAoB5S,OAAO8L,KAC/B3N,EAAM2C,6BACN2G,QAAQ3J,GAAMA,IAAMkR,IAEtB,OAAO,OAAP,wBACK7Q,GAAK,CACR0C,2BAA4B,KAC1B1C,EAAM0C,4BACL0R,GAAkBA,EAAc9K,QAAQ3J,GAAMA,IAAMkR,MAEvDwE,oBAAqB,KACnBrV,EAAM2C,4BACN8R,QCrBOa,GAAyB,mBACzBC,GAAgB,CAC3B1E,EACAW,EACAoD,GAAW,KACR,CACHzV,KAAMmW,GACNpP,QAAS,CACPqO,SAAUnC,GAAQvB,GAClBW,WACAoD,cCSJ,GAZqB3L,GACnB,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GCbamF,IAA2B,CAACpO,EAAOwK,KAChD,IFWK,SACLA,GAEA,OAAOA,EAAOrL,OAASmW,GEdlBE,CAAsBhL,GACzB,OAAOxK,EAGT,MAAM,SAAEuU,EAAQ,SAAE/C,EAAQ,SAAEoD,GAAapK,EAAOtE,QAE1CuP,EAAc,KAClB,KAAKzV,EAAM2C,4BAA6B4R,IACvCrT,IAAM,CACLvB,EAAGiV,EAAW1T,EAAEvB,EAAI6R,EAAS7R,EAAI6R,EAAS7R,EAC1CC,EAAGgV,EAAW1T,EAAEtB,EAAI4R,EAAS5R,EAAI4R,EAAS5R,MAI9C,OAAO,OAAP,wBACKI,GAAK,CACR2C,4BAA6B,OAAF,wBACtB3C,EAAM2C,6BACN8S,S,kDCxBF,MAAMC,GAAoB,kBCOpBC,GAAkCpI,IAC7C,CAAC1C,EAAsBxC,EAAgBC,KACrC,MAAM4F,EAAMF,GAA6BlD,MAAMD,EAAGxC,GAClD,IAAK6F,EACH,OAAO,KAGT,MAAM0H,EAAS,KAAK1H,EAAI3O,MAAO2B,GAAMA,EAAEzB,OAAS6I,IAChD,OAAKsN,EAGEA,EAAOlW,UAFL,QAWAmW,GAA6CtI,IACxD,CAACvN,EAA0BqI,KACzB,MAAMyN,EAAc/B,GAAoBjJ,MAAM9K,GACxC+V,EAAU/H,GAA6BlD,MAAM9K,EAAOqI,GAE1D,IAAK0N,EACH,MAAO,GAGT,IAAIC,EAAuB,GAC3BA,EAAanU,OAAO8L,KAAKoI,EAAQxW,MAAM+J,QACpC3J,GAAoC,WAA9BoW,EAAQxW,KAAKI,GAAGD,YAGzB,MAAMuW,EAAoBH,EAAYxM,QACnC3J,GAAMA,EAAE+S,UAAUrK,SAAWA,IAG1BP,EAAoC,GAC1C,IAAK,MAAMqG,KAAO6H,EAChBlO,EAAOqG,GAAO,GAGhB,IAAK,MAAM+H,KAAcD,EAAmB,CAC1C,MAAM,UAAEvD,EAAS,SAAED,GAAayD,EAChCpO,EAAO4K,EAAUpK,OAAO+E,KAAKoF,GAG/B,OAAO3K,KCpDEqO,GAAyB9L,GAA4B,aCYlE,IDXuCK,GACrC,aCUayL,IAAuB,CAACnW,EAAOwK,EAAQ0J,KACpD,IHRK,SACL1J,GAEA,OAAOA,EAAOrL,OAASuW,GGKlBU,CAAkB5L,GACrB,OAAOxK,EAGT,MAAM,QAAE4O,GAAYpE,EAAOtE,QAC3B,GAAuB,IAAnB0I,EAAQnL,OACV,OAAOzD,EAGT,MAAMyC,EAAoB6L,GAA8B4F,GAElDmC,EAAU,KACdzH,EACA,KAAIA,GAAS,KAAM,aAOf0H,EAAe7T,EAAkBmM,EAAQ,IAEzC2H,EAA6B3H,EAAQhF,KAAKvB,IAC9C,MAAM0F,EAAOF,GAAuBqG,EAAU7L,GACxCgM,EAAUwB,GACd3B,EACA7L,GAaF,MAXgC,CAC9B8J,GAAIkE,EAAQhO,GACZlJ,KAAM,UACNqJ,YAAauF,EAAKvF,YAClBgO,OAAQ3S,EAAcpB,EAAkB4F,GAASiO,GACjDjC,QAAS,KAAUA,GAAUoC,GAC3BA,EACGnN,QAAQ3J,IAAM+W,OAnBCvE,EAmBcxS,EAAE0I,QAlBU,IAAzC,KAAUuG,GAAUjP,GAAMA,IAAMwS,IADzC,IAAwBA,KAoBfvI,KAAK4I,IAAM,CAAGnK,OAAQgO,EAAQ7D,EAAEnK,QAASC,MAAOkK,EAAElK,gBAM3D,OAAO,OAAP,wBACKtI,GAAK,CACRqE,eAAgBkS,EAChBjS,qBAAsBgS,QC7DbK,GAAe,mBCefC,GAAgC,CAAEjX,EAAG,GAAIC,EAAG,ICPzD,GALyBqJ,GACvB,IDaa,SACbjJ,EAAkB8F,EAClB0E,GAEA,IDhBK,SAAuBA,GAC5B,OAAOA,EAAOrL,OAASwX,GCelBE,CAAcrM,GACjB,OAAOxK,EAGT,MAAM,eAAEqE,EAAc,qBAAEC,GAAyBtE,EAAMsF,SAASI,UAC1DoR,EAAgBlT,EAASU,EAAsBsS,IAE/CG,EAAW,KACf1S,EAAeuF,KAAKjK,GAAMA,EAAEwS,KAC5B,KAAI9N,GAAgB,KAAM,aAM5B,IAAK,IAAI0J,KAAQ1J,EAAgB,CAC/B,MAAM,GAAE8N,EAAE,YAAE3J,EAAW,OAAEgO,GAAWzI,EAC9B7M,EAAI0C,EAASkT,EAAeN,GAClCxW,EAAQ,GACNA,EAEAyL,GAAWjD,EAAa,CAAEgJ,SAAUtQ,EAAGmH,OAAQ0O,EAAS5E,MAK5D,IAAK,IAAIpE,KAAQ1J,EAAgB,CAC/B,MAAM,GAAE8N,EAAE,QAAEkC,GAAYtG,EAClBiJ,EAAWD,EAAS5E,GAC1B,IAAK,IAAIO,KAAa7Q,OAAO8L,KAAK0G,GAChC,IAAK,IAAI3L,KAAU2L,EAAQ3B,GAAY,CACrC,MAAQrK,OAAQ4O,EAAc3O,MAAO4O,GAAcxO,EAC7CyO,EAAWJ,EAASE,GAC1BjX,EAAQ,GACNA,EACA6L,GACE,CAAExD,OAAQ2O,EAAU1O,MAAOoK,GAC3B,CAAErK,OAAQ8O,EAAU7O,MAAO4O,MAgBrC,OATAlX,EAAQyJ,GACNzJ,EACA,WACA,YACA,uBACA8W,GAEM,GAAY9W,EAAOiQ,GAAY,KAAO8G,QErEnCK,GAAsB/M,GAA4B,UAClDgN,GAAuB3M,GAA6B,UCAjE,GAAezB,GCDAmO,IAAoB,CAACpX,EAAOwK,IzEGpC,SACLA,GAEA,OAAOA,EAAOrL,OAASyI,EyELlB0P,CAAqB9M,GAInBjG,EAHEvE,ICFIoX,IAAoB,CAACpX,EAAOwK,IzEEpC,SACLA,GAEA,OAAOA,EAAOrL,OAAS4I,EyEJlBwP,CAAqB/M,GAInBjG,EAHEvE,ICJIoX,IAAoB,CAACpX,EAAOwK,KACzC,I5EMK,SACLA,GAEA,OAAOA,EAAOrL,OAASwI,E4ETlB6P,CAAmBhN,GACtB,OAAOxK,EAGT,MAAM,WAAEwE,EAAU,KAAEC,GAAS+F,EAAOtE,QAEpC,OAAO,OAAP,wBACKlG,GAAK,CACRwE,aACAC,aCEEgT,GAAoB,CACxBjM,GACA6G,GACA9G,GACAK,GACA6H,GACAqB,GACAQ,ICfF,GAAerM,GDkBA+I,GtCrBc,IsCuB3B,CAAChS,EAAkB8F,EAAiB0E,KAClC,OAAgD,IAA5CiN,GAAkBhH,QAAQjG,EAAOrL,QE6EXuY,EFzEbC,GAAW3X,GE0E1B4X,aAAaC,QAAQ,WAAY1Q,KAAK2Q,UAAUJ,KF7ErC1X,EE4EN,IAAuB0X,MCjGf,SACb1X,EAAkB8F,EAClB0E,GAEA,OAAKqI,GAAmBrI,ID+GxBoN,aAAaG,WAAW,YC1GjB/X,GAJEA,KCNI,SACbA,EAAkB8F,EAClB0E,GAEA,I3FNK,SAAsBA,GAC3B,OAAOA,EAAOrL,OAAS4G,E2FKlBiS,CAAaxN,GAChB,OAAOxK,EAGT,MAAM0X,EF8FD,WACL,MAAMO,EAAML,aAAaM,QAAQ,YACjC,IAAKD,EACH,OAAO,KAGT,IACE,OAAO9Q,KAAKC,MAAM6Q,GAClB,SACA,OAAO,MEvGIE,GACb,IAAKT,EACH,OAAO1X,EAGT,IACE,OAAOoY,GAASpY,EAAO0X,GACvB,SACA,OAAO1X,MCfI,SACbA,EAAkB8F,EAClB0E,GAEA,IrFFK,SACLA,GAEA,OAAOA,EAAOrL,OAASwH,EqFDlB0R,CAAuB7N,GAC1B,OAAOxK,EAGT,IACE,OAAOoY,GAASpY,EAAOwK,EAAOtE,QAAQgB,UACtC,SAEA,OAAOlH,MCdX,GAAekQ,IAAuB,CAAClQ,EAAOwK,KAC5C,IAAK8H,GAAmB9H,GACtB,OAAOxK,EAGT,MAAM,QAAE4O,GAAYpE,EAAOtE,QAE3B,OAAO,OAAP,wBACKlG,GAAK,CACR2E,gBAAiB,KAAW3E,EAAM2E,gBAAiBiK,GACnDhK,sBAAuB,QCX3B,GAAesL,IAAuB,CAAClQ,EAAOwK,IACvCqI,GAAmBrI,GAIjB9F,EAHE1E,ICLEsY,GAAsB,cCmB7BC,GAAkE,GAClEC,GAAgE,GA8EzDC,GAAmBpK,IAC7BrO,GAA8B6B,OAAO8L,KAAK3N,EAAM2C,+BAGtC+V,GAAuCrK,IAClD,CAACrO,EAA2B8L,IAC1B9L,EAAM0C,2BAA2BoJ,KAGxB6M,GAAuCtK,IAClD,CAACrO,EAA2B6Q,IAC1B7Q,EAAM2C,4BAA4BkO,KAKzB+H,GAAsCvK,IAChDrO,GACQA,EAAM2C,8BC9GjB,GAAeuN,IAAuB,CAAClQ,EAAOwK,EAAQ0J,KACpD,IFFK,SACL1J,GAEA,OAAOA,EAAOrL,OAASmZ,GEDlBO,CAAkBrO,GACrB,OAAOxK,EAGT,MAAM4O,EAAUnB,GAAgByG,GAC1BE,EAAgBR,GAAsBM,GACtCK,EAAWkE,GAAiBvE,GAElC,OAAO,OAAP,wBACKlU,GAAK,CACR2E,gBAAiBiK,EACjBhK,sBAAuBwP,EACvBvP,iBAAkB0P,OCnBT,GAAsB,gBCEnC,GAAerE,IAAuB,CAAClQ,EAAOwK,IDGvC,SACLA,GAEA,OAAOA,EAAOrL,OAAS,GCLlB2Z,CAAuBtO,GAIrB,OAAP,wBACKxK,GAAK,CACR2E,gBAAiB,GACjBC,sBAAuB,GACvBC,iBAAkB,KAPX7E,ICFE+Y,GAA4B,sBCDzC,GAAe7I,IAAuB,CAAClQ,EAAOwK,KAC5C,IDYK,SACLA,GAEA,OAAOA,EAAOrL,OAAS4Z,GCflBC,CAAyBxO,GAC5B,OAAOxK,EAGT,MAAM,SAAEuU,EAAQ,KAAExP,GAASyF,EAAOtE,QAElC,OAAO,OAAP,wBACKlG,GAAK,CACR2E,gBAA0B,QAATI,EAAiB,GAAK/E,EAAM2E,gBAC7CC,sBAAgC,QAATG,EAAiB,GAAK/E,EAAM4E,sBACnDC,iBAAkBuL,GAAiBpQ,EAAM6E,iBAAkB0P,EAAUxP,QCVzE,GAAemL,IAAuB,CAAClQ,EAAOwK,KAC5C,IjEWK,SACLA,GAEA,OAAOA,EAAOrL,OAAS6Q,GiEdlBiJ,CAAoBzO,GACvB,OAAOxK,EAGT,MAAM,QAAE4O,EAAO,KAAE7J,GAASyF,EAAOtE,QAEjC,OAAO,OAAP,wBACKlG,GAAK,CACR2E,gBAAiByL,GAAiBpQ,EAAM2E,gBAAiBiK,EAAS7J,GAClEH,sBAAgC,QAATG,EAAiB,GAAK/E,EAAM4E,sBACnDC,iBAA2B,QAATE,EAAiB,GAAK/E,EAAM6E,sB,0BCV3C,MAAMqU,GAAyB7O,GAA4B,aACrD8O,GAA0BzO,GACrC,aCHW0O,GAAyBD,IACnCtO,GAAMA,EAAE5F,qBAIEoU,GAA8BF,IACzC,CAACtO,EAAmBxC,IAAmBwC,EAAE5F,mBAAmBoD,KCIjDiR,IAAyB,KAAA5L,gBACpCE,GACAwL,IACA,CAAC1K,EAAsB6K,IACrB,KAAU7K,GAAsB,CAAClG,EAAa2J,KAC5C,MAAMjE,EAAM3B,GAAyB/D,GACrC,IAAK0F,EACH,MAAO,CAAC,EAAG,EAAG,EAAG,GAGnB,MAAM,OAAE9O,GAAW8O,EACnB,GAAI9O,EAAOC,QACT,OAAO,KAAUD,EAAOC,SAG1B,MAAMma,EAAapN,GAAiBhN,EAAOE,UAAWia,EAAcpH,IAEpE,OAAIqH,EAAW/V,OAAS,EACf,KAAU+V,EAAW,GAAG7Y,MAG1B,CAAC,EAAG,EAAG,EAAG,QAIV8Y,IAAwB,KAAA/L,gBACnCY,GACAgL,IACA,CAACI,EAAeC,IACd,KAAUD,GAAe,CAACzW,EAAIkP,KAC5B,MAAMjF,EAASyM,EAAWxH,IAAO,CAAC,EAAG,EAAG,EAAG,GAC3C,OAAO5O,EACL,CACE5D,EAAGsD,EAAGtD,EAAIuN,EAAO,GACjBtN,EAAGqD,EAAGrD,EAAIsN,EAAO,IAEnB,CACEvN,EAAGsD,EAAGtD,EAAIuN,EAAO,GACjBtN,EAAGqD,EAAGrD,EAAIsN,EAAO,UCzC3B,GAAegD,IAAuB,CAAClQ,EAAOwK,EAAQ0J,KACpD,IpFKK,SACL1J,GAEA,OAAOA,EAAOrL,OAASmM,GoFRlBsO,CAAqBpP,GACxB,OAAOxK,EAGT,MAAM,OAAEmR,EAAM,KAAEpM,GAASyF,EAAOtE,QAE1B2T,EAAQJ,GAAsBvF,GAC9B4F,EAA0B,GAChC,KAAOD,GAAO,CAAC3I,EAAMiB,KhHkGhB,IAAoBjO,EAAeC,IgHjGjBgN,EhHkGvBjN,EAAKX,EADoBW,EgHjGRgN,GhHmGjB/M,EAAKZ,EAAmBY,GAGpBD,EAAGjB,GAAGtD,EAAIwE,EAAGjB,GAAGvD,GAAKuE,EAAGhB,GAAGvD,EAAIwE,EAAGlB,GAAGtD,GAKrCuE,EAAGjB,GAAGrD,EAAIuE,EAAGjB,GAAGtD,GAAKsE,EAAGhB,GAAGtD,EAAIuE,EAAGlB,GAAGrD,GgH1GrCka,EAAczM,KAAK8E,MAIvB,MAAM4H,EAA2B,GAC3BC,EAAiBpB,GAAoC1E,GAO3D,OANA,KAAO8F,GAAgB,CAAC9Y,EAAG2P,MhHqDtB,SAAyB3P,EAAUR,GAGxC,SAFAA,EAAI6C,EAAmB7C,IAEjBuC,GAAGtD,EAAIuB,EAAEvB,GAAKe,EAAEwC,GAAGvD,EAAIuB,EAAEvB,GAI3Be,EAAEuC,GAAGrD,EAAIsB,EAAEtB,GAAKc,EAAEwC,GAAGtD,EAAIsB,EAAEtB,IgH3DzBqa,CAAgB/Y,EAAGiQ,IACrB4I,EAAe1M,KAAKwD,MAIjB,OAAP,wBACK7Q,GAAK,CACR2E,gBAAiByL,GACfpQ,EAAM2E,gBACNmV,EACA/U,GAEFH,sBAAgC,QAATG,EAAiB,GAAK/E,EAAM4E,sBACnDC,iBAAkBuL,GAChBpQ,EAAM6E,iBACNkV,EACAhV,QCzCOmV,GAAsB,gBCDnC,GAAehK,IAAuB,CAAClQ,EAAOwK,KAC5C,IDYK,SACLA,GAEA,OAAOA,EAAOrL,OAAS+a,GCflBC,CAAoB3P,GACvB,OAAOxK,EAGT,MAAM,cAAEoU,EAAa,KAAErP,GAASyF,EAAOtE,QAEvC,OAAO,OAAP,wBACKlG,GAAK,CACR2E,gBAA0B,QAATI,EAAiB,GAAK/E,EAAM2E,gBAC7CC,sBAAuBwL,GACrBpQ,EAAM4E,sBACNwP,EACArP,GAEFF,iBAA2B,QAATE,EAAiB,GAAK/E,EAAM6E,sBChBrCuV,GAAwB,kBCAxBC,GAA0B,oBC4BvC,GAfyBpR,GACvB,GACA,GACA,GACA,GACA,GACA,GACA,GACA,ICba,SACbjJ,EAAkB8F,EAClB0E,GAEA,IHPK,SACLA,GAEA,OAAOA,EAAOrL,OAASib,GGIlBE,CAAsB9P,GACzB,OAAOxK,EAGT,MAAMua,EAAgBhK,GAAwBvQ,GAC9C,OAA6B,IAAzBua,EAAc9W,OACTzD,EAGF,GAAYA,GrCpBKqI,EqCoBYkS,ErCpBkB,CACtDpb,KAAMuW,GACNxP,QAAS,CACP0I,QAASzE,MAAMC,QAAQ/B,GAAUA,EAAS,CAACA,OAHtB,IAACA,KsCOX,SACbrI,EAAkB8F,EAClB0E,GAEA,IHPK,SACLA,GAEA,OAAOA,EAAOrL,OAASkb,GGIlBG,CAAwBhQ,GAC3B,OAAOxK,EAGT,MAAM,gBACJ2E,EAAe,sBACfC,EAAqB,iBACrBC,GACE7E,EAAMsF,SAASM,UAcnB,OAZIjB,EAAgBlB,OAAS,IAC3BzD,EAAQ,GAAYA,E7DpBkC,CACxDb,KAAMkT,GACNnM,QAAS,CAAE0I,QAASwD,G6DkBoBzN,OAExC3E,EAAQ4E,EAAsBqI,QAC5B,CAACjN,EAAO8L,IAAiB,GAAY9L,ExDzBd,CAAC8L,IAAyB,CACnD3M,KAAMsU,GACNvN,QAAS,CACP4F,kBwDsB4C2O,CAAY3O,KACxD9L,GAEM6E,EAAiBoI,QACvB,CAACjN,EAAO6Q,IAAY,GAAY7Q,E3C7BL,CAAC6Q,IAAoB,CAClD1R,KAAMgW,GACNjP,QAAS,CAAE2K,a2C2B8B6J,CAAgB7J,KACvD7Q,MClBW,SACbA,EAAkB8F,EAClB0E,GAEA,I3FXK,SACLA,GAEA,OAAOA,EAAOrL,OAASoM,G2FQlBoP,CAAsBnQ,GACzB,OAAOxK,EAGT,MAAM,QAAEsR,EAAO,QAAEC,GAAY/G,EAAOtE,QAE9B0I,EAAU2B,GAAwBvQ,GAClCuU,EAAW5D,GAAyB3Q,GAEpCwW,EAAgB,CACpB7W,EAAG2R,EACH1R,EAAG2R,GAML,OAHAvR,EAAQ,GAAYA,EnD3BE,EACtBqI,EACAmJ,EACAoD,GAAW,KACR,CACHzV,KAAMuV,GACNxO,QAAS,CAAE0I,QAASwD,GAAQ/J,GAASmJ,WAAUoD,cmDqBpBgG,CAAShM,EAAS4H,GAAQ,IAC7C,GAAYxW,EAAOuV,GAAchB,EAAUiC,GAAQ,MC9B9CtG,IAAuB,CAAClQ,EAAOwK,KAC5C,IAAKkJ,GAAoBlJ,GACvB,OAAOxK,EAGT,MAAM,aAAE8L,GAAiBtB,EAAOtE,QAEhC,OAAO,OAAP,wBACKlG,GAAK,CACR4E,sBAAuB5E,EAAM4E,sBAAsB0E,QAChD3J,GAAMA,IAAMmM,UCJb+O,GAAyB,CAC7BlI,GACAhM,EACA6E,GACA6G,GACAzG,GACA6H,IAGF,GAAeyF,IAAuB,CAAClZ,EAAOwK,KACS,IAAjDqQ,GAAuBpK,QAAQjG,EAAOrL,MAEjC,OAAP,wBACK2F,GAAqB,CACxBE,eAAgBhF,EAAMgF,iBAInBhF,IC1BI8a,GAAuB,iBCQvBC,GAAiC,CAC5C/a,EACAgb,KACE,eAA8D,QAA9D,EAAiD,QAAjD,EAAChb,EAAMsF,SAASE,aAAalD,UAAU0Y,UAAU,eAAExS,mBAAW,QAAI,M,8DCC/D,MAAMyS,GAA+C,CAC1Djb,EACAgb,KAEA,KAAA3R,QAAOrJ,EAAMsF,SAASE,aAAajD,iBAAiB+G,QACjD3J,GAAMA,EAAE+S,UAAUrK,SAAW2S,IAMrBE,GAA+C,MACzDrQ,IAAgB,KAAAxB,QAAOwB,EAAEvF,SAASE,aAAajD,mBAChD,CAAC4Y,EAAQ9S,IAAmBA,GAC5B0S,IACA,CAACjF,EAAazN,EAAQG,KACpB,MAAM0F,EAAM3B,GAAyB/D,GACrC,IAAK0F,EACH,MAAO,GAGT,IAAIkN,EAAsB,GAC1BA,EAAYvZ,OAAO8L,KAAKO,EAAI3O,MAAM+J,QAC/B3J,GAAgC,UAA1BuO,EAAI3O,KAAKI,GAAGD,YAGrB,MAAM2b,EAAmBvF,EAAYxM,QAClC3J,GAAMA,EAAE8S,SAASpK,SAAWA,IAGzBP,EAAyC,GAC/C,IAAK,MAAMqG,KAAOiN,EAChBtT,EAAOqG,GAAO,KAGhB,IAAK,MAAM+H,KAAcmF,EAAkB,CACzC,MAAM,UAAE3I,EAAS,SAAED,GAAayD,EAChCpO,EAAO2K,EAASnK,OAASoK,EAG3B,OAAO5K,IA7BiD,EA+B1D,CAACqT,EAAQ9S,IAAmBA,ICUvB,SAASiT,GACdtb,EACAqI,EACA6L,G,MAEA,MAAM1L,EAAcuS,GAA+B7G,EAAU7L,GACvD6F,EAAM3B,GAAyB/D,GACrC,IAAK0F,IAAQA,EAAInO,OACf,OAAOC,EAIT,MAAMC,EAAkC,GAClCsb,EAAoBL,GACxBhH,EACA7L,GAGF,IAAK,MAAMoK,KAAY5Q,OAAO8L,KAAK4N,GAAoB,CACrD,MAAMC,EAAYD,EAAkB9I,GACpC,IAAK+I,EAAW,CACdvb,EAAOwS,IAAY,EACnB,SAEF,MAAQpK,OAAQoT,EAAcnT,MAAOoT,GAAgBF,EAErDvb,EAAOwS,IACuC,QAA5C,EAAAzS,EAAMkF,yBAAyBuW,UAAa,eAAGC,MAAgB,EAGnE,MAAM5T,EAASoG,EAAInO,OACjBC,EAAMiF,mBAAmBoD,GACzBpI,EACAD,EAAME,MAOR,GAJI4H,EAAO9H,QACTA,EAAQyJ,GAAMzJ,EAAO,qBAAsBqI,EAAQP,EAAO9H,QAGxD8H,EAAO3H,YAAa,CACtB,MAAMA,EAAciS,GAAQtK,EAAO3H,aACnC,IAAK,MAAMwb,KAAcxb,EAAa,CACpC,MAAM,WACJC,EAAU,YACVC,EAAW,iBACXub,EAAmB,WACjBD,EAGEE,EAAiB7b,EAAME,MAAQE,EAAa,EAAIA,EAAa,GAI1C,YAArBwb,IACF5b,EAAQ8b,GAA0B9b,EAAOqI,IAG3CrI,EAAQ+b,GAAc/b,EAAOqI,EAAQwT,EAAgBxb,IAIzD,OAAOL,EAGT,SAAS+b,GACP/b,EACAqI,EACAnI,EACA8b,GAEA,MAAMC,GAAe,UAEfC,EAAmC,CACvCD,aAAcA,EACd5T,SACAnI,OACA8b,qBAIFhc,EAAQ,OAAH,wBACAA,GAAK,CACRmF,gBAAiB,OAAF,wBACVnF,EAAMmF,iBAAe,CACxB,CAAC8W,GAAeC,IAElB9W,kBAAmB,IAAIpF,EAAMoF,qBAG/B,IAAI+W,EAAQ,KAAanc,EAAMoF,kBAAmBlF,GAAM,CAACqT,EAAGC,IAAMD,EAAErT,KAAOsT,IAC3E,GAAI2I,EAAQ,EAAG,CAEbA,GAASA,EAAQ,EACjB,MAAMC,EAAiC,CACrClc,OACAmc,cAAe,IAGjBrc,EAAMoF,kBAAkBkX,OAAOH,EAAO,EAAGC,GAW3C,OAPApc,EAAMoF,kBAAkB+W,GAAS,OAAH,wBACzBnc,EAAMoF,kBAAkB+W,IAAM,CACjCE,cAAe,IACVrc,EAAMoF,kBAAkB+W,GAAOE,cAClCJ,KAGGjc,EAGT,SAAS8b,GACP9b,EACAqI,GAUA,OAJsBxG,OAAO8L,KAAK3N,EAAMmF,iBAAiBmE,QAAQ6I,GAC9CnS,EAAMmF,gBAAgBgN,GAJrB9J,SAAWA,IAOV4E,QACnB,CAACjN,EAAOic,IAKL,SACLjc,EACAic,GAEA,MAAMN,EAAa3b,EAAMmF,gBAAgB8W,GACzC,IAAKN,EACH,OAAO3b,EAGT,MAAMmF,EAAkB,KACtBnF,EAAMmF,gBACNtD,OAAO8L,KAAK3N,EAAMmF,iBAAiBmE,QAAQ3J,GAAMA,IAAMsc,KAEzD,IAAI7W,EAAoBpF,EAAMoF,kBAE9B,MAAMmX,EAAwB,KAC5BnX,GACCzF,GAAMA,EAAEO,OAASyb,EAAWzb,OAE/B,IAA+B,IAA3Bqc,EAA8B,CAChC,MAAMC,EAAmBpX,EAAkBmX,GAErCE,EAA4BD,EAAiBH,cAAc5L,QAC/DwL,GAEF,IAAmC,IAA/BQ,EACF,GAA8C,IAA1CD,EAAiBH,cAAc5Y,OAEjC2B,EAAoB,IACfA,EAAkBjE,MAAM,EAAGob,MAC3BnX,EAAkBjE,MAAMob,EAAwB,QAEhD,CAELnX,EAAoB,IAAIA,GACxB,MAAMiX,EACJjX,EAAkBmX,GAAuBF,cAC3CjX,EAAkBmX,GAAyB,OAAH,wBACnCnX,EAAkBmX,IAAsB,CAC3CF,cAAe,IACVA,EAAclb,MAAM,EAAGsb,MACvBJ,EAAclb,MAAMsb,EAA4B,OAO7D,OAAO,OAAP,wBACKzc,GAAK,CACRmF,kBACAC,sBAxDyBsX,CAAqB1c,EAAOic,IACrDjc,GCnLJ,SAAekZ,IAAuB,CAAClZ,EAAOwK,EAAQ0J,KACpD,IJPK,SACL1J,GAEA,OAAOA,EAAOrL,OAAS2b,GIIlB6B,CAAqBnS,GACxB,OAAOxK,EAGT,MAAQqI,OAAQuU,GAAkBpS,EAAOtE,QACnC2W,EHlBgD,EACtD7c,EACA4c,IACGA,EGeqBE,CACtB5I,EACA0I,GAGIpU,EAAcuS,GAA+B7G,EAAU2I,GACvD3O,EAAM3B,GAAyB/D,GAErC,IAAK0F,IAAQA,EAAIvM,SACf,OAAO3B,EAGT,MAAM+c,EAAY/c,EAAMiF,mBAAmB4X,GAI3C,OAAOvB,GAFPtb,EAAQyJ,GAAMzJ,EAAO,qBAAsB6c,EAD1B3O,EAAIvM,SAASob,IAGOF,EAAiB3I,MCvBxD,GAAegF,IAAuB,CAAClZ,EAAOwK,EAAQ0J,KACpD,IvHNK,SAAyB1J,GAC9B,OAAOA,EAAOrL,OAASiH,EuHKlB4W,CAAgBxS,GACnB,OAAOxK,EAGT,MAAM,UAAEsG,GAAckE,EAAOtE,QAEvB+W,EAAUjd,EAAME,KAAOoG,EAM7BtG,EAAQ,OAAH,wBACAA,GAAK,CACRoF,kBAAmB,IAAIpF,EAAMoF,qBAG/B,IAAI8X,EAAa5W,EAAY,EAC7B,KACEtG,EAAMoF,kBAAkB3B,OAAS,GACjCzD,EAAMoF,kBAAkB,GAAGlF,MAAQ+c,GACnC,CACA,GAAqB,KAAfC,EAEJ,MAAM,IAAIC,MACR,qHAOJ,MAAMC,EAASpd,EAAMoF,kBAAkBiY,QACvCrd,EAAQsd,GAAWtd,EAAOod,EAAQlJ,GAWpC,OAPIlU,EAAME,MAAQ+c,IAChBjd,EAAQ,OAAH,wBACAA,GAAK,CACRE,KAAM+c,KAIHjd,KAGT,SAASsd,GACPtd,EACAod,EACAlJ,GAIAlU,EAAQ,OAAH,wBACAA,GAAK,CACRE,KAAMkd,EAAOld,KAEbgF,yBAA0B,OAAF,UACnBlF,EAAMkF,4BAIb,IAAIqY,EAAe,GACnB,IAAK,MAAMC,KAAOJ,EAAOf,cAAe,CACtC,MAAM,OAAEhU,EAAM,kBAAE2T,GAAsBhc,EAAMmF,gBAAgBqY,GAG5Dxd,EAAMkF,yBAAyBmD,GAAU,OAAH,wBACjCrI,EAAMkF,yBAAyBmD,IAC/B2T,GAIL,MAAMyB,EAAcxC,GAClB/G,EACA7L,GAEF,IAAK,MAAMqV,KAAWD,EAAa,CACjC,MAAMpV,EAASqV,EAAQjL,SAASpK,QACM,IAAlCkV,EAAa9M,QAAQpI,IACvBkV,EAAalQ,KAAKhF,IAOxBrI,EAAMmF,gBAAkB,KACtBnF,EAAMmF,gBACN,KAAWtD,OAAO8L,KAAK3N,EAAMmF,iBAAkBiY,EAAOf,gBAGxD,IAAK,MAAMhU,KAAUkV,EACnBvd,EAAQsb,GAAuBtb,EAAOqI,EAAQ6L,GAGhD,OAAOlU,EC7GF,MAAM2d,GAAyB,mBCAzBC,GAAmB,aACnBC,GAAY9Y,IAA6B,CACpD5F,KAAMye,GACN1X,QAAS,CAAEnB,UCHA+Y,GAAsB3E,IAChCnZ,GAAyB,SAAfA,EAAM+E,OAGNgZ,GAAuB5E,IACjCnZ,GAAyB,QAAfA,EAAM+E,OAGNiZ,GAAsB7E,IAChCnZ,GAAyB,UAAfA,EAAM+E,OAGNkZ,GAAyB9E,IACnCnZ,GAAUA,EAAMgF,iBCVnB,GAAekU,IAAuB,CAAClZ,EAAOwK,KAC5C,IFEK,SAA0BA,GAC/B,OAAOA,EAAOrL,OAASye,GEHlBM,CAAiB1T,GACpB,OAAOxK,EAGT,MAAM,KAAE+E,GAASyF,EAAOtE,QAExB,IAAK4X,GAAoBhT,MAAM9K,GAC7B,OAAOA,EAGT,IAAIme,EAAUne,EAAM+E,KAEpB,OAAQA,GACN,KAAK,EACHoZ,EAAU,QACV,MACF,KAAK,EACHA,EAAU,MACV,MACF,IAAK,SACHA,EAAqB,OAAXA,EAAmB,QAAU,MAG3C,OAAO,OAAP,wBACKne,GAAK,CACR+E,KAAMoZ,OC7BGC,GAAmB,aACnBC,GAAW,KAAM,CAC5Blf,KAAMif,KCER,GAAelF,IAAuB,CAAClZ,EAAOwK,EAAQ0J,IDC/C,SAA0B1J,GAC/B,OAAOA,EAAOrL,OAASif,GCDlBE,CAAiB9T,IAItBxK,ERcK,SACLA,EACAkU,GAGA,MAAMtF,EFvBgC,CAAC5O,GACvC6B,OAAO8L,KAAK3N,EAAMsF,SAASE,aAAalD,WEsBxBic,CAAyBrK,GAiBzC,OAfAlU,EAAQ,OAAH,wBACA8E,GAAqB,CACxBE,eAAgBhF,EAAMgF,iBAGxBhF,EAAQ4O,EAAQ3B,QACd,CAACjN,EAAOqI,IAYZ,SACErI,EACAqI,EACA6L,GAEA,MAAM1L,EAAcuS,GAA+B7G,EAAU7L,GACvD6F,EAAM3B,GAAyB/D,GACrC,IAAK0F,EACH,OAAOlO,EAGT,MAAMqU,E7FbD,SACLnG,GAEA,OAAO,KAAOA,EAAI3O,MAAOsB,GAA8B,WAApBA,EAAMnB,Y6FUzB8e,CAAUtQ,GAE1B,OAAOzE,GAAMzJ,EAAO,2BAA4BqI,EAD3B,KAAUgM,GAAS,KAAM,KAxBzBoK,CAASze,EAAOqI,EAAQ6L,IAC3ClU,GAGM4O,EAAQ3B,QACd,CAACjN,EAAOqI,IAAWiT,GAAuBtb,EAAOqI,EAAQ6L,IACzDlU,GQjCM0e,CAAQ1e,EAAOkU,GAEhB,OAAP,wBACKlU,GAAK,CACR+E,KAAM,SAPC/E,ICNE2e,GAAkB,YAClBC,GAAU,KAAM,CAC3Bzf,KAAMwf,KCER,GAAezF,IAAuB,CAAClZ,EAAOwK,EAAQ0J,IDC/C,SAAyB1J,GAC9B,OAAOA,EAAOrL,OAASwf,GCDlBE,CAAgBrU,GAKd,OAAP,wBACK1F,GAAqB,CACxBE,eAAgBhF,EAAMgF,iBANfhF,ICEL8e,GAAmB7V,GACvB,GACA,GACA,ICJa,SACbjJ,EAAkB8F,EAClB0E,GAEA,ITNK,SACLA,GAEA,OAAOA,EAAOrL,OAASwe,GSGlBoB,CAAuBvU,GAC1B,OAAOxK,EAGT,MAAM,KAAEE,EAAI,kBAAEkF,GAAsBpF,EAAMsF,SAASO,UAEnD,GAAiC,IAA7BT,EAAkB3B,OACpB,OAAOzD,EAGT,MAAMgf,EAAiB5Z,EAAkB,GAAGlF,KAAOA,EACnD,OAAO,GAAiBF,EAAOqG,EAAQ2Y,MDTvC,GACA,GACA,IEOF,GrHLO,SAA6B9V,GAElC,MAAM+V,EAAgB,KAAO/V,GAAWvJ,GAAkBA,EAAEuS,QAAU,IAEtE,MAAO,CAAClS,EAAkB8F,EAAiB0E,IAClCyU,EAAchS,QACnB,CAACjN,EAAOuK,IAAYA,EAAQvK,EAAOwK,IACnCxK,GqHfUkf,CACdjW,GACE,GACA,GACA,GACA,GACA,GACA,GACA,GFCJ,KGpBO,MAAMkW,WAAwBhC,MAGnC,YAAYiC,GACVC,MAAMD,GACNE,KAAKF,QAAUA,EACfE,KAAKC,KAAO,qB7CqBT,SAAS5H,GAAW3X,GACzB,MAAMga,EAAiBpB,GAAoC5Y,GAC3D,MAAO,CACL+I,MAAO0E,GAAgBzN,GAAO4J,KAAKvB,IACjC,MAAM0F,EAAOF,GAAuB7N,EAAOqI,GACrCmJ,EAAWjD,GAA+BvO,EAAOqI,GAOvD,MAN2B,CACzBA,OAAQA,EACRG,YAAauF,EAAKvF,YAClB7I,EAAG6R,EAAS7R,EACZC,EAAG4R,EAAS5R,MAIhBoJ,MAAO4K,GAAsB5T,GAAO4J,KAAKkC,IACvC,MAAM0T,EAAO1L,GAAmC9T,EAAO8L,GACjDyI,EAAWmE,GACf1Y,EACA8L,GAOF,MAL2B,CACzBnD,MAAO6W,EAAK/M,SACZ/J,OAAQ8W,EAAK9M,UACb9J,OAAQ2L,EAAS3K,KAAKiH,GAAYmJ,EAAenJ,UAOlD,SAASuH,GAASpY,EAAiB0X,GACxC,IACE5O,GAAe2W,aAAa/H,GAC5B,MAAOpQ,GACP,MAAM,IAAI6X,GAAgB7X,EAAE8X,SAG9Bpf,EAAQ,OAAH,wBACAA,GAAK,CACRsF,SAAU,OAAF,wBACHtF,EAAMsF,UAAQ,CACjBG,cAAejD,EACfgD,aAAcnD,EACduD,UAAWlB,EACXmB,UAAWf,MAIf,IACE9E,EAAQ0X,EAAK3O,MAAMkE,QACjB,CAACjN,EAAO+N,IACN,GACE/N,EAEAyL,GAAWsC,EAAKvF,YAAa,CAC3BH,OAAQ0F,EAAK1F,OACbmJ,SAAU,CAAE7R,EAAGoO,EAAKpO,EAAGC,EAAGmO,EAAKnO,OAGrCI,GAGFA,EAAQ0X,EAAK1O,MAAMiE,QACjB,CAACjN,EAAOwf,IACN,GACExf,EACA6L,GAAW2T,EAAK9W,OAAQ8W,EAAK7W,MAAO,CAAEC,OAAQ4W,EAAK5W,WAEvD5I,GAEF,MAAOsH,GAEP,MADAC,QAAQmY,MAAM,gCAAiCpY,GACzC,IAAI6X,GAAgB,2BAG5B,OAAOnf,E8C3FM,SAAU2f,WACjB,QAAUlY,EAAqB,IAGvC,SAAU,KACR,MAAMzH,QAAwB,UAExB4f,QAAgC,QACpC3X,EACA,eACA,MAEF,GAAK2X,EAIL,IACE,MAAMlI,EAAOC,GAAW3X,GAClB6f,EAAO,IAAIC,KAAK,CAAC3Y,KAAK2Q,UAAUJ,EAAM,KAAM,IAAK,CACrDvY,KAAM,oCAGR,IAAA4gB,QAAOF,EAAMD,GACb,MAAOtY,GAEPC,QAAQC,KAAK,0BAA2BF,IC/B7B,SAAU0Y,WACjB,QAAKpZ,SACL,QAAK+Y,ICEE,SAAUM,WACjB,QAAY,CAAC7B,GAAkBR,IAAmBsC,IAG1D,SAAUA,KACR,WAC0B,QAAOnC,KADpB,OAML,QAAI1X,EAAQ,IAElB,MAAM8Z,QAAY,QAAOlC,IACnBmC,EAAa/c,KAAKM,IAAIN,KAAKgd,KAAK,IAAOF,GAAM,SAC7C,QAAMC,ICpBD,SAAUE,WACjB,QAAKL,ICUb,MAAMM,GACHnD,OAAOoD,sCACNpD,OAAOoD,qCAAqC,CAC1CC,gBtIFC,SAAyBjW,GAC9B,OAAOA,GsIEHkW,etICC,SAAwB1gB,GAC7B,OAAOA,GsIDHwG,iBAAgB,KAEpB,KAEIma,IAAiB,UAEVC,IAAQ,QACnB,GACAL,IAAiB,QAAgB,IAAQI,MAG3CA,GAAeE,KC1BA,kBACP,QAAKb,UACL,QAAKM,ODyBbM,GAAME,S3I7BsB,CAAG3hB,KAAM4G,I6IH9B,MCCP,GAA8B,mD,4BCGf,SAASgb,GAAepW,GACrC,OAAO,QAA8BA,GCHhC,MAAMqW,GAAoBhW,IAC9BH,GAAMA,EAAE9I,Y,gBCDX,MAEakf,GAFE,kBAEqBC,MAAM,GAAAC,IAAM,aAAaC,YAEhDC,GAA0BJ,GAAgB,UAAY,OCJtDK,GAAkB,+BAClBC,GAAyB,sCACzBC,GAAoB,iCACpBC,GAAc,4BACdC,GAAe,6BACfC,GAAgB,8BAU7B,GARe,CACb,CAACL,IAAkB,QACnB,CAACC,IAAyB,cAC1B,CAACC,IAAuBH,GAAH,KACrB,CAACI,IAAiBJ,GAAH,KACf,CAACK,IAAkBL,GAAH,KAChB,CAACM,IAAgB,CAAC,YAAa,QCP3BC,GAAoC/f,OAAOC,OAAO,CACtDmB,GAAI,CACFtD,GAAI,IACJC,GAAI,KAENsD,GAAI,CACFvD,EAAG,IACHC,EAAG,OAIMiiB,IAAoB,KAAAnU,gBAC/B+L,GACAb,IACA,CAACkJ,EAAeC,IAIP,IAHW,KAAOD,MACN,KAAOC,GAAgBnY,KAAK1I,IAAM,CAAG+B,GAAI/B,EAAGgC,GAAIhC,OAE9B+L,OAAOhJ,EAAO2d,MCxB1C,GAAyB,gBACpC,MAGII,GAAkB,GAAuBC,SAElCC,GAER,EAAGrhB,QAAOshB,eAEb,MAAOC,EAAYC,GAAiB,WAClC,MAMF,OAJA,aAAgB,KACdA,EAAcxhB,EAAMyhB,WACnB,CAACzhB,EAAMyhB,UAEH,gBAACN,GAAe,CAACnhB,MAAOuhB,GAAaD,ICyE9C,GAhEoD,EAClDxiB,IAAI,EACJC,IAAI,EACJ4I,cACAuU,YACAwF,gBACAC,YACAC,UACAC,cACAC,cACAC,YACAC,mBAEA,MAAM3U,EAAM3B,GAAyB/D,GAErC,IAAIsa,EACAzjB,EACAE,EAAwB,KAC5B,GAAK2O,EAEE,CACL,MAAM,UAAE5O,GAAc4O,EAAI9O,OAE1B0jB,EADgB1W,GAAiB9M,EAAWyd,GAC7BnT,KAAI,CAACxG,EAAG2f,IACrB,wBACEC,IAAKD,EACLE,EAAG7f,EAAEzC,KACLC,KAAM2hB,GAAiBnf,EAAExC,KACzByL,OAAQkW,GAAiBnf,EAAEiJ,OAC3BC,YAAalJ,EAAEkJ,gBAGnBjN,EAAU6O,EAAI9O,OAAOC,QAEjBmjB,IACFjjB,EAAOsC,OAAO8L,KAAKO,EAAI3O,MAAMqK,KAAKoZ,IAChC,MAAM7U,EAAMD,EAAI3O,KAAKyjB,GACrB,IAAIE,EAAUV,EAAU,OAAD,QACrBrQ,GAAI6Q,GACD7U,IAEL,OAAO,eAAmB+U,EAAS,CAAEF,IAAK,SAASA,aAtBvDF,EAAO,wBAAMnjB,EAAGA,EAAGC,EAAGA,EAAGmE,MAAO,GAAIC,OAAQ,GAAIpD,KAAK,QA2BvD,MAAMuiB,EAAiB,GAALxjB,GAAe,GAALC,EAAS,aAAaD,MAAMC,UAAOwN,EAC/D,OACE,qBACEgW,UAAU,cACVD,UAAWA,EACXV,QAASA,EACTC,YAAaA,EACbC,YAAaA,EACbC,UAAWA,EACXC,aAAcA,GAEbxjB,GAAW,wBAAM4jB,EAAG5jB,EAASuB,KAAK,cAAc6hB,QAASA,IACzDK,EACAvjB,ICnEA,SAAS8jB,KAGd,MAAMC,EAAW,aAAiB,IAClC,OAAO,eACJhc,IACC,IAAKgc,EACH,OAAOvgB,EAET,MAAM7B,EAAW,CACfvB,EAAG2H,EAAEic,MACL3jB,EAAG0H,EAAEkc,OAEP,OC/BC,SAAuBC,EAAsBviB,GAClD,MAAMwiB,EAAMD,EAAME,eAClB,IAAKD,EACH,OAAOxiB,EAGT,MAAM0iB,EAAKH,EAAMI,iBACjBD,EAAGjkB,EAAIuB,EAAEvB,EACTikB,EAAGhkB,EAAIsB,EAAEtB,EACT,MAAMkkB,EAAaF,EAAGG,gBAAgBL,EAAIM,WAC1C,MAAO,CAAErkB,EAAGmkB,EAAWnkB,EAAGC,EAAGkkB,EAAWlkB,GDqB7B,CAAc0jB,EAAUpiB,KAEjC,CAACoiB,IEfL,MA2CA,GA3CmC,KACjC,MAAMxC,GAAW,UACXmD,EAAiBZ,KACjBa,EAAYnD,GAAYc,KACxB,MAAE9d,EAAK,OAAEC,GAAWF,EAASogB,GAC7BC,EAAoBpD,GAAYxR,IAChCrN,EAAU6e,GAAY5R,IACtBiV,EAAmBrD,GAAYvR,IAE/B6U,EAAc,eACjB/c,IACC,MAAMpG,EAAI+iB,EAAe3c,GACzBwZ,EAAS7a,EAAkB/E,MAE7B,CAAC+iB,IAGH,OAAKE,GAAsBC,EAKzB,gCACGliB,GACC,qBAAGoiB,QAAS,IACV,gBAAC,GAAa,CACZ3kB,EAAGuC,EAAQvC,EACXC,EAAGsC,EAAQtC,EACX4I,YAAa4b,EACbrH,UAAW,MAIjB,wBACEhZ,MAAOA,EACPC,OAAQA,EACRpD,KAAK,cACLyjB,YAAaA,KAnBV,MCrBLE,IAAoC,KAAA7W,gBACxC6C,GACAjC,IACA,CAAC3J,EAAiBlC,IAChB,KAAKA,EAAmBkC,KAGtB6f,IAAgC,KAAA9W,gBACpC6C,GACA3C,IACA,CAACjJ,EAAiB8f,IAAkB,KAAKA,EAAe9f,KAGpD+f,IAAiC,KAAAhX,gBACrC6C,GACA6I,IACA,CAACzU,EAAiBggB,IAAmB,KAAKA,EAAgBhgB,KAgC5D,GA7BuC,KACrC,MAAMigB,EAA4B7D,GAChCwD,IAEIM,EAAwB9D,GAAYyD,IACpCM,EAAyB/D,GAAY2D,IACrCK,EAAiBhE,GAAY1R,IAEnC,IAAI2V,EAAmC,KAcvC,OAbID,IACFC,EAAW,KACT,KAAUJ,GAA2B,CAAC1jB,EAAGmH,IACvC,gBAAC,GAAa,CACZ2a,IAAK3a,EACLG,YAAaqc,EAAsBxc,GACnC0U,UAAW+H,EAAuBzc,GAClC1I,EAAGuB,EAAEvB,EAAIolB,EAAeplB,EACxBC,EAAGsB,EAAEtB,EAAImlB,EAAenlB,QAM9B,qBAAGuS,GAAG,qBAAqBmS,QAAS,IACjCU,ICxDA,SAASC,GAAa3d,GAC3B,MAAM,QAAE4d,EAAO,OAAEC,EAAM,SAAEC,EAAQ,QAAEC,GAAY/d,EAC/C,MAAO,CACLge,YAAarE,GAAgBoE,EAAUH,EACvCC,OAAQA,EACRC,YAIG,SAASG,GAAcC,GAC5B,OAAIA,EAAUJ,UAAYI,EAAUF,YAC3B,SAELE,EAAUJ,SACL,SAELI,EAAUF,YACL,SAEF,MCPM,SAASG,GACtB/Z,GAEA,MAAM,cACJga,EAAgB,EAAC,QACjBjD,EAAO,YACPkD,EAAW,WACXC,EAAU,UACVC,GACEna,GAMGoa,EAAYC,GAAe,YAAe,GAC3CC,EAAgB,UAAa,GAE7BC,EAAgB,UAAa,GAC7BC,EAAe,SAAoBnjB,GAEnCojB,EAAgB,eAAmB7e,IACnC0e,EAAc1D,UAIlB0D,EAAc1D,SAAU,EACxByD,GAAY,GACZG,EAAa5D,QAAU,CAAE3iB,EAAG2H,EAAEic,MAAO3jB,EAAG0H,EAAEkc,UACzC,IAEG4C,EAAiB,eAAkB,KACvCJ,EAAc1D,SAAU,EACxByD,GAAY,GACZE,EAAc3D,SAAU,EACxB4D,EAAa5D,QAAUvf,IACtB,IAiEH,OA/DA,aAAgB,KACd,GAAK+iB,EAwDL,OAHAO,SAASC,iBAAiB,YAAajC,GACvCgC,SAASC,iBAAiB,UAAW1D,GAE9B,KACLyD,SAASE,oBAAoB,YAAalC,GAC1CgC,SAASE,oBAAoB,UAAW3D,IAtD1C,SAASyB,EAAY/c,GACnB,GAAK0e,EAAc1D,QAInB,GAAI2D,EAAc3D,SAChB,GAAIsD,EAAY,CACd,MAAMpP,EAAS3S,EACb,CAAElE,EAAG2H,EAAEic,MAAO3jB,EAAG0H,EAAEkc,OACnB0C,EAAa5D,SAEfsD,EAAWpP,EAAQlP,QAEhB,CACL,MAAM2b,EAAIiD,EAAa5D,SAErBjf,KAAKmjB,IAAIvD,EAAEtjB,EAAI2H,EAAEic,QAAUmC,GAC3BriB,KAAKmjB,IAAIvD,EAAErjB,EAAI0H,EAAEkc,QAAUkC,KAE3BO,EAAc3D,SAAU,EACpBqD,GACFA,EAAYre,KAMpB,SAASsb,EAAUtb,GACjB,GAAK0e,EAAc1D,QAAnB,CAIA,GAAI2D,EAAc3D,SAChB,GAAIuD,EAAW,CACb,MAAMrP,EAAS3S,EACb,CAAElE,EAAG2H,EAAEic,MAAO3jB,EAAG0H,EAAEkc,OACnB0C,EAAa5D,SAEfuD,EAAUrP,EAAQlP,SAGhBmb,GACFA,EAAQnb,GAIZ8e,QAUD,CAACN,IAEG,CACLK,gBACAC,kBCtGJ,MA+EA,GA/EkC,KAChC,MAAMtF,GAAW,UACX2F,GAAgB,QAAYrX,IAE5BsX,EAAYrD,KAEZZ,EAAU,eAAkB,KAChC3B,E1DrBgC,CAClC3hB,KAAM,O0DqBH,IAEGwmB,EAAc,eACjBre,IACC,MAAMpG,EAAIwlB,EAAUpf,GACpBwZ,EpHzB8B,CAAC5f,IAAa,CAChD/B,KAAM2R,GACN5K,QAAS,OAAF,UACFhF,KoHsBQylB,CAAqBzlB,MAEhC,CAACwlB,IAGGd,EAAa,eACjB,CAACpP,EAAelP,KACd,MAAMpG,EAAIwlB,EAAUpf,GACpBwZ,EAAS7a,EAAkB/E,MAE7B,CAACwlB,IAGGb,EAAY,eAChB,CAACrP,EAAelP,KACd,MAAMpG,EAAIwlB,EAAUpf,GAEdvC,EAAOwgB,GADKN,GAAa3d,IAE/BwZ,EAAS3V,GAAajK,EAAG6D,MAE3B,CAAC2hB,KAGG,cAAEP,GAAkBV,GAAiB,CACzChD,UACAkD,cACAC,aACAC,cAEInD,EAAc,eACjBpb,IACKA,EAAEsf,mBAGNtf,EAAEuf,iBACFV,EAAc7e,MAEhB,CAACof,IAGH,OACE,qBAAGvU,GAAG,qBACJ,wBACEpO,MAAM,OACNC,OAAO,OACPpD,KAAK,cACL8hB,YAAaA,IAEd+D,GACC,qBACEtD,UAAW,aAAasD,EAAcxjB,GAAGtD,MAAM8mB,EAAcxjB,GAAGrD,MAEhE,wBACEmE,MAAO0iB,EAAcvjB,GAAGvD,EAAI8mB,EAAcxjB,GAAGtD,EAC7CqE,OAAQyiB,EAAcvjB,GAAGtD,EAAI6mB,EAAcxjB,GAAGrD,EAC9C0M,YAAY,IACZwa,gBAAgB,MAChBza,OAAO,UACPzL,KAAK,mBC9DjB,GArBiC,KAC/B,MAAMkR,EAAQiP,GAAYC,IAE1B,OACE,uBAAKjd,MAAM,OAAOC,OAAO,OAAO+iB,MAAM,8BACpC,4BACE,2BAAS5U,GAAG,OAAOpO,MAAM,KAAKC,OAAO,KAAKgjB,aAAa,kBACrD,wBACE/D,EAAE,oBACFriB,KAAK,OACLyL,OAAO,OACPC,YAAoB,EAAIwF,EAAX,OAKnB,wBAAM/N,MAAM,OAAOC,OAAO,OAAOpD,KAAK,iBCoG5C,GA5FgD,EAAGyH,aACjD,MAAMyY,GAAW,UAEXmG,EAAclG,GAAYjD,KAE1B,EAAEne,EAAC,EAAEC,GAAMmhB,IAAalW,GAC5B0D,GAA+B1D,EAAGxC,KAE9ByH,EAAWiR,IAAalW,GAAMiD,GAA8BjD,EAAGxC,KAC/D0U,EAAYgE,IAAalW,GAAMwO,GAA4BxO,EAAGxC,KAC9D6e,EAAanG,IAAalW,GAC9B2F,GAAiC3F,EAAGxC,KAGhCqe,EAAYrD,KAEZZ,EAAU,eACbnb,IACC,GAAI2f,EACFnG,EzC7CoB,CAACzY,IAAmB,CAC9ClJ,KAAM2b,GACN5U,QAAS,CAAEmC,YyC2CI8e,CAAa9e,QACjB,CACL,MACMtD,EAAOwgB,GADKN,GAAa3d,IAE/BwZ,EAAS7Q,GAAY5H,EAAQtD,OAGjC,CAACkiB,IAGGtB,EAAc,eACjBre,IACC,MAAMpG,EAAIwlB,EAAUpf,GAEdvC,EAAOwgB,GADKN,GAAa3d,IAE/BwZ,E1HzD4B,EAChCzY,EACAnH,EACAmK,KACG,CACHlM,KAAM4Q,GACN7J,QAAS,OAAF,wBACFhF,GAAC,CACJmH,SACAgD,oB0HgDW+b,CAAmB/e,EAAQnH,EAAG6D,MAEzC,CAACsD,EAAQqe,IAGLd,EAAa,eACjB,CAACpP,EAAelP,KACd,MAAMpG,EAAIwlB,EAAUpf,GACpBwZ,EAAS7a,EAAkB/E,MAE7B,CAACwlB,IAGGb,EAAY,eAChB,CAACrP,EAAelP,KACd,MAAMpG,EAAIwlB,EAAUpf,GAEdvC,EAAOwgB,GADKN,GAAa3d,IAE/BwZ,EAAS3V,GAAajK,EAAG6D,MAE3B,CAAC2hB,KAGG,cAAEP,GAAkBV,GAAiB,CACzChD,UACAkD,cACAC,aACAC,cAEInD,EAAc,eACjBpb,IACKA,EAAEsf,mBAGNtf,EAAEuf,iBACFV,EAAc7e,MAEhB,CAACof,IAGH,OAAK5W,EAKH,gBAAC,GAAa,CACZnQ,EAAGA,EACHC,EAAGA,EACH4I,YAAasH,EACbiN,UAAWA,EAGXwF,cAAe2E,EAAa,YAAS9Z,EACrCsV,YAAaA,IAZR,MCvFX,GAT6B,KAC3B,MAEM2E,EAFUtG,IAAa/gB,GAAUyN,GAAgBzN,KAE1B4J,KAAKvB,GACzB,gBAACif,GAAI,CAACtE,IAAK3a,EAAQA,OAAQA,MAGpC,OAAO,qBAAG8J,GAAG,eAAekV,ICTjBE,GAAoC,MAC/C,CAACvnB,EAAiB8L,IAChB9L,EAAMsF,SAASE,aAAajD,gBAAgBuJ,KAC7C9L,GAAoBA,EAAMsF,SAASO,UAAUX,2BAC9C,CACEsa,EACAgI,K,MAEA,IAAKhI,EACH,OAAO,EAGT,MACE9M,WAAW,OAAErK,EAAM,MAAEC,IACnBkX,EAEJ,OAAkC,QAA3B,EAAAgI,EAAoBnf,UAAO,eAAGC,MAAU,IAhBF,EAkB/C,CAAC6S,EAAQrP,IAAyBA,ICoHpC,GA1GgD,EAC9CA,eACA2b,eACAC,iBAEA,MAAM5G,GAAW,UACXmD,EAAiBZ,KAEjBpiB,EAAQ8f,IAAa/gB,GACL,MAAhBynB,EjEnBiD,EACvDznB,EACA8L,KAEA,MACE4G,WAAW,OAAErK,EAAM,MAAEC,IACnBtI,EAAMsF,SAASE,aAAajD,gBAAgBuJ,GAC1CiK,EAAU/H,GAA6BhO,EAAOqI,GAC9CyG,EACJP,GAA+BvO,EAAOqI,IAAWtF,EAI7C4kB,EAAYpP,GAAiCzM,GACnD,GACE6b,GACAA,EAAUC,eAAiB7R,GAC3B4R,EAAUE,kBAAkBloB,IAAMmP,EAAanP,GAC/CgoB,EAAUE,kBAAkBjoB,IAAMkP,EAAalP,EAE/C,OAAO+nB,EAAUG,eAGnB,IAAItR,EAASzT,EACTgT,GAAWA,EAAQxW,KAAK+I,KAC1BkO,EAAST,EAAQxW,KAAK+I,IAExB,MAAMkJ,EAAW5N,EAASkL,EAAc0H,GAOxC,OANA+B,GAAiCzM,GAAgB,CAC/C8b,aAAc7R,EACd8R,kBAAmB/Y,EACnBgZ,eAAgBtW,GAGXA,GiEdIuW,CAA0C/nB,EAAO8L,GAEnD6M,GAAqC3Y,EAAOynB,KAG/CO,EAAMjH,IAAa/gB,GACL,MAAd0nB,EjEW+C,EACrD1nB,EACA8L,KAEA,MACE2G,UAAU,OAAEpK,EAAM,MAAEC,IAClBtI,EAAMsF,SAASE,aAAajD,gBAAgBuJ,GAC1CiK,EAAU/H,GAA6BhO,EAAOqI,GAC9CyG,EACJP,GAA+BvO,EAAOqI,IAAWtF,EAI7C4kB,EAAYnP,GAA+B1M,GACjD,GACE6b,GACAA,EAAUC,eAAiB7R,GAC3B4R,EAAUE,kBAAkBloB,IAAMmP,EAAanP,GAC/CgoB,EAAUE,kBAAkBjoB,IAAMkP,EAAalP,EAE/C,OAAO+nB,EAAUG,eAGnB,IAAItR,EAASzT,EACTgT,GAAWA,EAAQxW,KAAK+I,KAC1BkO,EAAST,EAAQxW,KAAK+I,IAExB,MAAMkJ,EAAW5N,EAASkL,EAAc0H,GAOxC,OANAgC,GAA+B1M,GAAgB,CAC7C8b,aAAc7R,EACd8R,kBAAmB/Y,EACnBgZ,eAAgBtW,GAGXA,GiE5CIyW,CAAwCjoB,EAAO8L,GAEjD6M,GAAqC3Y,EAAO0nB,MAG9CQ,EAAUC,GAAe,WAA6B,MACvDC,EAAgB,SAA4B,MAE5C/D,EAAc,eACjB/c,IACC,MAAMpG,EAAI+iB,EAAe3c,GACzB6gB,EAAYjnB,KAEd,CAAC+iB,IAGGpB,EAAe,eAAkB,KACrCsF,EAAY,QACX,IAEGxC,EAAc,eACjBre,IACC,MAAMpG,EAAI+iB,EAAe3c,GACnBuJ,GAAU,UAChBuX,EAAc9F,QAAUzR,EACxBiQ,E7FtEsB,EAC1BhV,EACAkJ,EACAxD,EACAX,KACG,CACH1R,KAAM2V,GACN5O,QAAS,CACP4F,eACA+E,QAASA,IAAW,UACpBmE,kBACAxD,c6F2DW6W,CAAavc,EAAc2b,EAAcvmB,EAAG2P,MAEvD,CAAC/E,EAAc2b,EAAcxD,IAGzB2B,EAAa,eACjB,CAACpP,EAAelP,KACd,MAAMuJ,EAAUuX,EAAc9F,QAC9B,IAAKzR,EACH,OAEF,MAAM3P,EAAI+iB,EAAe3c,GACzBwZ,EAASvL,GAAc1E,EAAS3P,MAElC,CAAC+iB,IAGGxB,EAAU,eACbnb,IACC,MACMvC,EAAOwgB,GADKN,GAAa3d,IAE/BwZ,EtD5FqB,EACzBhV,EACA/G,EAAsB,SACnB,CACH5F,KAAM+a,GACNhU,QAAS,CACPkO,cAAejK,MAAMC,QAAQ0B,GAAgBA,EAAe,CAACA,GAC7D/G,UsDqFWujB,CAAYxc,EAAc/G,MAErC,CAAC+G,KAGG,cAAEqa,GAAkBV,GAAiB,CACzChD,UACAkD,cACAC,eAGI2C,EAAyB,eAC5BjhB,IACC6e,EAAc7e,KAEhB,CAAC6e,IAGH,IAAIqC,EACJ,GAAIN,EAAU,CACZ,IAAIO,EvK1FD,SAAmBvnB,GACxB,MAAMwnB,EAAIvlB,EAAUjC,GACpB,MAAO,CACLvB,EAAGuB,EAAEvB,EAAI+oB,EACT9oB,EAAGsB,EAAEtB,EAAI8oB,GuKsFKC,CAAU9kB,EAAcmkB,EAAK/mB,IAG3CunB,EAAiB5kB,EAAS3C,GvKjFE2nB,GAJKpV,EuKoFXiV,GvKpFClV,EuKmFb1P,EAAcqkB,EAAUjnB,IvKlF3BtB,EAAI6T,EAAE7T,EAAI4T,EAAE3T,EAAI4T,EAAE5T,GAIpB,CAAED,GADWuB,EuKiFqBunB,GvKhF3B9oB,EAAIipB,EAAQhpB,EAAGsB,EAAEtB,EAAIgpB,KAD9B,IAAe1nB,EAAU0nB,EAJLrV,EAAUC,EuKwFnC,OACE,qBAAG6Q,YAAaA,EAAaxB,aAAcA,GACzC,wBAAMgG,GAAI5nB,EAAMtB,EAAGmpB,GAAI7nB,EAAMrB,EAAGmpB,GAAIf,EAAIroB,EAAGqpB,GAAIhB,EAAIpoB,EAAG0M,YAAa,IAClEkc,GACC,0BACEhoB,GAAIgoB,EAAe7oB,EACnBc,GAAI+nB,EAAe5oB,EACnBc,EAAG,EACH2L,OAAO,OACPzL,KAAK,MACL8hB,YAAa6F,MCpIvB,GCuB4C,EAAG1X,cAC7C,MAAMoT,EAAiBZ,KACjBvC,GAAW,UAEXoG,EAAanG,IAAa/gB,GAC9B4Q,GAAmC5Q,EAAO6Q,KAGtCW,EAAWuP,IAAa/gB,GAC5B2Y,GAAqC3Y,EAAO6Q,MAEvCoY,EAAWC,GAAgB,YAAe,GAE3CC,EAAkB,eACtB,CAAC3S,EAAelP,KACd,MAAMpG,EAAI+iB,EAAe3c,GACzBwZ,EAASvL,GAAc1E,EAAS3P,MAElC,CAAC+iB,IAGGxB,EAAU,eACbnb,IACC,MACMvC,EAAOwgB,GADKN,GAAa3d,IAE/BwZ,E/D5C0B,EAC9BjQ,EACA9L,EAAsB,SACnB,CACH5F,KAAM4Z,GACN7S,QAAS,CACPqO,SAAUpK,MAAMC,QAAQyG,GAAWA,EAAU,CAACA,GAC9C9L,U+DqCWqkB,CAAiBvY,EAAS9L,MAErC,CAAC8L,KAGKsV,cAAekD,GAA2B5D,GAAiB,CACjEhD,UACAmD,WAAYuD,IAGRxG,EAAc,eAAkB,KACpCuG,GAAa,KACZ,IACGI,EAAa,eAAkB,KACnCJ,GAAa,KACZ,IAEGK,EAAY,eACfjiB,IACC+hB,EAAuB/hB,KAEzB,CAAC+hB,IAGH,OACE,0BACEjG,UAAWha,GC1EY,qDD0Ec8d,GC1EkD,oDD2EvF1mB,GAAIgR,EAAS7R,EACbc,GAAI+Q,EAAS5R,EACbc,EAAGuoB,GAAa/B,EAAa,EAAI,EACjCvE,YAAaA,EACb2G,WAAYA,EACZ5G,YAAa6G,KEhFnB,GCiBkC,EAAGzd,mBACnC,MAAMyI,EAAWwM,IAAa/gB,GAC5B0Y,GAAqC1Y,EAAO8L,KAExC0d,EAAYzI,IAAa/gB,GAC7BunB,GAAkCvnB,EAAO8L,KAErCob,EAAanG,IAAa/gB,GAC9B0Q,GAAuC1Q,EAAO8L,KAI1C2d,EAAkB,IAAIlV,EAAU,MAAM3K,KAAI,CAAC8d,EAAYvL,KAC3D,MAAMsL,EAAetL,EAAQ,EAAI5H,EAAS4H,EAAQ,GAAK,KACvD,OACE,gBAAC,GAAW,CACV6G,IAAK7G,EACLrQ,aAAcA,EACd2b,aAAcA,EACdC,WAAYA,OAKZgC,EAAgBnV,EAAS3K,KAAKiH,GAClC,gBAAC,GAAS,CAACmS,IAAKnS,EAASA,QAASA,MAGpC,OACE,qBACEuS,UAAWha,GC/CM,0CDiDfogB,GCjDmE,6CDkDnEtC,GClD2H,gDDqD5HuC,EACAC,IExCP,GAR6B,KAC3B,MACMC,EADgB5I,GAAYnN,IACMhK,KAAKkC,GAC3C,gBAAC,GAAI,CAACkX,IAAKlX,EAAcA,aAAcA,MAGzC,OAAO,qBAAGqG,GAAG,eAAewX,ICZ9B,GAA2G,uDCsH3G,SAASC,GACPjqB,EACAC,EACAiqB,EACAC,EACAC,GAEA,IAAI9oB,EAAQ+oB,GAAiBrqB,EAAGC,EAAGiqB,EAAQE,GACvC/B,EAAMgC,GAAiBrqB,EAAGC,EAAGiqB,EAAQC,GAErCG,EAAeF,EAAWD,GAAc,IAAM,IAAM,IAgBxD,MAdQ,CACN,IACA7oB,EAAMtB,EACNsB,EAAMrB,EACN,IACAiqB,EACAA,EACA,EACAI,EACA,EACAjC,EAAIroB,EACJqoB,EAAIpoB,GACJ4J,KAAK,KAKT,SAASwgB,GACPE,EACAC,EACAN,EACAO,GAEA,IAAIC,GAAmBD,EAAiB,IAAM/mB,KAAKinB,GAAM,IAEzD,MAAO,CACL3qB,EAAGuqB,EAAUL,EAASxmB,KAAKknB,IAAIF,GAC/BzqB,EAAGuqB,EAAUN,EAASxmB,KAAKmnB,IAAIH,IC7JnC,SD0BwC,EAAGhiB,SAAQC,YACjD,MAAM2b,EAAiBZ,KACjBvC,GAAW,UAEXtP,EAAWuP,IAAalW,G1IsCkB,EAChD7K,EACAqI,EACAC,K,MAEA,MAGMmiB,EAH0Bjc,GAC9BxO,GAE+CqI,GACjD,OAAKoiB,GAGyB,QAA9B,EAAOA,EAAiBniB,UAAM,QAFrBvF,G0I/CP2nB,CAAmC7f,EAAGxC,EAAQC,KAE1C5I,EAAYqhB,IAAalW,GAC7B8K,GAAgC9K,EAAGxC,EAAQC,KAGvCqiB,EAAgB5J,GAAYtR,IAE5BkW,EAAc,eACjBre,IACC,MAAMpG,EAAI+iB,EAAe3c,GACzBwZ,EhIrCgE,CACpE3hB,KAAM6R,GACN9K,QAAS,CACPjE,UgIkC8Bf,EhIjC9BiN,IgIiCiC,CAAE9F,SAAQC,cAE3C,CAAC2b,EAAgB5b,EAAQC,IAGrBsd,EAAa,eACjB,CAACpP,EAAelP,KACd,MAAMpG,EAAI+iB,EAAe3c,GACzBwZ,EAAS7a,EAAkB/E,MAE7B,CAAC+iB,IAGG4B,EAAY,eAChB,CAACrP,EAAelP,KACd,MAAMpG,EAAI+iB,EAAe3c,GAEnBvC,EAAOwgB,GADKN,GAAa3d,IAE/BwZ,EAAS3V,GAAajK,EAAG6D,MAE3B,CAACkf,KAGG,cAAEkC,GAAkBV,GAAiB,CACzCE,cACAC,aACAC,cAGInD,EAAc,eAAmBpb,IACrCA,EAAEuf,iBACFvf,EAAEsjB,kBACFzE,EAAc7e,KACb,IAEH,IAAKkK,EACH,OAAO,KAGT,MAAMqZ,EACa,MAAjBF,GACAA,EAActiB,SAAWA,GACzBsiB,EAAcriB,QAAUA,GAEpB,EAAE3I,EAAC,EAAEC,GAAM4R,EAEjB,MAAkB,UAAd9R,EAEA,wBACEujB,EAAG2G,GAAYjqB,EAAGC,EAAG,GAAI,GAAI,KAC7BwjB,UAAWha,GD5FgK,uDC8FzKyhB,GAAgB,IAElBnI,YAAaA,IAMjB,0BACEU,UAAWha,GDvGiB,wDCyG1ByhB,GAAgB,IAElBrqB,GAAIb,EACJc,GAAIb,EACJc,EAAG,EACHgiB,YAAaA,KE7FnB,GAVgC,KAC9B,MAEMsC,EAFOjE,IAAa/gB,GAAUiO,GAAiBjO,KAE/B4J,KAAI,EAAGvB,SAAQC,WACnC,gBAAC,GAAO,CAAC0a,IAAK,GAAG3a,KAAUC,IAASD,OAAQA,EAAQC,MAAOA,MAG7D,OAAO,qBAAG6J,GAAG,mBAAmB6S,ICgBlC,GArB6C,KAC3C,MAAMhjB,EAAW+e,GAAY9R,IACvBhN,EAAY8e,GAAY7R,IACxBhN,EAAU6e,GAAY5R,IAE5B,MAAgB,QAAZnN,GAAuBC,GAAcC,EAKvC,wBACE2mB,GAAI5mB,EAAUtC,EACdmpB,GAAI7mB,EAAUrC,EACdmpB,GAAI7mB,EAAQvC,EACZqpB,GAAI9mB,EAAQtC,EACZyM,OAAO,QACPC,YAAa,IAVR,MCfX,GCwB+B,KAC7B,MAAMwU,GAAW,UACXoD,EAAYnD,GAAYc,KACxB,MAAE9d,EAAK,OAAEC,GAAWF,EAASogB,GAE7B4G,EAAS,SAA4B,MAErCpI,EAAc,eAAkB,K,MACtB,QAAd,EAAAoI,EAAOxI,eAAO,SAAEyI,UACf,IAEGlI,EAAe,eAAkB,KACrC/B,E7KlCiC,CACnC3hB,KAAMgH,M6KkCH,IAEH,OAGE,uBACEid,UAAWha,GAAI,gBC3CY,6DD4C3B4hB,MAAO,CACLjnB,MAAUA,EAAH,KACPC,OAAWA,EAAH,OAGV,uBACEinB,UAAW,EACXC,IAAKJ,EACL/mB,MAAOA,EACPC,OAAQA,EACR0e,YAAaA,EACbG,aAAcA,GAEd,gBAACX,GAAuB,CAACrhB,MAAOiqB,GAC9B,gBAAC,GAAc,MACf,gBAAC,GAAe,MAChB,gBAAC,GAAU,MACX,gBAAC,GAAU,MACX,gBAAC,GAAa,MACd,gBAAC,GAA0B,MAC3B,gBAAC,GAAoB,MACrB,gBAAC,GAAgB,UE9BrBK,GAAkC,EAAGrb,eACzC,MAAMgR,GAAW,UACX2B,EAAU,eACbnb,IACKA,EAAEsf,mBAGNtf,EAAEuf,iBACF/F,EAASrV,GAAWqE,OAEtB,CAACA,IAGG6V,EAAc,eAAkB,KACpC7E,E/I7CiC,CAAChR,IAA0B,CAC9D3Q,KAAMyQ,GACN1J,QAAS,CACP4J,c+I0CSsb,CAAsBtb,MAC9B,CAACA,IAEE+V,EAAY,eAAkB,KAElC/E,EAAS3V,GAAa,CAAExL,GAAI,EAAGC,GAAI,GAAK,UACvC,KAEG,cAAEumB,GAAkBV,GAAiB,CACzChD,UACAkD,cACAE,cAGInD,EAAc,eAAmBpb,IACrC6e,EAAc7e,KACb,IAEH,OACE,uBAAKob,YAAaA,GAChB,uBAAK3e,MAAOiJ,GAAmBjJ,MAAOC,OAAQgJ,GAAmBhJ,QAC/D,gBAAC,GAAa,CAACwE,YAAasH,EAAUiN,UAAW,QCtEzD,GDmB8B,KAC5B,MAAMiI,GhKjBoC9a,EgKiBfqC,GhKhBpB1K,OAAO8L,KAAKzD,IgKgBkCN,KAAKzK,GACjD,gBAACgsB,GAAO,CAACnI,IAAK7jB,EAAM2Q,SAAU3Q,MhKlBlC,IAAqC+K,EgKqB1C,OACE,uBAAKkZ,UEzBqB,yDF0BxB,uBAAKA,UE1BkG,kEF0BtD4B,KGhBjDqG,GAAY,CAChBrG,SAAU,gBAAC,GAAW,MACtB,gBAAiB,iBCwBuC,EAAG5B,gBAC3D,MAAMkI,EAAU,SAAoC,MAC9CxK,GAAW,UACXhP,EAAQiP,GAAYC,IAEpBuK,EAAc,WAAc,KAChC,SAASC,EAAsBhhB,GAC7B,OAAQlD,IACN,GAAIA,EAAG,CACL,GAAIA,EAAEsf,iBACJ,OAEFtf,EAAEuf,iBAEJ/F,EAAStW,IAWb,MARiC,CAC/B,CAAC8W,IAAkBkK,EAAsBnlB,EAAQ,IACjD,CAACkb,IAAyBiK,E1DrDI,CAClCrsB,KAAMwe,K0DqDF,CAAC6D,IAAoBgK,EtFtDI,CAC7BrsB,KAAMmZ,KsFsDF,CAACmJ,IAAc+J,ExEvDc,CACjCrsB,KAAMib,KwEuDF,CAACsH,IAAe8J,EtGxDK,CACzBrsB,KAAMwX,KsGwDF,CAACgL,IAAgB6J,EvEzDc,CACnCrsB,KAAMkb,QuE2DH,IAEGoR,EAAU,eAAmBnkB,IjL9Db,IAACyK,EiL+DjBzK,EAAEsf,kBAIFtf,EAAE4d,UACJpE,GjLpEmB/O,EiLoEDzK,EAAEokB,OAAS,GAAK,EAAI,EjLpED,CACzCvsB,KAAMoH,EACNL,QAAS,CAAE6L,YiLmEPzK,EAAEuf,iBACFvf,EAAEsjB,qBAEH,ICzEE,IAILM,EACA/rB,EACAwsB,EAIAC,EDwEA,OC9EAV,ED4EeI,EC3EfnsB,ED2EwB,QC1ExBwsB,ED0EiCF,ECtEjCG,EDsE0C,CAAEC,SAAS,GCpErD,aAAgB,KACd,IAAKX,EAAI5I,QACP,OAIF,MAAMwJ,EAAeZ,EAAI5I,QAGzB,OADAwJ,EAAaxF,iBAAiBnnB,EAAMwsB,EAAUC,GACvC,KACLE,EAAavF,oBAAoBpnB,EAAMwsB,EAAUC,MAElD,CAACV,EAAI5I,QAASnjB,EAAMwsB,ID2DrB,uBACEvI,UAAWha,GACT,qBACAga,EEvF6B,qEF0F/B8H,IAAKI,GAEL,uBACElI,UAAWha,GACT,iBE9F8H,+EFiGhI4hB,MAAO,CACL7H,UAAW,SAASrR,OAGtB,gBAAC,GAAAia,QAAO,CAACC,OAAQ,GAAQC,SAAUV,GACjC,gBAAC,GAAY,WD1Fa,OIZpC,GJeoD,EAAGnI,eAEnD,uBAAKA,UAAWA,GACd,gBAAC,MAAM,CACL8I,WAAY,CAAC/Z,EAAIxR,IACf,gBAAC,MAAY,CAACA,KAAMA,EAAMwrB,MAAOha,GAC9BkZ,GAAUlZ,IAGfia,aAAc,CACZ1sB,UAAW,MACX2sB,MAAO,WACPC,OAAQ,gBACRC,gBAAiB,O,2BK7B3B,MCCA,GCYmC,EAAGC,aAElC,uBAAKpJ,UCde,6CDelB,uBAAKA,UCfyE,qDDgB5E,uBAAKA,UChB0I,oDDiB7I,0BACE,+CACA,0NAKA,uGAIA,yB,6BAC6B,IAC3B,qBAAGqJ,KAAK,0CAAwC,6CAMtD,uBAAKrJ,UCpC8M,sDDqCjN,gBAAC,KAAa,CAACsJ,OFtCzB,2rJEwCQ,0BAAQtJ,UCvCgR,oDDuC5OX,QAAS+J,GAAO,yB,4BE5B7D,SAASG,GACdC,KACGC,GAEH,MAAM/L,GAAW,UACjB,OAAO,eACL,IAAItd,KACF,MAAMgH,EAASoiB,KAAqBC,KAAYrpB,GAC5CgH,GACFsW,EAAStW,KAGb,CAACoiB,KAAkBC,ICtBvB,MAQA,GAR2DC,GAEvD,qCAAK/oB,MAAO,GAAIC,OAAQ,IAAQ8oB,GAC9B,wBAAM7J,EAAE,wBCKd,GAR2D6J,GAEvD,qCAAK/oB,MAAO,GAAIC,OAAQ,IAAQ8oB,GAC9B,wBAAM7J,EAAE,+BCKd,GAR4D6J,GAExD,qCAAK/oB,MAAO,GAAIC,OAAQ,IAAQ8oB,GAC9B,wBAAM7J,EAAE,uECJd,GAAyB,mDCAzB,GCsBkC,KAChC,MAAM8J,EAAWhM,GAAYjD,IACvBkP,EAAWjM,GAAY/C,IAEvBiP,EAAcN,GAAUtO,IACxB6O,EAAcP,GAAU/N,IACxBuO,EAAeR,GAAU9O,GAAU,UAEzC,OACE,4BACGkP,EACC,gBAACK,GAAQ,CACPhK,UAAWha,GAAI,GFlCuI,yDEmCtJqZ,QAASyK,IAGX,gBAACG,GAAQ,CACPjK,UAAWha,GAAI,GFvCiE,yDEwChFqZ,QAASwK,IAGb,gBAACK,GAAS,CACRlK,UAAWha,GACT,GF7C6N,0DE+C5N2jB,GF/CwW,6DEgDzWC,GFhDiS,sDEkDnSvK,QAAS0K,MC5BjB,GAf2B,KACzB,MAAMI,EAAeZ,GAAU/Z,IACzB4a,EAAgBb,GAAUjlB,GAC1B+lB,EAAgBd,GAAUjmB,GAEhC,OACE,gBAAC,MAAI,KACH,gBAAC,WAAS,CAAC+b,QAAS8K,EAAcG,KAAK,aAAa1mB,KAAK,QACzD,gBAAC,cAAY,MACb,gBAAC,WAAS,CAACyb,QAASgL,EAAeC,KAAK,gBAAgB1mB,KAAK,SAC7D,gBAAC,WAAS,CAACyb,QAAS+K,EAAeE,KAAK,QAAQ1mB,KAAK,WCK3D,GAjB2B,IAEvB,gBAAC,MAAM,KACL,gBAAC,YAAY,CAAC2mB,MAAO,WACnB,gBAAC,cAAc,kBACf,gBAAC,cAAc,MACf,gBAAC,MAAO,CAACC,QAAS,gBAAC,GAAQ,OACzB,gBAAC,MAAM,CAACC,SAAO,EAACH,KAAK,WAAW1mB,KAAK,WAGzC,gBAAC,YAAY,CAAC2mB,MAAO,YACnB,gBAAC,GAAW,QCfPG,GAAqBzW,IAAsBxM,GAAMA,EAAErG,aAC9B6S,IAAsBxM,GAAMA,EAAEpG,O,2BCIhE,MAmDA,GAnDoC,KAClC,MAAMspB,EAAiBpB,GAAU3kB,GAC3BgmB,EAAiBrB,GAAU9kB,IAE1BomB,EAAaC,GAAkB,WAAuB,IACvDC,EAAmB,eACtB7mB,IACC4mB,EAAe5mB,EAAEoC,OAAO7I,SAE1B,IAGIutB,EAAW,eAAkB,KACb,KAAhBH,GAGJD,EAAeC,KACd,CAACD,EAAgBC,IAEpB,OACE,gBAAC,MAAM,CACLI,QAAQ,EACRX,KAAK,QACLY,QAASP,EACT5B,MAAM,eACNoC,mBAAmB,EACnBC,sBAAsB,GAEtB,uBAAKpL,UAAW,gBACd,gBAAC,MAAU,CACTqL,YAAY,eACZ5tB,MAAOotB,EACPS,SAAUP,KAGd,uBAAK/K,UAAW,kBACd,uBAAKA,UAAW,0BACd,gBAAC,MAAM,CAACX,QAASsL,GAAc,UAC/B,gBAAC,MAAM,CACLY,OAAQ,aACRC,SAA0B,KAAhBX,EACVxL,QAAS2L,GAAQ,YC/C7B,GCMgC,KAG9B,OAFmBrN,GAAY+M,KAG7B,IAAK,eACH,OAAO,gBAAC,GAAiB,MAC3B,QACE,OAAO,OCHPe,GAASxI,SAASyI,eAAe,QAEvC,SACE,gBAAC,KAAQ,CAAClO,MAAOA,IACf,iBCDkB,KACpB,MAAOmO,EAAYC,GAAiB,Y9DdjB,G8DebC,EAAY,eAAkB,KAClCD,GAAc,KACb,IAEH,OAAKD,EAKH,uBAAK3L,UAAWha,GAAI,GCxB+D,mDDyBjF,gBAAC,GAAa,MACd,gBAAC,GAAQ,MACT,gBAAC,GAAa,CACZga,UAAWha,GAAI,GC5BmI,yDDoB/I,gBAAC,GAAK,CAACojB,QAASyC,MDNnB,OAENJ,M","file":"client.928e29b3b297559f9652.bundle.js","sourcesContent":["import { ElementDefinition } from \"./types\";\n\nconst andElementDefinition: ElementDefinition = {\n  type: \"and\",\n  visual: {\n    hitPath: `\n      M30 5V45H50.47619c11.267908 0 20-9.000045 20-20s-8.732091-20-20-20H30z\n    `,\n    // https://commons.wikimedia.org/wiki/File:AND_ANSI.svg\n    shapePath: `\n      M70 25h25\n      M31 15H5\n      M32 35H5\n      M30 5V45H50.47619c11.267908 0 20-9.000045 20-20s-8.732091-20-20-20H30z\n      m2.857143 2.857143H50.47619c9.760663 0 16.666667 7.639955 16.666667 17.142857 0 9.502902-7.382195 17.142857-17.142857 17.142857H32.857143V7.857143z\n    `,\n  },\n  pins: {\n    A: {\n      name: \"A\",\n      direction: \"input\",\n      x: 0,\n      y: 14.5,\n    },\n    B: {\n      name: \"B\",\n      direction: \"input\",\n      x: 0,\n      y: 35,\n    },\n    OUT: {\n      name: \"OUT\",\n      direction: \"output\",\n      x: 100,\n      y: 25,\n    },\n  },\n  evolve(state, inputs, tick) {\n    return {\n      transitions: {\n        tickOffset: 4,\n        valuesByPin: { OUT: inputs.A && inputs.B },\n      },\n    };\n  },\n};\nexport default andElementDefinition;\n","import { ElementDefinition } from \"./types\";\n\nconst bufferElementDefinition: ElementDefinition = {\n  type: \"buffer\",\n  visual: {\n    hitPath: `\n    M 28.96875,2.59375 L 28.96875,5 L 28.96875,45 L 28.96875,47.40625 L 31.125,46.34375 L 72.15625,26.34375 L 75,25 L 72.15625,23.65625 L 31.125,3.65625 L 28.96875,2.59375 z\n    `,\n    // https://commons.wikimedia.org/wiki/File:Buffer_ANSI.svg\n    shapePath: `\n      M 72,25 L 95.085706,25\n      M 29.043478,25 L 5.0434781,25\n      M 28.96875,2.59375 L 28.96875,5 L 28.96875,45 L 28.96875,47.40625 L 31.125,46.34375 L 72.15625,26.34375 L 75,25 L 72.15625,23.65625 L 31.125,3.65625 L 28.96875,2.59375 z M 31.96875,7.40625 L 68.09375,25 L 31.96875,42.59375 L 31.96875,7.40625 z\n    `,\n  },\n  pins: {\n    IN: {\n      name: \"IN\",\n      direction: \"input\",\n      x: 0,\n      y: 25,\n    },\n    OUT: {\n      name: \"OUT\",\n      direction: \"output\",\n      x: 100,\n      y: 25,\n    },\n  },\n  evolve(state, inputs, tick) {\n    return {\n      transitions: {\n        tickOffset: 4,\n        valuesByPin: { OUT: inputs.IN },\n      },\n    };\n  },\n};\nexport default bufferElementDefinition;\n","import { ElementDefinition } from \"./types\";\n\nfunction genCirclePath(cx: number, cy: number, r: number): string {\n  return `M ${cx - r}, ${cy}\n    a ${r},${r} 0 1,0 ${r * 2},0\n    a ${r},${r} 0 1,0 ${-(r * 2)},0`;\n}\n\nconst ledElementDefinition: ElementDefinition = {\n  type: \"led\",\n  visual: {\n    shapePath: [\n      genCirclePath(25, 25, 25),\n      {\n        path: genCirclePath(25, 25, 20),\n        fill: (state) => (state.value ? \"lightgreen\" : \"darkgreen\"),\n      },\n    ],\n  },\n  pins: {\n    IN: {\n      name: \"IN\",\n      direction: \"input\",\n      x: 0,\n      y: 25,\n    },\n  },\n  evolve(state, inputs, tick) {\n    return {\n      state: {\n        value: inputs.IN,\n      },\n    };\n  },\n};\nexport default ledElementDefinition;\n","import { ElementDefinition } from \"./types\";\n\nconst norElementDefinition: ElementDefinition = {\n  type: \"nor\",\n  visual: {\n    hitPath: `\n    M24.09375 5l2 2.4375S31.75 14.437549 31.75 25s-5.65625 17.5625-5.65625 17.5625l-2 2.4375H41.25c2.408076.000001 7.689699.024514 13.625-2.40625s12.536536-7.343266 17.6875-16.875L71.25 25l1.3125-.71875C62.259387 5.21559 46.006574 5 41.25 5H24.09375z\n    `,\n    // https://commons.wikimedia.org/wiki/File:NOR_ANSI.svg\n    shapePath: `\n      M79 25h16M31 15H5M32 35H5\n      \n      M24.09375 5l2 2.4375S31.75 14.437549 31.75 25s-5.65625 17.5625-5.65625 17.5625l-2 2.4375H41.25c2.408076.000001 7.689699.024514 13.625-2.40625s12.536536-7.343266 17.6875-16.875L71.25 25l1.3125-.71875C62.259387 5.21559 46.006574 5 41.25 5H24.09375z\n      m5.875 3H41.25c4.684173 0 18.28685-.130207 27.96875 17C64.451964 33.429075 58.697469 37.68391 53.5 39.8125 48.139339 42.007924 43.658075 42.000001 41.25 42H30c1.873588-3.108434 4.75-9.04935 4.75-17 0-7.973354-2.908531-13.900185-4.78125-17z\n      M79 25a4 4 0 1 1-8 0 4 4 0 1 1 8 0z\n    `,\n  },\n  pins: {\n    A: {\n      name: \"A\",\n      direction: \"input\",\n      x: 0,\n      y: 14.5,\n    },\n    B: {\n      name: \"B\",\n      direction: \"input\",\n      x: 0,\n      y: 35,\n    },\n    OUT: {\n      name: \"OUT\",\n      direction: \"output\",\n      x: 100,\n      y: 25,\n    },\n  },\n  evolve(state, inputs, tick) {\n    return {\n      transitions: {\n        tickOffset: 4,\n        valuesByPin: { OUT: !(inputs.A || inputs.B) },\n      },\n    };\n  },\n};\nexport default norElementDefinition;\n","import { ElementDefinition } from \"./types\";\n\nconst notElementDefinition: ElementDefinition = {\n  type: \"not\",\n  visual: {\n    hitPath: `\n    M28.96875 2.59375v44.8125l2.15625-1.0625 41.03125-20v-2.6875l-41.03125-20-2.15625-1.0625z\n    `,\n    // https://commons.wikimedia.org/wiki/File:NOT_ANSI.svg\n    shapePath: `\n      M79.15691 25H95\n      M29.043478 25h-24\n      M28.96875 2.59375v44.8125l2.15625-1.0625 41.03125-20v-2.6875l-41.03125-20-2.15625-1.0625z\n      m3 4.8125L68.09375 25l-36.125 17.59375V7.40625z\n      M79 25a4 4 0 1 1-8 0 4 4 0 1 1 8 0z\n    `,\n  },\n  pins: {\n    IN: {\n      name: \"IN\",\n      direction: \"input\",\n      x: 0,\n      y: 25,\n    },\n    OUT: {\n      name: \"OUT\",\n      direction: \"output\",\n      x: 100,\n      y: 25,\n    },\n  },\n  evolve(state, inputs, tick) {\n    return {\n      transitions: {\n        tickOffset: 4,\n        valuesByPin: { OUT: !inputs.IN },\n      },\n    };\n  },\n};\nexport default notElementDefinition;\n","import { ElementDefinition } from \"./types\";\n\nconst orElementDefinition: ElementDefinition = {\n  type: \"or\",\n  visual: {\n    hitPath: `\n    M24.09375 5l2 2.4375S31.75 14.437549 31.75 25s-5.65625 17.5625-5.65625 17.5625l-2 2.4375H41.25c2.408076.000001 7.689699.024514 13.625-2.40625s12.536536-7.343266 17.6875-16.875L71.25 25l1.3125-.71875C62.259387 5.21559 46.006574 5 41.25 5H24.09375z\n    `,\n    // https://commons.wikimedia.org/wiki/File:OR_ANSI.svg\n    shapePath: `\n      M70 25h25\n      M31 15H5\n      M32 35H5\n      M24.09375 5l2 2.4375S31.75 14.437549 31.75 25s-5.65625 17.5625-5.65625 17.5625l-2 2.4375H41.25c2.408076.000001 7.689699.024514 13.625-2.40625s12.536536-7.343266 17.6875-16.875L71.25 25l1.3125-.71875C62.259387 5.21559 46.006574 5 41.25 5H24.09375z\n      m5.875 3H41.25c4.684173 0 18.28685-.130207 27.96875 17C64.451964 33.429075 58.697469 37.68391 53.5 39.8125 48.139339 42.007924 43.658075 42.000001 41.25 42H30c1.873588-3.108434 4.75-9.04935 4.75-17 0-7.973354-2.908531-13.900185-4.78125-17z\n    `,\n  },\n  pins: {\n    A: {\n      name: \"A\",\n      direction: \"input\",\n      x: 0,\n      y: 14.5,\n    },\n    B: {\n      name: \"B\",\n      direction: \"input\",\n      x: 0,\n      y: 35,\n    },\n    OUT: {\n      name: \"OUT\",\n      direction: \"output\",\n      x: 100,\n      y: 25,\n    },\n  },\n  evolve(state, inputs, tick) {\n    return {\n      transitions: {\n        tickOffset: 4,\n        valuesByPin: { OUT: inputs.A || inputs.B },\n      },\n    };\n  },\n};\nexport default orElementDefinition;\n","import { ElementDefinition, ElementVisualPathDefinition } from \"./types\";\n\nconst SCALE = 3;\nconst OFFSET = [15, 0];\n\n/**\n * Produce a visual path definition of a segment given a series of polygon points.\n * The path definition will color itself based on the state key specified by 'name'\n * @param name The state key to select color based on.  The key should represent a boolean value.\n * @param points An array of [x,y] pairs that make up the polygon.\n */\nfunction createSeg(\n  name: string,\n  points: [number, number][]\n): ElementVisualPathDefinition {\n  const start = points[0];\n  let path = `M${start[0] * SCALE + OFFSET[0]},${start[1] * SCALE + OFFSET[1]}`;\n  for (let p of points.slice(1)) {\n    const [x, y] = p;\n    path += `L${x * SCALE + OFFSET[0]},${y * SCALE + OFFSET[1]}`;\n  }\n  path += \"z\";\n  return {\n    path,\n    fill: (state) => (state[name] ? \"red\" : \"gray\"),\n  };\n}\n\nconst seg7ElementDefinition: ElementDefinition = {\n  type: \"seg7\",\n  visual: {\n    hitPath: `M0,0 V63 H45 V0 z`,\n    // https://commons.wikimedia.org/wiki/File:7-segment_abcdefg.svg\n    shapePath: [\n      createSeg(\"A\", [\n        [1, 1],\n        [2, 0],\n        [8, 0],\n        [9, 1],\n        [8, 2],\n        [2, 2],\n      ]),\n      createSeg(\"B\", [\n        [9, 1],\n        [10, 2],\n        [10, 8],\n        [9, 9],\n        [8, 8],\n        [8, 2],\n      ]),\n      createSeg(\"C\", [\n        [9, 9],\n        [10, 10],\n        [10, 16],\n        [9, 17],\n        [8, 16],\n        [8, 10],\n      ]),\n      createSeg(\"D\", [\n        [9, 17],\n        [8, 18],\n        [2, 18],\n        [1, 17],\n        [2, 16],\n        [8, 16],\n      ]),\n      createSeg(\"E\", [\n        [1, 17],\n        [0, 16],\n        [0, 10],\n        [1, 9],\n        [2, 10],\n        [2, 16],\n      ]),\n      createSeg(\"F\", [\n        [1, 9],\n        [0, 8],\n        [0, 2],\n        [1, 1],\n        [2, 2],\n        [2, 8],\n      ]),\n      createSeg(\"G\", [\n        [1, 9],\n        [2, 8],\n        [8, 8],\n        [9, 9],\n        [8, 10],\n        [2, 10],\n      ]),\n    ],\n  },\n  pins: {\n    A: {\n      name: \"A\",\n      direction: \"input\",\n      x: 0,\n      y: 5,\n    },\n    B: {\n      name: \"B\",\n      direction: \"input\",\n      x: 0,\n      y: 15,\n    },\n    C: {\n      name: \"C\",\n      direction: \"input\",\n      x: 0,\n      y: 25,\n    },\n    D: {\n      name: \"D\",\n      direction: \"input\",\n      x: 0,\n      y: 35,\n    },\n    E: {\n      name: \"E\",\n      direction: \"input\",\n      x: 0,\n      y: 45,\n    },\n    F: {\n      name: \"F\",\n      direction: \"input\",\n      x: 0,\n      y: 55,\n    },\n    G: {\n      name: \"G\",\n      direction: \"input\",\n      x: 0,\n      y: 65,\n    },\n  },\n  evolve(state, inputs, tick) {\n    return {\n      state: { ...inputs },\n    };\n  },\n};\nexport default seg7ElementDefinition;\n","import { ElementDefinition } from \"./types\";\n\ninterface ToggleState {\n  toggleState: boolean;\n}\nconst defaultToggleState: ToggleState = {\n  toggleState: false,\n};\n\nconst toggleElementDefinition: ElementDefinition = {\n  type: \"toggle\",\n  visual: {\n    shapePath: {\n      path: `M0,0 L0,50 L25,50 L25,0 z`,\n      fill: (state: ToggleState) => (state.toggleState ? \"green\" : \"red\"),\n    },\n  },\n  pins: {\n    OUT: {\n      name: \"OUT\",\n      direction: \"output\",\n      x: 25,\n      y: 25,\n    },\n  },\n  interact(state: ToggleState = defaultToggleState) {\n    return {\n      ...state,\n      toggleState: !state.toggleState,\n    };\n  },\n  evolve(state = defaultToggleState, inputs, tick) {\n    return {\n      state,\n      transitions: {\n        tickOffset: 1,\n        valuesByPin: { OUT: state.toggleState },\n      },\n    };\n  },\n};\nexport default toggleElementDefinition;\n","import { ElementType } from \"@/element-defs\";\nimport { Point } from \"@/geometry\";\nimport { NodePin } from \"../circuit-graph/types\";\n\nexport interface CircuitEditorUiState {\n  viewScale: number;\n  // TODO: Drag stuff should probably be its own service.\n  dragMode: \"move\" | \"select\" | \"new-element\" | \"wire\" | null;\n  dragStart: Point | null;\n  dragEnd: Point | null;\n  dragNewElementType: ElementType | null;\n  dragWireSource: NodePin | null;\n}\n\nconst _defaultState: CircuitEditorUiState = {\n  viewScale: 1,\n  dragMode: null,\n  dragStart: null,\n  dragEnd: null,\n  dragNewElementType: null,\n  dragWireSource: null,\n};\n\nexport const defaultCircuitEditorUiState = Object.freeze(_defaultState);\n","import { GraphNode, Connection } from \"./types\";\n\nexport interface CircuitGraphState {\n  /**\n   * A map of nodes by node id.\n   */\n  nodesById: Record<string, GraphNode>;\n\n  /**\n   * A map of connections between nodes, by connection id.\n   */\n  connectionsById: Record<string, Connection>;\n}\n\nconst _defaultState: CircuitGraphState = {\n  nodesById: {},\n  connectionsById: {},\n};\n\nexport const defaultCircuitGraphState = Object.freeze(_defaultState);\n","import { Point } from \"@/geometry\";\n\nexport interface CircuitLayoutState {\n  nodePositionsById: Record<string, Point>;\n  wireJointIdsByConnectionId: Record<string, string[]>;\n  wireJointPositionsByJointId: Record<string, Point>;\n}\n\nconst _defaultState: CircuitLayoutState = {\n  nodePositionsById: {},\n  wireJointIdsByConnectionId: {},\n  wireJointPositionsByJointId: {},\n};\n\nexport const defaultCircuitLayoutState: Readonly<CircuitLayoutState> = Object.freeze(\n  _defaultState\n);\n","import * as yup from \"yup\";\n\nexport interface Point {\n  x: number;\n  y: number;\n}\nexport const pointSchema = yup.object().shape({\n  x: yup.number().required(),\n  y: yup.number().required(),\n});\n\nexport interface Size {\n  width: number;\n  height: number;\n}\n\nexport interface Rectangle {\n  p1: Point;\n  p2: Point;\n}\n\nexport const ZeroPoint = Object.freeze({ x: 0, y: 0 });\nexport const ZeroRect = Object.freeze({ p1: ZeroPoint, p2: ZeroPoint });\n\nexport function magnitude(v: Point): number {\n  return Math.sqrt(v.x * v.x + v.y * v.y);\n}\nexport function normalize(p: Point): Point {\n  const m = magnitude(p);\n  return {\n    x: p.x / m,\n    y: p.y / m,\n  };\n}\n\nexport function dotProduct(a: Point, b: Point): number {\n  return a.x * b.x + a.y * b.y;\n}\n\nexport function scale(p: Point, scaler: number) {\n  return { x: p.x * scaler, y: p.y * scaler };\n}\n\nexport function normalizeRectangle(p1: Point, p2: Point): Rectangle;\nexport function normalizeRectangle(r: Rectangle): Rectangle;\nexport function normalizeRectangle(...args: any[]): Rectangle {\n  let p1: Point;\n  let p2: Point;\n  if (args.length === 1) {\n    const r = args[0] as Rectangle;\n    p1 = r.p1;\n    p2 = r.p2;\n  } else {\n    p1 = args[0] as Point;\n    p2 = args[1] as Point;\n  }\n  return {\n    p1: {\n      x: Math.min(p1.x, p2.x),\n      y: Math.min(p1.y, p2.y),\n    },\n    p2: {\n      x: Math.max(p1.x, p2.x),\n      y: Math.max(p1.y, p2.y),\n    },\n  };\n}\n\nexport function pointAdd(p1: Point, p2: Point): Point {\n  return {\n    x: p1.x + p2.x,\n    y: p1.y + p2.y,\n  };\n}\nexport function pointSubtract(p1: Point, p2: Point): Point {\n  return {\n    x: p1.x - p2.x,\n    y: p1.y - p2.y,\n  };\n}\n\nexport function pointIntersects(p: Point, r: Rectangle): boolean {\n  r = normalizeRectangle(r);\n\n  if (r.p1.x > p.x || r.p2.x < p.x) {\n    return false;\n  }\n\n  if (r.p1.y > p.y || r.p2.y < p.y) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function calcSize(r: Rectangle): Size {\n  r = normalizeRectangle(r);\n  return {\n    width: r.p2.x - r.p1.x,\n    height: r.p2.y - r.p1.y,\n  };\n}\n\nexport function union(r1: Rectangle, r2: Rectangle): Rectangle {\n  r1 = normalizeRectangle(r1);\n  r2 = normalizeRectangle(r2);\n  return {\n    p1: {\n      x: Math.min(r1.p1.x, r2.p1.x),\n      y: Math.min(r1.p1.y, r2.p1.y),\n    },\n    p2: {\n      x: Math.max(r1.p2.x, r2.p2.x),\n      y: Math.max(r1.p2.y, r2.p2.y),\n    },\n  };\n}\n\nexport function intersects(r1: Rectangle, r2: Rectangle): boolean {\n  r1 = normalizeRectangle(r1);\n  r2 = normalizeRectangle(r2);\n\n  // r1 starts after p2's extent, or does not reach r2's start.\n  if (r1.p1.x > r2.p2.x || r1.p2.x < r2.p1.x) {\n    return false;\n  }\n\n  // r1 starts after p2's extent, or does not reach r2's start.\n  if (r1.p1.y > r2.p2.y || r1.p2.y < r2.p1.y) {\n    return false;\n  }\n\n  return true;\n}\n","import { Point, ZeroPoint } from \"@/geometry\";\n\nimport { ClipboardNode } from \"./types\";\n\nexport interface ClipboardState {\n  clipboardNodes: ClipboardNode[];\n  clipboardPasteOrigin: Point;\n}\n\nexport const defaultClipboardState: Readonly<ClipboardState> = Object.freeze({\n  clipboardNodes: [],\n  clipboardPasteOrigin: ZeroPoint,\n});\n","export interface DialogBaseState {\n  dialogType: string | null;\n  data: any;\n}\n\nexport interface NoDialogState extends DialogBaseState {\n  dialogType: null;\n  data: null;\n}\n\nexport interface SaveFileDialogState extends DialogBaseState {\n  dialogType: \"save-project\";\n  data: null;\n}\n\nexport type DialogState = NoDialogState | SaveFileDialogState;\nexport type DialogType = DialogState[\"dialogType\"];\n\nconst _defaultState: NoDialogState = {\n  dialogType: null,\n  data: null,\n};\n\nexport const defaultDialogState: Readonly<NoDialogState> = Object.freeze(\n  _defaultState\n);\n","export interface SelectionState {\n  selectedNodeIds: string[];\n  selectedConnectionIds: string[];\n  selectedJointIds: string[];\n}\n\nconst _defaultState: SelectionState = {\n  selectedNodeIds: [],\n  selectedConnectionIds: [],\n  selectedJointIds: [],\n};\n\nexport const defaultSelectionState = Object.freeze(_defaultState);\n","import { SimNodePinTransition, SimTransitionWindow } from \"./types\";\n\nexport interface SimulatorState {\n  /**\n   * The overall application mode.\n   * Might not belong in simulator state?\n   *\n   * - edit: User is editing, no simulator is running\n   * - step: Sim is paused and only ticks on user command\n   * - run: Sim is actively running and ticking forwards on its own.\n   */\n  mode: \"edit\" | \"pause\" | \"run\";\n\n  /**\n   * Tick speed in ticks per second when running.\n   */\n  ticksPerSecond: number;\n\n  /**\n   * The current tick the simulator is on.\n   */\n  tick: number;\n\n  /**\n   * A map of node states by node id.\n   */\n  nodeStatesByNodeId: Record<string, any>;\n\n  /**\n   * A map of output-to-value maps by node id.\n   */\n  nodeOutputValuesByNodeId: Record<string, Record<string, boolean>>;\n\n  /**\n   * A map of pending transitions by id.\n   */\n  transitionsById: Record<string, SimNodePinTransition>;\n\n  /**\n   * Transition windows in ascending order of tick.\n   */\n  transitionWindows: SimTransitionWindow[];\n}\n\nconst _defaultState: SimulatorState = {\n  mode: \"edit\",\n  ticksPerSecond: 100,\n  tick: 0,\n  nodeStatesByNodeId: {},\n  nodeOutputValuesByNodeId: {},\n  transitionsById: {},\n  transitionWindows: [],\n};\n\nexport const defaultSimulatorState = Object.freeze(_defaultState);\n","import {\n  CircuitEditorUiState,\n  defaultCircuitEditorUiState,\n} from \"@/services/circuit-editor-ui/state\";\nimport {\n  CircuitGraphState,\n  defaultCircuitGraphState,\n} from \"@/services/circuit-graph/state\";\nimport {\n  CircuitLayoutState,\n  defaultCircuitLayoutState,\n} from \"@/services/circuit-layout/state\";\nimport {\n  ClipboardState,\n  defaultClipboardState,\n} from \"@/services/clipboard/state\";\nimport { DialogState, defaultDialogState } from \"@/services/dialog/state\";\nimport {\n  SelectionState,\n  defaultSelectionState,\n} from \"@/services/selection/state\";\nimport {\n  SimulatorState,\n  defaultSimulatorState,\n} from \"@/services/simulator/state\";\n\nexport interface AppState {\n  services: {\n    circuitEditorUi: CircuitEditorUiState;\n    circuitGraph: CircuitGraphState;\n    circuitLayout: CircuitLayoutState;\n    clipboard: ClipboardState;\n    dialog: DialogState;\n    selection: SelectionState;\n    simulator: SimulatorState;\n  };\n}\n\nconst _defaultAppState: AppState = {\n  services: {\n    circuitEditorUi: defaultCircuitEditorUiState,\n    circuitGraph: defaultCircuitGraphState,\n    circuitLayout: defaultCircuitLayoutState,\n    clipboard: defaultClipboardState,\n    dialog: defaultDialogState,\n    selection: defaultSelectionState,\n    simulator: defaultSimulatorState,\n  },\n};\n\nexport const defaultAppState = Object.freeze(_defaultAppState);\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_INIT = \"@init\";\nexport const doInit = () => ({ type: ACTION_INIT });\nexport type InitAction = ReturnType<typeof doInit>;\nexport function isInitAction(action: AnyAction): action is InitAction {\n  return action.type === ACTION_INIT;\n}\n","import { AnyAction } from \"redux\";\nimport { Point } from \"@/geometry\";\n\nexport const ACTION_FIELD_DRAG_CONTINUE = \"@field/drag/continue\" as const;\nexport const fieldDragContinue = (p: Point) => ({\n  type: ACTION_FIELD_DRAG_CONTINUE,\n  payload: p,\n});\nexport type FieldDragContinueAction = ReturnType<typeof fieldDragContinue>;\nexport function isFieldDragContinueAction(\n  action: AnyAction\n): action is FieldDragContinueAction {\n  return action.type === ACTION_FIELD_DRAG_CONTINUE;\n}\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_FIELD_MOUSE_LEAVE = \"@field/mouse/leave\" as const;\nexport const fieldMouseLeave = () => ({\n  type: ACTION_FIELD_MOUSE_LEAVE,\n});\nexport type FieldMouseLeaveAction = ReturnType<typeof fieldMouseLeave>;\nexport function isFieldMouseLeaveAction(\n  action: AnyAction\n): action is FieldMouseLeaveAction {\n  return action.type === ACTION_FIELD_MOUSE_LEAVE;\n}\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_SIM_TICK = \"@sim/tick\" as const;\nexport const tickSim = (tickCount: number) => ({\n  type: ACTION_SIM_TICK,\n  payload: { tickCount },\n});\nexport type TickSimAction = ReturnType<typeof tickSim>;\nexport function isTickSimAction(action: AnyAction): action is TickSimAction {\n  return action.type === ACTION_SIM_TICK;\n}\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_VIEW_ZOOM = \"@view/zoom\" as const;\nexport const viewZoom = (delta: number) => ({\n  type: ACTION_VIEW_ZOOM,\n  payload: { delta },\n});\nexport type ViewZoomAction = ReturnType<typeof viewZoom>;\nexport function isViewZoomAction(action: AnyAction): action is ViewZoomAction {\n  return action.type === ACTION_VIEW_ZOOM;\n}\n","import { AnyAction } from \"redux\";\n\nimport { AppState } from \"@/store\";\n\nimport { ACTION_FIELD_DRAG_CONTINUE } from \"@/actions/field-drag-continue\";\nimport { ACTION_FIELD_MOUSE_LEAVE } from \"@/actions/field-mouse-leave\";\nimport { ACTION_SIM_TICK } from \"@/actions/sim-tick\";\nimport { ACTION_VIEW_ZOOM } from \"@/actions/view-zoom\";\n\nexport const actionsBlacklist: string[] = [\n  ACTION_FIELD_DRAG_CONTINUE,\n  ACTION_FIELD_MOUSE_LEAVE,\n  ACTION_SIM_TICK,\n  ACTION_VIEW_ZOOM,\n];\n\nexport function actionSanitizer(action: AnyAction): AnyAction {\n  return action;\n}\n\nexport function stateSanitizer(state: AppState): any {\n  return state;\n}\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_PROJECT_LOAD = \"@project/load\" as const;\nexport const loadProject = () => ({\n  type: ACTION_PROJECT_LOAD,\n});\nexport type LoadProjectAction = ReturnType<typeof loadProject>;\nexport function isLoadProjectAction(\n  action: AnyAction\n): action is LoadProjectAction {\n  return action.type === ACTION_PROJECT_LOAD;\n}\n","import { AnyAction } from \"redux\";\n\nimport { SaveData } from \"@/services/savedata/types\";\n\nexport const ACTION_PROJECT_RECEIVE = \"@project/receive\" as const;\nexport const receiveProject = (saveData: SaveData) => ({\n  type: ACTION_PROJECT_RECEIVE,\n  payload: { saveData },\n});\nexport type ReceiveProjectAction = ReturnType<typeof receiveProject>;\nexport function isReceiveProjectAction(\n  action: AnyAction\n): action is ReceiveProjectAction {\n  return action.type === ACTION_PROJECT_RECEIVE;\n}\n","import { call, put, takeEvery } from \"redux-saga/effects\";\nimport fileDialog from \"file-dialog\";\n\nimport { ACTION_PROJECT_LOAD } from \"@/actions/project-load\";\nimport { receiveProject } from \"@/actions/project-receive\";\n\nimport { SaveData } from \"../types\";\n\nexport default function* projectLoadSaga() {\n  yield takeEvery(ACTION_PROJECT_LOAD, loadProject);\n}\n\nfunction* loadProject() {\n  try {\n    const [file]: File[] = yield call(fileDialog, {\n      accept: \"application/json\",\n    });\n    const contents = yield call(file.text.bind(file));\n    const saveData: SaveData = JSON.parse(contents);\n    yield put(receiveProject(saveData));\n  } catch (e) {\n    // TODO: Handle error\n    console.warn(\"Failed to load project:\", e);\n  }\n}\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_PROJECT_SAVE = \"@project/save\" as const;\nexport const saveProject = () => ({\n  type: ACTION_PROJECT_SAVE,\n});\nexport type SaveProjectAction = ReturnType<typeof saveProject>;\nexport function isSaveProjectAction(\n  action: AnyAction\n): action is SaveProjectAction {\n  return action.type === ACTION_PROJECT_SAVE;\n}\n","import { AnyAction } from \"redux\";\n\nimport { DialogType } from \"@/services/dialog/state\";\n\nexport const ACTION_DIALOG_SHOW = \"@dialog/show\" as const;\nexport const showDialog = (dialogType: DialogType, data: any) => ({\n  type: ACTION_DIALOG_SHOW,\n  payload: { dialogType, data },\n});\nexport type ShowDialogAction = ReturnType<typeof showDialog>;\nexport function isShowDialogAction(\n  action: AnyAction\n): action is ShowDialogAction {\n  return action.type === ACTION_DIALOG_SHOW;\n}\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_DIALOG_RESPONSE_ACCEPT = \"@dialog/response/accept\" as const;\nexport const acceptDialog = (result: any) => ({\n  type: ACTION_DIALOG_RESPONSE_ACCEPT,\n  payload: { result },\n});\nexport type AcceptDialogAction = ReturnType<typeof acceptDialog>;\nexport function isAcceptDialogAction(\n  action: AnyAction\n): action is AcceptDialogAction {\n  return action.type === ACTION_DIALOG_RESPONSE_ACCEPT;\n}\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_DIALOG_RESPONSE_CANCEL = \"@dialog/response/cancel\" as const;\nexport const cancelDialog = () => ({\n  type: ACTION_DIALOG_RESPONSE_CANCEL,\n});\nexport type CancelDialogAction = ReturnType<typeof cancelDialog>;\nexport function isCancelDialogAction(\n  action: AnyAction\n): action is CancelDialogAction {\n  return action.type === ACTION_DIALOG_RESPONSE_CANCEL;\n}\n","import { SagaIterator } from \"redux-saga\";\nimport { put, take } from \"redux-saga/effects\";\n\nimport { showDialog } from \"@/actions/dialog-show\";\n\nimport { DialogType } from \"./state\";\nimport {\n  AcceptDialogAction,\n  ACTION_DIALOG_RESPONSE_ACCEPT,\n} from \"@/actions/dialog-response-accept\";\nimport {\n  CancelDialogAction,\n  ACTION_DIALOG_RESPONSE_CANCEL,\n} from \"@/actions/dialog-response-cancel\";\n\nexport function* displayDialogSaga(\n  dialogType: DialogType,\n  data: any\n): SagaIterator<any> {\n  yield put(showDialog(dialogType, data));\n  const response: AcceptDialogAction | CancelDialogAction = yield take([\n    ACTION_DIALOG_RESPONSE_ACCEPT,\n    ACTION_DIALOG_RESPONSE_CANCEL,\n  ]);\n\n  if (response.type === ACTION_DIALOG_RESPONSE_ACCEPT) {\n    return response.payload.result;\n  }\n\n  return null;\n}\n","import * as yup from \"yup\";\n\nimport { ElementType } from \"@/element-defs\";\n\nexport interface GraphNodeBase {\n  type: string;\n}\n\nexport interface ElementGraphNode extends GraphNodeBase {\n  type: \"element\";\n  elementType: ElementType;\n}\n\nexport type GraphNode = ElementGraphNode;\n\n/**\n * Identifies a pin on a specific node.\n */\nexport interface NodePin {\n  nodeId: string;\n  pinId: string;\n}\nexport const nodePinSchema = yup.object().shape({\n  nodeId: yup.string().required().min(1),\n  pinId: yup.string().required().min(1),\n});\nexport function nodePinEquals(a: NodePin, b: NodePin) {\n  return a.nodeId === b.nodeId && a.pinId === b.pinId;\n}\n\n/**\n * A connection from a node output to a node input.\n */\nexport interface Connection {\n  outputPin: NodePin;\n  inputPin: NodePin;\n}\n","import * as yup from \"yup\";\n\nimport { ElementType } from \"@/element-defs\";\nimport { Point, pointSchema } from \"@/geometry\";\n\nimport { NodePin, nodePinSchema } from \"../circuit-graph/types\";\n\nexport interface SaveNode {\n  nodeId: string;\n  elementType: ElementType;\n  x: number;\n  y: number;\n}\nexport const saveNodeSchema = yup.object().shape({\n  nodeId: yup.string().required().min(1),\n  elementType: yup.string().required().min(1), // TODO: Check for valid element types\n  x: yup.number().required(),\n  y: yup.number().required(),\n});\n\nexport interface SaveWire {\n  output: NodePin;\n  input: NodePin;\n  joints: Point[];\n}\nexport const saveWireSchema = yup.object().shape({\n  output: nodePinSchema.required(),\n  input: nodePinSchema.required(),\n  // Cannot make this required, as yup says required on an array is min length 1...\n  joints: yup.array().of(pointSchema),\n});\n\nexport interface SaveData {\n  nodes: SaveNode[];\n  wires: SaveWire[];\n}\nexport const saveDataSchema = yup.object().shape({\n  // Cannot make any of these required, as yup says required on an array is min length 1...\n  nodes: yup.array().of(saveNodeSchema),\n  wires: yup.array().of(saveWireSchema),\n});\n","import { AnyAction } from \"redux\";\nimport sortBy from \"lodash/sortBy\";\n\nimport { MaybeArray } from \"@/arrays\";\n\nimport { AppState, defaultAppState } from \"./state\";\nimport { AppReducer } from \"./types\";\n\nexport function concatReducers(\n  ...reducers: MaybeArray<AppReducer>[]\n): AppReducer[] {\n  // Previously, this was reduceReducers and generated a reducer\n  //  that invokes each child reducer.\n  // However, we need to be able to order reducers across services,\n  //  so we must now aggregate a list of reducers and do a final ordering\n  //  step after all are collected.\n  return ([] as AppReducer[]).concat(...reducers);\n}\n\nexport function finalizeReducerList(reducers: AppReducer[]): AppReducer {\n  // Order the list by weight ascending.\n  const finalizedList = sortBy(reducers, (x: AppReducer) => x.weight || 0);\n\n  return (state: AppState = defaultAppState, action: AnyAction) => {\n    return finalizedList.reduce(\n      (state, reducer) => reducer(state, action),\n      state\n    );\n  };\n}\n","export function cls(...values: (string | false | undefined)[]): string {\n  return values.filter((x) => Boolean(x) && x != \"\").join(\" \");\n}\n\nexport function typedKeys<T extends object>(obj: T): (keyof T)[] {\n  return Object.keys(obj) as (keyof T)[];\n}\n\nexport type ValueSetter<T> = T | ((old: T) => T);\n\nexport function fpSet<\n  Target extends Record<string, any> | any[],\n  P1 extends keyof Target,\n  T extends Target[P1]\n>(target: Target, p1: P1, value: ValueSetter<T>): Target;\nexport function fpSet<\n  Target extends Record<string, any> | any[],\n  P1 extends keyof Target,\n  P2 extends keyof Target[P1],\n  T extends Target[P1][P2]\n>(target: Target, p1: P1, p2: P2, value: ValueSetter<T>): Target;\nexport function fpSet<\n  Target extends Record<string, any> | any[],\n  P1 extends keyof Target,\n  P2 extends keyof Target[P1],\n  P3 extends keyof Target[P1][P2],\n  T extends Target[P1][P2][P3]\n>(target: Target, p1: P1, p2: P2, p3: P3, value: ValueSetter<T>): Target;\nexport function fpSet(...args: any[]) {\n  let target = args[0];\n  const firstPaths = args.slice(1, args.length - 2).map(String);\n  const lastPath = args[args.length - 2];\n  const value = args[args.length - 1];\n\n  const newData = clone(target);\n  target = newData;\n\n  for (const seg of firstPaths) {\n    target[seg] = clone(target[seg]);\n    target = target[seg];\n  }\n\n  if (typeof value === \"function\") {\n    target[lastPath] = value(target[lastPath]);\n  } else {\n    target[lastPath] = value;\n  }\n\n  return newData;\n}\n\nfunction clone<T extends object | any[]>(obj: T): T {\n  if (Array.isArray(obj)) {\n    return [...obj] as T;\n  }\n  return { ...obj };\n}\n","import { AnyAction, Reducer } from \"redux\";\n\nimport { AppState, defaultAppState } from \"@/store\";\nimport { fpSet } from \"@/utils\";\n\nexport type ServiceKey = keyof AppState[\"services\"];\nexport type ServiceState<\n  TServiceKey extends ServiceKey\n> = AppState[\"services\"][TServiceKey];\n\nexport interface ServiceReducer<TServiceState> {\n  (\n    state: Readonly<TServiceState>,\n    action: AnyAction,\n    appState: AppState\n  ): TServiceState;\n}\n\nexport function createServiceReducerCreator<TServiceKey extends ServiceKey>(\n  service: TServiceKey\n): (\n  reducer: ServiceReducer<AppState[\"services\"][TServiceKey]>\n) => Reducer<AppState, AnyAction> {\n  return (reducer: ServiceReducer<AppState[\"services\"][TServiceKey]>) => {\n    return (state: AppState = defaultAppState, action: AnyAction) => {\n      const newState = reducer(state.services[service], action, state);\n      if (state.services[service] != newState) {\n        return fpSet(state, \"services\", service, newState);\n      }\n      return state;\n    };\n  };\n}\n\nexport interface ServiceSelectorA0<TServiceKey extends ServiceKey, TReturn> {\n  (s: AppState): TReturn;\n  local(s: ServiceState<TServiceKey>): TReturn;\n}\n\nexport interface ServiceSelectorA1<\n  TServiceKey extends ServiceKey,\n  TA1,\n  TReturn\n> {\n  (s: AppState, a1: TA1): TReturn;\n  local(s: ServiceState<TServiceKey>, a1: TA1): TReturn;\n}\n\nexport interface ServiceSelectorA2<\n  TServiceKey extends ServiceKey,\n  TA1,\n  TA2,\n  TReturn\n> {\n  (s: AppState, a1: TA1, a2: TA2): TReturn;\n  local(s: ServiceState<TServiceKey>, a1: TA1, a2: TA2): TReturn;\n}\n\nexport interface ServiceSelectorCreator<TServiceKey extends ServiceKey> {\n  <TReturn>(\n    selector: (s: ServiceState<TServiceKey>) => TReturn\n  ): ServiceSelectorA0<TServiceKey, TReturn>;\n  <TA1, TReturn>(\n    selector: (s: ServiceState<TServiceKey>, a1: TA1) => TReturn\n  ): ServiceSelectorA1<TServiceKey, TA1, TReturn>;\n  <TA1, TA2, TReturn>(\n    selector: (s: ServiceState<TServiceKey>, a1: TA1, a2: TA2) => TReturn\n  ): ServiceSelectorA2<TServiceKey, TA1, TA2, TReturn>;\n}\n\nexport function createServiceSelectorCreator<TServiceKey extends ServiceKey>(\n  service: TServiceKey\n): ServiceSelectorCreator<TServiceKey> {\n  return <TArgs, TReturn>(\n    selector: (s: ServiceState<TServiceKey>, ...args: TArgs[]) => TReturn\n  ) => {\n    const appSelector: any = (s: AppState, ...args: TArgs[]) =>\n      selector(s.services[service], ...args);\n    appSelector.local = selector;\n    return appSelector;\n  };\n}\n","import {\n  createServiceReducerCreator,\n  createServiceSelectorCreator,\n} from \"../service-state-utils\";\n\nexport const createCircuitEditorUiReducer = createServiceReducerCreator(\n  \"circuitEditorUi\"\n);\nexport const createCircuitEditorUiSelector = createServiceSelectorCreator(\n  \"circuitEditorUi\"\n);\n","import { isFieldDragContinueAction } from \"@/actions/field-drag-continue\";\n\nimport { createCircuitEditorUiReducer } from \"../utils\";\n\nexport default createCircuitEditorUiReducer((state, action) => {\n  if (!isFieldDragContinueAction(action)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    dragEnd: action.payload,\n  };\n});\n","import { AnyAction } from \"redux\";\n\nimport { Point } from \"@/geometry\";\nimport { SelectionMode } from \"@/selection-mode\";\n\nexport const ACTION_FIELD_DRAG_END = \"@field/drag/end\" as const;\nexport const fieldDragEnd = (point: Point, selectionMode: SelectionMode) => ({\n  type: ACTION_FIELD_DRAG_END,\n  payload: { ...point, selectionMode },\n});\nexport type FieldDragEndAction = ReturnType<typeof fieldDragEnd>;\nexport function isFieldDragEndAction(\n  action: AnyAction\n): action is FieldDragEndAction {\n  return action.type === ACTION_FIELD_DRAG_END;\n}\n","import { AnyAction } from \"redux\";\n\nimport { Rectangle } from \"@/geometry\";\nimport { SelectionMode } from \"@/selection-mode\";\n\nexport const ACTION_SELECT_REGION = \"@select/region\" as const;\nexport const selectRegion = (\n  region: Rectangle,\n  mode: SelectionMode = \"set\"\n) => ({\n  type: ACTION_SELECT_REGION,\n  payload: {\n    region,\n    mode,\n  },\n});\nexport type SelectRegionAction = ReturnType<typeof selectRegion>;\nexport function isSelectRegionAction(\n  action: AnyAction\n): action is SelectRegionAction {\n  return action.type === ACTION_SELECT_REGION;\n}\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_SELECTION_MOVE = \"@selection/move\" as const;\nexport const moveSelection = (offsetX: number, offsetY: number) => ({\n  type: ACTION_SELECTION_MOVE,\n  payload: { offsetX, offsetY },\n});\nexport type MoveSelectionAction = ReturnType<typeof moveSelection>;\nexport function isMoveSelectionAction(\n  action: AnyAction\n): action is MoveSelectionAction {\n  return action.type === ACTION_SELECTION_MOVE;\n}\n","import { v4 as uuidV4 } from \"uuid\";\nimport { AnyAction } from \"redux\";\n\nimport { ElementType } from \"@/element-defs\";\nimport { Point } from \"@/geometry\";\n\nexport interface AddElementOptions {\n  nodeId?: string;\n  position?: Point;\n}\nexport const ACTION_ELEMENT_ADD = \"@element/add\" as const;\nexport const addElement = (\n  elementType: ElementType,\n  opts?: AddElementOptions\n) => ({\n  type: ACTION_ELEMENT_ADD,\n  payload: { nodeId: uuidV4(), elementType, ...(opts || {}) },\n});\nexport type AddElementAction = ReturnType<typeof addElement>;\nexport function isAddElementAction(\n  action: AnyAction\n): action is AddElementAction {\n  return action.type === ACTION_ELEMENT_ADD;\n}\n","import { AnyAction } from \"redux\";\nimport { v4 as uuidV4 } from \"uuid\";\n\nimport { Point } from \"@/geometry\";\n\nimport { NodePin } from \"@/services/circuit-graph/types\";\n\nexport interface AttachWireOptions {\n  joints?: Point[];\n}\nexport const ACTION_WIRE_ATTACH = \"@wire/attach\" as const;\nexport const attachWire = (\n  p1: NodePin,\n  p2: NodePin,\n  opts?: AttachWireOptions\n) => ({\n  type: ACTION_WIRE_ATTACH,\n  payload: {\n    connectionId: uuidV4(),\n    p1,\n    p2,\n    joints: opts?.joints || [],\n  },\n});\nexport type AttachWireAction = ReturnType<typeof attachWire>;\nexport function isAttachWireAction(\n  action: AnyAction\n): action is AttachWireAction {\n  return action.type === ACTION_WIRE_ATTACH;\n}\n","import { Point } from \"@/geometry\";\nimport { AppState } from \"@/store\";\nimport { createCircuitEditorUiSelector } from \"../utils\";\n\nexport const gridSnapSelector = createCircuitEditorUiSelector((s) => 50);\n\nexport const applyGridSnapSelector = (s: AppState, p: Point) => {\n  const snap = gridSnapSelector(s);\n  return {\n    x: Math.round(p.x / snap) * snap,\n    y: Math.round(p.y / snap) * snap,\n  };\n};\n","import pickBy from \"lodash/pickBy\";\n\nimport {\n  ElementVisualPath,\n  ElementDefinition,\n  ElementPinDefinition,\n} from \"./types\";\n\nexport function normalizeVisuals(\n  v: ElementVisualPath | ElementVisualPath[],\n  state: any\n): { path: string; fill?: string; stroke?: string; strokeWidth?: number }[] {\n  const asArray = Array.isArray(v) ? v : [v];\n\n  return asArray.map((x) => {\n    if (typeof x === \"string\") {\n      return {\n        path: x,\n        fill: \"black\",\n        stroke: \"black\",\n        strokeWidth: 2,\n      };\n    }\n    const fill = typeof x.fill === \"function\" ? x.fill(state || {}) : x.fill;\n    const stroke =\n      typeof x.stroke === \"function\" ? x.stroke(state || {}) : x.stroke;\n    const strokeWidth =\n      typeof x.strokeWidth === \"function\"\n        ? x.strokeWidth(state || {})\n        : x.strokeWidth;\n    return {\n      path: x.path,\n      fill,\n      stroke,\n      strokeWidth,\n    };\n  });\n}\n\nexport function inputsOf(\n  def: ElementDefinition\n): Record<string, ElementPinDefinition> {\n  return pickBy(def.pins, (value) => value.direction === \"input\") as Record<\n    string,\n    ElementPinDefinition\n  >;\n}\n\nexport function outputsOf(\n  def: ElementDefinition\n): Record<string, ElementPinDefinition> {\n  return pickBy(def.pins, (value) => value.direction === \"output\") as Record<\n    string,\n    ElementPinDefinition\n  >;\n}\n","import values from \"lodash/values\";\nimport getBounds from \"svg-path-bounds\";\n\nimport { calcSize, union, ZeroRect } from \"@/geometry\";\n\nimport { ElementDefinition } from \"./types\";\nimport { normalizeVisuals } from \"./utils\";\n\nexport * from \"./types\";\n\n// Many of these art assets used in these files are public domain and sourced from\n//  https://commons.wikimedia.org/wiki/Logic_gates_unified_symbols\n// Some assets have been modified for formatting or added functionality.\n// Assets that have been pulled from external sources are marked as such.\n\nexport const ElementDefinitionsByType = {\n  and: require(\"./element-and\").default as ElementDefinition,\n  or: require(\"./element-or\").default as ElementDefinition,\n  nor: require(\"./element-nor\").default as ElementDefinition,\n  not: require(\"./element-not\").default as ElementDefinition,\n  buffer: require(\"./element-buffer\").default as ElementDefinition,\n  led: require(\"./element-led\").default as ElementDefinition,\n  toggle: require(\"./element-toggle\").default as ElementDefinition,\n  seg7: require(\"./element-seg7\").default as ElementDefinition,\n};\nexport type ElementType = keyof typeof ElementDefinitionsByType;\n\nexport const LargestElementSize = calcSize(\n  values(ElementDefinitionsByType).reduce((bounds, { visual }) => {\n    const visuals = normalizeVisuals(visual.shapePath, undefined);\n    if (visual.hitPath) {\n      visuals.push({ path: visual.hitPath });\n    }\n    const rect = visuals\n      .map((path) => {\n        const bounds = getBounds(path.path);\n        return {\n          p1: {\n            x: bounds[0],\n            y: bounds[1],\n          },\n          p2: {\n            x: bounds[2],\n            y: bounds[3],\n          },\n        };\n      })\n      .reduce(union, ZeroRect);\n    return union(bounds, rect);\n  }, ZeroRect)\n);\n","import find from \"lodash/find\";\n\nimport { ElementDefinitionsByType } from \"@/element-defs\";\n\nimport {\n  createServiceReducerCreator,\n  createServiceSelectorCreator,\n} from \"../service-state-utils\";\nimport { CircuitGraphState } from \"./state\";\nimport { NodePin, Connection } from \"./types\";\n\nexport const createCircuitGraphReducer = createServiceReducerCreator(\n  \"circuitGraph\"\n);\nexport const createCircuitGraphSelector = createServiceSelectorCreator(\n  \"circuitGraph\"\n);\n\n/**\n * Check two pins to see if they can form a valid connection.\n * Returns null if no connection can be made (both inputs or both outputs)\n *\n * Does not check to see if the pins are already connected, or other connections prevent this connection from forming.\n */\nexport function pinsToConnection(\n  state: CircuitGraphState,\n  p1: NodePin,\n  p2: NodePin\n): Connection | null {\n  const p1Node = state.nodesById[p1.nodeId];\n  const p2Node = state.nodesById[p2.nodeId];\n\n  if (!p1Node || !p2Node) {\n    return null;\n  }\n\n  const p1Def = ElementDefinitionsByType[p1Node.elementType];\n  const p2Def = ElementDefinitionsByType[p2Node.elementType];\n\n  if (!p1Def || !p2Def) {\n    return null;\n  }\n\n  const p1Pin = find(p1Def.pins, (x) => x.name == p1.pinId);\n  const p2Pin = find(p2Def.pins, (x) => x.name == p2.pinId);\n\n  if (!p1Pin || !p2Pin) {\n    return null;\n  }\n\n  // Pins are in same direction and cannot be connected.\n  if (p1Pin.direction === p2Pin.direction) {\n    return null;\n  }\n\n  const outputPin = p1Pin.direction === \"output\" ? p1 : p2;\n  const inputPin = p1Pin.direction === \"input\" ? p1 : p2;\n\n  return {\n    outputPin,\n    inputPin,\n  };\n}\n","import { createSelector } from \"reselect\";\nimport mapValues from \"lodash/mapValues\";\n\nimport { ElementDefinitionsByType, ElementType } from \"@/element-defs\";\n\nimport { createCircuitGraphSelector } from \"../utils\";\nimport { CircuitGraphState } from \"../state\";\nimport { NodePin, GraphNode } from \"../types\";\n\nexport const nodesByNodeIdSelector = createCircuitGraphSelector(\n  (s) => s.nodesById\n);\n\nexport const nodeIdsSelector = createCircuitGraphSelector(\n  createSelector(\n    nodesByNodeIdSelector.local,\n    (nodesById: Record<string, GraphNode>) => Object.keys(nodesById)\n  )\n);\n\nexport const elementTypesByNodeIdSelector = createCircuitGraphSelector(\n  createSelector(\n    nodesByNodeIdSelector.local,\n    (nodesById: Record<string, GraphNode>) =>\n      mapValues(nodesById, (x) => x.elementType)\n  )\n);\n\nexport const nodeFromNodeIdSelector = createCircuitGraphSelector(\n  (s: CircuitGraphState, nodeId: string) => s.nodesById[nodeId] || null\n);\n\nexport const elementTypeFromNodeIdSelector = createCircuitGraphSelector(\n  (s: CircuitGraphState, nodeId: string) => {\n    const node = nodeFromNodeIdSelector.local(s, nodeId);\n    if (!node) {\n      return null;\n    }\n    return node.elementType;\n  }\n);\n\nexport const elementDefFromNodeIdSelector = createCircuitGraphSelector(\n  (s: CircuitGraphState, nodeId: string) => {\n    const node = nodeFromNodeIdSelector.local(s, nodeId);\n    if (!node) {\n      return null;\n    }\n    return ElementDefinitionsByType[node.elementType] || null;\n  }\n);\n\nexport const nodePinsSelector = createCircuitGraphSelector(\n  createSelector(\n    (s) => s.nodesById,\n    (nodesById: Record<string, GraphNode>) => {\n      const pins: NodePin[] = [];\n      for (const nodeId of Object.keys(nodesById)) {\n        const node = nodesById[nodeId];\n        const def = ElementDefinitionsByType[node.elementType];\n        if (def) {\n          pins.push(\n            ...Object.keys(def.pins).map((pin) => ({\n              nodeId: nodeId,\n              pinId: pin,\n            }))\n          );\n        }\n      }\n      return pins;\n    }\n  )\n);\n","import {\n  createServiceReducerCreator,\n  createServiceSelectorCreator,\n} from \"../service-state-utils\";\n\nexport const createCircuitLayoutReducer = createServiceReducerCreator(\n  \"circuitLayout\"\n);\nexport const createCircuitLayoutSelector = createServiceSelectorCreator(\n  \"circuitLayout\"\n);\n","import { createSelector } from \"reselect\";\nimport createCachedSelector from \"re-reselect\";\n\nimport { AppState } from \"@/store\";\n\nimport {\n  ElementDefinition,\n  ElementDefinitionsByType,\n  ElementType,\n} from \"@/element-defs\";\nimport { Point, pointAdd, ZeroPoint } from \"@/geometry\";\n\nimport { NodePin } from \"@/services/circuit-graph/types\";\nimport {\n  elementDefFromNodeIdSelector,\n  elementTypesByNodeIdSelector,\n} from \"@/services/circuit-graph/selectors/nodes\";\n\nimport { createCircuitLayoutSelector } from \"../utils\";\nimport { CircuitLayoutState } from \"../state\";\n\nexport const nodePositionsByNodeIdSelector = createCircuitLayoutSelector(\n  (state) => state.nodePositionsById\n);\n\nexport const nodePositionFromNodeIdSelector = createCircuitLayoutSelector(\n  (state: CircuitLayoutState, nodeId: string) => state.nodePositionsById[nodeId]\n);\n\nexport const nodePinPositionsByPinIdByNodeIdSelector = createSelector(\n  nodePositionsByNodeIdSelector,\n  elementTypesByNodeIdSelector,\n  (\n    nodePositionsByNodeId: Record<string, Point>,\n    elementTypesByNodeId: Record<string, ElementType>\n  ) => {\n    const nodePinPositionsByPinIdByNodeId: Record<\n      string,\n      Record<string, Point>\n    > = {};\n\n    const nodeIds = Object.keys(elementTypesByNodeId);\n    for (const nodeId of nodeIds) {\n      const nodePinPositionsByPinId: Record<string, Point> = {};\n      nodePinPositionsByPinIdByNodeId[nodeId] = nodePinPositionsByPinId;\n\n      const nodePosition = nodePositionsByNodeId[nodeId] ?? ZeroPoint;\n\n      const elementType = elementTypesByNodeId[nodeId];\n      if (!elementType) {\n        continue;\n      }\n      const def = ElementDefinitionsByType[elementType];\n      if (!def) {\n        continue;\n      }\n\n      const pinIds = Object.keys(def.pins);\n      for (const pinId of pinIds) {\n        const relPinPosition = def.pins[pinId];\n        const pinPosition = pointAdd(nodePosition, relPinPosition);\n        nodePinPositionsByPinId[pinId] = pinPosition;\n      }\n    }\n\n    return nodePinPositionsByPinIdByNodeId;\n  }\n);\n\nexport const nodePinPositionFromNodePinSelector = (\n  state: AppState,\n  nodeId: string,\n  pinId: string\n) => {\n  const positonsByPinIdByNodeId = nodePinPositionsByPinIdByNodeIdSelector(\n    state\n  );\n  const nodePinPositions = positonsByPinIdByNodeId[nodeId];\n  if (!nodePinPositions) {\n    return ZeroPoint;\n  }\n  return nodePinPositions[pinId] ?? ZeroPoint;\n};\n","import { createSelector } from \"reselect\";\n\nimport { magnitude, normalizeRectangle, pointSubtract } from \"@/geometry\";\n\nimport { nodePinPositionsByPinIdByNodeIdSelector } from \"@/services/circuit-layout/selectors/node-positions\";\n\nimport { createCircuitEditorUiSelector } from \"../utils\";\n\nimport { gridSnapSelector } from \"./snap\";\n\nexport const dragModeSelector = createCircuitEditorUiSelector(\n  (s) => s.dragMode\n);\nexport const dragStartSelector = createCircuitEditorUiSelector(\n  (s) => s.dragStart\n);\nexport const dragEndSelector = createCircuitEditorUiSelector((s) => s.dragEnd);\n\nexport const selectionRectSelector = createCircuitEditorUiSelector(\n  createSelector(\n    dragModeSelector.local,\n    dragStartSelector.local,\n    dragEndSelector.local,\n    (dragMode, dragStart, dragEnd) =>\n      dragMode === \"select\" && dragStart && dragEnd\n        ? normalizeRectangle(dragStart, dragEnd)\n        : null\n  )\n);\n\nexport const dragMoveOffsetSelector = createCircuitEditorUiSelector(\n  createSelector(\n    dragModeSelector.local,\n    dragStartSelector.local,\n    dragEndSelector.local,\n    gridSnapSelector.local,\n    (dragMode, dragStart, dragEnd, gridSnap) =>\n      dragMode === \"move\" && dragStart && dragEnd\n        ? {\n            x: Math.round((dragEnd.x - dragStart.x) / gridSnap) * gridSnap,\n            y: Math.round((dragEnd.y - dragStart.y) / gridSnap) * gridSnap,\n          }\n        : null\n  )\n);\n\nexport const isDraggingNewNodeSelector = createCircuitEditorUiSelector(\n  (s) => s.dragMode === \"new-element\"\n);\n\nexport const dragNewNodeTypeSelector = createCircuitEditorUiSelector((s) =>\n  s.dragMode === \"new-element\" ? s.dragNewElementType : null\n);\n\nexport const dragWireTargetPinSelector = createSelector(\n  dragModeSelector,\n  dragEndSelector,\n  nodePinPositionsByPinIdByNodeIdSelector,\n  (dragMode, dragEnd, pinPositionsByPinIdByNodeId) => {\n    if (dragMode !== \"wire\" || !dragEnd) {\n      return null;\n    }\n\n    const nodeIds = Object.keys(pinPositionsByPinIdByNodeId);\n    for (const nodeId of nodeIds) {\n      const pinPositionsByPinId = pinPositionsByPinIdByNodeId[nodeId];\n      const pinIds = Object.keys(pinPositionsByPinId);\n      for (const pinId of pinIds) {\n        const pinPosition = pinPositionsByPinId[pinId];\n        const offset = pointSubtract(dragEnd, pinPosition);\n        const length = magnitude(offset);\n        if (length <= 6) {\n          return { nodeId, pinId };\n        }\n      }\n    }\n\n    return null;\n  }\n);\n","import { AnyAction } from \"redux\";\n\nimport { ElementType } from \"@/element-defs\";\n\nexport const ACTION_FIELD_DRAG_START_NEWNODE = \"@field/drag/start/new-element\" as const;\nexport const fieldDragStartNewNode = (nodeType: ElementType) => ({\n  type: ACTION_FIELD_DRAG_START_NEWNODE,\n  payload: {\n    nodeType,\n  },\n});\nexport type FieldDragStartNewNodeAction = ReturnType<\n  typeof fieldDragStartNewNode\n>;\nexport function isFieldDragStartNewNodeAction(\n  action: AnyAction\n): action is FieldDragStartNewNodeAction {\n  return action.type === ACTION_FIELD_DRAG_START_NEWNODE;\n}\n","import { isFieldDragStartNewNodeAction } from \"@/actions/field-drag-start-newnode\";\n\nimport { createCircuitEditorUiReducer } from \"../utils\";\n\nexport default createCircuitEditorUiReducer((state, action) => {\n  if (!isFieldDragStartNewNodeAction(action)) {\n    return state;\n  }\n\n  const { nodeType } = action.payload;\n\n  return {\n    ...state,\n    dragMode: \"new-element\" as const,\n    dragNewElementType: nodeType,\n  };\n});\n","import { AnyAction } from \"redux\";\n\nimport { Point } from \"@/geometry\";\nimport { SelectionMode } from \"@/selection-mode\";\n\nexport const ACTION_FIELD_DRAG_START_NODE = \"@field/drag/start/node\" as const;\nexport const fieldDragStartNode = (\n  nodeId: string,\n  p: Point,\n  selectionMode: SelectionMode\n) => ({\n  type: ACTION_FIELD_DRAG_START_NODE,\n  payload: {\n    ...p,\n    nodeId,\n    selectionMode,\n  },\n});\nexport type FieldDragStartNodeAction = ReturnType<typeof fieldDragStartNode>;\nexport function isFieldDragStartNodeAction(\n  action: AnyAction\n): action is FieldDragStartNodeAction {\n  return action.type === ACTION_FIELD_DRAG_START_NODE;\n}\n","import { AnyAction } from \"redux\";\n\nimport { SelectionMode } from \"@/selection-mode\";\n\nexport const ACTION_SELECT_NODES = \"@select/nodes\" as const;\nexport const selectNodes = (\n  nodeId: string | string[],\n  mode: SelectionMode = \"set\"\n) => ({\n  type: ACTION_SELECT_NODES,\n  payload: {\n    nodeIds: Array.isArray(nodeId) ? nodeId : [nodeId],\n    mode,\n  },\n});\nexport type SelectNodesAction = ReturnType<typeof selectNodes>;\nexport function isSelectNodesAction(\n  action: AnyAction\n): action is SelectNodesAction {\n  return action.type === ACTION_SELECT_NODES;\n}\n","import union from \"lodash/union\";\nimport difference from \"lodash/difference\";\n\nimport { SelectionMode } from \"@/selection-mode\";\n\nimport {\n  createServiceReducerCreator,\n  createServiceSelectorCreator,\n} from \"../service-state-utils\";\n\nexport const createSelectionReducer = createServiceReducerCreator(\"selection\");\nexport const createSelectionSelector = createServiceSelectorCreator(\n  \"selection\"\n);\n\nexport function combineSelection(\n  selectedIds: string[],\n  chosenIds: string[],\n  mode: SelectionMode\n) {\n  switch (mode) {\n    case \"set\":\n      return chosenIds;\n    case \"append\":\n      return union(selectedIds, chosenIds);\n    case \"remove\":\n      return difference(selectedIds, chosenIds);\n    case \"toggle\": {\n      return difference(selectedIds, chosenIds).concat(\n        difference(chosenIds, selectedIds)\n      );\n    }\n  }\n\n  return chosenIds;\n}\n","import { createSelector } from \"reselect\";\n\nimport pick from \"lodash/pick\";\n\nimport { nodesByNodeIdSelector } from \"@/services/circuit-graph/selectors/nodes\";\n\nimport { createSelectionSelector } from \"../utils\";\nimport { SelectionState } from \"../state\";\n\nexport const selectedNodeIdsSelector = createSelectionSelector(\n  (state) => state.selectedNodeIds\n);\n\nexport const isNodeSelectedFromNodeIdSelector = createSelectionSelector(\n  (s: SelectionState, nodeId: string) =>\n    s.selectedNodeIds.indexOf(nodeId) !== -1\n);\n\nexport const selectedNodesByIdSelector = createSelector(\n  nodesByNodeIdSelector,\n  selectedNodeIdsSelector,\n  (nodesById, selectedNodeIds) => pick(nodesById, selectedNodeIds)\n);\n\nexport const selectedConnectionIdsSelector = createSelectionSelector(\n  (state) => state.selectedConnectionIds\n);\n\nexport const isWireSelectedFromConnectionIdSelector = createSelectionSelector(\n  (s: SelectionState, connectionId: string) =>\n    s.selectedConnectionIds.indexOf(connectionId) !== -1\n);\n\nexport const selectedJointIdsSelector = createSelectionSelector(\n  (state) => state.selectedJointIds\n);\n\nexport const isJointSelectedFromJointIdSelector = createSelectionSelector(\n  (s: SelectionState, jointId: string) =>\n    s.selectedJointIds.indexOf(jointId) !== -1\n);\n","import { AnyAction } from \"redux\";\n\nimport { Point } from \"@/geometry\";\n\nexport const ACTION_FIELD_DRAG_START_SELECT = \"@field/drag/start/select\" as const;\nexport const fieldDragStartSelect = (p: Point) => ({\n  type: ACTION_FIELD_DRAG_START_SELECT,\n  payload: {\n    ...p,\n  },\n});\nexport type FieldDragStartSelectAction = ReturnType<\n  typeof fieldDragStartSelect\n>;\nexport function isFieldDragStartSelectAction(\n  action: AnyAction\n): action is FieldDragStartSelectAction {\n  return action.type === ACTION_FIELD_DRAG_START_SELECT;\n}\n","import { isFieldDragStartSelectAction } from \"@/actions/field-drag-start-select\";\n\nimport { createCircuitEditorUiReducer } from \"../utils\";\n\nexport default createCircuitEditorUiReducer((state, action) => {\n  if (!isFieldDragStartSelectAction(action)) {\n    return state;\n  }\n\n  const { x, y } = action.payload;\n\n  return {\n    ...state,\n    dragMode: \"select\",\n    dragStart: {\n      x,\n      y,\n    },\n  };\n});\n","import { AnyAction } from \"redux\";\n\nimport { Point } from \"@/geometry\";\nimport { NodePin } from \"@/services/circuit-graph/types\";\n\nexport const ACTION_FIELD_DRAG_START_WIRE = \"@field/drag/start/wire\" as const;\nexport const fieldDragStartWire = (dragStart: Point, pin: NodePin) => ({\n  type: ACTION_FIELD_DRAG_START_WIRE,\n  payload: {\n    dragStart,\n    pin,\n  },\n});\nexport type FieldDragStartWireAction = ReturnType<typeof fieldDragStartWire>;\nexport function isFieldDragStartWireAction(\n  action: AnyAction\n): action is FieldDragStartWireAction {\n  return action.type === ACTION_FIELD_DRAG_START_WIRE;\n}\n","import { concatReducers } from \"@/store/utils\";\n\nimport dragContinueReducer from \"./drag-continue\";\nimport dragEndReducer from \"./drag-end\";\nimport dragStartNewNodeReducer from \"./drag-start-newnode\";\nimport dragStartNodeReducer from \"./drag-start-node\";\nimport dragStartSelectReducer from \"./drag-start-select\";\nimport dragStartWireReducer from \"./drag-start-wire\";\nimport mouseLeaveReducer from \"./mouse-leave\";\nimport viewZoomReducer from \"./view-zoom\";\n\nexport default concatReducers(\n  dragContinueReducer,\n  dragEndReducer,\n  dragStartNewNodeReducer,\n  dragStartNodeReducer,\n  dragStartSelectReducer,\n  dragStartWireReducer,\n  mouseLeaveReducer,\n  viewZoomReducer\n);\n","import { AnyAction } from \"redux\";\n\nimport { normalizeRectangle, pointSubtract } from \"@/geometry\";\n\nimport { fpSet } from \"@/utils\";\n\nimport { AppState, defaultAppState } from \"@/store\";\nimport rootReducer from \"@/store/reducer\";\n\nimport { isFieldDragEndAction } from \"@/actions/field-drag-end\";\nimport { selectRegion } from \"@/actions/select-region\";\nimport { moveSelection } from \"@/actions/selection-move\";\nimport { addElement } from \"@/actions/element-add\";\nimport { attachWire } from \"@/actions/wire-attach\";\n\nimport { applyGridSnapSelector } from \"../selectors/snap\";\nimport { dragWireTargetPinSelector } from \"../selectors/drag\";\n\nexport default function dragEndReducer(\n  state: AppState = defaultAppState,\n  action: AnyAction\n) {\n  if (!isFieldDragEndAction(action)) {\n    return state;\n  }\n\n  const { x, y, selectionMode } = action.payload;\n\n  const {\n    dragMode,\n    dragStart,\n    dragEnd,\n    dragNewElementType,\n    dragWireSource,\n  } = state.services.circuitEditorUi;\n\n  switch (dragMode) {\n    case \"select\": {\n      if (dragStart) {\n        const rect = normalizeRectangle(dragStart, { x, y });\n        state = rootReducer(state, selectRegion(rect, selectionMode));\n      }\n      break;\n    }\n    case \"move\": {\n      if (dragStart) {\n        let moveBy = pointSubtract({ x, y }, dragStart);\n        moveBy = applyGridSnapSelector(state, moveBy);\n        state = rootReducer(state, moveSelection(moveBy.x, moveBy.y));\n      }\n      break;\n    }\n    case \"new-element\": {\n      if (dragEnd) {\n        const position = applyGridSnapSelector(state, dragEnd);\n        state = rootReducer(\n          state,\n          addElement(dragNewElementType!, { position })\n        );\n      }\n      break;\n    }\n    case \"wire\": {\n      const endPin = dragWireTargetPinSelector(state);\n      if (dragWireSource && dragEnd && endPin) {\n        state = rootReducer(state, attachWire(dragWireSource, endPin));\n      }\n      break;\n    }\n  }\n\n  state = fpSet(state, \"services\", \"circuitEditorUi\", (value) => ({\n    ...value,\n    dragMode: null,\n    dragStart: null,\n    dragEnd: null,\n    dragNewElementType: null,\n    dragWireSource: null,\n  }));\n\n  return state;\n}\n","import { AnyAction } from \"redux\";\n\nimport { fpSet } from \"@/utils\";\n\nimport { AppState, defaultAppState } from \"@/store\";\nimport rootReducer from \"@/store/reducer\";\n\nimport { isFieldDragStartNodeAction } from \"@/actions/field-drag-start-node\";\nimport { selectNodes } from \"@/actions/select-nodes\";\n\nimport { isNodeSelectedFromNodeIdSelector } from \"@/services/selection/selectors/selection\";\n\nexport default function dragNodesStartReducer(\n  state: AppState = defaultAppState,\n  action: AnyAction\n) {\n  if (!isFieldDragStartNodeAction(action)) {\n    return state;\n  }\n\n  const { nodeId, x, y, selectionMode } = action.payload;\n\n  state = fpSet(state, \"services\", \"circuitEditorUi\", (value) => ({\n    ...value,\n    dragMode: \"move\" as const,\n    dragStart: {\n      x,\n      y,\n    },\n  }));\n\n  if (!isNodeSelectedFromNodeIdSelector(state, nodeId)) {\n    // Dragging a node that was not previously selected.  Perform a selection on the node.\n    state = rootReducer(state, selectNodes(nodeId, selectionMode));\n  }\n\n  return state;\n}\n","import { isFieldDragStartWireAction } from \"@/actions/field-drag-start-wire\";\n\nimport { createCircuitEditorUiReducer } from \"../utils\";\n\nexport default createCircuitEditorUiReducer((state, action) => {\n  if (!isFieldDragStartWireAction(action)) {\n    return state;\n  }\n\n  const { dragStart, pin } = action.payload;\n\n  return {\n    ...state,\n    dragMode: \"wire\",\n    dragStart,\n    dragWireSource: pin,\n  };\n});\n","import { isFieldMouseLeaveAction } from \"@/actions/field-mouse-leave\";\n\nimport { createCircuitEditorUiReducer } from \"../utils\";\n\nexport default createCircuitEditorUiReducer((state, action) => {\n  if (!isFieldMouseLeaveAction(action)) {\n    return state;\n  }\n\n  if (state.dragMode == null) {\n    return state;\n  }\n\n  return {\n    ...state,\n    dragEnd: null,\n  };\n});\n","import { isViewZoomAction } from \"@/actions/view-zoom\";\nimport { createCircuitEditorUiReducer } from \"../utils\";\n\nconst SCALE_FACTOR = 1.03;\n\nexport default createCircuitEditorUiReducer((state, action) => {\n  if (!isViewZoomAction(action)) {\n    return state;\n  }\n\n  const { viewScale: scale } = state;\n  const { delta } = action.payload;\n\n  return {\n    ...state,\n    viewScale:\n      delta > 0\n        ? scale * delta * SCALE_FACTOR\n        : scale / (-delta * SCALE_FACTOR),\n  };\n});\n","import { AppReducer } from \"./types\";\n\nexport const PRIORITY_PRE = -10;\nexport const PRIORITY_POST = 10;\nexport const PRIORITY_SAVE = 50;\n\nexport function reducerPriority(\n  priority: number,\n  reducer: AppReducer\n): AppReducer {\n  reducer.weight = priority;\n  return reducer;\n}\n","import { AnyAction } from \"redux\";\n\nimport { reducerPriority, PRIORITY_PRE } from \"@/store/priorities\";\n\nimport { isAddElementAction } from \"@/actions/element-add\";\n\nimport { createCircuitGraphReducer } from \"../utils\";\n\nexport default reducerPriority(\n  PRIORITY_PRE,\n  createCircuitGraphReducer((state, action: AnyAction) => {\n    if (!isAddElementAction(action)) {\n      return state;\n    }\n\n    const { nodeId: id, elementType } = action.payload;\n    return {\n      ...state,\n      nodesById: {\n        ...state.nodesById,\n        [id]: {\n          type: \"element\",\n          elementType,\n        },\n      },\n    };\n  })\n);\n","export type MaybeArray<T> = T | T[];\nexport function asArray<T>(value: MaybeArray<T>): T[] {\n  return Array.isArray(value) ? value : [value];\n}\n","import { AnyAction } from \"redux\";\n\nimport { asArray, MaybeArray } from \"@/arrays\";\n\nexport const ACTION_NODE_DELETE = \"@node/delete\" as const;\nexport const deleteNode = (nodeId: MaybeArray<string>) => ({\n  type: ACTION_NODE_DELETE,\n  payload: { nodeIds: asArray(nodeId) },\n});\nexport type DeleteNodeAction = ReturnType<typeof deleteNode>;\nexport function isDeleteNodeAction(\n  action: AnyAction\n): action is DeleteNodeAction {\n  return action.type === ACTION_NODE_DELETE;\n}\n","import pick from \"lodash/pick\";\nimport difference from \"lodash/difference\";\nimport pickBy from \"lodash/pickBy\";\n\nimport { isDeleteNodeAction } from \"@/actions/node-delete\";\n\nimport { Connection } from \"../types\";\nimport { createCircuitGraphReducer } from \"../utils\";\n\nexport default createCircuitGraphReducer((state, action) => {\n  if (!isDeleteNodeAction(action)) {\n    return state;\n  }\n\n  const { nodeIds } = action.payload;\n\n  const remainingNodeIds = difference(Object.keys(state.nodesById), nodeIds);\n\n  function isRemainingConnection(c: Connection) {\n    return (\n      remainingNodeIds.indexOf(c.inputPin.nodeId) !== -1 &&\n      remainingNodeIds.indexOf(c.outputPin.nodeId) !== -1\n    );\n  }\n\n  return {\n    ...state,\n    nodesById: pick(state.nodesById, remainingNodeIds),\n    connectionsById: pickBy(state.connectionsById, isRemainingConnection),\n  };\n});\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_PROJECT_NEW = \"@project/new\" as const;\nexport const newProject = () => ({\n  type: ACTION_PROJECT_NEW,\n});\nexport type NewProjectAction = ReturnType<typeof newProject>;\nexport function isNewProjectAction(\n  action: AnyAction\n): action is NewProjectAction {\n  return action.type === ACTION_PROJECT_NEW;\n}\n","import { isNewProjectAction } from \"@/actions/project-new\";\n\nimport { createCircuitGraphReducer } from \"../utils\";\nimport { defaultCircuitGraphState } from \"../state\";\n\nexport default createCircuitGraphReducer((state, action) => {\n  if (!isNewProjectAction(action)) {\n    return state;\n  }\n\n  return defaultCircuitGraphState;\n});\n","import find from \"lodash/find\";\n\nimport { isAttachWireAction } from \"@/actions/wire-attach\";\n\nimport { createCircuitGraphReducer, pinsToConnection } from \"../utils\";\nimport { nodePinEquals } from \"../types\";\n\nexport default createCircuitGraphReducer((state, action) => {\n  if (!isAttachWireAction(action)) {\n    return state;\n  }\n\n  const { connectionId, p1, p2 } = action.payload;\n  const conn = pinsToConnection(state, p1, p2);\n  if (!conn) {\n    return state;\n  }\n\n  const { inputPin } = conn;\n\n  // Only one source per input.\n  if (find(state.connectionsById, (c) => nodePinEquals(c.inputPin, inputPin))) {\n    return state;\n  }\n\n  return {\n    ...state,\n    connectionsById: {\n      ...state.connectionsById,\n      [connectionId]: {\n        id: connectionId,\n        ...conn,\n      },\n    },\n  };\n});\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_WIRE_DETATCH = \"@wire/detatch\" as const;\nexport const detatchWire = (connectionId: string) => ({\n  type: ACTION_WIRE_DETATCH,\n  payload: {\n    connectionId,\n  },\n});\nexport type DetatchWireNodeAction = ReturnType<typeof detatchWire>;\nexport function isDetatchWireAction(\n  action: AnyAction\n): action is DetatchWireNodeAction {\n  return action.type === ACTION_WIRE_DETATCH;\n}\n","import pick from \"lodash/pick\";\n\nimport { isDetatchWireAction } from \"@/actions/wire-detatch\";\n\nimport { createCircuitGraphReducer } from \"../utils\";\n\nexport default createCircuitGraphReducer((state, action) => {\n  if (!isDetatchWireAction(action)) {\n    return state;\n  }\n\n  const { connectionId } = action.payload;\n\n  const remainingIds = Object.keys(state.connectionsById).filter(\n    (x) => x !== connectionId\n  );\n\n  return {\n    ...state,\n    connectionsById: pick(state.connectionsById, remainingIds),\n  };\n});\n","import { concatReducers } from \"@/store/utils\";\n\nimport elementAddReducer from \"./element-add\";\nimport nodeDeleteReducer from \"./node-delete\";\nimport projectNewReducer from \"./project-new\";\nimport wireAttachReducer from \"./wire-attach\";\nimport wireDetatchReducer from \"./wire-detatch\";\n\nconst graphReducer = concatReducers(\n  elementAddReducer,\n  projectNewReducer,\n  nodeDeleteReducer,\n  wireAttachReducer,\n  wireDetatchReducer\n);\n\nexport default graphReducer;\n","import { fpSet } from \"@/utils\";\n\nimport { ZeroPoint } from \"@/geometry\";\nimport { isAddElementAction } from \"@/actions/element-add\";\n\nimport { createCircuitLayoutReducer } from \"../utils\";\n\nexport default createCircuitLayoutReducer((state, action) => {\n  if (!isAddElementAction(action)) {\n    return state;\n  }\n  const { nodeId, position = ZeroPoint } = action.payload;\n\n  return fpSet(state, \"nodePositionsById\", nodeId, position);\n});\n","import values from \"lodash/values\";\nimport { createSelector } from \"reselect\";\n\nimport { CircuitGraphState } from \"../state\";\nimport { createCircuitGraphSelector } from \"../utils\";\n\nexport const connectionIdsSelector = createCircuitGraphSelector(\n  createSelector(\n    (s) => s.connectionsById,\n    (wiresById) => Object.keys(wiresById)\n  )\n);\n\nexport const connectionFromConnectionIdSelector = createCircuitGraphSelector(\n  (s: CircuitGraphState, connectionId: string) =>\n    s.connectionsById[connectionId]\n);\n\nexport const connectionsSelector = createCircuitGraphSelector(\n  createSelector(\n    (state: CircuitGraphState) => state.connectionsById,\n    (wiresById) => values(wiresById)\n  )\n);\n\n/**\n * Gets all wire ids supplying input to the specified node.\n * WARN: Not react safe.  For reducer use only.\n */\nexport const nodeInputConnectionIdsFromNodeIdSelector = createCircuitGraphSelector(\n  (state: CircuitGraphState, nodeId: string) =>\n    Object.keys(state.connectionsById).filter(\n      (connectionId) =>\n        state.connectionsById[connectionId].inputPin.nodeId === nodeId\n    )\n);\n\n/**\n * Gets an array of wire ids leaving the given node.\n * WARN: Not react safe.  For reducer use only.\n */\nexport const nodeOutputConnectionIdsFromNodeIdSelector = createCircuitGraphSelector(\n  (state: CircuitGraphState, nodeId: string) =>\n    Object.keys(state.connectionsById).filter(\n      (connectionId) =>\n        state.connectionsById[connectionId].outputPin.nodeId === nodeId\n    )\n);\n","import pick from \"lodash/pick\";\nimport difference from \"lodash/difference\";\n\nimport { PRIORITY_PRE, reducerPriority } from \"@/store/priorities\";\n\nimport { isDeleteNodeAction } from \"@/actions/node-delete\";\n\nimport {\n  nodeInputConnectionIdsFromNodeIdSelector,\n  nodeOutputConnectionIdsFromNodeIdSelector,\n} from \"@/services/circuit-graph/selectors/connections\";\n\nimport { createCircuitLayoutReducer } from \"../utils\";\n\n// We need to run this reducer before graph runs, as we want to check what wires are connected to the node being deleted.\nexport default reducerPriority(\n  PRIORITY_PRE,\n  createCircuitLayoutReducer((state, action, appState) => {\n    if (!isDeleteNodeAction(action)) {\n      return state;\n    }\n\n    const { nodeIds } = action.payload;\n\n    const remainingNodeIds = difference(\n      Object.keys(state.nodePositionsById),\n      nodeIds\n    );\n\n    // This logic has to duplicate the wire removal procedure from\n    //  wire-detatch.ts.\n    // We might want to just call that reducer from here.\n\n    const removingConnectionIds = nodeIds.reduce((connectionIds, nodeId) => {\n      const inputs = nodeInputConnectionIdsFromNodeIdSelector(appState, nodeId);\n      connectionIds.push(...inputs);\n\n      const outputs = nodeOutputConnectionIdsFromNodeIdSelector(\n        appState,\n        nodeId\n      );\n      connectionIds.push(...outputs);\n\n      return connectionIds;\n    }, [] as string[]);\n\n    const removingJointIds = removingConnectionIds.reduce(\n      (jointIds, connectionId) => {\n        jointIds.push(...state.wireJointIdsByConnectionId[connectionId]);\n        return jointIds;\n      },\n      [] as string[]\n    );\n\n    const remainingConnectionIds = difference(\n      Object.keys(state.wireJointIdsByConnectionId),\n      removingConnectionIds\n    );\n\n    const remainingJointIds = difference(\n      Object.keys(state.wireJointPositionsByJointId),\n      removingJointIds\n    );\n\n    return {\n      ...state,\n      nodePositionsById: pick(state.nodePositionsById, remainingNodeIds),\n      wireJointIdsByConnectionId: pick(\n        state.wireJointIdsByConnectionId,\n        remainingConnectionIds\n      ),\n      wireJointPositionsByJointId: pick(\n        state.wireJointPositionsByJointId,\n        remainingJointIds\n      ),\n    };\n  })\n);\n","import { AnyAction } from \"redux\";\n\nimport { asArray, MaybeArray } from \"@/arrays\";\nimport { Point } from \"@/geometry\";\n\nexport const ACTION_NODE_MOVE = \"@node/move\" as const;\nexport const moveNode = (\n  nodeId: MaybeArray<string>,\n  position: Point,\n  relative = false\n) => ({\n  type: ACTION_NODE_MOVE,\n  payload: { nodeIds: asArray(nodeId), position, relative },\n});\nexport type MoveNodeAction = ReturnType<typeof moveNode>;\nexport function isMoveNodeAction(action: AnyAction): action is MoveNodeAction {\n  return action.type === ACTION_NODE_MOVE;\n}\n","import mapValues from \"lodash/mapValues\";\nimport pick from \"lodash/pick\";\n\nimport { isMoveNodeAction } from \"@/actions/node-move\";\nimport { createCircuitLayoutReducer } from \"../utils\";\n\nexport default createCircuitLayoutReducer((state, action, appState) => {\n  if (!isMoveNodeAction(action)) {\n    return state;\n  }\n\n  const { nodeIds, position, relative } = action.payload;\n\n  const movedNodePositions = mapValues(\n    pick(state.nodePositionsById, nodeIds),\n    (p) => ({\n      x: relative ? p.x + position.x : position.x,\n      y: relative ? p.y + position.y : position.y,\n    })\n  );\n\n  return {\n    ...state,\n    nodePositionsById: {\n      ...state.nodePositionsById,\n      ...movedNodePositions,\n    },\n  };\n});\n","import { isNewProjectAction } from \"@/actions/project-new\";\n\nimport { createCircuitLayoutReducer } from \"../utils\";\nimport { defaultCircuitLayoutState } from \"../state\";\n\nexport default createCircuitLayoutReducer((state, action) => {\n  if (!isNewProjectAction(action)) {\n    return state;\n  }\n\n  return defaultCircuitLayoutState;\n});\n","import { v4 as uuidV4 } from \"uuid\";\nimport zipObject from \"lodash/zipObject\";\n\nimport { isAttachWireAction } from \"@/actions/wire-attach\";\nimport { fpSet } from \"@/utils\";\n\nimport { createCircuitLayoutReducer } from \"../utils\";\n\nexport default createCircuitLayoutReducer((state, action) => {\n  if (!isAttachWireAction(action)) {\n    return state;\n  }\n\n  const { connectionId, joints } = action.payload;\n\n  // Might want to use addWireJoint action, but field is the only thing that cares about joints.\n  if (joints.length > 0) {\n    const jointIds = joints.map((x) => uuidV4());\n    fpSet(state, \"wireJointIdsByConnectionId\", connectionId, jointIds);\n    fpSet(state, \"wireJointPositionsByJointId\", (value) => ({\n      ...value,\n      ...zipObject(jointIds, joints),\n    }));\n  }\n\n  return fpSet(state, \"wireJointIdsByConnectionId\", connectionId, []);\n});\n","import pick from \"lodash/pick\";\nimport difference from \"lodash/difference\";\n\nimport { isDetatchWireAction } from \"@/actions/wire-detatch\";\n\nimport { createCircuitLayoutReducer } from \"../utils\";\n\nexport default createCircuitLayoutReducer((state, action) => {\n  if (!isDetatchWireAction(action)) {\n    return state;\n  }\n\n  const { connectionId } = action.payload;\n\n  const remainingConnectionIds = Object.keys(\n    state.wireJointIdsByConnectionId\n  ).filter((x) => x != connectionId);\n\n  const remainingJointIds = difference(\n    Object.keys(state.wireJointPositionsByJointId),\n    state.wireJointIdsByConnectionId[connectionId]\n  );\n\n  return {\n    ...state,\n    wireJointIdsByConnectionId: pick(\n      state.wireJointIdsByConnectionId,\n      remainingConnectionIds\n    ),\n    wireJointPositionsByJointId: pick(\n      state.wireJointPositionsByJointId,\n      remainingJointIds\n    ),\n  };\n});\n","import { AnyAction } from \"redux\";\nimport { v4 as uuidV4 } from \"uuid\";\n\nimport { Point } from \"@/geometry\";\n\nexport const ACTION_WIRE_JOINT_ADD = \"@wire/joint/add\" as const;\nexport const addWireJoint = (\n  connectionId: string,\n  addAfterJointId: string | null,\n  position: Point,\n  jointId?: string\n) => ({\n  type: ACTION_WIRE_JOINT_ADD,\n  payload: {\n    connectionId,\n    jointId: jointId || uuidV4(),\n    addAfterJointId,\n    position,\n  },\n});\nexport type AddWireJointAction = ReturnType<typeof addWireJoint>;\nexport function isAddWireJointAction(\n  action: AnyAction\n): action is AddWireJointAction {\n  return action.type === ACTION_WIRE_JOINT_ADD;\n}\n","import { isAddWireJointAction } from \"@/actions/wire-joint-add\";\n\nimport { createCircuitLayoutReducer } from \"../utils\";\n\nexport default createCircuitLayoutReducer((state, action) => {\n  if (!isAddWireJointAction(action)) {\n    return state;\n  }\n\n  const { connectionId, addAfterJointId, position, jointId } = action.payload;\n  let wireJoints = state.wireJointIdsByConnectionId[connectionId];\n  let insertionIndex = addAfterJointId\n    ? wireJoints.indexOf(addAfterJointId) + 1\n    : 0;\n\n  wireJoints = [\n    ...wireJoints.slice(0, insertionIndex),\n    jointId,\n    ...wireJoints.slice(insertionIndex),\n  ];\n\n  return {\n    ...state,\n    wireJointIdsByConnectionId: {\n      ...state.wireJointIdsByConnectionId,\n      [connectionId]: wireJoints,\n    },\n    wireJointPositionsByJointId: {\n      ...state.wireJointPositionsByJointId,\n      [jointId]: position,\n    },\n  };\n});\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_WIRE_JOINT_DELETE = \"@wire/joint/delete\" as const;\nexport const deleteWireJoint = (jointId: string) => ({\n  type: ACTION_WIRE_JOINT_DELETE,\n  payload: { jointId },\n});\nexport type DeleteWireJointAction = ReturnType<typeof deleteWireJoint>;\nexport function isDeleteWireJointAction(\n  action: AnyAction\n): action is DeleteWireJointAction {\n  return action.type === ACTION_WIRE_JOINT_DELETE;\n}\n","import pick from \"lodash/pick\";\nimport mapValues from \"lodash/mapValues\";\n\nimport { isDeleteWireJointAction } from \"@/actions/wire-joint-delete\";\n\nimport { createCircuitLayoutReducer } from \"../utils\";\n\nexport default createCircuitLayoutReducer((state, action) => {\n  if (!isDeleteWireJointAction(action)) {\n    return state;\n  }\n\n  const { jointId } = action.payload;\n\n  const remainingJointIds = Object.keys(\n    state.wireJointPositionsByJointId\n  ).filter((x) => x !== jointId);\n\n  return {\n    ...state,\n    wireJointIdsByConnectionId: mapValues(\n      state.wireJointIdsByConnectionId,\n      (connectionIds) => connectionIds.filter((x) => x !== jointId)\n    ),\n    wireJointsByJointId: pick(\n      state.wireJointPositionsByJointId,\n      remainingJointIds\n    ),\n  };\n});\n","import { AnyAction } from \"redux\";\n\nimport { Point } from \"@/geometry\";\nimport { asArray, MaybeArray } from \"@/arrays\";\n\nexport const ACTION_WIRE_JOINT_MOVE = \"@wire/joint/move\" as const;\nexport const moveWireJoint = (\n  jointId: MaybeArray<string>,\n  position: Point,\n  relative = false\n) => ({\n  type: ACTION_WIRE_JOINT_MOVE,\n  payload: {\n    jointIds: asArray(jointId),\n    position,\n    relative,\n  },\n});\nexport type MoveWireJointAction = ReturnType<typeof moveWireJoint>;\nexport function isMoveWireJointAction(\n  action: AnyAction\n): action is MoveWireJointAction {\n  return action.type === ACTION_WIRE_JOINT_MOVE;\n}\n","import { concatReducers } from \"@/store/utils\";\n\nimport elementAddReducer from \"./element-add\";\nimport nodeDeleteReducer from \"./node-delete\";\nimport nodeMoveReducer from \"./node-move\";\nimport projectNewReducer from \"./project-new\";\nimport wireAttachReducer from \"./wire-attach\";\nimport wireDetatchReducer from \"./wire-detatch\";\nimport wireJointAddReducer from \"./wire-joint-add\";\nimport wireJointDeleteReducer from \"./wire-joint-delete\";\nimport wireJointMoveReducer from \"./wire-joint-move\";\n\nconst fieldReducer = concatReducers(\n  elementAddReducer,\n  projectNewReducer,\n  nodeDeleteReducer,\n  nodeMoveReducer,\n  wireAttachReducer,\n  wireDetatchReducer,\n  wireJointAddReducer,\n  wireJointDeleteReducer,\n  wireJointMoveReducer\n);\n\nexport default fieldReducer;\n","import mapValues from \"lodash/mapValues\";\nimport pick from \"lodash/pick\";\n\nimport { isMoveWireJointAction } from \"@/actions/wire-joint-move\";\n\nimport { createCircuitLayoutReducer } from \"../utils\";\n\nexport default createCircuitLayoutReducer((state, action) => {\n  if (!isMoveWireJointAction(action)) {\n    return state;\n  }\n\n  const { jointIds, position, relative } = action.payload;\n\n  const movedJoints = mapValues(\n    pick(state.wireJointPositionsByJointId, jointIds),\n    (p) => ({\n      x: relative ? p.x + position.x : position.x,\n      y: relative ? p.y + position.y : position.y,\n    })\n  );\n\n  return {\n    ...state,\n    wireJointPositionsByJointId: {\n      ...state.wireJointPositionsByJointId,\n      ...movedJoints,\n    },\n  };\n});\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_COPY_NODES = \"@clipboard/copy\" as const;\nexport const copyNodes = (nodeId: string | string[]) => ({\n  type: ACTION_COPY_NODES,\n  payload: {\n    nodeIds: Array.isArray(nodeId) ? nodeId : [nodeId],\n  },\n});\nexport type CopyNodesAction = ReturnType<typeof copyNodes>;\nexport function isCopyNodesAction(\n  action: AnyAction\n): action is CopyNodesAction {\n  return action.type === ACTION_COPY_NODES;\n}\n","import find from \"lodash/find\";\n\nimport { CircuitGraphState } from \"../state\";\nimport { NodePin } from \"../types\";\nimport { createCircuitGraphSelector } from \"../utils\";\n\nimport { connectionsSelector } from \"./connections\";\nimport { elementDefFromNodeIdSelector } from \"./nodes\";\n\nexport const pinDirectionFromNodePinSelector = createCircuitGraphSelector(\n  (s: CircuitGraphState, nodeId: string, pinId: string) => {\n    const def = elementDefFromNodeIdSelector.local(s, nodeId);\n    if (!def) {\n      return null;\n    }\n\n    const pinDef = find(def.pins, (p) => p.name === pinId);\n    if (!pinDef) {\n      return null;\n    }\n    return pinDef.direction;\n  }\n);\n\n/**\n * Gets a map of node input pins to their output sources given a node id.\n *\n * WARN: Not react safe.  For reducer use only\n */\nexport const nodeOutputSourcesByPinIdFromNodeIdSelector = createCircuitGraphSelector(\n  (state: CircuitGraphState, nodeId: string) => {\n    const connections = connectionsSelector.local(state);\n    const nodeDef = elementDefFromNodeIdSelector.local(state, nodeId);\n\n    if (!nodeDef) {\n      return {};\n    }\n\n    let outputPins: string[] = [];\n    outputPins = Object.keys(nodeDef.pins).filter(\n      (x) => nodeDef.pins[x].direction === \"output\"\n    );\n\n    const outputConnections = connections.filter(\n      (x) => x.outputPin.nodeId === nodeId\n    );\n\n    const result: Record<string, NodePin[]> = {};\n    for (const pin of outputPins) {\n      result[pin] = [];\n    }\n\n    for (const connection of outputConnections) {\n      const { outputPin, inputPin } = connection;\n      result[outputPin.pinId].push(inputPin);\n    }\n\n    return result;\n  }\n);\n","import {\n  createServiceReducerCreator,\n  createServiceSelectorCreator,\n} from \"../service-state-utils\";\n\nexport const createClipboardReducer = createServiceReducerCreator(\"clipboard\");\nexport const createClipboardSelector = createServiceSelectorCreator(\n  \"clipboard\"\n);\n","import { v4 as uuidV4 } from \"uuid\";\nimport map from \"lodash/map\";\nimport mapValues from \"lodash/mapValues\";\nimport findIndex from \"lodash/findIndex\";\nimport zipObject from \"lodash/zipObject\";\n\nimport { pointSubtract } from \"@/geometry\";\n\nimport { isCopyNodesAction } from \"@/actions/clipboard-copy\";\n\nimport { nodeFromNodeIdSelector } from \"@/services/circuit-graph/selectors/nodes\";\nimport { nodeOutputSourcesByPinIdFromNodeIdSelector } from \"@/services/circuit-graph/selectors/pins\";\nimport { nodePositionsByNodeIdSelector } from \"@/services/circuit-layout/selectors/node-positions\";\n\nimport { ClipboardNode } from \"../types\";\nimport { createClipboardReducer } from \"../utils\";\n\nexport default createClipboardReducer((state, action, appState) => {\n  if (!isCopyNodesAction(action)) {\n    return state;\n  }\n\n  const { nodeIds } = action.payload;\n  if (nodeIds.length === 0) {\n    return state;\n  }\n\n  const nodePositionsById = nodePositionsByNodeIdSelector(appState);\n\n  const copyIds = zipObject(\n    nodeIds,\n    map(nodeIds, () => uuidV4())\n  );\n\n  function nodeIsSelected(id: string): boolean {\n    return findIndex(nodeIds, (x) => x === id) !== -1;\n  }\n\n  const rootPosition = nodePositionsById[nodeIds[0]];\n\n  const copyNodes: ClipboardNode[] = nodeIds.map((nodeId) => {\n    const node = nodeFromNodeIdSelector(appState, nodeId);\n    const outputs = nodeOutputSourcesByPinIdFromNodeIdSelector(\n      appState,\n      nodeId\n    );\n    const copyNode: ClipboardNode = {\n      id: copyIds[nodeId],\n      type: \"element\",\n      elementType: node.elementType,\n      offset: pointSubtract(nodePositionsById[nodeId], rootPosition),\n      outputs: mapValues(outputs, (conns) =>\n        conns\n          .filter((x) => nodeIsSelected(x.nodeId))\n          .map((c) => ({ nodeId: copyIds[c.nodeId], pinId: c.pinId }))\n      ),\n    };\n    return copyNode;\n  });\n\n  return {\n    ...state,\n    clipboardNodes: copyNodes,\n    clipboardPasteOrigin: rootPosition,\n  };\n});\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_PASTE = \"@clipboard/paste\" as const;\nexport const paste = () => ({\n  type: ACTION_PASTE,\n});\nexport type PasteAction = ReturnType<typeof paste>;\nexport function isPasteAction(action: AnyAction): action is PasteAction {\n  return action.type === ACTION_PASTE;\n}\n","import { AnyAction } from \"redux\";\nimport zipObject from \"lodash/zipObject\";\nimport map from \"lodash/map\";\nimport values from \"lodash/values\";\nimport { v4 as uuidV4 } from \"uuid\";\n\nimport { Point, pointAdd } from \"@/geometry\";\nimport { AppState, defaultAppState } from \"@/store\";\nimport { fpSet } from \"@/utils\";\n\nimport rootReducer from \"@/store/reducer\";\n\nimport { addElement } from \"@/actions/element-add\";\nimport { attachWire } from \"@/actions/wire-attach\";\nimport { isPasteAction } from \"@/actions/clipboard-paste\";\nimport { selectNodes } from \"@/actions/select-nodes\";\n\nexport const CLIPBOARD_PASTE_OFFSET: Point = { x: 10, y: 10 };\n\nexport default function clipboardPasteReducer(\n  state: AppState = defaultAppState,\n  action: AnyAction\n): AppState {\n  if (!isPasteAction(action)) {\n    return state;\n  }\n\n  const { clipboardNodes, clipboardPasteOrigin } = state.services.clipboard;\n  const pastePosition = pointAdd(clipboardPasteOrigin, CLIPBOARD_PASTE_OFFSET);\n\n  const pasteIds = zipObject(\n    clipboardNodes.map((x) => x.id),\n    map(clipboardNodes, () => uuidV4())\n  );\n\n  // Two passes: Create and Wire.\n\n  // Create the nodes.\n  for (let node of clipboardNodes) {\n    const { id, elementType, offset } = node;\n    const p = pointAdd(pastePosition, offset);\n    state = rootReducer(\n      state,\n      // TODO: We may have things other than elements, like chips.  Also need to clone its data.  Should make a dedicated cloneNode action.\n      addElement(elementType, { position: p, nodeId: pasteIds[id] })\n    );\n  }\n\n  // Wire the nodes\n  for (let node of clipboardNodes) {\n    const { id, outputs } = node;\n    const sourceId = pasteIds[id];\n    for (let outputPin of Object.keys(outputs)) {\n      for (let output of outputs[outputPin]) {\n        const { nodeId: targetCopyId, pinId: targetPin } = output;\n        const targetId = pasteIds[targetCopyId];\n        state = rootReducer(\n          state,\n          attachWire(\n            { nodeId: sourceId, pinId: outputPin },\n            { nodeId: targetId, pinId: targetPin }\n          )\n        );\n      }\n    }\n  }\n\n  state = fpSet(\n    state,\n    \"services\",\n    \"clipboard\",\n    \"clipboardPasteOrigin\",\n    pastePosition\n  );\n  state = rootReducer(state, selectNodes(values(pasteIds)));\n\n  return state;\n}\n","import { concatReducers } from \"@/store/utils\";\n\nimport clipboardCopyReducer from \"./clipboard-copy\";\nimport clipboardPasteReducer from \"./clipboard-paste\";\n\nconst clipboardReducer = concatReducers(\n  clipboardCopyReducer,\n  clipboardPasteReducer\n);\n\nexport default clipboardReducer;\n","import {\n  createServiceReducerCreator,\n  createServiceSelectorCreator,\n} from \"../service-state-utils\";\n\nexport const createDialogReducer = createServiceReducerCreator(\"dialog\");\nexport const createDialogSelector = createServiceSelectorCreator(\"dialog\");\n","import { concatReducers } from \"@/store/utils\";\n\nimport dialogResponseAcceptReducer from \"./dialog-response-accept\";\nimport dialogResponseCancelReducer from \"./dialog-response-cancel\";\nimport dialogShowReducer from \"./dialog-show\";\n\nexport default concatReducers(\n  dialogResponseAcceptReducer,\n  dialogResponseCancelReducer,\n  dialogShowReducer\n);\n","import { isAcceptDialogAction } from \"@/actions/dialog-response-accept\";\n\nimport { defaultDialogState } from \"../state\";\nimport { createDialogReducer } from \"../utils\";\n\nexport default createDialogReducer((state, action) => {\n  if (!isAcceptDialogAction(action)) {\n    return state;\n  }\n\n  return defaultDialogState;\n});\n","import { isCancelDialogAction } from \"@/actions/dialog-response-cancel\";\n\nimport { defaultDialogState } from \"../state\";\nimport { createDialogReducer } from \"../utils\";\n\nexport default createDialogReducer((state, action) => {\n  if (!isCancelDialogAction(action)) {\n    return state;\n  }\n\n  return defaultDialogState;\n});\n","import { isShowDialogAction } from \"@/actions/dialog-show\";\nimport { createDialogReducer } from \"../utils\";\n\nexport default createDialogReducer((state, action) => {\n  if (!isShowDialogAction(action)) {\n    return state;\n  }\n\n  const { dialogType, data } = action.payload;\n\n  return {\n    ...state,\n    dialogType,\n    data,\n  };\n});\n","import { AnyAction } from \"redux\";\n\nimport { AppState, defaultAppState } from \"@/store\";\nimport { reducerPriority, PRIORITY_SAVE } from \"@/store/priorities\";\n\nimport { ACTION_ELEMENT_ADD } from \"@/actions/element-add\";\nimport { ACTION_NODE_DELETE } from \"@/actions/node-delete\";\nimport { ACTION_SELECTION_MOVE } from \"@/actions/selection-move\";\nimport { ACTION_WIRE_ATTACH } from \"@/actions/wire-attach\";\nimport { ACTION_WIRE_DETATCH } from \"@/actions/wire-detatch\";\nimport { ACTION_WIRE_JOINT_ADD } from \"@/actions/wire-joint-add\";\nimport { ACTION_WIRE_JOINT_MOVE } from \"@/actions/wire-joint-move\";\n\nimport { createSave, storeAutosave } from \"../utils\";\n\nconst AUTOSAVE_TRIGGERS = [\n  ACTION_ELEMENT_ADD,\n  ACTION_NODE_DELETE,\n  ACTION_SELECTION_MOVE,\n  ACTION_WIRE_ATTACH,\n  ACTION_WIRE_DETATCH,\n  ACTION_WIRE_JOINT_ADD,\n  ACTION_WIRE_JOINT_MOVE,\n];\n\nexport default reducerPriority(\n  PRIORITY_SAVE,\n  (state: AppState = defaultAppState, action: AnyAction): AppState => {\n    if (AUTOSAVE_TRIGGERS.indexOf(action.type) === -1) {\n      return state;\n    }\n\n    const save = createSave(state);\n    storeAutosave(save);\n\n    return state;\n  }\n);\n","import { concatReducers } from \"@/store/utils\";\n\nimport autosaveReducer from \"./autosave\";\nimport initReducer from \"./init\";\nimport projectNewReducer from \"./project-new\";\nimport projectReceiveReducer from \"./project-receive\";\n\nexport default concatReducers(\n  autosaveReducer,\n  projectNewReducer,\n  initReducer,\n  projectReceiveReducer\n);\n","import { SaveData, saveDataSchema, SaveNode, SaveWire } from \"./types\";\n\nimport { AppState } from \"@/store\";\nimport rootReducer from \"@/store/reducer\";\n\nimport { addElement } from \"@/actions/element-add\";\nimport { attachWire } from \"@/actions/wire-attach\";\n\nimport { defaultSelectionState } from \"../selection/state\";\nimport { defaultSimulatorState } from \"../simulator/state\";\nimport { defaultCircuitGraphState } from \"../circuit-graph/state\";\nimport {\n  nodeIdsSelector,\n  nodeFromNodeIdSelector,\n} from \"../circuit-graph/selectors/nodes\";\nimport {\n  connectionIdsSelector,\n  connectionFromConnectionIdSelector,\n} from \"../circuit-graph/selectors/connections\";\nimport { nodePositionFromNodeIdSelector } from \"../circuit-layout/selectors/node-positions\";\nimport {\n  wireJointPositionsByJointIdSelector,\n  wireJointIdsFromConnectionIdSelector,\n} from \"../circuit-layout/selectors/wires\";\nimport { defaultCircuitLayoutState } from \"../circuit-layout/state\";\nimport { SaveFormatError } from \"./errors\";\n\nexport function createSave(state: AppState): SaveData {\n  const jointPositions = wireJointPositionsByJointIdSelector(state);\n  return {\n    nodes: nodeIdsSelector(state).map((nodeId) => {\n      const node = nodeFromNodeIdSelector(state, nodeId);\n      const position = nodePositionFromNodeIdSelector(state, nodeId);\n      const saveNode: SaveNode = {\n        nodeId: nodeId,\n        elementType: node.elementType,\n        x: position.x,\n        y: position.y,\n      };\n      return saveNode;\n    }),\n    wires: connectionIdsSelector(state).map((connectionId) => {\n      const wire = connectionFromConnectionIdSelector(state, connectionId);\n      const jointIds = wireJointIdsFromConnectionIdSelector(\n        state,\n        connectionId\n      );\n      const saveWire: SaveWire = {\n        input: wire.inputPin,\n        output: wire.outputPin,\n        joints: jointIds.map((jointId) => jointPositions[jointId]),\n      };\n      return saveWire;\n    }),\n  };\n}\n\nexport function loadSave(state: AppState, save: SaveData): AppState {\n  try {\n    saveDataSchema.validateSync(save);\n  } catch (e) {\n    throw new SaveFormatError(e.message);\n  }\n\n  state = {\n    ...state,\n    services: {\n      ...state.services,\n      circuitLayout: defaultCircuitLayoutState,\n      circuitGraph: defaultCircuitGraphState,\n      selection: defaultSelectionState,\n      simulator: defaultSimulatorState,\n    },\n  };\n\n  try {\n    state = save.nodes.reduce(\n      (state, node) =>\n        rootReducer(\n          state,\n          // TODO: Could be element, could be chip.\n          addElement(node.elementType, {\n            nodeId: node.nodeId,\n            position: { x: node.x, y: node.y },\n          })\n        ),\n      state\n    );\n\n    state = save.wires.reduce(\n      (state, wire) =>\n        rootReducer(\n          state,\n          attachWire(wire.output, wire.input, { joints: wire.joints })\n        ),\n      state\n    );\n  } catch (e) {\n    console.error(\"Failed to rehydrate SaveData:\", e);\n    throw new SaveFormatError(\"Failed to load project.\");\n  }\n\n  return state;\n}\n\nexport function storeAutosave(save: SaveData): void {\n  localStorage.setItem(\"autosave\", JSON.stringify(save));\n}\n\nexport function loadAutosave(): SaveData | null {\n  const str = localStorage.getItem(\"autosave\");\n  if (!str) {\n    return null;\n  }\n\n  try {\n    return JSON.parse(str);\n  } catch {\n    return null;\n  }\n}\n\nexport function deleteAutosave() {\n  localStorage.removeItem(\"autosave\");\n}\n","import { AnyAction } from \"redux\";\n\nimport { AppState, defaultAppState } from \"@/store\";\n\nimport { isNewProjectAction } from \"@/actions/project-new\";\n\nimport { deleteAutosave } from \"../utils\";\n\nexport default function fileNewReducer(\n  state: AppState = defaultAppState,\n  action: AnyAction\n): AppState {\n  if (!isNewProjectAction(action)) {\n    return state;\n  }\n\n  deleteAutosave();\n  return state;\n}\n","import { AnyAction } from \"redux\";\nimport { AppState, defaultAppState } from \"@/store\";\n\nimport { isInitAction } from \"@/actions/init\";\n\nimport { loadAutosave, loadSave } from \"../utils\";\n\nexport default function initReducer(\n  state: AppState = defaultAppState,\n  action: AnyAction\n): AppState {\n  if (!isInitAction(action)) {\n    return state;\n  }\n\n  const save = loadAutosave();\n  if (!save) {\n    return state;\n  }\n\n  try {\n    return loadSave(state, save);\n  } catch {\n    return state;\n  }\n}\n","import { AnyAction } from \"redux\";\n\nimport { AppState, defaultAppState } from \"@/store\";\n\nimport { isReceiveProjectAction } from \"@/actions/project-receive\";\n\nimport { loadSave } from \"../utils\";\n\nexport default function projectReceiveReducer(\n  state: AppState = defaultAppState,\n  action: AnyAction\n): AppState {\n  if (!isReceiveProjectAction(action)) {\n    return state;\n  }\n\n  try {\n    return loadSave(state, action.payload.saveData);\n  } catch {\n    // TODO: display error\n    return state;\n  }\n}\n","import difference from \"lodash/difference\";\n\nimport { isDeleteNodeAction } from \"@/actions/node-delete\";\n\nimport { createSelectionReducer } from \"../utils\";\n\nexport default createSelectionReducer((state, action) => {\n  if (!isDeleteNodeAction(action)) {\n    return state;\n  }\n\n  const { nodeIds } = action.payload;\n\n  return {\n    ...state,\n    selectedNodeIds: difference(state.selectedNodeIds, nodeIds),\n    selectedConnectionIds: [], // Might be removing a node attached to a selected wire\n  };\n});\n","import { isNewProjectAction } from \"@/actions/project-new\";\n\nimport { createSelectionReducer } from \"../utils\";\nimport { defaultSelectionState } from \"../state\";\n\nexport default createSelectionReducer((state, action) => {\n  if (!isNewProjectAction(action)) {\n    return state;\n  }\n\n  return defaultSelectionState;\n});\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_SELECT_CLEAR = \"@select/all\" as const;\nexport const selectAll = () => ({\n  type: ACTION_SELECT_CLEAR,\n});\nexport type SelectAllAction = ReturnType<typeof selectAll>;\nexport function isSelectAllAction(\n  action: AnyAction\n): action is SelectAllAction {\n  return action.type === ACTION_SELECT_CLEAR;\n}\n","import { AppState } from \"@/store\";\nimport { Point, pointAdd, ZeroPoint } from \"@/geometry\";\nimport { ElementDefinition } from \"@/element-defs\";\n\nimport { elementDefFromNodeIdSelector } from \"@/services/circuit-graph/selectors/nodes\";\n\nimport { createCircuitLayoutSelector } from \"../utils\";\nimport { CircuitLayoutState } from \"../state\";\n\nimport { nodePositionFromNodeIdSelector } from \"./node-positions\";\n\ninterface PositionCache {\n  inputNodeDef: ElementDefinition | null;\n  inputNodePosition: Point;\n  outputPosition: Point;\n}\n\n// TODO: These build up forever, need to wipe it on occasion.\n// Probably should use LRU cache.\n// Not fixing it right now as we previously used re-reselect, which\n//  also builds up forever.\nconst startPositionCacheByConnectionId: Record<string, PositionCache> = {};\nconst endPositionCacheByConnectionId: Record<string, PositionCache> = {};\n\nexport const wireStartPositionFromConnectionIdSelector = (\n  state: AppState,\n  connectionId: string\n) => {\n  const {\n    outputPin: { nodeId, pinId },\n  } = state.services.circuitGraph.connectionsById[connectionId];\n  const nodeDef = elementDefFromNodeIdSelector(state, nodeId);\n  const nodePosition =\n    nodePositionFromNodeIdSelector(state, nodeId) || ZeroPoint;\n\n  // Caching is to get a consistent reference to avoid component rerenders.\n  //  We are not concerned about performance here.\n  const cacheData = startPositionCacheByConnectionId[connectionId];\n  if (\n    cacheData &&\n    cacheData.inputNodeDef === nodeDef &&\n    cacheData.inputNodePosition.x === nodePosition.x &&\n    cacheData.inputNodePosition.y === nodePosition.y\n  ) {\n    return cacheData.outputPosition;\n  }\n\n  let offset = ZeroPoint;\n  if (nodeDef && nodeDef.pins[pinId]) {\n    offset = nodeDef.pins[pinId];\n  }\n  const position = pointAdd(nodePosition, offset);\n  startPositionCacheByConnectionId[connectionId] = {\n    inputNodeDef: nodeDef,\n    inputNodePosition: nodePosition,\n    outputPosition: position,\n  };\n\n  return position;\n};\n\nexport const wireEndPositionFromConnectionIdSelector = (\n  state: AppState,\n  connectionId: string\n) => {\n  const {\n    inputPin: { nodeId, pinId },\n  } = state.services.circuitGraph.connectionsById[connectionId];\n  const nodeDef = elementDefFromNodeIdSelector(state, nodeId);\n  const nodePosition =\n    nodePositionFromNodeIdSelector(state, nodeId) || ZeroPoint;\n\n  // Caching is to get a consistent reference to avoid component rerenders.\n  //  We are not concerned about performance here.\n  const cacheData = endPositionCacheByConnectionId[connectionId];\n  if (\n    cacheData &&\n    cacheData.inputNodeDef === nodeDef &&\n    cacheData.inputNodePosition.x === nodePosition.x &&\n    cacheData.inputNodePosition.y === nodePosition.y\n  ) {\n    return cacheData.outputPosition;\n  }\n\n  let offset = ZeroPoint;\n  if (nodeDef && nodeDef.pins[pinId]) {\n    offset = nodeDef.pins[pinId];\n  }\n  const position = pointAdd(nodePosition, offset);\n  endPositionCacheByConnectionId[connectionId] = {\n    inputNodeDef: nodeDef,\n    inputNodePosition: nodePosition,\n    outputPosition: position,\n  };\n\n  return position;\n};\n\n// WARN: Returns new object with each invocation.  Not safe for react use.\n//  Currently used to get all joint ids in reducers.\nexport const jointIdsSelector = createCircuitLayoutSelector(\n  (state: CircuitLayoutState) => Object.keys(state.wireJointPositionsByJointId)\n);\n\nexport const wireJointIdsFromConnectionIdSelector = createCircuitLayoutSelector(\n  (state: CircuitLayoutState, connectionId: string) =>\n    state.wireJointIdsByConnectionId[connectionId]\n);\n\nexport const wireJointPositionFromJointIdSelector = createCircuitLayoutSelector(\n  (state: CircuitLayoutState, jointId: string) =>\n    state.wireJointPositionsByJointId[jointId]\n);\n\n// WARN: Returns new object with each invocation.  Not safe for react use.\n//  Currently used to get all joint ids in reducers.\nexport const wireJointPositionsByJointIdSelector = createCircuitLayoutSelector(\n  (state: CircuitLayoutState) => {\n    return state.wireJointPositionsByJointId;\n  }\n);\n","import { isSelectAllAction } from \"@/actions/select-all\";\n\nimport { nodeIdsSelector } from \"@/services/circuit-graph/selectors/nodes\";\nimport { connectionIdsSelector } from \"@/services/circuit-graph/selectors/connections\";\nimport { jointIdsSelector } from \"@/services/circuit-layout/selectors/wires\";\n\nimport { createSelectionReducer } from \"../utils\";\n\nexport default createSelectionReducer((state, action, appState) => {\n  if (!isSelectAllAction(action)) {\n    return state;\n  }\n\n  const nodeIds = nodeIdsSelector(appState);\n  const connectionIds = connectionIdsSelector(appState);\n  const jointIds = jointIdsSelector(appState);\n\n  return {\n    ...state,\n    selectedNodeIds: nodeIds,\n    selectedConnectionIds: connectionIds,\n    selectedJointIds: jointIds,\n  };\n});\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_SELECT_CLEAR = \"@select/clear\" as const;\nexport const clearSelection = () => ({\n  type: ACTION_SELECT_CLEAR,\n});\nexport type ClearSelectionAction = ReturnType<typeof clearSelection>;\nexport function isClearSelectionAction(\n  action: AnyAction\n): action is ClearSelectionAction {\n  return action.type === ACTION_SELECT_CLEAR;\n}\n","import { isClearSelectionAction } from \"@/actions/select-clear\";\n\nimport { createSelectionReducer } from \"../utils\";\n\nexport default createSelectionReducer((state, action) => {\n  if (!isClearSelectionAction(action)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    selectedNodeIds: [],\n    selectedConnectionIds: [],\n    selectedJointIds: [],\n  };\n});\n","import { AnyAction } from \"redux\";\n\nimport { SelectionMode } from \"@/selection-mode\";\n\nexport const ACTION_SELECT_WIRE_JOINTS = \"@select/wire-joints\" as const;\nexport const selectWireJoints = (\n  jointId: string | string[],\n  mode: SelectionMode = \"set\"\n) => ({\n  type: ACTION_SELECT_WIRE_JOINTS,\n  payload: {\n    jointIds: Array.isArray(jointId) ? jointId : [jointId],\n    mode,\n  },\n});\nexport type SelectWireJointsAction = ReturnType<typeof selectWireJoints>;\nexport function isSelectWireJointsAction(\n  action: AnyAction\n): action is SelectWireJointsAction {\n  return action.type === ACTION_SELECT_WIRE_JOINTS;\n}\n","import { isSelectWireJointsAction } from \"@/actions/select-wire-joints\";\nimport { createSelectionReducer, combineSelection } from \"../utils\";\n\nexport default createSelectionReducer((state, action) => {\n  if (!isSelectWireJointsAction(action)) {\n    return state;\n  }\n\n  const { jointIds, mode } = action.payload;\n\n  return {\n    ...state,\n    selectedNodeIds: mode === \"set\" ? [] : state.selectedNodeIds,\n    selectedConnectionIds: mode === \"set\" ? [] : state.selectedConnectionIds,\n    selectedJointIds: combineSelection(state.selectedJointIds, jointIds, mode),\n  };\n});\n","import { isSelectNodesAction } from \"@/actions/select-nodes\";\n\nimport { combineSelection, createSelectionReducer } from \"../utils\";\n\nexport default createSelectionReducer((state, action) => {\n  if (!isSelectNodesAction(action)) {\n    return state;\n  }\n\n  const { nodeIds, mode } = action.payload;\n\n  return {\n    ...state,\n    selectedNodeIds: combineSelection(state.selectedNodeIds, nodeIds, mode),\n    selectedConnectionIds: mode === \"set\" ? [] : state.selectedConnectionIds,\n    selectedJointIds: mode === \"set\" ? [] : state.selectedJointIds,\n  };\n});\n","import {\n  createServiceReducerCreator,\n  createServiceSelectorCreator,\n} from \"../service-state-utils\";\n\nexport const createSimulatorReducer = createServiceReducerCreator(\"simulator\");\nexport const createSimulatorSelector = createServiceSelectorCreator(\n  \"simulator\"\n);\n","import { createSimulatorSelector } from \"../utils\";\nimport { SimulatorState } from \"../state\";\n\n// FIXME: Exporting simulator ids when consumer expects circuit ids\nexport const nodeStatesByIdSelector = createSimulatorSelector(\n  (s) => s.nodeStatesByNodeId\n);\n\n// FIXME: Uses simulator id when consumer expects circuit id\nexport const nodeStateFromNodeIdSelector = createSimulatorSelector(\n  (s: SimulatorState, nodeId: string) => s.nodeStatesByNodeId[nodeId]\n);\n","import { createSelector } from \"reselect\";\nimport getBounds from \"svg-path-bounds\";\n\nimport mapValues from \"lodash/mapValues\";\n\nimport { ElementDefinitionsByType } from \"@/element-defs\";\nimport { normalizeVisuals } from \"@/element-defs/utils\";\nimport { normalizeRectangle } from \"@/geometry\";\n\nimport { nodeStatesByIdSelector } from \"@/services/simulator/selectors/nodes\";\nimport { elementTypesByNodeIdSelector } from \"@/services/circuit-graph/selectors/nodes\";\n\nimport { nodePositionsByNodeIdSelector } from \"./node-positions\";\n\nexport const nodeBoundsByIdSelector = createSelector(\n  elementTypesByNodeIdSelector,\n  nodeStatesByIdSelector,\n  (elementTypesByNodeId, nodeStateById) =>\n    mapValues(elementTypesByNodeId, (elementType, id) => {\n      const def = ElementDefinitionsByType[elementType];\n      if (!def) {\n        return [0, 0, 0, 0];\n      }\n\n      const { visual } = def;\n      if (visual.hitPath) {\n        return getBounds(visual.hitPath);\n      }\n\n      const shapePaths = normalizeVisuals(visual.shapePath, nodeStateById[id]);\n\n      if (shapePaths.length > 0) {\n        return getBounds(shapePaths[0].path);\n      }\n\n      return [0, 0, 0, 0];\n    })\n);\n\nexport const nodeRectsByIdSelector = createSelector(\n  nodePositionsByNodeIdSelector,\n  nodeBoundsByIdSelector,\n  (positionsById, boundsById) =>\n    mapValues(positionsById, (p1, id) => {\n      const bounds = boundsById[id] || [0, 0, 0, 0];\n      return normalizeRectangle(\n        {\n          x: p1.x + bounds[0],\n          y: p1.y + bounds[1],\n        },\n        {\n          x: p1.x + bounds[2],\n          y: p1.y + bounds[3],\n        }\n      );\n    })\n);\n","import forOwn from \"lodash/forOwn\";\n\nimport { intersects, pointIntersects } from \"@/geometry\";\n\nimport { isSelectRegionAction } from \"@/actions/select-region\";\n\nimport { nodeRectsByIdSelector } from \"@/services/circuit-layout/selectors/node-bounds\";\nimport { wireJointPositionsByJointIdSelector } from \"@/services/circuit-layout/selectors/wires\";\n\nimport { combineSelection, createSelectionReducer } from \"../utils\";\n\nexport default createSelectionReducer((state, action, appState) => {\n  if (!isSelectRegionAction(action)) {\n    return state;\n  }\n\n  const { region, mode } = action.payload;\n\n  const rects = nodeRectsByIdSelector(appState);\n  const chosenNodeIds: string[] = [];\n  forOwn(rects, (rect, id) => {\n    if (intersects(rect, region)) {\n      chosenNodeIds.push(id);\n    }\n  });\n\n  const chosenJointIds: string[] = [];\n  const jointPositions = wireJointPositionsByJointIdSelector(appState);\n  forOwn(jointPositions, (p, jointId) => {\n    if (pointIntersects(p, region)) {\n      chosenJointIds.push(jointId);\n    }\n  });\n\n  return {\n    ...state,\n    selectedNodeIds: combineSelection(\n      state.selectedNodeIds,\n      chosenNodeIds,\n      mode\n    ),\n    selectedConnectionIds: mode === \"set\" ? [] : state.selectedConnectionIds,\n    selectedJointIds: combineSelection(\n      state.selectedJointIds,\n      chosenJointIds,\n      mode\n    ),\n  };\n});\n","import { AnyAction } from \"redux\";\n\nimport { SelectionMode } from \"@/selection-mode\";\n\nexport const ACTION_SELECT_WIRES = \"@select/wires\" as const;\nexport const selectWires = (\n  connectionId: string | string[],\n  mode: SelectionMode = \"set\"\n) => ({\n  type: ACTION_SELECT_WIRES,\n  payload: {\n    connectionIds: Array.isArray(connectionId) ? connectionId : [connectionId],\n    mode,\n  },\n});\nexport type SelectWiresAction = ReturnType<typeof selectWires>;\nexport function isSelectWiresAction(\n  action: AnyAction\n): action is SelectWiresAction {\n  return action.type === ACTION_SELECT_WIRES;\n}\n","import { isSelectWiresAction } from \"@/actions/select-wires\";\nimport { createSelectionReducer, combineSelection } from \"../utils\";\n\nexport default createSelectionReducer((state, action) => {\n  if (!isSelectWiresAction(action)) {\n    return state;\n  }\n\n  const { connectionIds, mode } = action.payload;\n\n  return {\n    ...state,\n    selectedNodeIds: mode === \"set\" ? [] : state.selectedNodeIds,\n    selectedConnectionIds: combineSelection(\n      state.selectedConnectionIds,\n      connectionIds,\n      mode\n    ),\n    selectedJointIds: mode === \"set\" ? [] : state.selectedJointIds,\n  };\n});\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_SELECTION_COPY = \"@selection/copy\" as const;\nexport const selectionCopy = () => ({\n  type: ACTION_SELECTION_COPY,\n});\nexport type SelectionCopyAction = ReturnType<typeof selectionCopy>;\nexport function isSelectionCopyAction(\n  action: AnyAction\n): action is SelectionCopyAction {\n  return action.type === ACTION_SELECTION_COPY;\n}\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_SELECTION_DELETE = \"@selection/delete\" as const;\nexport const selectionDelete = () => ({\n  type: ACTION_SELECTION_DELETE,\n});\nexport type SelectionDeleteAction = ReturnType<typeof selectionDelete>;\nexport function isSelectionDeleteAction(\n  action: AnyAction\n): action is SelectionDeleteAction {\n  return action.type === ACTION_SELECTION_DELETE;\n}\n","import { concatReducers } from \"@/store/utils\";\n\nimport nodeDeleteReducer from \"./node-delete\";\nimport projectNewReducer from \"./project-new\";\nimport selectAllReducer from \"./select-all\";\nimport selectClearReducer from \"./select-clear\";\nimport selectJointsReducer from \"./select-joints\";\nimport selectNodesReducer from \"./select-nodes\";\nimport selectRegionReducer from \"./select-region\";\nimport selectWiresReducer from \"./select-wires\";\nimport selectionCopyReducer from \"./selection-copy\";\nimport selectionDeleteReducer from \"./selection-delete\";\nimport selectionMoveReducer from \"./selection-move\";\nimport wireDetatchReducer from \"./wire-detatch\";\n\nconst selectionReducer = concatReducers(\n  projectNewReducer,\n  nodeDeleteReducer,\n  selectAllReducer,\n  selectClearReducer,\n  selectJointsReducer,\n  selectNodesReducer,\n  selectRegionReducer,\n  selectWiresReducer,\n  selectionCopyReducer,\n  selectionDeleteReducer,\n  selectionMoveReducer,\n  wireDetatchReducer\n);\n\nexport default selectionReducer;\n","import { AnyAction } from \"redux\";\n\nimport { AppState, defaultAppState } from \"@/store\";\nimport rootReducer from \"@/store/reducer\";\n\nimport { isSelectionCopyAction } from \"@/actions/selection-copy\";\nimport { copyNodes } from \"@/actions/clipboard-copy\";\n\nimport { selectedNodeIdsSelector } from \"@/services/selection/selectors/selection\";\n\nexport default function selectionCopyReducer(\n  state: AppState = defaultAppState,\n  action: AnyAction\n): AppState {\n  if (!isSelectionCopyAction(action)) {\n    return state;\n  }\n\n  const selectedNodes = selectedNodeIdsSelector(state);\n  if (selectedNodes.length === 0) {\n    return state;\n  }\n\n  return rootReducer(state, copyNodes(selectedNodes));\n}\n","import { AnyAction } from \"redux\";\n\nimport { AppState, defaultAppState } from \"@/store\";\nimport rootReducer from \"@/store/reducer\";\n\nimport { isSelectionDeleteAction } from \"@/actions/selection-delete\";\nimport { deleteNode } from \"@/actions/node-delete\";\nimport { detatchWire } from \"@/actions/wire-detatch\";\nimport { deleteWireJoint } from \"@/actions/wire-joint-delete\";\n\nexport default function selectionDeleteReducer(\n  state: AppState = defaultAppState,\n  action: AnyAction\n): AppState {\n  if (!isSelectionDeleteAction(action)) {\n    return state;\n  }\n\n  const {\n    selectedNodeIds,\n    selectedConnectionIds,\n    selectedJointIds,\n  } = state.services.selection;\n\n  if (selectedNodeIds.length > 0) {\n    state = rootReducer(state, deleteNode(selectedNodeIds));\n  }\n  state = selectedConnectionIds.reduce(\n    (state, connectionId) => rootReducer(state, detatchWire(connectionId)),\n    state\n  );\n  state = selectedJointIds.reduce(\n    (state, jointId) => rootReducer(state, deleteWireJoint(jointId)),\n    state\n  );\n\n  return state;\n}\n","import { AnyAction } from \"redux\";\n\nimport { Point } from \"@/geometry\";\nimport { AppState, defaultAppState } from \"@/store\";\nimport rootReducer from \"@/store/reducer\";\n\nimport { isMoveSelectionAction } from \"@/actions/selection-move\";\nimport { moveNode } from \"@/actions/node-move\";\nimport { moveWireJoint } from \"@/actions/wire-joint-move\";\n\nimport {\n  selectedNodeIdsSelector,\n  selectedJointIdsSelector,\n} from \"@/services/selection/selectors/selection\";\n\nexport default function selectionMoveReducer(\n  state: AppState = defaultAppState,\n  action: AnyAction\n) {\n  if (!isMoveSelectionAction(action)) {\n    return state;\n  }\n\n  const { offsetX, offsetY } = action.payload;\n\n  const nodeIds = selectedNodeIdsSelector(state);\n  const jointIds = selectedJointIdsSelector(state);\n\n  const offset: Point = {\n    x: offsetX,\n    y: offsetY,\n  };\n\n  state = rootReducer(state, moveNode(nodeIds, offset, true));\n  state = rootReducer(state, moveWireJoint(jointIds, offset, true));\n\n  return state;\n}\n","import { isDetatchWireAction } from \"@/actions/wire-detatch\";\n\nimport { createSelectionReducer } from \"../utils\";\n\nexport default createSelectionReducer((state, action) => {\n  if (!isDetatchWireAction(action)) {\n    return state;\n  }\n\n  const { connectionId } = action.payload;\n\n  return {\n    ...state,\n    selectedConnectionIds: state.selectedConnectionIds.filter(\n      (x) => x !== connectionId\n    ),\n  };\n});\n","import { ACTION_ELEMENT_ADD } from \"@/actions/element-add\";\nimport { ACTION_PROJECT_NEW } from \"@/actions/project-new\";\nimport { ACTION_NODE_DELETE } from \"@/actions/node-delete\";\nimport { ACTION_PROJECT_RECEIVE } from \"@/actions/project-receive\";\nimport { ACTION_WIRE_ATTACH } from \"@/actions/wire-attach\";\nimport { ACTION_WIRE_DETATCH } from \"@/actions/wire-detatch\";\n\nimport { defaultSimulatorState } from \"../state\";\nimport { createSimulatorReducer } from \"../utils\";\n\nconst SIM_INVALIDATE_ACTIONS = [\n  ACTION_PROJECT_NEW,\n  ACTION_PROJECT_RECEIVE,\n  ACTION_ELEMENT_ADD,\n  ACTION_NODE_DELETE,\n  ACTION_WIRE_ATTACH,\n  ACTION_WIRE_DETATCH,\n];\n\nexport default createSimulatorReducer((state, action) => {\n  if (SIM_INVALIDATE_ACTIONS.indexOf(action.type) !== -1) {\n    // Reset the simulator but keep the ticks per second choice.\n    return {\n      ...defaultSimulatorState,\n      ticksPerSecond: state.ticksPerSecond,\n    };\n  }\n\n  return state;\n});\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_NODE_INTERACT = \"@node/interact\" as const;\nexport const interactNode = (nodeId: string) => ({\n  type: ACTION_NODE_INTERACT,\n  payload: { nodeId },\n});\nexport type InteractNodeAction = ReturnType<typeof interactNode>;\nexport function isInteractNodeAction(\n  action: AnyAction\n): action is InteractNodeAction {\n  return action.type === ACTION_NODE_INTERACT;\n}\n","import { AppState } from \"@/store\";\n\nexport const simulatorNodeIdFromCircuitNodeIdSelector = (\n  state: AppState,\n  circuitNodeId: string\n) => circuitNodeId;\n\nexport const simulatorNodeIdsSelector = (state: AppState) =>\n  Object.keys(state.services.circuitGraph.nodesById);\n\nexport const elementTypeFromSimulatorNodeId = (\n  state: AppState,\n  simNodeId: string\n) => state.services.circuitGraph.nodesById[simNodeId]?.elementType ?? null;\n","import { values } from \"lodash\";\nimport createCachedSelector from \"re-reselect\";\n\nimport { AppState } from \"@/store\";\nimport { ElementDefinitionsByType } from \"@/element-defs\";\n\nimport { NodePin } from \"@/services/circuit-graph/types\";\n\nimport { elementTypeFromSimulatorNodeId } from \"./nodes\";\n\n/**\n * Gets an array of wires leaving the given node id.\n * WARN: Not react safe.  For reducer use only.\n */\nexport const outputConnectionsFromSimulatorNodeIdSelector = (\n  state: AppState,\n  simNodeId: string\n) =>\n  values(state.services.circuitGraph.connectionsById).filter(\n    (x) => x.outputPin.nodeId === simNodeId\n  );\n\n/**\n * Gets a map of node input pins to their output sources given a node id.\n */\nexport const inputNodesByPinIdFromSimulatorNodeIdSelector = createCachedSelector(\n  (s: AppState) => values(s.services.circuitGraph.connectionsById),\n  (_: any, nodeId: string) => nodeId,\n  elementTypeFromSimulatorNodeId,\n  (connections, nodeId, elementType) => {\n    const def = ElementDefinitionsByType[elementType];\n    if (!def) {\n      return {};\n    }\n\n    let inputPins: string[] = [];\n    inputPins = Object.keys(def.pins).filter(\n      (x) => def.pins[x].direction === \"input\"\n    );\n\n    const inputConnections = connections.filter(\n      (x) => x.inputPin.nodeId === nodeId\n    );\n\n    const result: Record<string, NodePin | null> = {};\n    for (const pin of inputPins) {\n      result[pin] = null;\n    }\n\n    for (const connection of inputConnections) {\n      const { outputPin, inputPin } = connection;\n      result[inputPin.pinId] = outputPin;\n    }\n\n    return result;\n  }\n)((_: any, nodeId: string) => nodeId);\n","import binarySearch from \"binary-search\";\nimport { v4 as uuidV4 } from \"uuid\";\nimport findIndex from \"lodash/findIndex\";\nimport pick from \"lodash/pick\";\nimport mapValues from \"lodash/mapValues\";\n\nimport { fpSet } from \"@/utils\";\nimport { asArray } from \"@/arrays\";\nimport { AppState } from \"@/store\";\n\nimport { outputsOf } from \"@/element-defs/utils\";\n\nimport { inputNodesByPinIdFromSimulatorNodeIdSelector } from \"@/services/simulator-graph/selectors/connections\";\nimport {\n  simulatorNodeIdsSelector,\n  elementTypeFromSimulatorNodeId,\n} from \"@/services/simulator-graph/selectors/nodes\";\n\nimport { SimulatorState, defaultSimulatorState } from \"../state\";\nimport {\n  SimTransitionWindow,\n  SimNodePinTransition as SimNodeTransition,\n} from \"../types\";\nimport { ElementDefinitionsByType } from \"@/element-defs\";\n\nexport function simInit(\n  state: SimulatorState,\n  appState: AppState\n): SimulatorState {\n  // Switching away from edit mode, initialize the simulator.\n  const nodeIds = simulatorNodeIdsSelector(appState);\n\n  state = {\n    ...defaultSimulatorState,\n    ticksPerSecond: state.ticksPerSecond,\n  };\n\n  state = nodeIds.reduce(\n    (state, nodeId) => initNode(state, nodeId, appState),\n    state\n  );\n\n  state = nodeIds.reduce(\n    (state, nodeId) => collectNodeTransitions(state, nodeId, appState),\n    state\n  );\n\n  return state;\n}\n\nfunction initNode(\n  state: SimulatorState,\n  nodeId: string,\n  appState: AppState\n): SimulatorState {\n  const elementType = elementTypeFromSimulatorNodeId(appState, nodeId);\n  const def = ElementDefinitionsByType[elementType];\n  if (!def) {\n    return state;\n  }\n\n  const outputs = outputsOf(def);\n  const outputValues = mapValues(outputs, () => false);\n  return fpSet(state, \"nodeOutputValuesByNodeId\", nodeId, outputValues);\n}\n\nexport function collectNodeTransitions(\n  state: SimulatorState,\n  nodeId: string,\n  appState: AppState\n): SimulatorState {\n  const elementType = elementTypeFromSimulatorNodeId(appState, nodeId);\n  const def = ElementDefinitionsByType[elementType];\n  if (!def || !def.evolve) {\n    return state;\n  }\n\n  // Build the current input state from the connected pins.\n  const inputs: Record<string, boolean> = {};\n  const inputSourcesByPin = inputNodesByPinIdFromSimulatorNodeIdSelector(\n    appState,\n    nodeId\n  );\n\n  for (const inputPin of Object.keys(inputSourcesByPin)) {\n    const inputConn = inputSourcesByPin[inputPin];\n    if (!inputConn) {\n      inputs[inputPin] = false;\n      continue;\n    }\n    const { nodeId: sourceNodeId, pinId: sourcePinId } = inputConn;\n\n    inputs[inputPin] =\n      state.nodeOutputValuesByNodeId[sourceNodeId]?.[sourcePinId] || false;\n  }\n\n  const result = def.evolve(\n    state.nodeStatesByNodeId[nodeId],\n    inputs,\n    state.tick\n  );\n\n  if (result.state) {\n    state = fpSet(state, \"nodeStatesByNodeId\", nodeId, result.state);\n  }\n\n  if (result.transitions) {\n    const transitions = asArray(result.transitions);\n    for (const transition of transitions) {\n      const {\n        tickOffset,\n        valuesByPin,\n        transitionMerger = \"replace\",\n      } = transition;\n\n      // Sanity check that we are not producing transitions for the past or current tick.\n      const transitionTick = state.tick + (tickOffset > 0 ? tickOffset : 1);\n\n      // We originally removed old transitions when scheduling new transitions.\n      //  Experimenting without this.\n      if (transitionMerger === \"replace\") {\n        state = removeTransitionsByNodeId(state, nodeId);\n      }\n\n      state = addTransition(state, nodeId, transitionTick, valuesByPin);\n    }\n  }\n\n  return state;\n}\n\nfunction addTransition(\n  state: Readonly<SimulatorState>,\n  nodeId: string,\n  tick: number,\n  valuesByOutputPin: Record<string, boolean>\n): SimulatorState {\n  const transitionId = uuidV4();\n\n  const newTransition: SimNodeTransition = {\n    transitionId: transitionId,\n    nodeId,\n    tick,\n    valuesByOutputPin,\n  };\n\n  // Add the transition to the state, and clone transitionWindows for mutation below.\n  state = {\n    ...state,\n    transitionsById: {\n      ...state.transitionsById,\n      [transitionId]: newTransition,\n    },\n    transitionWindows: [...state.transitionWindows],\n  };\n\n  let index = binarySearch(state.transitionWindows, tick, (a, b) => a.tick - b);\n  if (index < 0) {\n    // Need to create a new window\n    index = -index - 1;\n    const newWindow: SimTransitionWindow = {\n      tick,\n      transitionIds: [],\n    };\n    // Mutation is safe here as we cloned the array above.\n    state.transitionWindows.splice(index, 0, newWindow);\n  }\n\n  // Mutation is safe here as we cloned the array above.\n  state.transitionWindows[index] = {\n    ...state.transitionWindows[index],\n    transitionIds: [\n      ...state.transitionWindows[index].transitionIds,\n      transitionId,\n    ],\n  };\n  return state;\n}\n\nfunction removeTransitionsByNodeId(\n  state: Readonly<SimulatorState>,\n  nodeId: string\n): SimulatorState {\n  function isNodeTransition(transition: SimNodeTransition) {\n    return transition.nodeId === nodeId;\n  }\n\n  const transitionIds = Object.keys(state.transitionsById).filter((id) =>\n    isNodeTransition(state.transitionsById[id])\n  );\n\n  return transitionIds.reduce(\n    (state, transitionId) => removeTransitionById(state, transitionId),\n    state\n  );\n}\n\nexport function removeTransitionById(\n  state: Readonly<SimulatorState>,\n  transitionId: string\n): SimulatorState {\n  const transition = state.transitionsById[transitionId];\n  if (!transition) {\n    return state;\n  }\n\n  const transitionsById = pick(\n    state.transitionsById,\n    Object.keys(state.transitionsById).filter((x) => x !== transitionId)\n  );\n  let transitionWindows = state.transitionWindows;\n\n  const transitionWindowIndex = findIndex(\n    transitionWindows,\n    (x) => x.tick === transition.tick\n  );\n  if (transitionWindowIndex !== -1) {\n    const transitionWindow = transitionWindows[transitionWindowIndex];\n\n    const tickWindowTransitionIndex = transitionWindow.transitionIds.indexOf(\n      transitionId\n    );\n    if (tickWindowTransitionIndex !== -1) {\n      if (transitionWindow.transitionIds.length === 1) {\n        // Only one element left, remove the window.\n        transitionWindows = [\n          ...transitionWindows.slice(0, transitionWindowIndex),\n          ...transitionWindows.slice(transitionWindowIndex + 1),\n        ];\n      } else {\n        // Remove the transition from the tick window.\n        transitionWindows = [...transitionWindows];\n        const transitionIds =\n          transitionWindows[transitionWindowIndex].transitionIds;\n        transitionWindows[transitionWindowIndex] = {\n          ...transitionWindows[transitionWindowIndex],\n          transitionIds: [\n            ...transitionIds.slice(0, tickWindowTransitionIndex),\n            ...transitionIds.slice(tickWindowTransitionIndex + 1),\n          ],\n        };\n      }\n    }\n  }\n\n  return {\n    ...state,\n    transitionsById,\n    transitionWindows,\n  };\n}\n","import { fpSet } from \"@/utils\";\n\nimport { ElementDefinitionsByType } from \"@/element-defs\";\n\nimport { isInteractNodeAction } from \"@/actions/node-interact\";\nimport {\n  simulatorNodeIdFromCircuitNodeIdSelector,\n  elementTypeFromSimulatorNodeId,\n} from \"@/services/simulator-graph/selectors/nodes\";\n\nimport { createSimulatorReducer } from \"../utils\";\n\nimport { collectNodeTransitions } from \"./utils\";\n\nexport default createSimulatorReducer((state, action, appState) => {\n  if (!isInteractNodeAction(action)) {\n    return state;\n  }\n\n  const { nodeId: circuitNodeId } = action.payload;\n  const simulatorNodeId = simulatorNodeIdFromCircuitNodeIdSelector(\n    appState,\n    circuitNodeId\n  );\n\n  const elementType = elementTypeFromSimulatorNodeId(appState, simulatorNodeId);\n  const def = ElementDefinitionsByType[elementType];\n\n  if (!def || !def.interact) {\n    return state;\n  }\n\n  const nodeState = state.nodeStatesByNodeId[simulatorNodeId];\n  const newState = def.interact(nodeState);\n  state = fpSet(state, \"nodeStatesByNodeId\", simulatorNodeId, newState);\n\n  return collectNodeTransitions(state, simulatorNodeId, appState);\n});\n","import pick from \"lodash/pick\";\nimport difference from \"lodash/difference\";\n\nimport { AppState } from \"@/store\";\nimport { isTickSimAction } from \"@/actions/sim-tick\";\nimport { outputConnectionsFromSimulatorNodeIdSelector } from \"@/services/simulator-graph/selectors/connections\";\n\nimport { SimulatorState } from \"../state\";\nimport { SimTransitionWindow } from \"../types\";\nimport { createSimulatorReducer } from \"../utils\";\n\nimport { collectNodeTransitions } from \"./utils\";\n\nexport default createSimulatorReducer((state, action, appState) => {\n  if (!isTickSimAction(action)) {\n    return state;\n  }\n\n  const { tickCount } = action.payload;\n\n  const endTick = state.tick + tickCount;\n\n  // We cannot grab the windows ahead of time, as some windows might generate more windows\n  //  for future ticks.\n\n  // Pre-clone windows as we wil be repeatedly modifying it.\n  state = {\n    ...state,\n    transitionWindows: [...state.transitionWindows],\n  };\n\n  let saftyCount = tickCount + 1;\n  while (\n    state.transitionWindows.length > 0 &&\n    state.transitionWindows[0].tick <= endTick\n  ) {\n    if (--saftyCount === 0) {\n      // If we have seen more windows than ticks, something is creating windows for past ticks.\n      throw new Error(\n        `Maximum ticks per sim evolution exceeded.  This is an indication that windows are being generated for past ticks.`\n      );\n    }\n\n    // We can safely mutate here, as even if the array is regenerated\n    //  from a tick it will still be a fresh copy that has not yet been\n    //  consumed by redux.\n    const window = state.transitionWindows.shift()!;\n    state = tickWindow(state, window, appState);\n  }\n\n  // If we did not encounter a window on our last tick, jump ahead to that tick.\n  if (state.tick != endTick) {\n    state = {\n      ...state,\n      tick: endTick,\n    };\n  }\n\n  return state;\n});\n\nfunction tickWindow(\n  state: SimulatorState,\n  window: SimTransitionWindow,\n  appState: AppState\n): SimulatorState {\n  // Update the current tick, as it is referenced\n  //  during transition collection.\n  state = {\n    ...state,\n    tick: window.tick,\n    // pre-clone outputs for mutation below\n    nodeOutputValuesByNodeId: {\n      ...state.nodeOutputValuesByNodeId,\n    },\n  };\n\n  let updatedNodes = [];\n  for (const tid of window.transitionIds) {\n    const { nodeId, valuesByOutputPin } = state.transitionsById[tid];\n\n    // nodeOutputValuesByNodeId is pre-cloned\n    state.nodeOutputValuesByNodeId[nodeId] = {\n      ...state.nodeOutputValuesByNodeId[nodeId],\n      ...valuesByOutputPin,\n    };\n\n    // Add each node we output to, to the output list.\n    const outputWires = outputConnectionsFromSimulatorNodeIdSelector(\n      appState,\n      nodeId\n    );\n    for (const outConn of outputWires) {\n      const nodeId = outConn.inputPin.nodeId;\n      if (updatedNodes.indexOf(nodeId) === -1) {\n        updatedNodes.push(nodeId);\n      }\n    }\n  }\n\n  // Remove all window transitions as they have been consumed.\n  // State is cloned above\n  state.transitionsById = pick(\n    state.transitionsById,\n    difference(Object.keys(state.transitionsById), window.transitionIds)\n  );\n\n  for (const nodeId of updatedNodes) {\n    state = collectNodeTransitions(state, nodeId, appState);\n  }\n\n  return state;\n}\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_SIM_FASTFORWARD = \"@sim/fastforward\" as const;\nexport const fastForwardSim = () => ({\n  type: ACTION_SIM_FASTFORWARD,\n});\nexport type FastForwardSimAction = ReturnType<typeof fastForwardSim>;\nexport function isFastForwardSimAction(\n  action: AnyAction\n): action is FastForwardSimAction {\n  return action.type === ACTION_SIM_FASTFORWARD;\n}\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_SIM_PAUSE = \"@sim/pause\" as const;\nexport const pauseSim = (mode: boolean | \"toggle\") => ({\n  type: ACTION_SIM_PAUSE,\n  payload: { mode },\n});\nexport type PauseSimAction = ReturnType<typeof pauseSim>;\nexport function isPauseSimAction(action: AnyAction): action is PauseSimAction {\n  return action.type === ACTION_SIM_PAUSE;\n}\n","import { createSimulatorSelector } from \"../utils\";\n\nexport const isSimActiveSelector = createSimulatorSelector(\n  (state) => state.mode !== \"edit\"\n);\n\nexport const isSimRunningSelector = createSimulatorSelector(\n  (state) => state.mode === \"run\"\n);\n\nexport const isSimPausedSelector = createSimulatorSelector(\n  (state) => state.mode === \"pause\"\n);\n\nexport const ticksPerSecondSelector = createSimulatorSelector(\n  (state) => state.ticksPerSecond\n);\n","import { isPauseSimAction } from \"@/actions/sim-pause\";\n\nimport { createSimulatorReducer } from \"../utils\";\nimport { isSimActiveSelector } from \"../selectors/run\";\n\nexport default createSimulatorReducer((state, action) => {\n  if (!isPauseSimAction(action)) {\n    return state;\n  }\n\n  const { mode } = action.payload;\n\n  if (!isSimActiveSelector.local(state)) {\n    return state;\n  }\n\n  let runMode = state.mode;\n\n  switch (mode) {\n    case true:\n      runMode = \"pause\";\n      break;\n    case false:\n      runMode = \"run\";\n      break;\n    case \"toggle\":\n      runMode = runMode == \"run\" ? \"pause\" : \"run\";\n  }\n\n  return {\n    ...state,\n    mode: runMode,\n  };\n});\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_SIM_START = \"@sim/start\" as const;\nexport const startSim = () => ({\n  type: ACTION_SIM_START,\n});\nexport type StartSimAction = ReturnType<typeof startSim>;\nexport function isStartSimAction(action: AnyAction): action is StartSimAction {\n  return action.type === ACTION_SIM_START;\n}\n","import { isStartSimAction } from \"@/actions/sim-start\";\n\nimport { createSimulatorReducer } from \"../utils\";\n\nimport { simInit } from \"./utils\";\n\nexport default createSimulatorReducer((state, action, appState) => {\n  if (!isStartSimAction(action)) {\n    return state;\n  }\n\n  state = simInit(state, appState);\n\n  return {\n    ...state,\n    mode: \"run\",\n  };\n});\n","import { AnyAction } from \"redux\";\n\nexport const ACTION_SIM_STOP = \"@sim/stop\" as const;\nexport const stopSim = () => ({\n  type: ACTION_SIM_STOP,\n});\nexport type StartSimAction = ReturnType<typeof stopSim>;\nexport function isStopSimAction(action: AnyAction): action is StartSimAction {\n  return action.type === ACTION_SIM_STOP;\n}\n","import { isStopSimAction } from \"@/actions/sim-stop\";\n\nimport { createSimulatorReducer } from \"../utils\";\n\nimport { defaultSimulatorState } from \"../state\";\n\nexport default createSimulatorReducer((state, action, appState) => {\n  if (!isStopSimAction(action)) {\n    return state;\n  }\n\n  // Reset the simulator but keep the ticks per second choice.\n  return {\n    ...defaultSimulatorState,\n    ticksPerSecond: state.ticksPerSecond,\n  };\n});\n","import { concatReducers } from \"@/store/utils\";\n\nimport elementGraphInvalidatedReducer from \"./element-graph-invalidated\";\nimport nodeInteractReducer from \"./node-interact\";\nimport simEvolveReducer from \"./sim-evolve\";\nimport simFastforwardReducer from \"./sim-fastforward\";\nimport simPauseReducer from \"./sim-pause\";\nimport simStartReducer from \"./sim-start\";\nimport simStopReducer from \"./sim-stop\";\n\nconst simulatorReducer = concatReducers(\n  elementGraphInvalidatedReducer,\n  nodeInteractReducer,\n  simEvolveReducer,\n  simFastforwardReducer,\n  simPauseReducer,\n  simStartReducer,\n  simStopReducer\n);\n\nexport default simulatorReducer;\n","import { AnyAction } from \"redux\";\n\nimport { AppState, defaultAppState } from \"@/store\";\n\nimport { isFastForwardSimAction } from \"@/actions/sim-fastforward\";\nimport { tickSim } from \"@/actions/sim-tick\";\n\nimport evolveSimReducer from \"./sim-evolve\";\n\nexport default function simFastForwardReducer(\n  state: AppState = defaultAppState,\n  action: AnyAction\n) {\n  if (!isFastForwardSimAction(action)) {\n    return state;\n  }\n\n  const { tick, transitionWindows } = state.services.simulator;\n\n  if (transitionWindows.length === 0) {\n    return state;\n  }\n\n  const nextWindowTick = transitionWindows[0].tick - tick;\n  return evolveSimReducer(state, tickSim(nextWindowTick));\n}\n","import circuitEditorUiReducer from \"@/services/circuit-editor-ui/reducer\";\nimport circuitGraphReducer from \"@/services/circuit-graph/reducer\";\nimport circuitLayoutReducer from \"@/services/circuit-layout/reducer\";\nimport clipboardReducer from \"@/services/clipboard/reducer\";\nimport dialogReducer from \"@/services/dialog/reducer\";\nimport savedataReducer from \"@/services/savedata/reducer\";\nimport selectionReducer from \"@/services/selection/reducer\";\nimport simulatorReducer from \"@/services/simulator/reducer\";\n\nimport { concatReducers, finalizeReducerList } from \"./utils\";\n\nconst reducer = finalizeReducerList(\n  concatReducers(\n    circuitEditorUiReducer,\n    circuitGraphReducer,\n    circuitLayoutReducer,\n    clipboardReducer,\n    dialogReducer,\n    savedataReducer,\n    selectionReducer,\n    simulatorReducer\n  )\n);\n\nexport default reducer;\n","export class SaveFormatError extends Error {\n  code: string;\n\n  constructor(message: string) {\n    super(message);\n    this.message = message;\n    this.code = \"SAVE_FORMAT_ERROR\";\n  }\n}\n","import { call, select, takeEvery } from \"redux-saga/effects\";\nimport { saveAs } from \"file-saver\";\n\nimport { AppState } from \"@/store\";\n\nimport { ACTION_PROJECT_SAVE } from \"@/actions/project-save\";\n\nimport { displayDialogSaga } from \"@/services/dialog/api\";\n\nimport { createSave } from \"../utils\";\n\nexport default function* projectSaveSaga() {\n  yield takeEvery(ACTION_PROJECT_SAVE, saveProject);\n}\n\nfunction* saveProject() {\n  const state: AppState = yield select();\n\n  const fileName: string | null = yield call(\n    displayDialogSaga,\n    \"save-project\",\n    null\n  );\n  if (!fileName) {\n    return;\n  }\n\n  try {\n    const save = createSave(state);\n    const blob = new Blob([JSON.stringify(save, null, 2)], {\n      type: \"application/json;charset=utf-8\",\n    });\n\n    saveAs(blob, fileName);\n  } catch (e) {\n    // TODO: Handle error\n    console.warn(\"Failed to save project:\", e);\n  }\n}\n","import { fork } from \"redux-saga/effects\";\n\nimport projectLoadSaga from \"./project-load\";\nimport projectSaveSaga from \"./project-save\";\n\nexport default function* saveDataSaga() {\n  yield fork(projectLoadSaga);\n  yield fork(projectSaveSaga);\n}\n","import { takeLeading, select, put, delay } from \"redux-saga/effects\";\n\nimport { ACTION_SIM_START } from \"@/actions/sim-start\";\nimport { ACTION_SIM_PAUSE } from \"@/actions/sim-pause\";\n\nimport { tickSim } from \"@/actions/sim-tick\";\n\nimport { isSimRunningSelector, ticksPerSecondSelector } from \"../selectors/run\";\n\nexport default function* runModeSaga() {\n  yield takeLeading([ACTION_SIM_START, ACTION_SIM_PAUSE], handleRunSim);\n}\n\nfunction* handleRunSim() {\n  while (true) {\n    const isRunning = yield select(isSimRunningSelector);\n    if (!isRunning) {\n      break;\n    }\n\n    yield put(tickSim(1));\n\n    const tps = yield select(ticksPerSecondSelector);\n    const timeToWait = Math.max(Math.ceil(1000 / tps), 1);\n    yield delay(timeToWait);\n  }\n}\n","import { fork } from \"redux-saga/effects\";\n\nimport runModeSaga from \"./mode-run\";\n\nexport default function* simulatorSaga() {\n  yield fork(runModeSaga);\n}\n","import { createStore, compose, applyMiddleware } from \"redux\";\nimport freeze from \"redux-freeze\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport { doInit } from \"@/actions/init\";\n\nimport {\n  actionSanitizer,\n  stateSanitizer,\n  actionsBlacklist,\n} from \"./devtool-sanitizer\";\n\nimport saga from \"./saga\";\nimport reducer from \"./reducer\";\n\nconst composeEnhancers =\n  (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n      actionSanitizer,\n      stateSanitizer,\n      actionsBlacklist,\n    })) ||\n  compose;\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport const store = createStore(\n  reducer,\n  composeEnhancers(applyMiddleware(freeze, sagaMiddleware))\n);\n\nsagaMiddleware.run(saga);\nstore.dispatch(doInit());\n","import { fork } from \"redux-saga/effects\";\n\nimport saveDataSaga from \"@/services/savedata/saga\";\nimport simulatorSaga from \"@/services/simulator/saga\";\n\nexport default function* appSaga() {\n  yield fork(saveDataSaga);\n  yield fork(simulatorSaga);\n}\n","export const isProd = process.env.NODE_ENV === \"production\";\nexport const isDev = process.env.NODE_ENV === \"development\";\n","// extracted by mini-css-extract-plugin\nexport default {\"fill-parent\":\"sizing-module__fill-parent___[fullhash-base64-5]\"};","import { useSelector as useSelectorRedux } from \"react-redux\";\n\nimport { AppState } from \"@/store\";\n\nexport default function useSelector<T>(selector: (s: AppState) => T) {\n  return useSelectorRedux<AppState, T>(selector);\n}\n","import { createCircuitEditorUiSelector } from \"../utils\";\n\nexport const viewScaleSelector = createCircuitEditorUiSelector(\n  (s) => s.viewScale\n);\n","import { os } from \"platform\";\n\nconst OS_MAC = /(Mac|iOS|OS\\ X)/;\n\nexport const keyboardIsMac = OS_MAC.test((os || \"undefined\").toString());\n\nexport const keyboardCommandModifier = keyboardIsMac ? \"command\" : \"ctrl\";\n","import { keyboardCommandModifier } from \"@/runtime-env\";\n\nexport const KEYMAP_SIM_STEP = \"keymap:CircuitEditor/SimStep\" as const;\nexport const KEYMAP_SIM_FASTFORWARD = \"keymap:CircuitEditor/SimFastForward\" as const;\nexport const KEYMAP_SELECT_ALL = \"keymap:CircuitEditor/SelectAll\" as const;\nexport const KEYMAP_COPY = \"keymap:CircuitEditor/Copy\" as const;\nexport const KEYMAP_PASTE = \"keymap:CircuitEditor/Paste\" as const;\nexport const KEYMAP_DELETE = \"keymap:CircuitEditor/Delete\" as const;\n\nconst keymap = {\n  [KEYMAP_SIM_STEP]: \"space\",\n  [KEYMAP_SIM_FASTFORWARD]: \"shift+space\",\n  [KEYMAP_SELECT_ALL]: `${keyboardCommandModifier}+a`,\n  [KEYMAP_COPY]: `${keyboardCommandModifier}+c`,\n  [KEYMAP_PASTE]: `${keyboardCommandModifier}+v`,\n  [KEYMAP_DELETE]: [\"backspace\", \"del\"],\n};\nexport default keymap;\n\nexport type KeymapKeys = keyof typeof keymap;\nexport type KeymapHandler = Record<KeymapKeys, HotkeyHandler>;\n","import { createSelector } from \"reselect\";\nimport values from \"lodash/values\";\n\nimport { Rectangle, union } from \"@/geometry\";\n\nimport { nodeRectsByIdSelector } from \"./node-bounds\";\nimport { wireJointPositionsByJointIdSelector } from \"./wires\";\n\nconst MinFieldRect: Readonly<Rectangle> = Object.freeze({\n  p1: {\n    x: -100,\n    y: -100,\n  },\n  p2: {\n    x: 100,\n    y: 100,\n  },\n});\n\nexport const fieldRectSelector = createSelector(\n  nodeRectsByIdSelector,\n  wireJointPositionsByJointIdSelector,\n  (nodeRectsById, wireJointsById) => {\n    const nodeRects = values(nodeRectsById);\n    const jointRects = values(wireJointsById).map((p) => ({ p1: p, p2: p }));\n\n    return [...nodeRects, ...jointRects].reduce(union, MinFieldRect);\n  }\n);\n","import * as React from \"react\";\n\nexport const fieldSvgElementContext = React.createContext<SVGSVGElement | null>(\n  null\n);\n\nconst ContextProvider = fieldSvgElementContext.Provider;\n\nexport const FieldSvgElementProvider: React.FC<{\n  value: React.RefObject<SVGSVGElement | null>;\n}> = ({ value, children }) => {\n  // Force the component to rerender when the ref changes.\n  const [svgElement, setSvgElement] = React.useState<SVGSVGElement | null>(\n    null\n  );\n  React.useEffect(() => {\n    setSvgElement(value.current);\n  }, [value.current]);\n\n  return <ContextProvider value={svgElement}>{children}</ContextProvider>;\n};\n","import * as React from \"react\";\n\nimport {\n  ElementType,\n  ElementDefinitionsByType,\n  ElementPinDefinition,\n  PinDirection,\n} from \"@/element-defs\";\nimport { normalizeVisuals } from \"@/element-defs/utils\";\n\nexport interface RenderPinProps extends ElementPinDefinition {\n  id: string;\n  direction: PinDirection;\n}\nexport interface ElementVisualProps {\n  x?: number;\n  y?: number;\n  elementType: ElementType;\n  nodeState: any;\n  colorOverride?: string;\n  renderPin?(props: RenderPinProps): React.ReactElement<any>;\n  onClick?(e: React.MouseEvent): void;\n  onMouseDown?(e: React.MouseEvent): void;\n  onMouseOver?(e: React.MouseEvent): void;\n  onMouseUp?(e: React.MouseEvent): void;\n  onMouseLeave?(e: React.MouseEvent): void;\n}\n\nconst ElementVisual: React.FC<ElementVisualProps> = ({\n  x = 0,\n  y = 0,\n  elementType,\n  nodeState,\n  colorOverride,\n  renderPin,\n  onClick,\n  onMouseDown,\n  onMouseOver,\n  onMouseUp,\n  onMouseLeave,\n}) => {\n  const def = ElementDefinitionsByType[elementType];\n\n  let body: React.ReactNode;\n  let hitPath: string | undefined;\n  let pins: React.ReactNode = null;\n  if (!def) {\n    body = <rect x={x} y={y} width={50} height={50} fill=\"red\" />;\n  } else {\n    const { shapePath } = def.visual;\n    const visuals = normalizeVisuals(shapePath, nodeState);\n    body = visuals.map((v, i) => (\n      <path\n        key={i}\n        d={v.path}\n        fill={colorOverride || v.fill}\n        stroke={colorOverride || v.stroke}\n        strokeWidth={v.strokeWidth}\n      />\n    ));\n    hitPath = def.visual.hitPath;\n\n    if (renderPin) {\n      pins = Object.keys(def.pins).map((key) => {\n        const pin = def.pins[key];\n        let element = renderPin({\n          id: key,\n          ...pin,\n        });\n        return React.cloneElement(element, { key: `input-${key}` });\n      });\n    }\n  }\n\n  const transform = x != 0 || y != 0 ? `translate(${x}, ${y})` : undefined;\n  return (\n    <g\n      className=\"node-visual\"\n      transform={transform}\n      onClick={onClick}\n      onMouseDown={onMouseDown}\n      onMouseOver={onMouseOver}\n      onMouseUp={onMouseUp}\n      onMouseLeave={onMouseLeave}\n    >\n      {hitPath && <path d={hitPath} fill=\"transparent\" onClick={onClick} />}\n      {body}\n      {pins}\n    </g>\n  );\n};\n\nexport default ElementVisual;\n","import * as React from \"react\";\n\nimport { Point, ZeroPoint } from \"@/geometry\";\n\nimport { fieldSvgElementContext } from \"../contexts/fieldSvgElement\";\nimport { getFieldCoord } from \"../utils\";\n\nexport function useMouseCoords(): (p: Point) => Point {\n  const fieldRef = React.useContext(fieldSvgElementContext);\n  return React.useCallback(\n    (p: Point) => {\n      if (!fieldRef) {\n        return p;\n      }\n      return getFieldCoord(fieldRef, p);\n    },\n    [fieldRef]\n  );\n}\n\nexport function useEventMouseCoords(): (\n  e: MouseEvent | React.MouseEvent\n) => Point {\n  const fieldRef = React.useContext(fieldSvgElementContext);\n  return React.useCallback(\n    (e: MouseEvent | React.MouseEvent) => {\n      if (!fieldRef) {\n        return ZeroPoint;\n      }\n      const p: Point = {\n        x: e.pageX,\n        y: e.pageY,\n      };\n      return getFieldCoord(fieldRef, p);\n    },\n    [fieldRef]\n  );\n}\n","import { Point } from \"@/geometry\";\n\nexport function getFieldCoord(field: SVGSVGElement, p: Point) {\n  const ctm = field.getScreenCTM();\n  if (!ctm) {\n    return p;\n  }\n\n  const pt = field.createSVGPoint();\n  pt.x = p.x;\n  pt.y = p.y;\n  const translated = pt.matrixTransform(ctm.inverse());\n  return { x: translated.x, y: translated.y };\n}\n","import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { calcSize } from \"@/geometry\";\nimport useSelector from \"@/hooks/useSelector\";\n\nimport {\n  isDraggingNewNodeSelector,\n  dragNewNodeTypeSelector,\n  dragEndSelector,\n} from \"@/services/circuit-editor-ui/selectors/drag\";\n\nimport { fieldRectSelector } from \"@/services/circuit-layout/selectors/field\";\n\nimport { fieldDragContinue } from \"@/actions/field-drag-continue\";\n\nimport ElementVisual from \"@/pages/CircuitEditor/components/ElementVisual\";\n\nimport { useEventMouseCoords } from \"../hooks/useMouseCoords\";\n\nconst DragNewNodeLayer: React.FC = () => {\n  const dispatch = useDispatch();\n  const getMouseCoords = useEventMouseCoords();\n  const fieldRect = useSelector(fieldRectSelector);\n  const { width, height } = calcSize(fieldRect);\n  const isDraggingNewNode = useSelector(isDraggingNewNodeSelector);\n  const dragEnd = useSelector(dragEndSelector);\n  const draggingNodeType = useSelector(dragNewNodeTypeSelector);\n\n  const onMouseMove = React.useCallback(\n    (e: React.MouseEvent) => {\n      const p = getMouseCoords(e);\n      dispatch(fieldDragContinue(p));\n    },\n    [getMouseCoords]\n  );\n\n  if (!isDraggingNewNode || !draggingNodeType) {\n    return null;\n  }\n\n  return (\n    <>\n      {dragEnd && (\n        <g opacity={0.5}>\n          <ElementVisual\n            x={dragEnd.x}\n            y={dragEnd.y}\n            elementType={draggingNodeType}\n            nodeState={{}}\n          />\n        </g>\n      )}\n      <rect\n        width={width}\n        height={height}\n        fill=\"transparent\"\n        onMouseMove={onMouseMove}\n      />\n    </>\n  );\n};\n\nexport default DragNewNodeLayer;\n","import * as React from \"react\";\n\nimport pick from \"lodash/pick\";\nimport mapValues from \"lodash/mapValues\";\nimport values from \"lodash/values\";\n\nimport { createSelector } from \"reselect\";\n\nimport { elementTypesByNodeIdSelector } from \"@/services/circuit-graph/selectors/nodes\";\nimport { nodeStatesByIdSelector } from \"@/services/simulator/selectors/nodes\";\nimport { nodePositionsByNodeIdSelector } from \"@/services/circuit-layout/selectors/node-positions\";\nimport { selectedNodeIdsSelector } from \"@/services/selection/selectors/selection\";\nimport { dragMoveOffsetSelector } from \"@/services/circuit-editor-ui/selectors/drag\";\n\nimport ElementVisual from \"@/pages/CircuitEditor/components/ElementVisual\";\nimport useSelector from \"@/hooks/useSelector\";\n\nconst selectedNodePositionsByIdSelector = createSelector(\n  selectedNodeIdsSelector,\n  nodePositionsByNodeIdSelector,\n  (selectedNodeIds, nodePositionsById) =>\n    pick(nodePositionsById, selectedNodeIds)\n);\n\nconst selectedNodeTypesByIdSelector = createSelector(\n  selectedNodeIdsSelector,\n  elementTypesByNodeIdSelector,\n  (selectedNodeIds, nodeTypesById) => pick(nodeTypesById, selectedNodeIds)\n);\n\nconst selectedNodeStatesByIdSelector = createSelector(\n  selectedNodeIdsSelector,\n  nodeStatesByIdSelector,\n  (selectedNodeIds, nodeStatesById) => pick(nodeStatesById, selectedNodeIds)\n);\n\nconst DragNodePreviewLayer: React.FC = () => {\n  const selectedNodePositionsById = useSelector(\n    selectedNodePositionsByIdSelector\n  );\n  const selectedNodeTypesById = useSelector(selectedNodeTypesByIdSelector);\n  const selectedNodeStatesById = useSelector(selectedNodeStatesByIdSelector);\n  const dragMoveOffset = useSelector(dragMoveOffsetSelector);\n\n  let elements: React.ReactNode | null = null;\n  if (dragMoveOffset) {\n    elements = values(\n      mapValues(selectedNodePositionsById, (p, nodeId) => (\n        <ElementVisual\n          key={nodeId}\n          elementType={selectedNodeTypesById[nodeId]}\n          nodeState={selectedNodeStatesById[nodeId]}\n          x={p.x + dragMoveOffset.x}\n          y={p.y + dragMoveOffset.y}\n        />\n      ))\n    );\n  }\n  return (\n    <g id=\"drag-preview-layer\" opacity={0.3}>\n      {elements}\n    </g>\n  );\n};\n\nexport default DragNodePreviewLayer;\n","import { keyboardIsMac } from \"./runtime-env\";\n\nexport type SelectionMode = \"set\" | \"append\" | \"remove\" | \"toggle\";\n\nexport function getModifiers(e: MouseEvent): ModifierKeys {\n  const { ctrlKey, altKey, shiftKey, metaKey } = e;\n  return {\n    ctrlMetaKey: keyboardIsMac ? metaKey : ctrlKey,\n    altKey: altKey,\n    shiftKey,\n  };\n}\n\nexport function getSelectMode(modifiers: ModifierKeys): SelectionMode {\n  if (modifiers.shiftKey && modifiers.ctrlMetaKey) {\n    return \"remove\";\n  }\n  if (modifiers.shiftKey) {\n    return \"append\";\n  }\n  if (modifiers.ctrlMetaKey) {\n    return \"toggle\";\n  }\n  return \"set\";\n}\n\nexport interface ModifierKeys {\n  ctrlMetaKey: boolean;\n  shiftKey: boolean;\n  altKey: boolean;\n}\n","import * as React from \"react\";\nimport { Point, ZeroPoint, pointSubtract } from \"@/geometry\";\n\nexport interface UseMouseTracking {\n  startTracking(e: React.MouseEvent): void;\n  cancelTracking(): void;\n}\n\nexport interface MouseTrackingOptions {\n  dragThreshold?: number;\n  onClick?(e: MouseEvent): void;\n  onDragStart?(e: MouseEvent): void;\n  onDragMove?(offset: Point, e: MouseEvent): void;\n  onDragEnd?(offset: Point, e: MouseEvent): void;\n}\n\nexport default function useMouseTracking(\n  opts: MouseTrackingOptions\n): UseMouseTracking {\n  const {\n    dragThreshold = 5,\n    onClick,\n    onDragStart,\n    onDragMove,\n    onDragEnd,\n  } = opts;\n\n  // We need both state and ref for this.\n  //  State lets us trigger a rerender / useEffect.\n  //  Ref lets us check for cancellation when handling document events.\n  //  We seem to get a few rogue onMouseMove events after we try to stop tracking.\n  const [isTracking, setTracking] = React.useState(false);\n  const isTrackingRef = React.useRef(false);\n\n  const isDraggingRef = React.useRef(false);\n  const mouseDownRef = React.useRef<Point>(ZeroPoint);\n\n  const startTracking = React.useCallback((e: React.MouseEvent) => {\n    if (isTrackingRef.current) {\n      return;\n    }\n\n    isTrackingRef.current = true;\n    setTracking(true);\n    mouseDownRef.current = { x: e.pageX, y: e.pageY };\n  }, []);\n\n  const cancelTracking = React.useCallback(() => {\n    isTrackingRef.current = false;\n    setTracking(false);\n    isDraggingRef.current = false;\n    mouseDownRef.current = ZeroPoint;\n  }, []);\n\n  React.useEffect(() => {\n    if (!isTracking) {\n      return;\n    }\n\n    function onMouseMove(e: MouseEvent) {\n      if (!isTrackingRef.current) {\n        return;\n      }\n\n      if (isDraggingRef.current) {\n        if (onDragMove) {\n          const offset = pointSubtract(\n            { x: e.pageX, y: e.pageY },\n            mouseDownRef.current\n          );\n          onDragMove(offset, e);\n        }\n      } else {\n        const d = mouseDownRef.current;\n        if (\n          Math.abs(d.x - e.pageX) >= dragThreshold ||\n          Math.abs(d.y - e.pageY) >= dragThreshold\n        ) {\n          isDraggingRef.current = true;\n          if (onDragStart) {\n            onDragStart(e);\n          }\n        }\n      }\n    }\n\n    function onMouseUp(e: MouseEvent) {\n      if (!isTrackingRef.current) {\n        return;\n      }\n\n      if (isDraggingRef.current) {\n        if (onDragEnd) {\n          const offset = pointSubtract(\n            { x: e.pageX, y: e.pageY },\n            mouseDownRef.current\n          );\n          onDragEnd(offset, e);\n        }\n      } else {\n        if (onClick) {\n          onClick(e);\n        }\n      }\n\n      cancelTracking();\n    }\n\n    document.addEventListener(\"mousemove\", onMouseMove);\n    document.addEventListener(\"mouseup\", onMouseUp);\n\n    return () => {\n      document.removeEventListener(\"mousemove\", onMouseMove);\n      document.removeEventListener(\"mouseup\", onMouseUp);\n    };\n  }, [isTracking]);\n\n  return {\n    startTracking,\n    cancelTracking,\n  };\n}\n","import * as React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { Point } from \"@/geometry\";\nimport { getModifiers, getSelectMode } from \"@/selection-mode\";\n\nimport useMouseTracking from \"@/hooks/useMouseTracking\";\n\nimport { selectionRectSelector } from \"@/services/circuit-editor-ui/selectors/drag\";\n\nimport { clearSelection } from \"@/actions/select-clear\";\nimport { fieldDragStartSelect } from \"@/actions/field-drag-start-select\";\nimport { fieldDragContinue } from \"@/actions/field-drag-continue\";\nimport { fieldDragEnd } from \"@/actions/field-drag-end\";\n\nimport { useEventMouseCoords } from \"../hooks/useMouseCoords\";\n\nconst DragSelectLayer: React.FC = () => {\n  const dispatch = useDispatch();\n  const selectionRect = useSelector(selectionRectSelector);\n\n  const getCoords = useEventMouseCoords();\n\n  const onClick = React.useCallback(() => {\n    dispatch(clearSelection());\n  }, []);\n\n  const onDragStart = React.useCallback(\n    (e: MouseEvent) => {\n      const p = getCoords(e);\n      dispatch(fieldDragStartSelect(p));\n    },\n    [getCoords]\n  );\n\n  const onDragMove = React.useCallback(\n    (offset: Point, e: MouseEvent) => {\n      const p = getCoords(e);\n      dispatch(fieldDragContinue(p));\n    },\n    [getCoords]\n  );\n\n  const onDragEnd = React.useCallback(\n    (offset: Point, e: MouseEvent) => {\n      const p = getCoords(e);\n      const modifiers = getModifiers(e);\n      const mode = getSelectMode(modifiers);\n      dispatch(fieldDragEnd(p, mode));\n    },\n    [getCoords]\n  );\n\n  const { startTracking } = useMouseTracking({\n    onClick,\n    onDragStart,\n    onDragMove,\n    onDragEnd,\n  });\n  const onMouseDown = React.useCallback(\n    (e: React.MouseEvent) => {\n      if (e.defaultPrevented) {\n        return;\n      }\n      e.preventDefault();\n      startTracking(e);\n    },\n    [getCoords]\n  );\n\n  return (\n    <g id=\"drag-select-layer\">\n      <rect\n        width=\"100%\"\n        height=\"100%\"\n        fill=\"transparent\"\n        onMouseDown={onMouseDown}\n      />\n      {selectionRect && (\n        <g\n          transform={`translate(${selectionRect.p1.x}, ${selectionRect.p1.y})`}\n        >\n          <rect\n            width={selectionRect.p2.x - selectionRect.p1.x}\n            height={selectionRect.p2.y - selectionRect.p1.y}\n            strokeWidth=\"2\"\n            strokeDasharray=\"5 3\"\n            stroke=\"skyblue\"\n            fill=\"transparent\"\n          />\n        </g>\n      )}\n    </g>\n  );\n};\n\nexport default DragSelectLayer;\n","import * as React from \"react\";\n\nimport useSelector from \"@/hooks/useSelector\";\nimport { viewScaleSelector } from \"@/services/circuit-editor-ui/selectors/view\";\n\nconst GridBackground: React.FC = () => {\n  const scale = useSelector(viewScaleSelector);\n\n  return (\n    <svg width=\"100%\" height=\"100%\" xmlns=\"http://www.w3.org/2000/svg\">\n      <defs>\n        <pattern id=\"grid\" width=\"50\" height=\"50\" patternUnits=\"userSpaceOnUse\">\n          <path\n            d=\"M 50 0 L 0 0 0 50\"\n            fill=\"none\"\n            stroke=\"gray\"\n            strokeWidth={0.5 * (1 / scale)}\n          />\n        </pattern>\n      </defs>\n\n      <rect width=\"100%\" height=\"100%\" fill=\"url(#grid)\" />\n    </svg>\n  );\n};\n\nexport default GridBackground;\n","import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { Point } from \"@/geometry\";\nimport { getModifiers, getSelectMode } from \"@/selection-mode\";\n\nimport useSelector from \"@/hooks/useSelector\";\nimport useMouseTracking from \"@/hooks/useMouseTracking\";\n\nimport { elementTypeFromNodeIdSelector } from \"@/services/circuit-graph/selectors/nodes\";\nimport { nodeStateFromNodeIdSelector } from \"@/services/simulator/selectors/nodes\";\nimport { isNodeSelectedFromNodeIdSelector } from \"@/services/selection/selectors/selection\";\nimport { nodePositionFromNodeIdSelector } from \"@/services/circuit-layout/selectors/node-positions\";\nimport { isSimActiveSelector } from \"@/services/simulator/selectors/run\";\n\nimport { fieldDragStartNode } from \"@/actions/field-drag-start-node\";\nimport { fieldDragContinue } from \"@/actions/field-drag-continue\";\nimport { fieldDragEnd } from \"@/actions/field-drag-end\";\nimport { interactNode } from \"@/actions/node-interact\";\nimport { selectNodes } from \"@/actions/select-nodes\";\n\nimport ElementVisual from \"@/pages/CircuitEditor/components/ElementVisual\";\n\nimport { useEventMouseCoords } from \"../hooks/useMouseCoords\";\n\nexport interface CircuitNodeProps {\n  nodeId: string;\n}\n\nconst CircuitNode: React.FC<CircuitNodeProps> = ({ nodeId }) => {\n  const dispatch = useDispatch();\n\n  const isSimActive = useSelector(isSimActiveSelector);\n\n  const { x, y } = useSelector((s) =>\n    nodePositionFromNodeIdSelector(s, nodeId)\n  );\n  const nodeType = useSelector((s) => elementTypeFromNodeIdSelector(s, nodeId));\n  const nodeState = useSelector((s) => nodeStateFromNodeIdSelector(s, nodeId));\n  const isSelected = useSelector((s) =>\n    isNodeSelectedFromNodeIdSelector(s, nodeId)\n  );\n\n  const getCoords = useEventMouseCoords();\n\n  const onClick = React.useCallback(\n    (e: MouseEvent) => {\n      if (isSimActive) {\n        dispatch(interactNode(nodeId));\n      } else {\n        const modifiers = getModifiers(e);\n        const mode = getSelectMode(modifiers);\n        dispatch(selectNodes(nodeId, mode));\n      }\n    },\n    [isSimActive]\n  );\n\n  const onDragStart = React.useCallback(\n    (e: MouseEvent) => {\n      const p = getCoords(e);\n      const modifiers = getModifiers(e);\n      const mode = getSelectMode(modifiers);\n      dispatch(fieldDragStartNode(nodeId, p, mode));\n    },\n    [nodeId, getCoords]\n  );\n\n  const onDragMove = React.useCallback(\n    (offset: Point, e: MouseEvent) => {\n      const p = getCoords(e);\n      dispatch(fieldDragContinue(p));\n    },\n    [getCoords]\n  );\n\n  const onDragEnd = React.useCallback(\n    (offset: Point, e: MouseEvent) => {\n      const p = getCoords(e);\n      const modifiers = getModifiers(e);\n      const mode = getSelectMode(modifiers);\n      dispatch(fieldDragEnd(p, mode));\n    },\n    [getCoords]\n  );\n\n  const { startTracking } = useMouseTracking({\n    onClick,\n    onDragStart,\n    onDragMove,\n    onDragEnd,\n  });\n  const onMouseDown = React.useCallback(\n    (e: React.MouseEvent) => {\n      if (e.defaultPrevented) {\n        return;\n      }\n      e.preventDefault();\n      startTracking(e);\n    },\n    [getCoords]\n  );\n\n  if (!nodeType) {\n    return null;\n  }\n\n  return (\n    <ElementVisual\n      x={x}\n      y={y}\n      elementType={nodeType}\n      nodeState={nodeState}\n      // TODO: Use css vars for this.  Currently cannot do so as nodes declare their own\n      //  stroke/fill that gets set as attributes\n      colorOverride={isSelected ? \"blue\" : undefined}\n      onMouseDown={onMouseDown}\n    />\n  );\n};\n\nexport default CircuitNode;\n","import * as React from \"react\";\n\nimport useSelector from \"@/hooks/useSelector\";\n\nimport { nodeIdsSelector } from \"@/services/circuit-graph/selectors/nodes\";\n\nimport Node from \"./Node\";\n\nconst NodesLayer: React.FC = () => {\n  const nodeIds = useSelector((state) => nodeIdsSelector(state));\n\n  const nodeElements = nodeIds.map((nodeId) => {\n    return <Node key={nodeId} nodeId={nodeId} />;\n  });\n\n  return <g id=\"nodes-layer\">{nodeElements}</g>;\n};\nexport default NodesLayer;\n","import createCachedSelector from \"re-reselect\";\n\nimport { AppState } from \"@/store\";\n\nimport { Connection } from \"@/services/circuit-graph/types\";\n\nexport const wireValueFromConnectionIdSelector = createCachedSelector(\n  (state: AppState, connectionId: string) =>\n    state.services.circuitGraph.connectionsById[connectionId],\n  (state: AppState) => state.services.simulator.nodeOutputValuesByNodeId,\n  (\n    wire: Connection,\n    outputVauesByNodeId: Record<string, Record<string, boolean>>\n  ) => {\n    if (!wire) {\n      return false;\n    }\n\n    const {\n      outputPin: { nodeId, pinId },\n    } = wire;\n\n    return outputVauesByNodeId[nodeId]?.[pinId] || false;\n  }\n)((_: any, connectionId: string) => connectionId);\n","import * as React from \"react\";\nimport { v4 as uuidV4 } from \"uuid\";\nimport { useDispatch } from \"react-redux\";\n\nimport {\n  Point,\n  normalize,\n  pointSubtract,\n  dotProduct,\n  pointAdd,\n  scale,\n} from \"@/geometry\";\nimport { getSelectMode, getModifiers } from \"@/selection-mode\";\n\nimport useSelector from \"@/hooks/useSelector\";\nimport useMouseTracking from \"@/hooks/useMouseTracking\";\n\nimport { addWireJoint } from \"@/actions/wire-joint-add\";\nimport { moveWireJoint } from \"@/actions/wire-joint-move\";\nimport { selectWires } from \"@/actions/select-wires\";\n\nimport {\n  wireJointPositionFromJointIdSelector,\n  wireStartPositionFromConnectionIdSelector,\n  wireEndPositionFromConnectionIdSelector,\n} from \"@/services/circuit-layout/selectors/wires\";\n\nimport { useEventMouseCoords } from \"../hooks/useMouseCoords\";\n\nexport interface WireSegmentProps {\n  connectionId: string;\n  startJointId: string | null;\n  endJointId: string | null;\n}\nconst WireSegment: React.FC<WireSegmentProps> = ({\n  connectionId,\n  startJointId,\n  endJointId,\n}) => {\n  const dispatch = useDispatch();\n  const getMouseCoords = useEventMouseCoords();\n\n  const start = useSelector((state) => {\n    if (startJointId == null) {\n      return wireStartPositionFromConnectionIdSelector(state, connectionId);\n    }\n    return wireJointPositionFromJointIdSelector(state, startJointId);\n  });\n\n  const end = useSelector((state) => {\n    if (endJointId == null) {\n      return wireEndPositionFromConnectionIdSelector(state, connectionId);\n    }\n    return wireJointPositionFromJointIdSelector(state, endJointId);\n  });\n\n  const [mousePos, setMousePos] = React.useState<Point | null>(null);\n  const addedJointRef = React.useRef<string | null>(null);\n\n  const onMouseMove = React.useCallback(\n    (e: React.MouseEvent) => {\n      const p = getMouseCoords(e);\n      setMousePos(p);\n    },\n    [getMouseCoords]\n  );\n\n  const onMouseLeave = React.useCallback(() => {\n    setMousePos(null);\n  }, []);\n\n  const onDragStart = React.useCallback(\n    (e: MouseEvent) => {\n      const p = getMouseCoords(e);\n      const jointId = uuidV4();\n      addedJointRef.current = jointId;\n      dispatch(addWireJoint(connectionId, startJointId, p, jointId));\n    },\n    [connectionId, startJointId, getMouseCoords]\n  );\n\n  const onDragMove = React.useCallback(\n    (offset: Point, e: MouseEvent) => {\n      const jointId = addedJointRef.current;\n      if (!jointId) {\n        return;\n      }\n      const p = getMouseCoords(e);\n      dispatch(moveWireJoint(jointId, p));\n    },\n    [getMouseCoords]\n  );\n\n  const onClick = React.useCallback(\n    (e: MouseEvent) => {\n      const modifiers = getModifiers(e);\n      const mode = getSelectMode(modifiers);\n      dispatch(selectWires(connectionId, mode));\n    },\n    [connectionId]\n  );\n\n  const { startTracking } = useMouseTracking({\n    onClick,\n    onDragStart,\n    onDragMove,\n  });\n\n  const onJointInsertMouseDown = React.useCallback(\n    (e: React.MouseEvent) => {\n      startTracking(e);\n    },\n    [startTracking]\n  );\n\n  let insertJointPos: Point | undefined;\n  if (mousePos) {\n    let lineDir = normalize(pointSubtract(end, start));\n    const v = pointSubtract(mousePos, start);\n    var d = dotProduct(v, lineDir);\n    insertJointPos = pointAdd(start, scale(lineDir, d));\n  }\n\n  return (\n    <g onMouseMove={onMouseMove} onMouseLeave={onMouseLeave}>\n      <line x1={start.x} y1={start.y} x2={end.x} y2={end.y} strokeWidth={2} />\n      {insertJointPos && (\n        <circle\n          cx={insertJointPos.x}\n          cy={insertJointPos.y}\n          r={3}\n          stroke=\"none\"\n          fill=\"red\"\n          onMouseDown={onJointInsertMouseDown}\n        />\n      )}\n    </g>\n  );\n};\n\nexport default WireSegment;\n","import WireJoint from \"./WireJoint\";\nexport default WireJoint;\n","import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { Point } from \"@/geometry\";\nimport { cls } from \"@/utils\";\nimport { getSelectMode, getModifiers } from \"@/selection-mode\";\n\nimport useSelector from \"@/hooks/useSelector\";\nimport useMouseTracking from \"@/hooks/useMouseTracking\";\n\nimport { wireJointPositionFromJointIdSelector } from \"@/services/circuit-layout/selectors/wires\";\nimport { isJointSelectedFromJointIdSelector } from \"@/services/selection/selectors/selection\";\n\nimport { moveWireJoint } from \"@/actions/wire-joint-move\";\nimport { selectWireJoints } from \"@/actions/select-wire-joints\";\n\nimport { useEventMouseCoords } from \"../../hooks/useMouseCoords\";\n\nimport styles from \"./WireJoint.module.css\";\n\ninterface WireJointProps {\n  jointId: string;\n}\n\nconst WireJoint: React.FC<WireJointProps> = ({ jointId }) => {\n  const getMouseCoords = useEventMouseCoords();\n  const dispatch = useDispatch();\n\n  const isSelected = useSelector((state) =>\n    isJointSelectedFromJointIdSelector(state, jointId)\n  );\n\n  const position = useSelector((state) =>\n    wireJointPositionFromJointIdSelector(state, jointId)\n  );\n  const [mouseOver, setMouseOver] = React.useState(false);\n\n  const onJointDragMove = React.useCallback(\n    (offset: Point, e: MouseEvent) => {\n      const p = getMouseCoords(e);\n      dispatch(moveWireJoint(jointId, p));\n    },\n    [getMouseCoords]\n  );\n\n  const onClick = React.useCallback(\n    (e: MouseEvent) => {\n      const modifiers = getModifiers(e);\n      const mode = getSelectMode(modifiers);\n      dispatch(selectWireJoints(jointId, mode));\n    },\n    [jointId]\n  );\n\n  const { startTracking: startMoveJointTracking } = useMouseTracking({\n    onClick,\n    onDragMove: onJointDragMove,\n  });\n\n  const onMouseOver = React.useCallback(() => {\n    setMouseOver(true);\n  }, []);\n  const onMouseOut = React.useCallback(() => {\n    setMouseOver(false);\n  }, []);\n\n  const mouseDown = React.useCallback(\n    (e: React.MouseEvent) => {\n      startMoveJointTracking(e);\n    },\n    [startMoveJointTracking]\n  );\n\n  return (\n    <circle\n      className={cls(styles[\"wire-joint\"], isSelected && styles[\"selected\"])}\n      cx={position.x}\n      cy={position.y}\n      r={mouseOver || isSelected ? 4 : 2}\n      onMouseOver={onMouseOver}\n      onMouseOut={onMouseOut}\n      onMouseDown={mouseDown}\n    />\n  );\n};\n\nexport default WireJoint;\n","// extracted by mini-css-extract-plugin\nexport default {\"wire-joint\":\"WireJoint-module__wire-joint___[fullhash-base64-5]\",\"selected\":\"WireJoint-module__selected___[fullhash-base64-5]\"};","import Wire from \"./Wire\";\nexport default Wire;\n","import * as React from \"react\";\n\nimport { cls } from \"@/utils\";\nimport useSelector from \"@/hooks/useSelector\";\n\nimport { wireJointIdsFromConnectionIdSelector } from \"@/services/circuit-layout/selectors/wires\";\nimport { isWireSelectedFromConnectionIdSelector } from \"@/services/selection/selectors/selection\";\nimport { wireValueFromConnectionIdSelector } from \"@/services/simulator/selectors/wires\";\n\nimport WireSegment from \"../WireSegment\";\nimport WireJoint from \"../WireJoint\";\n\nimport styles from \"./Wire.module.css\";\n\nexport interface WireProps {\n  connectionId: string;\n}\n\nconst Wire: React.FC<WireProps> = ({ connectionId }) => {\n  const jointIds = useSelector((state) =>\n    wireJointIdsFromConnectionIdSelector(state, connectionId)\n  );\n  const isPowered = useSelector((state) =>\n    wireValueFromConnectionIdSelector(state, connectionId)\n  );\n  const isSelected = useSelector((state) =>\n    isWireSelectedFromConnectionIdSelector(state, connectionId)\n  );\n\n  // We need one extra array entry for starting on the last jointId and ending at null (end of wire)\n  const segmentElements = [...jointIds, null].map((endJointId, index) => {\n    const startJointId = index > 0 ? jointIds[index - 1] : null;\n    return (\n      <WireSegment\n        key={index}\n        connectionId={connectionId}\n        startJointId={startJointId}\n        endJointId={endJointId}\n      />\n    );\n  });\n\n  const jointElements = jointIds.map((jointId) => (\n    <WireJoint key={jointId} jointId={jointId} />\n  ));\n\n  return (\n    <g\n      className={cls(\n        styles[\"wire\"],\n        isPowered && styles[\"powered\"],\n        isSelected && styles[\"selected\"]\n      )}\n    >\n      {segmentElements}\n      {jointElements}\n    </g>\n  );\n};\n\nexport default Wire;\n","// extracted by mini-css-extract-plugin\nexport default {\"wire\":\"Wire-module__wire___[fullhash-base64-5]\",\"powered\":\"Wire-module__powered___[fullhash-base64-5]\",\"selected\":\"Wire-module__selected___[fullhash-base64-5]\"};","import * as React from \"react\";\n\nimport { connectionIdsSelector } from \"@/services/circuit-graph/selectors/connections\";\nimport useSelector from \"@/hooks/useSelector\";\n\nimport Wire from \"./Wire\";\n\nconst WiresLayer: React.FC = () => {\n  const connectionIds = useSelector(connectionIdsSelector);\n  const connectorElements = connectionIds.map((connectionId) => (\n    <Wire key={connectionId} connectionId={connectionId} />\n  ));\n\n  return <g id=\"wires-layer\">{connectorElements}</g>;\n};\nexport default WiresLayer;\n","// extracted by mini-css-extract-plugin\nexport default {\"node-pin-output\":\"NodePin-module__node-pin-output___[fullhash-base64-5]\",\"is-drag-target\":\"NodePin-module__is-drag-target___[fullhash-base64-5]\",\"node-pin-input\":\"NodePin-module__node-pin-input___[fullhash-base64-5]\"};","import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { cls } from \"@/utils\";\nimport { Point } from \"@/geometry\";\nimport { getModifiers, getSelectMode } from \"@/selection-mode\";\n\nimport useSelector from \"@/hooks/useSelector\";\nimport useMouseTracking from \"@/hooks/useMouseTracking\";\n\nimport { nodePinPositionFromNodePinSelector } from \"@/services/circuit-layout/selectors/node-positions\";\nimport { pinDirectionFromNodePinSelector } from \"@/services/circuit-graph/selectors/pins\";\nimport { dragWireTargetPinSelector } from \"@/services/circuit-editor-ui/selectors/drag\";\n\nimport { fieldDragStartWire } from \"@/actions/field-drag-start-wire\";\nimport { fieldDragEnd } from \"@/actions/field-drag-end\";\nimport { fieldDragContinue } from \"@/actions/field-drag-continue\";\n\nimport { useEventMouseCoords } from \"../../hooks/useMouseCoords\";\n\nimport styles from \"./NodePin.module.css\";\n\nexport interface NodePinProps {\n  nodeId: string;\n  pinId: string;\n}\n\nconst NodePin: React.FC<NodePinProps> = ({ nodeId, pinId }) => {\n  const getMouseCoords = useEventMouseCoords();\n  const dispatch = useDispatch();\n\n  const position = useSelector((s) =>\n    nodePinPositionFromNodePinSelector(s, nodeId, pinId)\n  );\n  const direction = useSelector((s) =>\n    pinDirectionFromNodePinSelector(s, nodeId, pinId)\n  );\n\n  const dragTargetPin = useSelector(dragWireTargetPinSelector);\n\n  const onDragStart = React.useCallback(\n    (e) => {\n      const p = getMouseCoords(e);\n      dispatch(fieldDragStartWire(p, { nodeId, pinId }));\n    },\n    [getMouseCoords, nodeId, pinId]\n  );\n\n  const onDragMove = React.useCallback(\n    (offset: Point, e: MouseEvent) => {\n      const p = getMouseCoords(e);\n      dispatch(fieldDragContinue(p));\n    },\n    [getMouseCoords]\n  );\n\n  const onDragEnd = React.useCallback(\n    (offset: Point, e: MouseEvent) => {\n      const p = getMouseCoords(e);\n      const modifiers = getModifiers(e);\n      const mode = getSelectMode(modifiers);\n      dispatch(fieldDragEnd(p, mode));\n    },\n    [getMouseCoords]\n  );\n\n  const { startTracking } = useMouseTracking({\n    onDragStart,\n    onDragMove,\n    onDragEnd,\n  });\n\n  const onMouseDown = React.useCallback((e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    startTracking(e);\n  }, []);\n\n  if (!position) {\n    return null;\n  }\n\n  const isDragTarget =\n    dragTargetPin != null &&\n    dragTargetPin.nodeId === nodeId &&\n    dragTargetPin.pinId === pinId;\n\n  const { x, y } = position;\n\n  if (direction === \"input\") {\n    return (\n      <path\n        d={describeArc(x, y, 5, -45, 225)}\n        className={cls(\n          styles[\"node-pin-input\"],\n          isDragTarget && styles[\"is-drag-target\"]\n        )}\n        onMouseDown={onMouseDown}\n      />\n    );\n  }\n\n  return (\n    <circle\n      className={cls(\n        styles[\"node-pin-output\"],\n        isDragTarget && styles[\"is-drag-target\"]\n      )}\n      cx={x}\n      cy={y}\n      r={3}\n      onMouseDown={onMouseDown}\n    />\n  );\n};\n\nexport default NodePin;\n\n// Arc code from https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\nfunction describeArc(\n  x: number,\n  y: number,\n  radius: number,\n  startAngle: number,\n  endAngle: number\n): string {\n  var start = polarToCartesian(x, y, radius, endAngle);\n  var end = polarToCartesian(x, y, radius, startAngle);\n\n  var largeArcFlag = endAngle - startAngle <= 180 ? \"0\" : \"1\";\n\n  var d = [\n    \"M\",\n    start.x,\n    start.y,\n    \"A\",\n    radius,\n    radius,\n    0,\n    largeArcFlag,\n    0,\n    end.x,\n    end.y,\n  ].join(\" \");\n\n  return d;\n}\n\nfunction polarToCartesian(\n  centerX: number,\n  centerY: number,\n  radius: number,\n  angleInDegrees: number\n): Point {\n  var angleInRadians = ((angleInDegrees - 90) * Math.PI) / 180.0;\n\n  return {\n    x: centerX + radius * Math.cos(angleInRadians),\n    y: centerY + radius * Math.sin(angleInRadians),\n  };\n}\n","import NodePin from \"./NodePin\";\nexport default NodePin;\n","import * as React from \"react\";\n\nimport useSelector from \"@/hooks/useSelector\";\n\nimport { nodePinsSelector } from \"@/services/circuit-graph/selectors/nodes\";\n\nimport NodePin from \"./NodePin\";\n\nconst NodePinsLayer: React.FC = () => {\n  const pins = useSelector((state) => nodePinsSelector(state));\n\n  const elements = pins.map(({ nodeId, pinId }) => (\n    <NodePin key={`${nodeId}-${pinId}`} nodeId={nodeId} pinId={pinId} />\n  ));\n\n  return <g id=\"node-pins-layer\">{elements}</g>;\n};\n\nexport default NodePinsLayer;\n","import * as React from \"react\";\n\nimport useSelector from \"@/hooks/useSelector\";\n\nimport {\n  dragEndSelector,\n  dragModeSelector,\n  dragStartSelector,\n} from \"@/services/circuit-editor-ui/selectors/drag\";\n\nconst DragAttachWirePreviewLayer: React.FC = () => {\n  const dragMode = useSelector(dragModeSelector);\n  const dragStart = useSelector(dragStartSelector);\n  const dragEnd = useSelector(dragEndSelector);\n\n  if (dragMode != \"wire\" || !dragStart || !dragEnd) {\n    return null;\n  }\n\n  return (\n    <line\n      x1={dragStart.x}\n      y1={dragStart.y}\n      x2={dragEnd.x}\n      y2={dragEnd.y}\n      stroke=\"black\"\n      strokeWidth={1}\n    />\n  );\n};\n\nexport default DragAttachWirePreviewLayer;\n","import CircuitField from \"./CircuitField\";\nexport default CircuitField;\n","import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { cls } from \"@/utils\";\nimport { calcSize } from \"@/geometry\";\n\nimport useSelector from \"@/hooks/useSelector\";\n\nimport { fieldRectSelector } from \"@/services/circuit-layout/selectors/field\";\n\nimport { fieldMouseLeave } from \"@/actions/field-mouse-leave\";\n\nimport { FieldSvgElementProvider } from \"./contexts/fieldSvgElement\";\n\nimport DragNewNodeLayer from \"./components/DragNewNodeLayer\";\nimport DragNodePreviewLayer from \"./components/DragNodePreviewLayer\";\nimport DragSelectLayer from \"./components/DragSelectLayer\";\nimport GridBackground from \"./components/GridBackground\";\nimport NodesLayer from \"./components/NodesLayer\";\nimport WiresLayer from \"./components/WiresLayer\";\nimport NodePinsLayer from \"./components/NodePinsLayer\";\nimport DragAttachWirePreviewLayer from \"./components/DragAttachWirePreviewLayer\";\n\nimport styles from \"./CircuitField.module.css\";\n\nconst CircuitField: React.FC = () => {\n  const dispatch = useDispatch();\n  const fieldRect = useSelector(fieldRectSelector);\n  const { width, height } = calcSize(fieldRect);\n\n  const svgRef = React.useRef<SVGSVGElement>(null);\n\n  const onMouseDown = React.useCallback(() => {\n    svgRef.current?.focus();\n  }, []);\n\n  const onMouseLeave = React.useCallback(() => {\n    dispatch(fieldMouseLeave());\n  }, []);\n\n  return (\n    // svg seems to have an implicit bottom margin against its parent div.\n    //  Wrapping it in a div of the same size fixes it.\n    <div\n      className={cls(\"circuit-field\", styles[\"circuit-editor\"])}\n      style={{\n        width: `${width}px`,\n        height: `${height}px`,\n      }}\n    >\n      <svg\n        tabIndex={-1}\n        ref={svgRef}\n        width={width}\n        height={height}\n        onMouseDown={onMouseDown}\n        onMouseLeave={onMouseLeave}\n      >\n        <FieldSvgElementProvider value={svgRef}>\n          <GridBackground />\n          <DragSelectLayer />\n          <NodesLayer />\n          <WiresLayer />\n          <NodePinsLayer />\n          <DragAttachWirePreviewLayer />\n          <DragNodePreviewLayer />\n          <DragNewNodeLayer />\n        </FieldSvgElementProvider>\n      </svg>\n    </div>\n  );\n};\n\nexport default CircuitField;\n","// extracted by mini-css-extract-plugin\nexport default {\"circuit-editor\":\"CircuitField-module__circuit-editor___[fullhash-base64-5]\"};","import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { typedKeys } from \"@/utils\";\nimport {\n  ElementDefinitionsByType,\n  ElementType,\n  LargestElementSize,\n} from \"@/element-defs\";\n\nimport useMouseTracking from \"@/hooks/useMouseTracking\";\n\nimport { addElement } from \"@/actions/element-add\";\nimport { fieldDragStartNewNode } from \"@/actions/field-drag-start-newnode\";\nimport { fieldDragEnd } from \"@/actions/field-drag-end\";\n\nimport ElementVisual from \"../ElementVisual\";\n\nimport styles from \"./ElementTray.module.css\";\n\nconst ElementTray: React.FC = () => {\n  const elements = typedKeys(ElementDefinitionsByType).map((type) => {\n    return <Element key={type} nodeType={type} />;\n  });\n\n  return (\n    <div className={styles[\"circuittray\"]}>\n      <div className={styles[\"circuittray-elements\"]}>{elements}</div>\n    </div>\n  );\n};\nexport default ElementTray;\n\ninterface ElementProps {\n  nodeType: ElementType;\n}\nconst Element: React.FC<ElementProps> = ({ nodeType }) => {\n  const dispatch = useDispatch();\n  const onClick = React.useCallback(\n    (e: MouseEvent) => {\n      if (e.defaultPrevented) {\n        return;\n      }\n      e.preventDefault();\n      dispatch(addElement(nodeType));\n    },\n    [nodeType]\n  );\n\n  const onDragStart = React.useCallback(() => {\n    dispatch(fieldDragStartNewNode(nodeType));\n  }, [nodeType]);\n\n  const onDragEnd = React.useCallback(() => {\n    // We do not know the point from here, and selection mode is irrelevant.\n    dispatch(fieldDragEnd({ x: -1, y: -1 }, \"set\"));\n  }, []);\n\n  const { startTracking } = useMouseTracking({\n    onClick,\n    onDragStart,\n    onDragEnd,\n  });\n\n  const onMouseDown = React.useCallback((e: React.MouseEvent) => {\n    startTracking(e);\n  }, []);\n\n  return (\n    <div onMouseDown={onMouseDown}>\n      <svg width={LargestElementSize.width} height={LargestElementSize.height}>\n        <ElementVisual elementType={nodeType} nodeState={{}} />\n      </svg>\n    </div>\n  );\n};\n","import ElementTray from \"./ElementTray\";\nexport default ElementTray;\n","// extracted by mini-css-extract-plugin\nexport default {\"circuittray\":\"ElementTray-module__circuittray___[fullhash-base64-5]\",\"circuittray-elements\":\"ElementTray-module__circuittray-elements___[fullhash-base64-5]\"};","import * as React from \"react\";\n\nimport { Mosaic, MosaicWindow } from \"react-mosaic-component\";\n\nimport CircuitFieldView from \"./components/CircuitFieldView\";\nimport ElementTray from \"./components/ElementTray\";\n\nexport interface CircuitEditorProps {\n  className?: string;\n}\n\nconst WindowMap = {\n  elements: <ElementTray />,\n  \"circuit-field\": <CircuitFieldView />,\n};\n\nconst CircuitEditor: React.FC<CircuitEditorProps> = ({ className }) => {\n  return (\n    <div className={className}>\n      <Mosaic<keyof typeof WindowMap>\n        renderTile={(id, path) => (\n          <MosaicWindow path={path} title={id}>\n            {WindowMap[id]}\n          </MosaicWindow>\n        )}\n        initialValue={{\n          direction: \"row\",\n          first: \"elements\",\n          second: \"circuit-field\",\n          splitPercentage: 20,\n        }}\n      ></Mosaic>\n    </div>\n  );\n};\n\nexport default CircuitEditor;\n","import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { HotKeys } from \"react-hotkeys\";\nimport { AnyAction } from \"redux\";\n\nimport { cls } from \"@/utils\";\nimport { useNativeEvent } from \"@/hooks/useNativeEvent\";\nimport useSelector from \"@/hooks/useSelector\";\n\nimport { viewScaleSelector } from \"@/services/circuit-editor-ui/selectors/view\";\n\nimport { viewZoom } from \"@/actions/view-zoom\";\nimport { tickSim } from \"@/actions/sim-tick\";\nimport { fastForwardSim } from \"@/actions/sim-fastforward\";\nimport { paste } from \"@/actions/clipboard-paste\";\nimport { selectionCopy } from \"@/actions/selection-copy\";\nimport { selectionDelete } from \"@/actions/selection-delete\";\nimport { selectAll } from \"@/actions/select-all\";\n\nimport keymap, {\n  KeymapHandler,\n  KEYMAP_SIM_STEP,\n  KEYMAP_SIM_FASTFORWARD,\n  KEYMAP_COPY,\n  KEYMAP_PASTE,\n  KEYMAP_DELETE,\n  KEYMAP_SELECT_ALL,\n} from \"./keymap\";\n\nimport CircuitField from \"./components/CircuitField\";\n\nimport styles from \"./CircuitFieldView.module.css\";\n\nexport interface CircuitFieldViewProps {\n  className?: string;\n}\n\nconst CircuitFieldView: React.FC<CircuitFieldViewProps> = ({ className }) => {\n  const viewRef = React.useRef<HTMLDivElement | null>(null);\n  const dispatch = useDispatch();\n  const scale = useSelector(viewScaleSelector);\n\n  const keyHandlers = React.useMemo(() => {\n    function createEventDispatcher(action: AnyAction): HotkeyHandler {\n      return (e?: KeyboardEvent) => {\n        if (e) {\n          if (e.defaultPrevented) {\n            return;\n          }\n          e.preventDefault();\n        }\n        dispatch(action);\n      };\n    }\n    let keyHandlers: KeymapHandler = {\n      [KEYMAP_SIM_STEP]: createEventDispatcher(tickSim(1)),\n      [KEYMAP_SIM_FASTFORWARD]: createEventDispatcher(fastForwardSim()),\n      [KEYMAP_SELECT_ALL]: createEventDispatcher(selectAll()),\n      [KEYMAP_COPY]: createEventDispatcher(selectionCopy()),\n      [KEYMAP_PASTE]: createEventDispatcher(paste()),\n      [KEYMAP_DELETE]: createEventDispatcher(selectionDelete()),\n    };\n    return keyHandlers;\n  }, []);\n\n  const onWheel = React.useCallback((e: WheelEvent) => {\n    if (e.defaultPrevented) {\n      return;\n    }\n\n    if (e.ctrlKey) {\n      dispatch(viewZoom(e.deltaY > 0 ? -1 : 1));\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  }, []);\n\n  // React listens to the root listener for all events,\n  //  and chrome assumes the root event listener for mouse events\n  //  never wants to preventDefault.\n  // We need to take a local event listener and mark it as not passive.\n  // https://github.com/facebook/react/issues/14856\n  useNativeEvent(viewRef, \"wheel\", onWheel, { passive: false });\n\n  return (\n    <div\n      className={cls(\n        \"circuit-field-view\",\n        className,\n        styles[\"circuit-field-view\"]\n      )}\n      ref={viewRef}\n    >\n      <div\n        className={cls(\n          \"zoom-container\",\n          styles[\"circuit-field-zoom-container\"]\n        )}\n        style={{\n          transform: `scale(${scale})`,\n        }}\n      >\n        <HotKeys keyMap={keymap} handlers={keyHandlers}>\n          <CircuitField />\n        </HotKeys>\n      </div>\n    </div>\n  );\n};\n\nexport default CircuitFieldView;\n","import * as React from \"react\";\n\nexport function useNativeEvent<\n  T extends GlobalEventHandlers,\n  K extends keyof GlobalEventHandlersEventMap\n>(\n  ref: React.RefObject<T | null>,\n  type: K,\n  listener: (\n    this: GlobalEventHandlers,\n    ev: GlobalEventHandlersEventMap[K]\n  ) => any,\n  options?: boolean | AddEventListenerOptions\n) {\n  React.useEffect(() => {\n    if (!ref.current) {\n      return;\n    }\n\n    // De-reference the target so we remove from the right element.\n    const listenTarget = ref.current;\n\n    listenTarget.addEventListener(type, listener, options);\n    return () => {\n      listenTarget.removeEventListener(type, listener, options);\n    };\n  }, [ref.current, type, listener]);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"circuit-field-view\":\"CircuitFieldView-module__circuit-field-view___[fullhash-base64-5]\",\"circuit-field-zoom-container\":\"CircuitFieldView-module__circuit-field-zoom-container___[fullhash-base64-5]\"};","import CircuitEditor from \"./CircuitEditor\";\nexport default CircuitEditor;\n","export default \"# Discrelog / React-Logic / Working Title Logic Thing\\n\\nA discrete logic / circuit editor and simulator written in React and Redux.\\n\\n_This is a work in progress, and will be for some time. It is not suitable for use as of this time._\\n\\n## Live work-in-progress\\n\\n_The interface is very much a prototype. The current incarnation is under heavy development and is not final._\\n\\nhttp://robophred.github.io/discrelog\\n\\n### Usage:\\n\\nDrag circuit elements from the elements tray to the field to create them.\\nClick an element to select it. Click-drag an element to move it, and click-drag the field to select multiple elements.\\n\\nClick and drag between pins to connect them. An output pin (circular) can connect to multiple input pins (arcs), but each input pin may only be connected to one output pin.\\n\\nClick+drag on wires to add wire joints, which can be used to route and organize wires. Click or drag-select joints to select them.\\n\\nClick on wires (not wire joints) to select the entire wire.\\n\\n### Controls:\\n\\nOn Mac, `command` replaces `ctrl` and `option` replaces `alt`.\\n\\n- Select item: `left-click`\\n- Toggle item in current selection: `ctrl + left-click`\\n- Add item to current selection: `shift + left-click`\\n- Remove item from current selection: `ctrl + shift + left-click`\\n- Activate Button: `alt + left-click`\\n- Delete Selection: `backspace` or `delete`\\n- Copy Selected: `ctrl + c`\\n- Paste: `ctrl + v`\\n- Select All: `ctrl + a`\\n- Next tick: `spacebar`\\n- Fast forward to next transition: `shift + spacebar`\\n\\n## Circuit structure and Simulation\\n\\nCircuits are built by connecting component output pins to input pins on a one-to-many relationship. A single output pin can connect to many input pins, but an input pin can only have a single output pin.\\n\\nConnections and pins are represented by a binary state. A connection can be active (true) or inactive (false); there is no way to simulate analog concepts such as pull-low/pull-high, resistors, voltages, or currents.\\n\\nWhen an output pin changes, all connected components are updated. The update process involves computing the output pin states given the input pins and the component's internal state. The component will then immediately update its state, and schedule pin changes on a future update. Changes to output pins must occur at least one tick in the future, and it is not possible to schedule more than one transition on the same output pin. This ensures that logic remains predictable even in the case of loops, and allows such constructs as vibrators, latches, and flip-flops.\\n\\nIt is not possible for a component to change its pin on the current tick. This ensures components function consistently and predictably through cyclic connections and regardless of the order in which they update.\\n\\n## Supported Logic Components\\n\\nAs of the time of this writing, the available logic components consist of:\\n\\n- Combinational logic (4 tick response)\\n  - AND\\n  - OR\\n  - NOR\\n- Negate / NOT (4 tick response)\\n- Toggle Switch (1 tick response)\\n- Buffer (2 tick response)\\n- 7 Segment Display (immediate visual response)\\n- LED (immediate visual response)\\n\\n_For more details on the implementation of logic components, and how to add your own, see [/element-defs](https://github.com/RoboPhred/discrelog/tree/master/src/element-defs)._\\n\\n## Upcomming features\\n\\nI am notorious for not getting back to things, so anything I write here would just be bad juju.\\n\\n## Development Philosophy\\n\\nWhile the inspiration for this project is a lack of high quality, easily extensible discrete logic simulators, this is a formost a learning exercise. This means progress will be slow and most of it will be rewritten many times over. Finding the best solution and gaining a deeper understanding of the underlying problem will take priority over bringing the software to a usable state. Do not expect fast progress or a user friendly editor for some time.\\n\\n## Technology\\n\\nThis application is written to be a browser-ran desktop-scale application. It has no server component, and performs all work in the client's browser.\\nThe UI renderer is React, with Redux providing the backing store.\\n\\n## License\\n\\nThis project is licenced under AGPL-3.0.\\n\\nSome logic symbol artwork has been provided by wikimedia commons under the public domain license. These have been called out where used.\\n\\n## Alternatives\\n\\nThere are a few notable digital (and analog) circuit editors that I have come across and arbitrarily collected. More may exist in the wild.\\n\\nOpen source:\\n\\n- http://www.cburch.com/logisim/ (desktop app, java)\\n- https://github.com/willymcallister/circuit-sandbox (online, javascript, analog)\\n\\nClosed source:\\n\\n- https://www.circuitlab.com/ (online)\\n- https://simulator.io/ (online)\\n\";","import Intro from \"./Intro\";\nexport default Intro;\n","import * as React from \"react\";\n\nimport ReactMarkdown from \"react-markdown\";\n\nimport readmeContent from \"@/../README.md\";\n\nimport styles from \"./Intro.module.css\";\n\nexport interface IntroProps {\n  dismiss(): void;\n}\ntype Props = IntroProps;\n\nconst IntroPage: React.FC<Props> = ({ dismiss }) => {\n  return (\n    <div className={styles.intro}>\n      <div className={styles[\"intro-content\"]}>\n        <div className={styles[\"intro-header\"]}>\n          <h3>\n            <b>UNDER CONSTRUCTION</b>\n            <p>\n              This is an as-yet-unfinished experiment. The user interface is\n              frustrating at best, and you cannot save your work. It is made\n              available as a playground for the current state of the project.\n            </p>\n            <p>\n              Scan through the readme below, and click the button at the bottom\n              to enter\n            </p>\n            <p>\n              The source can be found at{\" \"}\n              <a href=\"https://github.com/RoboPhred/discrelog\">\n                https://github.com/RoboPhred/discrelog\n              </a>\n            </p>\n          </h3>\n        </div>\n        <div className={styles[\"intro-markdown\"]}>\n          <ReactMarkdown source={readmeContent} />\n        </div>\n        <button className={styles[\"intro-dismiss\"]} onClick={dismiss}>\n          Let me break things\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default IntroPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"intro\":\"Intro-module__intro___[fullhash-base64-5]\",\"intro-content\":\"Intro-module__intro-content___[fullhash-base64-5]\",\"intro-header\":\"Intro-module__intro-header___[fullhash-base64-5]\",\"intro-markdown\":\"Intro-module__intro-markdown___[fullhash-base64-5]\",\"intro-dismiss\":\"Intro-module__intro-dismiss___[fullhash-base64-5]\"};","import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AnyAction } from \"redux\";\n\nexport function useAction(actionCreator: () => AnyAction): () => AnyAction;\nexport function useAction<Args>(\n  actionCreator: (...args: Args[]) => AnyAction\n): (...args: Args[]) => AnyAction;\nexport function useAction<A0, Args>(\n  actionCreator: (a0: A0, ...args: Args[]) => AnyAction,\n  a0: A0\n): (...args: Args[]) => AnyAction;\nexport function useAction(\n  actionCreator: (...args: any[]) => AnyAction,\n  ...preBind: any[]\n): (...args: any[]) => AnyAction {\n  const dispatch = useDispatch();\n  return React.useCallback(\n    (...args: any[]) => {\n      const action = actionCreator(...[...preBind, ...args]);\n      if (action) {\n        dispatch(action);\n      }\n    },\n    [actionCreator, ...preBind]\n  ) as any;\n}\n","import * as React from \"react\";\n\nconst PlayIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => {\n  return (\n    <svg width={16} height={16} {...props}>\n      <path d=\"M3,0 L13,8 L3,16 z\" />\n    </svg>\n  );\n};\n\nexport default PlayIcon;\n","import * as React from \"react\";\n\nconst StopIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => {\n  return (\n    <svg width={16} height={16} {...props}>\n      <path d=\"M1,1 L15,1 L15,15 L1,15 z\" />\n    </svg>\n  );\n};\n\nexport default StopIcon;\n","import * as React from \"react\";\n\nconst PauseIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => {\n  return (\n    <svg width={16} height={16} {...props}>\n      <path d=\"M2.5,1 L6.5,1 L6.5,15 L2.5,15 z M9.5,1 L13.5,1 L13.5,15 L9.5,15 z\" />\n    </svg>\n  );\n};\n\nexport default PauseIcon;\n","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"SimControls-module__button___[fullhash-base64-5]\",\"button-play\":\"SimControls-module__button-play___[fullhash-base64-5]\",\"button-stop\":\"SimControls-module__button-stop___[fullhash-base64-5]\",\"button-pause\":\"SimControls-module__button-pause___[fullhash-base64-5]\",\"selected\":\"SimControls-module__selected___[fullhash-base64-5]\",\"button--disabled\":\"SimControls-module__button--disabled___[fullhash-base64-5]\"};","import SimControls from \"./SimControls\";\nexport default SimControls;\n","import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { cls } from \"@/utils\";\n\nimport useSelector from \"@/hooks/useSelector\";\n\nimport {\n  isSimActiveSelector,\n  isSimPausedSelector,\n} from \"@/services/simulator/selectors/run\";\n\nimport { startSim } from \"@/actions/sim-start\";\nimport { stopSim } from \"@/actions/sim-stop\";\nimport { pauseSim } from \"@/actions/sim-pause\";\nimport { useAction } from \"@/hooks/useAction\";\n\nimport PlayIcon from \"../Icons/Play\";\nimport StopIcon from \"../Icons/Stop\";\nimport PauseIcon from \"../Icons/Pause\";\n\nimport styles from \"./SimControls.module.css\";\n\nconst PlayPauseButton: React.FC = () => {\n  const isActive = useSelector(isSimActiveSelector);\n  const isPaused = useSelector(isSimPausedSelector);\n\n  const onPlayClick = useAction(startSim);\n  const onStopClick = useAction(stopSim);\n  const onPauseClick = useAction(pauseSim, \"toggle\");\n\n  return (\n    <span>\n      {isActive ? (\n        <StopIcon\n          className={cls(styles[\"button\"], styles[\"button-stop\"])}\n          onClick={onStopClick}\n        />\n      ) : (\n        <PlayIcon\n          className={cls(styles[\"button\"], styles[\"button-play\"])}\n          onClick={onPlayClick}\n        />\n      )}\n      <PauseIcon\n        className={cls(\n          styles[\"button\"],\n          styles[\"button-pause\"],\n          !isActive && styles[\"button--disabled\"],\n          isPaused && styles[\"selected\"]\n        )}\n        onClick={onPauseClick}\n      />\n    </span>\n  );\n};\n\nexport default PlayPauseButton;\n","import * as React from \"react\";\nimport { Menu } from \"@blueprintjs/core\";\n\nimport { useAction } from \"@/hooks/useAction\";\nimport { newProject } from \"@/actions/project-new\";\nimport { saveProject } from \"@/actions/project-save\";\nimport { loadProject } from \"@/actions/project-load\";\n\nconst FileMenu: React.FC = () => {\n  const onNewProject = useAction(newProject);\n  const onSaveProject = useAction(saveProject);\n  const onLoadProject = useAction(loadProject);\n\n  return (\n    <Menu>\n      <Menu.Item onClick={onNewProject} icon=\"new-object\" text=\"New\" />\n      <Menu.Divider />\n      <Menu.Item onClick={onLoadProject} icon=\"document-open\" text=\"Load\" />\n      <Menu.Item onClick={onSaveProject} icon=\"saved\" text=\"Save\" />\n    </Menu>\n  );\n};\n\nexport default FileMenu;\n","import * as React from \"react\";\nimport { Navbar, Alignment, Popover, Button } from \"@blueprintjs/core\";\n\nimport SimControls from \"./SimControls\";\nimport FileMenu from \"./FileMenu\";\n\nconst TitleBar: React.FC = () => {\n  return (\n    <Navbar>\n      <Navbar.Group align={Alignment.LEFT}>\n        <Navbar.Heading>Discrelog</Navbar.Heading>\n        <Navbar.Divider />\n        <Popover content={<FileMenu />}>\n          <Button minimal icon=\"document\" text=\"File\" />\n        </Popover>\n      </Navbar.Group>\n      <Navbar.Group align={Alignment.RIGHT}>\n        <SimControls />\n      </Navbar.Group>\n    </Navbar>\n  );\n};\n\nexport default TitleBar;\n","import { createDialogSelector } from \"../utils\";\n\nexport const dialogTypeSelector = createDialogSelector((s) => s.dialogType);\nexport const dialogDataSelector = createDialogSelector((s) => s.data);\n","import * as React from \"react\";\nimport { Dialog, Button, Intent, InputGroup, Classes } from \"@blueprintjs/core\";\n\nimport { useAction } from \"@/hooks/useAction\";\nimport { cancelDialog } from \"@/actions/dialog-response-cancel\";\nimport { acceptDialog } from \"@/actions/dialog-response-accept\";\n\nconst SaveProjectDialog: React.FC = () => {\n  const onCancelDialog = useAction(cancelDialog);\n  const onAcceptDialog = useAction(acceptDialog);\n\n  const [projectName, setProjectName] = React.useState<string>(\"\");\n  const onSetProjectName = React.useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      setProjectName(e.target.value);\n    },\n    []\n  );\n\n  const onAccept = React.useCallback(() => {\n    if (projectName === \"\") {\n      return;\n    }\n    onAcceptDialog(projectName);\n  }, [onAcceptDialog, projectName]);\n\n  return (\n    <Dialog\n      isOpen={true}\n      icon=\"saved\"\n      onClose={onCancelDialog}\n      title=\"Save Project\"\n      canEscapeKeyClose={true}\n      canOutsideClickClose={true}\n    >\n      <div className={Classes.DIALOG_BODY}>\n        <InputGroup\n          placeholder=\"Project Name\"\n          value={projectName}\n          onChange={onSetProjectName}\n        />\n      </div>\n      <div className={Classes.DIALOG_FOOTER}>\n        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n          <Button onClick={onCancelDialog}>Cancel</Button>\n          <Button\n            intent={Intent.PRIMARY}\n            disabled={projectName === \"\"}\n            onClick={onAccept}\n          >\n            Save\n          </Button>\n        </div>\n      </div>\n    </Dialog>\n  );\n};\n\nexport default SaveProjectDialog;\n","import DialogManager from \"./DialogManager\";\nexport default DialogManager;\n","import * as React from \"react\";\n\nimport useSelector from \"@/hooks/useSelector\";\nimport { dialogTypeSelector } from \"@/services/dialog/selectors/dialog\";\n\nimport SaveProjectDialog from \"./dialogs/SaveProjectDialog\";\n\nconst DialogManager: React.FC = () => {\n  const dialogType = useSelector(dialogTypeSelector);\n\n  switch (dialogType) {\n    case \"save-project\":\n      return <SaveProjectDialog />;\n    default:\n      return null;\n  }\n};\n\nexport default DialogManager;\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport { Provider } from \"react-redux\";\n\nimport \"./styles\";\n\nimport { store } from \"./store\";\n\nimport App from \"./components/App\";\n\nconst rootEl = document.getElementById(\"root\");\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootEl\n);\n","import * as React from \"react\";\n\nimport { isDev } from \"@/env\";\nimport { cls } from \"@/utils\";\n\nimport flex from \"@/styles/flex.module.css\";\nimport sizing from \"@/styles/sizing.module.css\";\n\nimport CircuitEditor from \"@/pages/CircuitEditor\";\nimport Intro from \"@/pages/Intro\";\n\nimport TitleBar from \"../TitleBar\";\nimport DialogManager from \"../DialogManager\";\n\nconst App: React.FC = () => {\n  const [introShown, setIntroShown] = React.useState(isDev);\n  const onDismiss = React.useCallback(() => {\n    setIntroShown(true);\n  }, []);\n\n  if (!introShown) {\n    return <Intro dismiss={onDismiss} />;\n  }\n\n  return (\n    <div className={cls(sizing[\"fill-parent\"], flex[\"flex-column\"])}>\n      <DialogManager />\n      <TitleBar />\n      <CircuitEditor\n        className={cls(sizing[\"fill-parent\"], flex[\"flexitem-shrink\"])}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","// extracted by mini-css-extract-plugin\nexport default {\"flex-row\":\"flex-module__flex-row___[fullhash-base64-5]\",\"flex-column\":\"flex-module__flex-column___[fullhash-base64-5]\",\"flexitem-shrink\":\"flex-module__flexitem-shrink___[fullhash-base64-5]\"};"],"sourceRoot":""}