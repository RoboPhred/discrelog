{"version":3,"sources":["webpack:///./src/pages/CircuitEditor/selectors.ts","webpack:///./src/env.ts","webpack:///./src/components/App.tsx","webpack:///./src/services/simulator/selectors.ts","webpack:///./src/services/simulator/state.ts","webpack:///./src/pages/CircuitEditor/ContentViews/CircuitField/state.ts","webpack:///./src/pages/CircuitEditor/state.ts","webpack:///./src/store/state.ts","webpack:///./src/services/simulator/reducer/add-node.ts","webpack:///./src/services/simulator/reducer/delete-node.ts","webpack:///./src/services/simulator/reducer/transition-utils.ts","webpack:///./src/services/simulator/reducer/collect-transitions.ts","webpack:///./src/services/simulator/reducer/wire-node.ts","webpack:///./src/services/simulator/reducer/unwire-node.ts","webpack:///./src/services/simulator/reducer/interact-node.ts","webpack:///./src/services/simulator/reducer/evolve-sim.ts","webpack:///./src/services/simulator/reducer/index.ts","webpack:///./src/pages/CircuitEditor/reducer/add-node.ts","webpack:///./src/pages/CircuitEditor/reducer/delete-node.ts","webpack:///./src/pages/CircuitEditor/reducer/hover-node.ts","webpack:///./src/pages/CircuitEditor/reducer/move-node.ts","webpack:///./src/pages/CircuitEditor/reducer/copy-nodes.ts","webpack:///./src/pages/CircuitEditor/reducer/utils.ts","webpack:///./src/pages/CircuitEditor/reducer/select-nodes.ts","webpack:///./src/pages/CircuitEditor/reducer/clear-selection.ts","webpack:///./src/pages/CircuitEditor/reducer/index.ts","webpack:///./src/pages/CircuitEditor/ContentViews/CircuitField/reducer.ts","webpack:///./src/pages/CircuitEditor/reducer/select-region.ts","webpack:///./src/store/store.ts","webpack:///./src/store/reducer.ts","webpack:///./src/services/simulator/helpers.ts","webpack:///./src/services/simulator/reducer/fast-forward-sim.ts","webpack:///./src/index.tsx","webpack:///./src/services/simulator/node-types/index.ts","webpack:///./src/pages/CircuitEditor/ContentViews/CircuitField/actions.ts","webpack:///./src/services/simulator/actions.ts","webpack:///./src/utils.ts","webpack:///./src/services/simulator/node-types/node-seg7.ts","webpack:///./src/services/simulator/node-types/node-toggle.ts","webpack:///./src/services/simulator/node-types/node-led.ts","webpack:///./src/services/simulator/node-types/node-buffer.ts","webpack:///./src/services/simulator/node-types/node-not.ts","webpack:///./src/services/simulator/node-types/node-nor.ts","webpack:///./src/services/simulator/node-types/node-or.ts","webpack:///./src/services/simulator/node-types/node-and.ts","webpack:///./src/css/body.css","webpack:///./src/css/body.css?e03d","webpack:///./src/services/simulator/node-types/utils.ts","webpack:///./src/pages/CircuitEditor/actions.ts","webpack:///./src/geometry.ts","webpack:///./src/pages/Intro/Intro.tsx","webpack:///./src/pages/Intro/index.ts","webpack:///./src/components/EditorLayout/components/LayoutContainer.tsx","webpack:///./src/components/EditorLayout/components/SidebarPanel.tsx","webpack:///./src/components/EditorLayout/components/ContentPanel.tsx","webpack:///./src/components/EditorLayout/components/ResizeHandle.tsx","webpack:///./src/components/EditorLayout/ToolWindow.tsx","webpack:///./src/components/EditorLayout/index.ts","webpack:///./src/components/EditorLayout/EditorLayout.tsx","webpack:///./src/pages/CircuitEditor/components/NodeVisual.tsx","webpack:///./src/pages/CircuitEditor/ToolWindows/CircuitTray.tsx","webpack:///./src/pages/CircuitEditor/ToolWindows/TimingControls.tsx","webpack:///./src/pages/CircuitEditor/ToolWindows/NodeInfo.tsx","webpack:///./src/pages/CircuitEditor/ToolWindows/PendingTransitions.tsx","webpack:///./src/runtime-env.ts","webpack:///./src/pages/CircuitEditor/ContentViews/CircuitField/keymap.ts","webpack:///./src/pages/CircuitEditor/ContentViews/CircuitField/components/FieldContainer.tsx","webpack:///./src/pages/CircuitEditor/ContentViews/CircuitField/selectors.ts","webpack:///./src/pages/CircuitEditor/ContentViews/CircuitField/components/DragPreviewLayer.tsx","webpack:///./src/pages/CircuitEditor/ContentViews/CircuitField/components/DragSelectLayer.tsx","webpack:///./src/pages/CircuitEditor/ContentViews/CircuitField/components/Wire.tsx","webpack:///./src/pages/CircuitEditor/ContentViews/CircuitField/components/WiresLayer.tsx","webpack:///./src/pages/CircuitEditor/ContentViews/CircuitField/components/CircuitNodePin.tsx","webpack:///./src/pages/CircuitEditor/ContentViews/CircuitField/components/CircuitNode.tsx","webpack:///./src/pages/CircuitEditor/ContentViews/CircuitField/components/NodesLayer.tsx","webpack:///./src/pages/CircuitEditor/ContentViews/CircuitField/events.ts","webpack:///./src/pages/CircuitEditor/ContentViews/CircuitField/CircuitField.tsx","webpack:///./src/pages/CircuitEditor/ContentViews/CircuitField/index.ts","webpack:///./src/pages/CircuitEditor/CircuitEditor.tsx","webpack:///./src/pages/CircuitEditor/index.ts","webpack:///./README.md"],"names":["nodePositionsById","s","ui","circuitEditor","nodePositions","nodeBoundsById","Object","reselect__WEBPACK_IMPORTED_MODULE_0__","createSelector","_services_simulator_selectors__WEBPACK_IMPORTED_MODULE_5__","a","b","nodeDefsById","nodeStateById","lodash_es__WEBPACK_IMPORTED_MODULE_2__","x","id","visual","hitPath","svg_path_bounds__WEBPACK_IMPORTED_MODULE_1___default","shapePaths","_services_simulator_node_types_utils__WEBPACK_IMPORTED_MODULE_6__","shapePath","length","path","nodeRectsById","positionsById","boundsById","p1","bounds","_geometry__WEBPACK_IMPORTED_MODULE_4__","c","y","selectedNodeIds","d","nodesById","lodash_es__WEBPACK_IMPORTED_MODULE_3__","isDev","109","e","t","n","o","i","r","__webpack_exports__","react_hot_loader__WEBPACK_IMPORTED_MODULE_1__","hot","module","react__WEBPACK_IMPORTED_MODULE_0__","Component","[object Object]","props","super","this","state","introShown","_env__WEBPACK_IMPORTED_MODULE_2__","_onIntroDismiss","bind","createElement","_pages_CircuitEditor__WEBPACK_IMPORTED_MODULE_3__","_pages_Intro__WEBPACK_IMPORTED_MODULE_4__","dismiss","setState","call","12","services","simulator","nodeTypesById","lodash_es__WEBPACK_IMPORTED_MODULE_0__","type","_node_types__WEBPACK_IMPORTED_MODULE_1__","nodeStatesById","nodeStatesByNodeId","defaultSimulatorState","tick","nodeOutputValuesByNodeId","nodeOutputTransitionsByNodeId","transitionsById","transitionWindows","defaultCircuitFieldState","dragMode","dragStart","dragEnd","selectedPin","defaultCircuitEditorState","clipboardContent","mouseOverNodeId","circuitField","defaultAppState","add_node","immer_module","action","nodeId","nodeType","payload","def","node_types","inputConnectionsByPin","mapValues","inputs","outputConnectionsByPin","outputs","result","evolve","transitions","value","m","g","v","O","delete_node","nodeIds","forEach","node","inputId","utils","input","target","conns","pin","remove","outputId","outputSet","conn","targetConn","transitionsByPin","transitionId","transition","index","binary_search_default","window","transitionIndex","transitionIds","indexOf","splice","addTransition","v4_default","outputTransitions","insertAt","push","removeTransitionByPin","pinTransitions","transitionWindowIndex","findIndex","transitionWindow","tickWindowTransitionIndex","collectNodeTransitionsMutator","inputPin","keys","inputConn","sourceNodeId","sourcePin","nodeOutputs","tickOffset","transitionTick","wire_node","targetNodeId","targetPin","sourceNode","targetNode","unwire_node","outConns","sourceConnIndex","interact_node","interact","newState","evolve_sim","tickCount","endTick","iterator","items","predicate","shift","saftyCutoff","updateNodes","Set","tid","outConn","add","console","error","reducer_add_node","reducer_delete_node","pull","hover_node","move_node","offsetX","offsetY","assign","pick","p","copyNodes","combineSelection","selectedIds","chosenIds","mode","union","difference","concat","select_nodes","clear_selection","circuitEditorReducer","appState","newCircuitFieldState","CircuitEditor_actions","f","CircuitField_actions","pinDirection","pinId","direction","actions","copyIds","zipObject","map","rootPosition","offset","geometry","filter","copyNodesMutator","region","rects","selectors","forOwn","rect","storeComposer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","redux","store","h","output","inputNode","nextWindowTick","k","simulatorReducer","redux_thunk_es","ee","rootEl","document","getElementById","react_dom","render","react","es","App","NodeTypes","and","__webpack_require__","default","or","nor","not","buffer","led","toggle","seg7","ACTION_SELECT_PIN","selectPin","ACTION_DRAG_START","startDrag","ACTION_DRAG_CONTINUE","continueDrag","ACTION_DRAG_END","endDrag","ACTION_EVOLVE","evolveSim","ACTION_FASTFORWARD","fastForwardSim","ACTION_NODE_ADD","addNode","uuid_v4__WEBPACK_IMPORTED_MODULE_0___default","ACTION_NODE_DELETE","deleteNode","Array","isArray","ACTION_NODE_INTERACT","interactNode","ACTION_WIRE","wireNode","ACTION_UNWIRE","ACTION_TOGGLEWIRE","toggleWireNode","typedKeys","obj","bindFuncMap","SCALE","OFFSET","createSeg","name","points","start","slice","fill","seg7NodeDefinition","A","B","C","D","E","F","G","237","defaultToggleState","toggleState","toggleSwitchNodeDefinition","OUT","238","genCirclePath","cx","cy","ledNodeDefinition","IN","239","240","241","242","243","249","exports","250","content","hmr","transform","insertInto","locals","normalizeVisuals","stroke","strokeWidth","simAddNode","_services_simulator_actions__WEBPACK_IMPORTED_MODULE_4__","ACTION_NODE_HOVER","hoverNode","ACTION_NODE_MOVE","moveNodes","ACTION_COPY_NODES","paste","dispatch","getState","clipboardNodes","pasteIds","lodash_es__WEBPACK_IMPORTED_MODULE_1__","sourceId","outputPin","targetCopyId","targetId","selectNodes","ACTION_SELECT_NODES","ACTION_SELECT_REGION","selectRegion","ACTION_SELECT_CLEAR","clearSelection","ZeroPoint","freeze","normalizeRectangle","args","p2","Math","min","max","pointAdd","pointSubtract","intersects","r1","r2","IntroContainer","styled_components_browser_es","div","IntroContent","HeaderContainer","MarkdownContainer","DismissButton","button","href","react_markdown_default","source","README_default","onClick","96","_e","Se","Ne","Ee","De","Ce","Be","Te","Ue","Le","ze","He","Re","components_LayoutContainer","components_SidebarPanel","width","height","components_ContentPanel","components_ResizeHandle","_onDrag","react_draggable","DraggableCore","onDrag","DragHandleDiv","onResize","deltaX","EditorLayout_ToolWindow","ToolWindowDiv","children","components_EditorLayout","leftSidebarSize","defaultLeftSidebarWidth","rightSidebarSize","defaultRightSidebarWidth","_leftSidebarResize","_rightSidebarResize","leftSidebar","rightSidebar","className","Fragment","delta","components_NodeVisual","_a","nodeState","renderPin","konvaProps","__rest","lib","Rect","visualOnClick","pathElements","node_types_utils","Path","key","data","inputPins","outputPins","element","cloneElement","Group","mapDispatchToProps","ToolWindows_CircuitTray","elements","Stage","Layer","CircuitTrayContainer","mapStateToProps","reselect_lib","createStructuredSelector","TimingControls_mapDispatchToProps","ToolWindows_TimingControls","N","mouseOverNode","mouseOverNodeInputsSelector","outputsByNodeId","mouseOverNodeOutputsSelector","NodeInfo_mapStateToProps","nodeInputValues","nodeOutputValues","ToolWindows_NodeInfo","JSON","stringify","PendingTransitions_mapStateToProps","ToolWindows_PendingTransitions","z","H","R","keyboardIsMac","test","platform","os","toString","keyboardCommandModifier","KEYMAP_SIM_STEP","KEYMAP_SIM_FASTFORWARD","KEYMAP_NODE_COPY","KEYMAP_NODE_PASTE","KEYMAP_NODE_DELETE","CircuitField_keymap","components_FieldContainer","circuitFieldState","selectionRect","selectors_dragMoveOffset","selectors_selectedPin","stateSelectors","selectedNodePositionsById","CircuitEditor_selectors","selectedNodeTypesById","selectedNodeStatesById","dragMoveOffset","DragPreviewLayer_mapStateToProps","components_DragPreviewLayer","values","components_DragSelectLayer","FastLayer","components_Wire","sourceDef","targetDef","sourceOffset","targetOffset","end","testPoint","_onTestMouseMove","_onTestMouseLeave","abs","Line","evt","layerX","layerY","edgeSelector","nodes","reduce","outputConn","WiresLayer_mapStateToProps","edges","components_WiresLayer","connectorElements","edge","components_CircuitNodePin","selected","isSelected","_onMouseDown","_onMouseUp","groupProps","CircuitNodePin_rest","Circle","radius","onMouseDown","onMouseUp","onPinMouseDown","onPinMouseUp","components_CircuitNode","_renderPin","CircuitNode_rest","NodesLayer_stateSelectors","NodesLayer_mapStateToProps","components_NodesLayer","_onPinMouseDown","_onPinMouseUp","onNodeMouseDown","onNodeMouseUp","onNodeMouseOver","onNodeMouseLeave","nodeElements","NodesLayer_BoundCicrcuitNode","onMouseOver","onMouseLeave","stopPropagation","onNodePinMouseDown","onNodePinMouseUp","_onMouseOver","_onMouseLeave","otherProps","NodesLayer_rest","onNodeClicked","modifiers","altKey","getSelectMode","onNodePinClicked","onFieldClicked","onNodeDragStart","onFieldDragStart","onDragMove","onDragEnd","moveBy","onNodeHover","j","onHotkeyStep","onHotkeyFastForward","l","onHotkeyCopy","onHotkeyPaste","onHotkeyDelete","shiftKey","ctrlMetaKey","CircuitField_mapDispatchToProps","events_namespaceObject","ContentViews_CircuitField","react_sizeme_default","monitorWidth","monitorHeight","noPlaceholder","_isDragging","_mouseDownNodeId","_mouseDownPinId","_startMousePos","_hotkeysRef","createRef","_keyHandlers","_onNodeMouseDown","_onNodeMouseOver","_onNodeMouseLeave","_onNodePinMouseDown","_onNodePinMouseUp","_onMouseMove","size","index_es","HotKeys","keyMap","handlers","tabIndex","ref","onMouseMove","defaultPrevented","preventDefault","_resetMouseTracking","current","focus","sx","sy","ctrlKey","metaKey","FillParentEditorLayout","FillParentCircuitField","97"],"mappings":"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","file":"client.67de9a8f752d71b0ebf1.bundle.js","sourcesContent":["import { createSelector } from \"reselect\";\n\nimport getBounds from \"svg-path-bounds\";\n\nimport { mapValues, pick } from \"lodash-es\";\n\nimport { normalizeRectangle } from \"@/geometry\";\n\nimport { AppState } from \"@/store\";\n\nimport {\n  nodeDefsById,\n  nodeStatesById,\n  nodesById\n} from \"@/services/simulator/selectors\";\nimport { normalizeVisuals } from \"@/services/simulator/node-types/utils\";\n\nexport const nodePositionsById = (s: AppState) =>\n  s.ui.circuitEditor.nodePositions;\n\nexport const nodeBoundsById = createSelector(\n  nodeDefsById,\n  nodeStatesById,\n  (nodeDefsById, nodeStateById) =>\n    mapValues(nodeDefsById, (x, id) => {\n      if (x.visual.hitPath) {\n        return getBounds(x.visual.hitPath);\n      }\n      const shapePaths = normalizeVisuals(\n        x.visual.shapePath,\n        nodeStateById[id]\n      );\n      if (shapePaths.length > 0) {\n        return getBounds(shapePaths[0].path);\n      }\n      return [0, 0, 0, 0];\n    })\n);\n\nexport const nodeRectsById = createSelector(\n  nodePositionsById,\n  nodeBoundsById,\n  (positionsById, boundsById) =>\n    mapValues(positionsById, (p1, id) => {\n      const bounds = boundsById[id] || [0, 0, 0, 0];\n      return normalizeRectangle(\n        {\n          x: p1.x + bounds[0],\n          y: p1.y + bounds[1]\n        },\n        {\n          x: p1.x + bounds[2],\n          y: p1.y + bounds[3]\n        }\n      );\n    })\n);\n\nexport const selectedNodeIds = (s: AppState) =>\n  s.ui.circuitEditor.selectedNodeIds;\n\nexport const selectedNodesById = createSelector(\n  nodesById,\n  selectedNodeIds,\n  (nodesById, selectedNodeIds) => pick(nodesById, selectedNodeIds)\n);\n","export const isProd = process.env.NODE_ENV === \"production\";\nexport const isDev = process.env.NODE_ENV === \"development\";\n","import * as React from \"react\";\n\nimport { hot } from \"react-hot-loader\";\n\nimport { isDev } from \"@/env\";\n\nimport CircuitEditor from \"@/pages/CircuitEditor\";\nimport Intro from \"@/pages/Intro\";\n\ntype Props = {};\ninterface State {\n  introShown: boolean;\n}\nclass App extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      introShown: isDev\n    };\n\n    this._onIntroDismiss = this._onIntroDismiss.bind(this);\n  }\n\n  render() {\n    if (!this.state.introShown) {\n      return <Intro dismiss={this._onIntroDismiss} />;\n    }\n    return <CircuitEditor />;\n  }\n\n  private _onIntroDismiss() {\n    this.setState({\n      introShown: true\n    });\n  }\n}\n\nexport default hot(module)(App);\n","import { createSelector } from \"reselect\";\n\nimport { mapValues, mapKeys } from \"lodash-es\";\n\nimport { AppState } from \"@/store\";\n\nimport { NodeTypes } from \"./node-types\";\n\nexport const nodesById = (s: AppState) => s.services.simulator.nodesById;\n\nexport const nodeTypesById = (s: AppState) =>\n  mapValues(nodesById(s), n => n.type);\n\nexport const nodeDefsById = (s: AppState) =>\n  mapValues(nodeTypesById(s), type => NodeTypes[type] || null);\n\nexport const nodeStatesById = (s: AppState) =>\n  s.services.simulator.nodeStatesByNodeId;\n","import { IDMap } from \"@/types\";\n\nimport { Node, NodesById, NodePinTransition, TransitionWindow } from \"./types\";\n\nimport { NodeType } from \"./node-types\";\n\nexport interface SimulatorState {\n  /**\n   * The current tick the simulator is on.\n   */\n  tick: number;\n\n  /**\n   * A map of nodes by node id.\n   */\n  nodesById: NodesById;\n\n  /**\n   * A map of node states by node id.\n   */\n  nodeStatesByNodeId: IDMap<any>;\n\n  /**\n   * A map of output-to-value maps by node id.\n   */\n  nodeOutputValuesByNodeId: IDMap<IDMap<boolean>>;\n\n  /**\n   * A map of the the ids of the pending transitions for a node by node id.\n   */\n  nodeOutputTransitionsByNodeId: IDMap<IDMap<string | null>>;\n\n  // Not entirely happy having this on the state, since it is\n  //  highly transient and has a lot of churn.\n  // However, this greatly simplifies the one-transition-per-pin logic.\n  //  Without this, either the logic to add or logic to apply transitions would have\n  //  to do a deep scan of the other's state data.\n  // Note: turns out one-transition-per-pin is \"intertial\" delay,\n  //  while some elements have a \"buffer\" delay.\n  /**\n   * A map of pending transitions by id.\n   */\n  transitionsById: IDMap<NodePinTransition>;\n\n  /**\n   * Transition windows in ascending order of tick.\n   */\n  transitionWindows: TransitionWindow[];\n}\n\nexport const defaultSimulatorState: SimulatorState = {\n  tick: 0,\n  nodesById: {},\n  nodeStatesByNodeId: {},\n  nodeOutputValuesByNodeId: {},\n  nodeOutputTransitionsByNodeId: {},\n  transitionsById: {},\n  transitionWindows: []\n};\n","import { Point } from \"@/types\";\n\nimport { DragModeType } from \"./types\";\nimport { NodePin, NodePinDirection } from \"@/services/simulator/types\";\n\nexport interface SelectedPinState extends NodePin {\n  direction: NodePinDirection;\n}\n\nexport interface CircuitFieldState {\n  dragMode: DragModeType | null;\n  dragStart: Point | null;\n  dragEnd: Point | null;\n  selectedPin: SelectedPinState | null;\n}\n\nexport const defaultCircuitFieldState: CircuitFieldState = {\n  dragMode: null,\n  dragStart: null,\n  dragEnd: null,\n  selectedPin: null\n};\n","import { Point, IDMap } from \"@/types\";\n\nimport {\n  CircuitFieldState,\n  defaultCircuitFieldState\n} from \"./ContentViews/CircuitField/state\";\n\nimport { ClipboardNode } from \"./types\";\n\nexport interface CircuitEditorState {\n  clipboardContent: ClipboardNode[];\n  nodePositions: IDMap<Point>;\n  mouseOverNodeId: string | null;\n  selectedNodeIds: string[];\n  circuitField: CircuitFieldState;\n}\n\nexport const defaultCircuitEditorState: CircuitEditorState = {\n  clipboardContent: [],\n  nodePositions: {},\n  mouseOverNodeId: null,\n  selectedNodeIds: [],\n  circuitField: defaultCircuitFieldState\n};\n","import {\n  SimulatorState,\n  defaultSimulatorState\n} from \"@/services/simulator/state\";\n\nimport {\n  CircuitEditorState,\n  defaultCircuitEditorState\n} from \"@/pages/CircuitEditor/state\";\n\nexport type GetState = () => AppState;\n\nexport interface AppState {\n  services: {\n    simulator: SimulatorState;\n  };\n  ui: {\n    circuitEditor: CircuitEditorState;\n  };\n}\n\nexport const defaultAppState: AppState = {\n  services: {\n    simulator: defaultSimulatorState\n  },\n  ui: {\n    circuitEditor: defaultCircuitEditorState\n  }\n};\n","import { mapValues } from \"lodash-es\";\nimport produce from \"immer\";\n\nimport { AddNodeAction } from \"../actions\";\nimport { NodeTypes } from \"../node-types\";\nimport { SimulatorState } from \"../state\";\n\nexport function addNodeMutator(state: SimulatorState, action: AddNodeAction) {\n  const { nodeId: id, nodeType: type } = action.payload;\n\n  const def = NodeTypes[type];\n  if (!def) {\n    return;\n  }\n\n  const {\n    nodesById,\n    nodeStatesByNodeId,\n    nodeOutputValuesByNodeId,\n    nodeOutputTransitionsByNodeId\n  } = state;\n\n  nodesById[id] = {\n    id,\n    type,\n    inputConnectionsByPin: mapValues(def.inputs, () => null),\n    outputConnectionsByPin: mapValues(def.outputs, () => [])\n  };\n\n  const result = def.evolve\n    ? def.evolve(undefined, mapValues(def.inputs, () => false), state.tick)\n    : {};\n\n  nodeStatesByNodeId[id] = result.state || {};\n  nodeOutputValuesByNodeId[id] = result.transitions\n    ? mapValues(result.transitions, x => x.value)\n    : mapValues(def.outputs, () => false);\n\n  nodeOutputTransitionsByNodeId[id] = mapValues(def.outputs, () => null);\n}\n\nexport default produce(addNodeMutator);\n","import produce from \"immer\";\n\nimport binarySearch from \"binary-search\";\nimport { remove } from \"lodash-es\";\n\nimport { SimulatorState } from \"@/services/simulator/state\";\nimport { DeleteNodeAction } from \"@/services/simulator/actions\";\nimport { typedKeys } from \"@/utils\";\n\nfunction deleteNodeMutator(state: SimulatorState, action: DeleteNodeAction) {\n  const { nodeIds } = action.payload;\n  nodeIds.forEach(id => deleteNodeById(state, id));\n}\nexport default produce(deleteNodeMutator);\n\nfunction deleteNodeById(state: SimulatorState, nodeId: string) {\n  const {\n    nodesById,\n    nodeStatesByNodeId,\n    nodeOutputValuesByNodeId,\n    nodeOutputTransitionsByNodeId,\n    transitionsById,\n    transitionWindows\n  } = state;\n\n  const node = nodesById[nodeId];\n  if (!node) {\n    return;\n  }\n  delete nodesById[nodeId];\n\n  const { inputConnectionsByPin, outputConnectionsByPin } = node;\n\n  for (const inputId of typedKeys(inputConnectionsByPin)) {\n    const input = inputConnectionsByPin[inputId];\n    if (!input) {\n      continue;\n    }\n\n    const target = nodesById[input.nodeId];\n    if (!target) {\n      continue;\n    }\n\n    const conns = target.outputConnectionsByPin[input.pin];\n    if (!conns) {\n      continue;\n    }\n\n    remove(conns, x => x.nodeId === nodeId && x.pin === inputId);\n  }\n\n  for (const outputId of typedKeys(outputConnectionsByPin)) {\n    const outputSet = outputConnectionsByPin[outputId];\n    for (const conn of outputSet) {\n      const target = nodesById[conn.nodeId];\n      const targetConn = target.inputConnectionsByPin[conn.pin];\n      if (\n        targetConn &&\n        targetConn.nodeId === nodeId &&\n        targetConn.pin === outputId\n      ) {\n        target.inputConnectionsByPin[conn.pin] = null;\n      }\n    }\n  }\n\n  delete nodeStatesByNodeId[nodeId];\n  delete nodeOutputValuesByNodeId[nodeId];\n\n  const transitionsByPin = nodeOutputTransitionsByNodeId[nodeId];\n  for (const outputId of typedKeys(transitionsByPin)) {\n    const transitionId = transitionsByPin[outputId];\n    if (!transitionId) {\n      continue;\n    }\n\n    const transition = transitionsById[transitionId];\n    if (!transition) {\n      continue;\n    }\n\n    // Remove transition\n    delete transitionsById[transitionId];\n\n    // Remove transition from windows\n    const index = binarySearch(\n      transitionWindows,\n      transition.tick,\n      (a, b) => a.tick - b\n    );\n    if (index >= 0) {\n      const window = transitionWindows[index];\n      const transitionIndex = window.transitionIds.indexOf(transitionId);\n      if (transitionIndex > -1) {\n        if (window.transitionIds.length === 1) {\n          transitionWindows.splice(index, 1);\n        } else {\n          window.transitionIds.splice(transitionIndex, 1);\n        }\n      }\n    }\n  }\n  delete nodeOutputTransitionsByNodeId[nodeId];\n}\n","import binarySearch from \"binary-search\";\nimport uuidV4 from \"uuid/v4\";\n\nimport { SimulatorState } from \"@/services/simulator/state\";\nimport { TransitionWindow, NodePin } from \"@/services/simulator/types\";\n\nexport function addTransition(\n  state: SimulatorState,\n  nodeId: string,\n  outputId: string,\n  tick: number,\n  value: boolean\n) {\n  const { nodeOutputTransitionsByNodeId, transitionsById } = state;\n\n  const transitionId = uuidV4();\n\n  transitionsById[transitionId] = {\n    id: transitionId,\n    nodeId,\n    outputId,\n    tick,\n    value\n  };\n\n  const outputTransitions = nodeOutputTransitionsByNodeId[nodeId];\n  if (!outputTransitions) {\n    // Node does not exist?\n    return;\n  }\n\n  outputTransitions[outputId] = transitionId;\n\n  const transitionWindow = getOrCreateWindow(state, tick);\n  transitionWindow.transitionIds.push(transitionId);\n}\n\nexport function removeTransitionByPin(state: SimulatorState, pin: NodePin) {\n  const { nodeId, pin: outputId } = pin;\n\n  const {\n    nodeOutputTransitionsByNodeId,\n    transitionsById,\n    transitionWindows\n  } = state;\n\n  const pinTransitions = nodeOutputTransitionsByNodeId[nodeId];\n  if (!pinTransitions) {\n    return;\n  }\n\n  const transitionId = pinTransitions[outputId];\n  if (!transitionId) {\n    return;\n  }\n\n  // Remove the transition from the node output transitions\n  delete pinTransitions[outputId];\n\n  const transition = transitionsById[transitionId];\n  if (!transition) {\n    return;\n  }\n\n  // Remove the transition from the transitions map.\n  delete transitionsById[transitionId];\n\n  const transitionWindowIndex = transitionWindows.findIndex(\n    x => x.tick === transition.tick\n  );\n  if (transitionWindowIndex === -1) {\n    return;\n  }\n  const transitionWindow = transitionWindows[transitionWindowIndex];\n\n  const tickWindowTransitionIndex = transitionWindow.transitionIds.indexOf(\n    transitionId\n  );\n  if (tickWindowTransitionIndex === -1) {\n    return;\n  }\n  if (transitionWindow.transitionIds.length === 1) {\n    // Only one element left, remove the window.\n    transitionWindows.splice(transitionWindowIndex, 1);\n  } else {\n    // Remove the transition from the tick window.\n    transitionWindow.transitionIds.splice(tickWindowTransitionIndex, 1);\n  }\n}\n\nfunction getOrCreateWindow(\n  state: SimulatorState,\n  tick: number\n): TransitionWindow {\n  const { transitionWindows } = state;\n  const index = binarySearch(transitionWindows, tick, (a, b) => a.tick - b);\n  if (index >= 0) {\n    return transitionWindows[index];\n  }\n\n  const insertAt = -index - 1;\n  const result: TransitionWindow = {\n    tick,\n    transitionIds: []\n  };\n  transitionWindows.splice(insertAt, 0, result);\n  return result;\n}\n","import uuidV4 from \"uuid/v4\";\n\nimport { IDMap } from \"@/types\";\n\nimport { SimulatorState } from \"../state\";\n\nimport { Node, TransitionWindow } from \"../types\";\nimport { NodeTypes, EvolutionResult } from \"../node-types\";\n\nimport { addTransition, removeTransitionByPin } from \"./transition-utils\";\n\nexport function collectNodeTransitionsMutator(\n  state: SimulatorState,\n  nodeId: string\n) {\n  const {\n    tick,\n    nodeStatesByNodeId,\n    nodeOutputValuesByNodeId,\n    transitionWindows\n  } = state;\n\n  const node = state.nodesById[nodeId];\n  if (!node) {\n    return;\n  }\n\n  // Evolve with the new inputs.\n  const type = NodeTypes[node.type];\n  if (!type || !type.evolve) {\n    return;\n  }\n\n  // Build the current input state from the connected pins.\n  const inputs: IDMap<boolean> = {};\n  for (const inputPin of Object.keys(node.inputConnectionsByPin)) {\n    const inputConn = node.inputConnectionsByPin[inputPin];\n    if (!inputConn) {\n      inputs[inputPin] = false;\n      continue;\n    }\n    const { nodeId: sourceNodeId, pin: sourcePin } = inputConn;\n\n    inputs[inputPin] = nodeOutputValuesByNodeId[sourceNodeId][sourcePin];\n  }\n\n  // TODO: Provide frozen state.  The state passed to this is currently\n  //  the immer mutable record.\n  const result = type.evolve(nodeStatesByNodeId[node.id], inputs, tick);\n\n  if (result.state) {\n    nodeStatesByNodeId[node.id] = result.state;\n  }\n\n  if (result.transitions) {\n    const nodeOutputs = nodeOutputValuesByNodeId[node.id] || {};\n    for (const outputId of Object.keys(result.transitions)) {\n      const { tickOffset, value } = result.transitions[outputId];\n\n      // Sanity check that we are not producing transitions for the past or current tick.\n      const transitionTick = tick + (tickOffset > 0 ? tickOffset : 1);\n\n      removeTransitionByPin(state, { nodeId: node.id, pin: outputId });\n\n      if (nodeOutputs[outputId] !== value) {\n        addTransition(state, node.id, outputId, transitionTick, value);\n      }\n    }\n  }\n}\n","import produce from \"immer\";\n\nimport { SimulatorState } from \"../state\";\nimport { WireNodeAction } from \"../actions\";\n\nimport { collectNodeTransitionsMutator } from \"./collect-transitions\";\n\nfunction wireNodeMutator(state: SimulatorState, action: WireNodeAction) {\n  const { sourceNodeId, sourcePin, targetNodeId, targetPin } = action.payload;\n\n  const sourceNode = state.nodesById[sourceNodeId];\n  const targetNode = state.nodesById[targetNodeId];\n\n  if (!sourceNode || !targetNode) {\n    return;\n  }\n\n  // Only one source per input.\n  if (targetNode.inputConnectionsByPin[targetPin]) {\n    return;\n  }\n\n  // Tell the target about the source.\n  targetNode.inputConnectionsByPin[targetPin] = {\n    nodeId: sourceNodeId,\n    pin: sourcePin\n  };\n\n  // Tell the source about the target.\n  sourceNode.outputConnectionsByPin[sourcePin].push({\n    nodeId: targetNodeId,\n    pin: targetPin\n  });\n\n  collectNodeTransitionsMutator(state, targetNodeId);\n}\n\nexport default produce(wireNodeMutator);\n","import produce from \"immer\";\n\nimport { SimulatorState } from \"../state\";\nimport { UnwireNodeAction } from \"../actions\";\n\nimport { collectNodeTransitionsMutator } from \"./collect-transitions\";\n\nfunction unwireNodeMutator(state: SimulatorState, action: UnwireNodeAction) {\n  const { sourceNodeId, sourcePin, targetNodeId, targetPin } = action.payload;\n\n  const sourceNode = state.nodesById[sourceNodeId];\n  const targetNode = state.nodesById[targetNodeId];\n\n  if (!sourceNode || !targetNode) {\n    return;\n  }\n\n  const targetConn = targetNode.inputConnectionsByPin[targetPin];\n  if (!targetConn) {\n    return;\n  }\n\n  if (targetConn.nodeId !== sourceNodeId || targetConn.pin !== sourcePin) {\n    return;\n  }\n  targetNode.inputConnectionsByPin[targetPin] = null;\n\n  const outConns = sourceNode.outputConnectionsByPin[sourcePin];\n  if (!outConns) {\n    return;\n  }\n\n  const sourceConnIndex = outConns.findIndex(\n    c => c.nodeId === targetNodeId && c.pin === targetPin\n  );\n  if (sourceConnIndex === -1) {\n    return;\n  }\n  outConns.splice(sourceConnIndex, 1);\n\n  collectNodeTransitionsMutator(state, targetNodeId);\n}\n\nexport default produce(unwireNodeMutator);\n","import produce from \"immer\";\n\nimport { SimulatorState } from \"../state\";\nimport { InteractNodeAction } from \"../actions\";\nimport { NodeTypes } from \"../node-types\";\n\nimport { collectNodeTransitionsMutator } from \"./collect-transitions\";\n\nfunction interactNodeMutator(\n  state: SimulatorState,\n  action: InteractNodeAction\n) {\n  const { nodeId } = action.payload;\n  const { nodesById, nodeStatesByNodeId } = state;\n\n  const node = nodesById[nodeId];\n  const type = NodeTypes[node.type];\n  if (!type || !type.interact) {\n    return;\n  }\n\n  const nodeState = nodeStatesByNodeId[nodeId];\n  const newState = type.interact(nodeStatesByNodeId[nodeId]);\n  nodeStatesByNodeId[nodeId] = newState;\n\n  collectNodeTransitionsMutator(state, nodeId);\n}\nexport default produce(interactNodeMutator);\n","import produce from \"immer\";\n\nimport { EvolveSimAction } from \"../actions\";\nimport { SimulatorState } from \"../state\";\n\nimport { collectNodeTransitionsMutator } from \"./collect-transitions\";\n\nfunction evolveSimMutator(state: SimulatorState, action: EvolveSimAction) {\n  const { tickCount } = action.payload;\n  const {\n    tick,\n    nodesById,\n    nodeOutputTransitionsByNodeId,\n    nodeOutputValuesByNodeId,\n    transitionsById,\n    transitionWindows\n  } = state;\n\n  const endTick = tick + tickCount;\n\n  // For each window within our update range...\n  const iterator = takeWhile(\n    transitionWindows,\n    window => window.tick <= endTick\n  );\n\n  let saftyCutoff = tickCount;\n\n  for (const window of iterator) {\n    // Update the current tick, as it is referenced\n    //  during transition collection.\n    state.tick = window.tick;\n\n    const updateNodes = new Set<string>();\n\n    for (const tid of window.transitionIds) {\n      const { nodeId, outputId, value } = transitionsById[tid];\n\n      const node = nodesById[nodeId];\n      if (!node) {\n        continue;\n      }\n\n      // Transition is now applied and no longer tracked, remove it from the list.\n      delete transitionsById[tid];\n\n      // This should be safe if everything stays in sync.\n      //  We only allow one transition per id, and this should be it.\n      delete nodeOutputTransitionsByNodeId[nodeId][outputId];\n\n      nodeOutputValuesByNodeId[nodeId][outputId] = value;\n\n      for (const outConn of node.outputConnectionsByPin[outputId]) {\n        updateNodes.add(outConn.nodeId);\n      }\n    }\n\n    for (const nodeId of updateNodes) {\n      collectNodeTransitionsMutator(state, nodeId);\n    }\n\n    if (--saftyCutoff <= 0) {\n      console.error(\n        \"Safty threshold exceeded for sim tick window consumption.  This indicates new windows are being created under the currently-executing tick.\"\n      );\n      break;\n    }\n  }\n\n  // Zip the tick to the last tick we ran for.\n  //  This may not be the last tick we performed, if there were no transitions\n  //  between our last tick and desired end tick.\n  state.tick = endTick;\n}\n\nexport default produce(evolveSimMutator);\n\nfunction* takeWhile<T>(\n  items: T[],\n  predicate: (item: T) => boolean\n): IterableIterator<T> {\n  while (items.length > 0) {\n    const item = items[0];\n    if (!predicate(item)) {\n      break;\n    }\n    const nextItem = items.shift()!;\n    yield nextItem;\n  }\n}\n","import { SimulatorState, defaultSimulatorState } from \"../state\";\n\nimport {\n  SimulatorAction,\n  ACTION_WIRE,\n  ACTION_UNWIRE,\n  ACTION_TOGGLEWIRE,\n  ACTION_EVOLVE,\n  ACTION_FASTFORWARD,\n  ACTION_NODE_INTERACT,\n  ACTION_NODE_ADD,\n  ACTION_NODE_DELETE\n} from \"../actions\";\n\nimport { isWired } from \"../helpers\";\n\nimport addNodeReducer from \"./add-node\";\nimport deleteNodeReducer from \"./delete-node\";\nimport wireNodeReducer from \"./wire-node\";\nimport unwireNodeReducer from \"./unwire-node\";\nimport interactNodeReducer from \"./interact-node\";\nimport evolveSimReducer from \"./evolve-sim\";\nimport fastForwardReducer from \"./fast-forward-sim\";\n\nexport default function simulatorReducer(\n  state: SimulatorState = defaultSimulatorState,\n  action: SimulatorAction\n): SimulatorState {\n  switch (action.type) {\n    case ACTION_NODE_ADD:\n      return addNodeReducer(state, action);\n    case ACTION_NODE_DELETE:\n      return deleteNodeReducer(state, action);\n    case ACTION_WIRE:\n      return wireNodeReducer(state, action);\n    case ACTION_UNWIRE:\n      return unwireNodeReducer(state, action);\n    case ACTION_TOGGLEWIRE:\n      const {\n        sourceNodeId,\n        sourcePin,\n        targetNodeId,\n        targetPin\n      } = action.payload;\n      if (\n        isWired(\n          state.nodesById,\n          { nodeId: sourceNodeId, pin: sourcePin },\n          { nodeId: targetNodeId, pin: targetPin }\n        )\n      ) {\n        return unwireNodeReducer(state, {\n          type: ACTION_UNWIRE,\n          payload: action.payload\n        });\n      } else {\n        return wireNodeReducer(state, {\n          type: ACTION_WIRE,\n          payload: action.payload\n        });\n      }\n    case ACTION_NODE_INTERACT:\n      return interactNodeReducer(state, action);\n    case ACTION_EVOLVE:\n      return evolveSimReducer(state, action);\n    case ACTION_FASTFORWARD:\n      return fastForwardReducer(state, action);\n  }\n  return state;\n}\n","import produce from \"immer\";\n\nimport { AddNodeAction } from \"../actions\";\n\nimport { CircuitEditorState } from \"../state\";\n\nconst addNodeReducer = produce(\n  (state: CircuitEditorState, action: AddNodeAction) => {\n    const { nodeId: id, x = 0, y = 0 } = action.payload;\n    state.nodePositions[id] = {\n      x,\n      y\n    };\n  }\n);\nexport default addNodeReducer;\n","import produce from \"immer\";\n\nimport { pull } from \"lodash-es\";\n\nimport { DeleteNodeAction } from \"@/services/simulator/actions\";\nimport { CircuitEditorState } from \"@/pages/CircuitEditor/state\";\n\nexport default produce(\n  (state: CircuitEditorState, action: DeleteNodeAction) => {\n    const { nodeIds } = action.payload;\n\n    for (const nodeId of nodeIds) {\n      delete state.nodePositions[nodeId];\n    }\n\n    pull(state.selectedNodeIds, ...nodeIds);\n\n    if (\n      state.mouseOverNodeId &&\n      nodeIds.indexOf(state.mouseOverNodeId) !== -1\n    ) {\n      state.mouseOverNodeId = null;\n    }\n  }\n);\n","import produce from \"immer\";\n\nimport { HoverNodeAction } from \"../actions\";\nimport { CircuitEditorState } from \"../state\";\n\nconst hoverNodeReducer = produce(\n  (state: CircuitEditorState, action: HoverNodeAction) => {\n    state.mouseOverNodeId = action.payload.nodeId;\n  }\n);\nexport default hoverNodeReducer;\n","import produce from \"immer\";\nimport { mapValues, pick } from \"lodash-es\";\n\nimport { MoveNodesAction } from \"../actions\";\nimport { CircuitEditorState } from \"../state\";\n\nfunction moveNodeReducer(state: CircuitEditorState, action: MoveNodesAction) {\n  const { nodeIds, offsetX, offsetY } = action.payload;\n  const { nodePositions } = state;\n  state.nodePositions = {\n    ...nodePositions,\n    ...mapValues(pick(nodePositions, nodeIds), p => ({\n      x: p.x + offsetX,\n      y: p.y + offsetY\n    }))\n  };\n}\n\nexport default produce(moveNodeReducer);\n","import produce from \"immer\";\n\nimport { map, mapValues, zipObject } from \"lodash-es\";\nimport uuidV4 from \"uuid/v4\";\n\nimport { AppState } from \"@/store\";\nimport { pointSubtract } from \"@/geometry\";\nimport { typedKeys } from \"@/utils\";\nimport { Point } from \"@/types\";\n\nimport { CircuitEditorState, defaultCircuitEditorState } from \"../state\";\nimport { CopyNodesAction } from \"../actions\";\nimport { selectedNodesById as selectedNodesByIdSelector } from \"../selectors\";\nimport { ClipboardNode } from \"../types\";\n\nfunction copyNodesMutator(\n  state: CircuitEditorState = defaultCircuitEditorState,\n  action: CopyNodesAction,\n  appState: AppState\n) {\n  const { nodeIds } = action.payload;\n  const { nodePositions } = state;\n  const { nodesById } = appState.services.simulator;\n\n  if (nodeIds.length === 0) {\n    return;\n  }\n\n  const copyIds = zipObject(nodeIds, map(nodeIds, () => uuidV4()));\n\n  function nodeIsSelected(id: string): boolean {\n    return nodeIds.findIndex(x => x === id) !== -1;\n  }\n\n  const rootPosition = nodePositions[nodeIds[0]];\n\n  const copyNodes: ClipboardNode[] = nodeIds.map(id => {\n    const node = nodesById[id];\n    const copyNode: ClipboardNode = {\n      id: copyIds[id],\n      type: node.type,\n      offset: pointSubtract(nodePositions[id], rootPosition),\n      outputs: mapValues(node.outputConnectionsByPin, conns =>\n        conns\n          .filter(x => nodeIsSelected)\n          .map(c => ({ nodeId: copyIds[c.nodeId], pin: c.pin }))\n      )\n    };\n    return copyNode;\n  });\n\n  state.clipboardContent = copyNodes;\n}\n\nexport default function copySelectedReduxcer(\n  state: CircuitEditorState = defaultCircuitEditorState,\n  action: CopyNodesAction,\n  appState: AppState\n) {\n  return produce(state, s => copyNodesMutator(s, action, appState));\n}\n","import { union, difference } from \"lodash-es\";\n\nimport { SelectionMode } from \"../types\";\n\nexport function combineSelection(\n  selectedIds: string[],\n  chosenIds: string[],\n  mode: SelectionMode\n) {\n  switch (mode) {\n    case \"set\":\n      return chosenIds;\n    case \"append\":\n      return union(selectedIds, chosenIds);\n    case \"remove\":\n      return difference(selectedIds, chosenIds);\n    case \"toggle\": {\n      return difference(selectedIds, chosenIds).concat(\n        difference(chosenIds, selectedIds)\n      );\n    }\n  }\n\n  return chosenIds;\n}\n","import produce from \"immer\";\n\nimport { SelectNodesAction } from \"../actions\";\nimport { CircuitEditorState } from \"../state\";\n\nimport { combineSelection } from \"./utils\";\n\nconst selectNodesReducer = produce(\n  (state: CircuitEditorState, action: SelectNodesAction) => {\n    const { nodeIds, mode } = action.payload;\n    state.selectedNodeIds = combineSelection(\n      state.selectedNodeIds,\n      nodeIds,\n      mode\n    );\n  }\n);\nexport default selectNodesReducer;\n","import produce from \"immer\";\n\nimport { ClearSelectionAction } from \"../actions\";\nimport { CircuitEditorState } from \"../state\";\n\nconst clearSelectionReducer = produce(\n  (state: CircuitEditorState, action: ClearSelectionAction) => {\n    state.selectedNodeIds = [];\n  }\n);\nexport default clearSelectionReducer;\n","import produce from \"immer\";\n\nimport { AppState } from \"@/store\";\n\nimport {\n  ACTION_NODE_DELETE,\n  DeleteNodeAction\n} from \"@/services/simulator/actions\";\n\nimport {\n  CircuitEditorAction,\n  ACTION_NODE_ADD,\n  ACTION_NODE_HOVER,\n  ACTION_NODE_MOVE,\n  ACTION_COPY_NODES,\n  ACTION_SELECT_REGION,\n  ACTION_SELECT_CLEAR,\n  ACTION_SELECT_NODES\n} from \"../actions\";\nimport { CircuitEditorState, defaultCircuitEditorState } from \"../state\";\n\nimport circuitFieldReducer from \"../ContentViews/CircuitField/reducer\";\n\nimport addNodeReducer from \"./add-node\";\nimport deleteNodeReducer from \"./delete-node\";\nimport mouseOverNodeReducer from \"./hover-node\";\nimport moveNodeReducer from \"./move-node\";\nimport copySelectedNodesReducer from \"./copy-nodes\";\nimport selectNodesReducer from \"./select-nodes\";\nimport selectRegionReducer from \"./select-region\";\nimport clearSelectionReducer from \"./clear-selection\";\nimport { AnyAction } from \"redux\";\n\nexport default function circuitEditorReducer(\n  state: CircuitEditorState = defaultCircuitEditorState,\n  action: CircuitEditorAction | DeleteNodeAction,\n  appState: AppState\n): CircuitEditorState {\n  const newCircuitFieldState = circuitFieldReducer(\n    state.circuitField,\n    action as AnyAction\n  );\n  if (newCircuitFieldState != state.circuitField) {\n    state = {\n      ...state,\n      circuitField: newCircuitFieldState\n    };\n  }\n\n  switch (action.type) {\n    case ACTION_NODE_ADD:\n      return addNodeReducer(state, action);\n    case ACTION_NODE_DELETE:\n      return deleteNodeReducer(state, action);\n    case ACTION_NODE_HOVER:\n      return mouseOverNodeReducer(state, action);\n    case ACTION_NODE_MOVE:\n      return moveNodeReducer(state, action);\n    case ACTION_COPY_NODES:\n      return copySelectedNodesReducer(state, action, appState);\n    case ACTION_SELECT_NODES:\n      return selectNodesReducer(state, action);\n    case ACTION_SELECT_REGION:\n      return selectRegionReducer(state, action, appState);\n    case ACTION_SELECT_CLEAR:\n      return clearSelectionReducer(state, action);\n  }\n  return state;\n}\n","import {\n  ACTION_SELECT_NODES,\n  ACTION_SELECT_CLEAR,\n  ACTION_SELECT_REGION,\n  SelectNodesAction,\n  SelectRegionAction,\n  ClearSelectionAction\n} from \"@/pages/CircuitEditor/actions\";\n\nimport {\n  CircuitFieldAction,\n  ACTION_DRAG_START,\n  ACTION_DRAG_CONTINUE,\n  ACTION_DRAG_END,\n  ACTION_SELECT_PIN\n} from \"./actions\";\nimport { CircuitFieldState, defaultCircuitFieldState } from \"./state\";\n\nexport default function circuitFieldReducer(\n  state: CircuitFieldState = defaultCircuitFieldState,\n  action:\n    | CircuitFieldAction\n    | SelectNodesAction\n    | ClearSelectionAction\n    | SelectRegionAction\n): CircuitFieldState {\n  switch (action.type) {\n    case ACTION_SELECT_REGION:\n    case ACTION_SELECT_NODES:\n    case ACTION_SELECT_CLEAR: {\n      return {\n        ...state,\n        selectedPin: null\n      };\n    }\n    case ACTION_SELECT_PIN: {\n      const { nodeId, pinDirection, pinId } = action.payload;\n      return {\n        ...state,\n        selectedPin: {\n          nodeId,\n          direction: pinDirection,\n          pin: pinId\n        }\n      };\n    }\n    case ACTION_DRAG_START: {\n      const { dragMode, x, y } = action.payload;\n      return {\n        ...state,\n        dragMode,\n        dragStart: {\n          x,\n          y\n        }\n      };\n    }\n    case ACTION_DRAG_CONTINUE: {\n      const { x, y } = action.payload;\n      return {\n        ...state,\n        dragEnd: {\n          x,\n          y\n        }\n      };\n    }\n    case ACTION_DRAG_END: {\n      return {\n        ...state,\n        dragMode: null,\n        dragStart: null,\n        dragEnd: null\n      };\n    }\n  }\n  return state;\n}\n","import produce from \"immer\";\n\nimport { forOwn } from \"lodash-es\";\n\nimport { AppState } from \"@/store\";\n\nimport { intersects } from \"@/geometry\";\n\nimport { nodeRectsById } from \"../selectors\";\n\nimport { SelectRegionAction } from \"../actions\";\nimport { CircuitEditorState } from \"../state\";\n\nimport { combineSelection } from \"./utils\";\n\nexport default function selectRegionReducer(\n  state: CircuitEditorState,\n  action: SelectRegionAction,\n  appState: AppState\n) {\n  const { region, mode } = action.payload;\n\n  const rects = nodeRectsById(appState);\n  const chosenIds: string[] = [];\n  forOwn(rects, (rect, id) => {\n    if (intersects(rect, region)) {\n      chosenIds.push(id);\n    }\n  });\n\n  // State is simple enough that we could\n  //  spread-clone here,\n  //  but using immer for the freeze/seal behavior.\n  return produce(state, state => {\n    state.selectedNodeIds = combineSelection(\n      state.selectedNodeIds,\n      chosenIds,\n      mode\n    );\n  });\n}\n","import { createStore, compose, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nimport reducer from \"./reducer\";\n\nconst storeComposer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nexport const store = createStore(\n  reducer,\n  storeComposer(applyMiddleware(thunk))\n);\n","import simulatorReducer from \"@/services/simulator/reducer\";\n\nimport circuitEditorReducer from \"@/pages/CircuitEditor/reducer\";\n\nimport { AppState, defaultAppState } from \"./state\";\n\nexport default function appStateReducer(\n  state: AppState = defaultAppState,\n  // AnyAction does not work here, as typescript is being far too strict.\n  //  AnyAction is defined as {[key: string]: any}, which it claims cannot be converted to {payload: any}\n  action: any\n) {\n  return {\n    services: {\n      simulator: simulatorReducer(state.services.simulator, action)\n    },\n    ui: {\n      circuitEditor: circuitEditorReducer(state.ui.circuitEditor, action, state)\n    }\n  };\n}\n","import { IDMap } from \"@/types\";\n\nimport { Node, NodePin, NodesById } from \"./types\";\nimport { NodeTypes, EvolutionResult } from \"./node-types\";\nimport { SimulatorState } from \"./state\";\n\nexport function isWired(\n  nodesById: NodesById,\n  output: NodePin,\n  input: NodePin\n): boolean {\n  const inputNode = nodesById[input.nodeId];\n\n  if (!inputNode) {\n    return false;\n  }\n\n  const conn = inputNode.inputConnectionsByPin[input.pin];\n  if (!conn) {\n    return false;\n  }\n\n  return conn.nodeId === output.nodeId && conn.pin === output.pin;\n}\n","import {\n  SimulatorState,\n  defaultSimulatorState\n} from \"@/services/simulator/state\";\nimport { FastForwardSimAction, evolveSim } from \"@/services/simulator/actions\";\n\nimport evolveSimReducer from \"./evolve-sim\";\n\nexport default function fastForwardSimReducer(\n  state: SimulatorState = defaultSimulatorState,\n  action: FastForwardSimAction\n): SimulatorState {\n  const { tick, transitionWindows } = state;\n\n  if (transitionWindows.length === 0) {\n    return state;\n  }\n\n  const nextWindowTick = transitionWindows[0].tick - tick;\n  return evolveSimReducer(state, evolveSim(nextWindowTick));\n}\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport { Provider } from \"react-redux\";\n\nimport \"./css\";\n\nimport { store } from \"./store\";\nimport App from \"./components/App\";\n\nconst rootEl = document.getElementById(\"root\");\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootEl\n);\n","import { NodeDefinition } from \"./types\";\n\nexport * from \"./types\";\n\n// Many of these art assets used in these files are public domain and sourced from\n//  https://commons.wikimedia.org/wiki/Logic_gates_unified_symbols\n// Some assets have been modified for formatting or added functionality.\n// Assets that have been pulled from external sources are marked as such.\n\nexport const NodeTypes = {\n  and: require(\"./node-and\").default as NodeDefinition,\n  or: require(\"./node-or\").default as NodeDefinition,\n  nor: require(\"./node-nor\").default as NodeDefinition,\n  not: require(\"./node-not\").default as NodeDefinition,\n  buffer: require(\"./node-buffer\").default as NodeDefinition,\n  led: require(\"./node-led\").default as NodeDefinition,\n  toggle: require(\"./node-toggle\").default as NodeDefinition,\n  seg7: require(\"./node-seg7\").default as NodeDefinition\n};\nexport type NodeType = keyof typeof NodeTypes;\n","import { Point } from \"@/types\";\n\nimport { DragModeType } from \"./types\";\nimport { NodePinDirection } from \"@/services/simulator/types\";\n\nexport const ACTION_SELECT_PIN = \"@editor/field/select-pin\" as \"@editor/field/select-pin\";\nexport const selectPin = (\n  nodeId: string,\n  pinDirection: NodePinDirection,\n  pinId: string\n) => ({\n  type: ACTION_SELECT_PIN,\n  payload: {\n    nodeId,\n    pinDirection,\n    pinId\n  }\n});\nexport type SelectPinAction = ReturnType<typeof selectPin>;\n\nexport const ACTION_DRAG_START = \"@editor/field/drag/start\" as \"@editor/field/drag/start\";\nexport const startDrag = (p: Point, dragMode: DragModeType) => ({\n  type: ACTION_DRAG_START,\n  payload: {\n    ...p,\n    dragMode\n  }\n});\nexport type StartDragAction = ReturnType<typeof startDrag>;\n\nexport const ACTION_DRAG_CONTINUE = \"@editor/field/drag/continue\" as \"@editor/field/drag/continue\";\nexport const continueDrag = (p: Point) => ({\n  type: ACTION_DRAG_CONTINUE,\n  payload: p\n});\nexport type ContinueDragAction = ReturnType<typeof continueDrag>;\n\nexport const ACTION_DRAG_END = \"@editor/field/drag/end\" as \"@editor/field/drag/end\";\nexport const endDrag = () => ({\n  type: ACTION_DRAG_END\n});\nexport type EndDragAction = ReturnType<typeof endDrag>;\n\nexport type CircuitFieldAction =\n  | SelectPinAction\n  | StartDragAction\n  | ContinueDragAction\n  | EndDragAction;\n","import { Action } from \"redux\";\n\nimport uuidV4 from \"uuid/v4\";\n\nimport { NodeType } from \"./node-types\";\n\nexport const ACTION_EVOLVE = \"@sim/evolve\" as \"@sim/evolve\";\nexport const evolveSim = (tickCount: number) => ({\n  type: ACTION_EVOLVE,\n  payload: { tickCount }\n});\nexport type EvolveSimAction = ReturnType<typeof evolveSim>;\n\nexport const ACTION_FASTFORWARD = \"@sim/fastforward\" as \"@sim/fastforward\";\nexport const fastForwardSim = () => ({\n  type: ACTION_FASTFORWARD\n});\nexport type FastForwardSimAction = ReturnType<typeof fastForwardSim>;\n\nexport const ACTION_NODE_ADD = \"@sim/node/add\" as \"@sim/node/add\";\nexport const addNode = (nodeType: NodeType, nodeId?: string) => ({\n  type: ACTION_NODE_ADD,\n  payload: { nodeId: nodeId || uuidV4(), nodeType }\n});\nexport type AddNodeAction = ReturnType<typeof addNode>;\n\nexport const ACTION_NODE_DELETE = \"@sim/node/delete\" as \"@sim/node/delete\";\nexport const deleteNode = (nodeId: string | string[]) => ({\n  type: ACTION_NODE_DELETE,\n  payload: { nodeIds: Array.isArray(nodeId) ? nodeId : [nodeId] }\n});\nexport type DeleteNodeAction = ReturnType<typeof deleteNode>;\n\nexport const ACTION_NODE_INTERACT = \"@sim/node/interact\" as \"@sim/node/interact\";\nexport const interactNode = (nodeId: string) => ({\n  type: ACTION_NODE_INTERACT,\n  payload: { nodeId }\n});\nexport type InteractNodeAction = ReturnType<typeof interactNode>;\n\nexport const ACTION_WIRE = \"@sim/wire/add\" as \"@sim/wire/add\";\nexport const wireNode = (\n  sourceNodeId: string,\n  sourcePin: string,\n  targetNodeId: string,\n  targetPin: string\n) => ({\n  type: ACTION_WIRE,\n  payload: {\n    sourceNodeId,\n    sourcePin,\n    targetNodeId,\n    targetPin\n  }\n});\nexport type WireNodeAction = ReturnType<typeof wireNode>;\n\nexport const ACTION_UNWIRE = \"@sim/wire/remove\" as \"@sim/wire/remove\";\nexport const unwireNode = (\n  sourceNodeId: string,\n  sourcePin: string,\n  targetNodeId: string,\n  targetPin: string\n) => ({\n  type: ACTION_UNWIRE,\n  payload: {\n    sourceNodeId,\n    sourcePin,\n    targetNodeId,\n    targetPin\n  }\n});\nexport type UnwireNodeAction = ReturnType<typeof unwireNode>;\n\nexport const ACTION_TOGGLEWIRE = \"@sim/wire/toggle\" as \"@sim/wire/toggle\";\nexport const toggleWireNode = (\n  sourceNodeId: string,\n  sourcePin: string,\n  targetNodeId: string,\n  targetPin: string\n) => ({\n  type: ACTION_TOGGLEWIRE,\n  payload: {\n    sourceNodeId,\n    sourcePin,\n    targetNodeId,\n    targetPin\n  }\n});\nexport type ToggleWireNodeAction = ReturnType<typeof toggleWireNode>;\n\nexport type SimulatorAction =\n  | EvolveSimAction\n  | FastForwardSimAction\n  | AddNodeAction\n  | DeleteNodeAction\n  | InteractNodeAction\n  | WireNodeAction\n  | UnwireNodeAction\n  | ToggleWireNodeAction;\n","import { mapValues } from \"lodash-es\";\n\nexport function typedKeys<T>(obj: T): (keyof T)[] {\n  return Object.keys(obj) as (keyof T)[];\n}\n\nexport interface FunctionKeyedObject {\n  [key: string]: Function;\n}\nexport function bindFuncMap<T extends FunctionKeyedObject>(\n  obj: T,\n  target: any\n): T {\n  return mapValues(obj, v => v.bind(target)) as T;\n}\n","import { typedKeys } from \"@/utils\";\n\nimport { NodeDefinition, NodeVisualPathDefinition } from \"./types\";\n\nconst SCALE = 3;\nconst OFFSET = [15, 0];\n\n/**\n * Produce a visual path definition of a segment given a series of polygon points.\n * The path definition will color itself based on the state key specified by 'name'\n * @param name The state key to select color based on.  The key should represent a boolean value.\n * @param points An array of [x,y] pairs that make up the polygon.\n */\nfunction createSeg(\n  name: string,\n  points: [number, number][]\n): NodeVisualPathDefinition {\n  const start = points[0];\n  let path = `M${start[0] * SCALE + OFFSET[0]},${start[1] * SCALE + OFFSET[1]}`;\n  for (let p of points.slice(1)) {\n    const [x, y] = p;\n    path += `L${x * SCALE + OFFSET[0]},${y * SCALE + OFFSET[1]}`;\n  }\n  path += \"z\";\n  return {\n    path,\n    fill: state => (state[name] ? \"red\" : \"blue\")\n  };\n}\n\nconst seg7NodeDefinition: NodeDefinition = {\n  type: \"seg7\",\n  visual: {\n    hitPath: `V63 H45 V0 z`,\n    // https://commons.wikimedia.org/wiki/File:7-segment_abcdefg.svg\n    shapePath: [\n      createSeg(\"A\", [[1, 1], [2, 0], [8, 0], [9, 1], [8, 2], [2, 2]]),\n      createSeg(\"B\", [[9, 1], [10, 2], [10, 8], [9, 9], [8, 8], [8, 2]]),\n      createSeg(\"C\", [[9, 9], [10, 10], [10, 16], [9, 17], [8, 16], [8, 10]]),\n      createSeg(\"D\", [[9, 17], [8, 18], [2, 18], [1, 17], [2, 16], [8, 16]]),\n      createSeg(\"E\", [[1, 17], [0, 16], [0, 10], [1, 9], [2, 10], [2, 16]]),\n      createSeg(\"F\", [[1, 9], [0, 8], [0, 2], [1, 1], [2, 2], [2, 8]]),\n      createSeg(\"G\", [[1, 9], [2, 8], [8, 8], [9, 9], [8, 10], [2, 10]])\n    ]\n  },\n  inputs: {\n    A: {\n      name: \"A\",\n      x: 0,\n      y: 5\n    },\n    B: {\n      name: \"B\",\n      x: 0,\n      y: 15\n    },\n    C: {\n      name: \"C\",\n      x: 0,\n      y: 25\n    },\n    D: {\n      name: \"D\",\n      x: 0,\n      y: 35\n    },\n    E: {\n      name: \"E\",\n      x: 0,\n      y: 45\n    },\n    F: {\n      name: \"F\",\n      x: 0,\n      y: 55\n    },\n    G: {\n      name: \"G\",\n      x: 0,\n      y: 65\n    }\n  },\n  outputs: {},\n  evolve(state, inputs, tick) {\n    return {\n      state: { ...inputs }\n    };\n  }\n};\nexport default seg7NodeDefinition;\n","import { NodeDefinition } from \"./types\";\n\ninterface ToggleState {\n  toggleState: boolean;\n}\nconst defaultToggleState: ToggleState = {\n  toggleState: false\n};\n\nconst toggleSwitchNodeDefinition: NodeDefinition = {\n  type: \"toggle\",\n  visual: {\n    shapePath: {\n      path: `M0,0 L0,50 L25,50 L25,0 z`,\n      fill: (state: ToggleState) => (state.toggleState ? \"green\" : \"red\")\n    }\n  },\n  inputs: {},\n  outputs: {\n    OUT: {\n      name: \"OUT\",\n      x: 25,\n      y: 25\n    }\n  },\n  interact(state: ToggleState = defaultToggleState) {\n    return {\n      ...state,\n      toggleState: !state.toggleState\n    };\n  },\n  evolve(state = defaultToggleState, inputs, tick) {\n    return {\n      transitions: {\n        OUT: {\n          tickOffset: 1,\n          value: state.toggleState\n        }\n      }\n    };\n  }\n};\nexport default toggleSwitchNodeDefinition;\n","import { NodeDefinition } from \"./types\";\n\nfunction genCirclePath(cx: number, cy: number, r: number): string {\n  return `M ${cx - r}, ${cy}\n    a ${r},${r} 0 1,0 ${r * 2},0\n    a ${r},${r} 0 1,0 ${-(r * 2)},0`;\n}\n\nconst ledNodeDefinition: NodeDefinition = {\n  type: \"led\",\n  visual: {\n    shapePath: [\n      genCirclePath(25, 25, 25),\n      {\n        path: genCirclePath(25, 25, 20),\n        fill: state => (state.value ? \"lightgreen\" : \"darkgreen\")\n      }\n    ]\n  },\n  inputs: {\n    IN: {\n      name: \"IN\",\n      x: 0,\n      y: 25\n    }\n  },\n  outputs: {},\n  evolve(state, inputs, tick) {\n    return {\n      state: {\n        value: inputs.IN\n      }\n    };\n  }\n};\nexport default ledNodeDefinition;\n","import { NodeDefinition } from \"./types\";\n\nconst bufferNodeDefinition: NodeDefinition = {\n  type: \"buffer\",\n  visual: {\n    hitPath: `\n    M 28.96875,2.59375 L 28.96875,5 L 28.96875,45 L 28.96875,47.40625 L 31.125,46.34375 L 72.15625,26.34375 L 75,25 L 72.15625,23.65625 L 31.125,3.65625 L 28.96875,2.59375 z\n    `,\n    // https://commons.wikimedia.org/wiki/File:Buffer_ANSI.svg\n    shapePath: `\n      M 72,25 L 95.085706,25\n      M 29.043478,25 L 5.0434781,25\n      M 28.96875,2.59375 L 28.96875,5 L 28.96875,45 L 28.96875,47.40625 L 31.125,46.34375 L 72.15625,26.34375 L 75,25 L 72.15625,23.65625 L 31.125,3.65625 L 28.96875,2.59375 z M 31.96875,7.40625 L 68.09375,25 L 31.96875,42.59375 L 31.96875,7.40625 z\n    `\n  },\n  inputs: {\n    IN: {\n      name: \"IN\",\n      x: 0,\n      y: 25\n    }\n  },\n  outputs: {\n    OUT: {\n      name: \"OUT\",\n      x: 100,\n      y: 25\n    }\n  },\n  evolve(state, inputs, tick) {\n    return {\n      transitions: {\n        OUT: {\n          tickOffset: 2,\n          value: inputs.IN\n        }\n      }\n    };\n  }\n};\nexport default bufferNodeDefinition;\n","import { NodeDefinition } from \"./types\";\n\nconst bufferNodeDefinition: NodeDefinition = {\n  type: \"not\",\n  visual: {\n    hitPath: `\n    M28.96875 2.59375v44.8125l2.15625-1.0625 41.03125-20v-2.6875l-41.03125-20-2.15625-1.0625z\n    `,\n    // https://commons.wikimedia.org/wiki/File:NOT_ANSI.svg\n    shapePath: `\n      M79.15691 25H95\n      M29.043478 25h-24\n      M28.96875 2.59375v44.8125l2.15625-1.0625 41.03125-20v-2.6875l-41.03125-20-2.15625-1.0625z\n      m3 4.8125L68.09375 25l-36.125 17.59375V7.40625z\n      M79 25a4 4 0 1 1-8 0 4 4 0 1 1 8 0z\n    `\n  },\n  inputs: {\n    IN: {\n      name: \"IN\",\n      x: 0,\n      y: 25\n    }\n  },\n  outputs: {\n    OUT: {\n      name: \"OUT\",\n      x: 100,\n      y: 25\n    }\n  },\n  evolve(state, inputs, tick) {\n    return {\n      transitions: {\n        OUT: {\n          tickOffset: 4,\n          value: !inputs.IN\n        }\n      }\n    };\n  }\n};\nexport default bufferNodeDefinition;\n","import { NodeDefinition } from \"./types\";\n\nconst norNodeDefinition: NodeDefinition = {\n  type: \"nor\",\n  visual: {\n    hitPath: `\n    M24.09375 5l2 2.4375S31.75 14.437549 31.75 25s-5.65625 17.5625-5.65625 17.5625l-2 2.4375H41.25c2.408076.000001 7.689699.024514 13.625-2.40625s12.536536-7.343266 17.6875-16.875L71.25 25l1.3125-.71875C62.259387 5.21559 46.006574 5 41.25 5H24.09375z\n    `,\n    // https://commons.wikimedia.org/wiki/File:NOR_ANSI.svg\n    shapePath: `\n      M79 25h16M31 15H5M32 35H5\n      \n      M24.09375 5l2 2.4375S31.75 14.437549 31.75 25s-5.65625 17.5625-5.65625 17.5625l-2 2.4375H41.25c2.408076.000001 7.689699.024514 13.625-2.40625s12.536536-7.343266 17.6875-16.875L71.25 25l1.3125-.71875C62.259387 5.21559 46.006574 5 41.25 5H24.09375z\n      m5.875 3H41.25c4.684173 0 18.28685-.130207 27.96875 17C64.451964 33.429075 58.697469 37.68391 53.5 39.8125 48.139339 42.007924 43.658075 42.000001 41.25 42H30c1.873588-3.108434 4.75-9.04935 4.75-17 0-7.973354-2.908531-13.900185-4.78125-17z\n      M79 25a4 4 0 1 1-8 0 4 4 0 1 1 8 0z\n    `\n  },\n  inputs: {\n    A: {\n      name: \"A\",\n      x: 0,\n      y: 14.5\n    },\n    B: {\n      name: \"B\",\n      x: 0,\n      y: 35\n    }\n  },\n  outputs: {\n    OUT: {\n      name: \"OUT\",\n      x: 100,\n      y: 25\n    }\n  },\n  evolve(state, inputs, tick) {\n    return {\n      transitions: {\n        OUT: {\n          tickOffset: 4,\n          value: !(inputs.A || inputs.B)\n        }\n      }\n    };\n  }\n};\nexport default norNodeDefinition;\n","import { NodeDefinition } from \"./types\";\n\nconst orNodeDefinition: NodeDefinition = {\n  type: \"or\",\n  visual: {\n    hitPath: `\n    M24.09375 5l2 2.4375S31.75 14.437549 31.75 25s-5.65625 17.5625-5.65625 17.5625l-2 2.4375H41.25c2.408076.000001 7.689699.024514 13.625-2.40625s12.536536-7.343266 17.6875-16.875L71.25 25l1.3125-.71875C62.259387 5.21559 46.006574 5 41.25 5H24.09375z\n    `,\n    // https://commons.wikimedia.org/wiki/File:OR_ANSI.svg\n    shapePath: `\n      M70 25h25\n      M31 15H5\n      M32 35H5\n      M24.09375 5l2 2.4375S31.75 14.437549 31.75 25s-5.65625 17.5625-5.65625 17.5625l-2 2.4375H41.25c2.408076.000001 7.689699.024514 13.625-2.40625s12.536536-7.343266 17.6875-16.875L71.25 25l1.3125-.71875C62.259387 5.21559 46.006574 5 41.25 5H24.09375z\n      m5.875 3H41.25c4.684173 0 18.28685-.130207 27.96875 17C64.451964 33.429075 58.697469 37.68391 53.5 39.8125 48.139339 42.007924 43.658075 42.000001 41.25 42H30c1.873588-3.108434 4.75-9.04935 4.75-17 0-7.973354-2.908531-13.900185-4.78125-17z\n    `\n  },\n  inputs: {\n    A: {\n      name: \"A\",\n      x: 0,\n      y: 14.5\n    },\n    B: {\n      name: \"B\",\n      x: 0,\n      y: 35\n    }\n  },\n  outputs: {\n    OUT: {\n      name: \"OUT\",\n      x: 100,\n      y: 25\n    }\n  },\n  evolve(state, inputs, tick) {\n    return {\n      transitions: {\n        OUT: {\n          tickOffset: 4,\n          value: inputs.A || inputs.B\n        }\n      }\n    };\n  }\n};\nexport default orNodeDefinition;\n","import { NodeDefinition } from \"./types\";\n\nconst andNodeDefinition: NodeDefinition = {\n  type: \"and\",\n  visual: {\n    hitPath: `\n      M30 5V45H50.47619c11.267908 0 20-9.000045 20-20s-8.732091-20-20-20H30z\n    `,\n    // https://commons.wikimedia.org/wiki/File:AND_ANSI.svg\n    shapePath: `\n      M70 25h25\n      M31 15H5\n      M32 35H5\n      M30 5V45H50.47619c11.267908 0 20-9.000045 20-20s-8.732091-20-20-20H30z\n      m2.857143 2.857143H50.47619c9.760663 0 16.666667 7.639955 16.666667 17.142857 0 9.502902-7.382195 17.142857-17.142857 17.142857H32.857143V7.857143z\n    `\n  },\n  inputs: {\n    A: {\n      name: \"A\",\n      x: 0,\n      y: 14.5\n    },\n    B: {\n      name: \"B\",\n      x: 0,\n      y: 35\n    }\n  },\n  outputs: {\n    OUT: {\n      name: \"OUT\",\n      x: 100,\n      y: 25\n    }\n  },\n  evolve(state, inputs, tick) {\n    return {\n      transitions: {\n        OUT: {\n          tickOffset: 4,\n          value: inputs.A && inputs.B\n        }\n      }\n    };\n  }\n};\nexport default andNodeDefinition;\n","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"html, body, #root {\\n  width: 100%;\\n  height: 100%;\\n  margin: 0;\\n  padding: 0;\\n}\", \"\"]);\n\n// exports\n","\nvar content = require(\"!!../../node_modules/css-loader/index.js!./body.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../node_modules/css-loader/index.js!./body.css\", function() {\n\t\tvar newContent = require(\"!!../../node_modules/css-loader/index.js!./body.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import { NodeVisualPath } from \"./types\";\n\nexport function normalizeVisuals(\n  v: NodeVisualPath | NodeVisualPath[],\n  state: any\n): { path: string; fill?: string; stroke?: string; strokeWidth?: number }[] {\n  const asArray = Array.isArray(v) ? v : [v];\n\n  return asArray.map(x => {\n    if (typeof x === \"string\") {\n      return {\n        path: x,\n        fill: \"black\",\n        stroke: \"black\",\n        strokeWidth: 2\n      };\n    }\n    const fill = typeof x.fill === \"function\" ? x.fill(state || {}) : x.fill;\n    const stroke =\n      typeof x.stroke === \"function\" ? x.stroke(state || {}) : x.stroke;\n    const strokeWidth =\n      typeof x.strokeWidth === \"function\"\n        ? x.strokeWidth(state || {})\n        : x.strokeWidth;\n    return {\n      path: x.path,\n      fill,\n      stroke,\n      strokeWidth\n    };\n  });\n}\n","import { Dispatch } from \"react-redux\";\n\nimport uuidV4 from \"uuid/v4\";\nimport { values, zipObject, map } from \"lodash-es\";\n\nimport { Rectangle } from \"@/types\";\nimport { GetState } from \"@/store\";\n\nimport {\n  addNode as simulatorAddNode,\n  wireNode\n} from \"@/services/simulator/actions\";\n\nimport { NodeType } from \"@/services/simulator/node-types\";\nimport { SelectionMode } from \"@/pages/CircuitEditor/types\";\n\nexport { ACTION_NODE_ADD } from \"@/services/simulator/actions\";\nexport const addNode = (\n  nodeType: NodeType,\n  x: number,\n  y: number,\n  nodeId?: string\n) => {\n  const simAddNode = simulatorAddNode(nodeType, nodeId);\n  return {\n    ...simAddNode,\n    payload: {\n      ...simAddNode.payload,\n      x,\n      y\n    }\n  };\n};\nexport type AddNodeAction = ReturnType<typeof addNode>;\n\nexport const ACTION_NODE_HOVER = \"@editor/node/hover\" as \"@editor/node/hover\";\nexport const hoverNode = (nodeId: string | null) => ({\n  type: ACTION_NODE_HOVER,\n  payload: { nodeId }\n});\nexport type HoverNodeAction = ReturnType<typeof hoverNode>;\n\nexport const ACTION_NODE_MOVE = \"@editor/node/move\" as \"@editor/node/move\";\nexport const moveNodes = (\n  nodeId: string | string[],\n  offsetX: number,\n  offsetY: number\n) => ({\n  type: ACTION_NODE_MOVE,\n  payload: {\n    nodeIds: Array.isArray(nodeId) ? nodeId : [nodeId],\n    offsetX,\n    offsetY\n  }\n});\nexport type MoveNodesAction = ReturnType<typeof moveNodes>;\n\nexport const ACTION_COPY_NODES = \"@editor/copy\" as \"@editor/copy\";\nexport const copyNodes = (nodeId: string | string[]) => ({\n  type: ACTION_COPY_NODES,\n  payload: {\n    nodeIds: Array.isArray(nodeId) ? nodeId : [nodeId]\n  }\n});\nexport type CopyNodesAction = ReturnType<typeof copyNodes>;\n\nexport const ACTION_PASTE = \"@editor/paste\" as \"@editor/paste\";\nexport const paste = () => (dispatch: Dispatch, getState: GetState) => {\n  // TODO: Make a cross-cutting reducer for this.\n  //  This should not be a thunk, as it can be implemented as a pure action.\n  const state = getState();\n  const clipboardNodes = state.ui.circuitEditor.clipboardContent;\n\n  const pasteIds = zipObject(\n    clipboardNodes.map(x => x.id),\n    map(clipboardNodes, () => uuidV4())\n  );\n\n  // Two passes: Create and Wire.\n\n  // Create the nodes.\n  for (let node of clipboardNodes) {\n    const {\n      id,\n      type,\n      offset: { x, y }\n    } = node;\n    dispatch(addNode(type, x, y, pasteIds[id]));\n  }\n\n  // Wire the nodes\n  for (let node of clipboardNodes) {\n    const { id, outputs } = node;\n    const sourceId = pasteIds[id];\n    for (let outputPin of Object.keys(outputs)) {\n      for (let output of outputs[outputPin]) {\n        const { nodeId: targetCopyId, pin: targetPin } = output;\n        const targetId = pasteIds[targetCopyId];\n        dispatch(wireNode(sourceId, outputPin, targetId, targetPin));\n      }\n    }\n\n    // Now this is just getting silly.  This really needs to be a real reducer.\n    dispatch(selectNodes(values(pasteIds)));\n  }\n};\n\nexport const ACTION_SELECT_NODES = \"@editor/select/nodes\" as \"@editor/select/nodes\";\nexport const selectNodes = (\n  nodeId: string | string[],\n  mode: SelectionMode = \"set\"\n) => ({\n  type: ACTION_SELECT_NODES,\n  payload: {\n    nodeIds: Array.isArray(nodeId) ? nodeId : [nodeId],\n    mode\n  }\n});\nexport type SelectNodesAction = ReturnType<typeof selectNodes>;\n\nexport const ACTION_SELECT_REGION = \"@editor/select/region\" as \"@editor/select/region\";\nexport const selectRegion = (\n  region: Rectangle,\n  mode: SelectionMode = \"set\"\n) => ({\n  type: ACTION_SELECT_REGION,\n  payload: {\n    region,\n    mode\n  }\n});\nexport type SelectRegionAction = ReturnType<typeof selectRegion>;\n\nexport const ACTION_SELECT_CLEAR = \"@editor/select/clear\" as \"@editor/select/clear\";\nexport const clearSelection = () => ({\n  type: ACTION_SELECT_CLEAR\n});\nexport type ClearSelectionAction = ReturnType<typeof clearSelection>;\n\nexport type CircuitEditorAction =\n  | AddNodeAction\n  | HoverNodeAction\n  | MoveNodesAction\n  | CopyNodesAction\n  | SelectNodesAction\n  | SelectRegionAction\n  | ClearSelectionAction;\n","import { Point, Size, Rectangle } from \"@/types\";\n\nexport const ZeroPoint = Object.freeze({ x: 0, y: 0 });\n\nexport function normalizeRectangle(p1: Point, p2: Point): Rectangle;\nexport function normalizeRectangle(r: Rectangle): Rectangle;\nexport function normalizeRectangle(...args: any[]): Rectangle {\n  let p1: Point;\n  let p2: Point;\n  if (args.length === 1) {\n    const r = args[0] as Rectangle;\n    (p1 = r.p1), (p2 = r.p2);\n  } else {\n    p1 = args[0] as Point;\n    p2 = args[1] as Point;\n  }\n  return {\n    p1: {\n      x: Math.min(p1.x, p2.x),\n      y: Math.min(p1.y, p2.y)\n    },\n    p2: {\n      x: Math.max(p1.x, p2.x),\n      y: Math.max(p1.y, p2.y)\n    }\n  };\n}\n\nexport function pointAdd(p1: Point, p2: Point): Point {\n  return {\n    x: p1.x + p2.x,\n    y: p1.y + p2.y\n  };\n}\nexport function pointSubtract(p1: Point, p2: Point): Point {\n  return {\n    x: p1.x - p2.x,\n    y: p1.y - p2.y\n  };\n}\n\nexport function calcSize(r: Rectangle): Size {\n  r = normalizeRectangle(r);\n  return {\n    width: r.p2.x - r.p1.x,\n    height: r.p2.y - r.p1.y\n  };\n}\n\nexport function intersects(r1: Rectangle, r2: Rectangle) {\n  r1 = normalizeRectangle(r1);\n  r2 = normalizeRectangle(r2);\n\n  // r1 starts after p2's extent, or does not reach r2's start.\n  if (r1.p1.x > r2.p2.x || r1.p2.x < r2.p1.x) {\n    return false;\n  }\n\n  // r1 starts after p2's extent, or does not reach r2's start.\n  if (r1.p1.y > r2.p2.y || r1.p2.y < r2.p1.y) {\n    return false;\n  }\n\n  return true;\n}\n","import * as React from \"react\";\n\nimport ReactMarkdown from \"react-markdown\";\n\nimport styled from \"styled-components\";\n\nimport readmeContent from \"@/../README.md\";\n\nexport interface IntroProps {\n  dismiss(): void;\n}\ntype Props = IntroProps;\nexport default class IntroPage extends React.Component<Props> {\n  render() {\n    const {\n      dismiss\n    } = this.props;\n    return (\n      <IntroContainer>\n        <IntroContent>\n          <HeaderContainer>\n            <h3>\n              <b>UNDER CONSTRUCTION</b>\n              <p>\n                This is an as-yet-unfinished experiment.  The user interface is frustrating at best,\n                and you cannot save your work.  It is made available as a playground for the\n                current state of the project.\n              </p>\n              <p>Scan through the readme below, and click the button at the bottom to enter</p>\n              <p>The source can be found at <a href=\"https://github.com/RoboPhred/discrelog\">https://github.com/RoboPhred/discrelog</a></p>\n            </h3>\n          </HeaderContainer>\n          <MarkdownContainer>\n            <ReactMarkdown source={readmeContent}/>\n          </MarkdownContainer>\n          <DismissButton onClick={dismiss}>Let me break things</DismissButton>\n        </IntroContent>\n      </IntroContainer>\n    );\n  }\n}\n\nconst IntroContainer = styled.div`\n  box-sizing: border-box;\n  position: fixed;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  padding: 25px;\n  z-index: 9999;\n`;\n\nconst IntroContent = styled.div`\n  box-sizing: border-box;\n  border: 1px solid #888;\n  width: 100%;\n  height: 100%;\n  padding: 5px;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst HeaderContainer = styled.div`\n  flex: 0 1 auto;\n`;\n\nconst MarkdownContainer = styled.div`\n  flex: 0 1 auto;\n  overflow-y: scroll;\n  background: lightgray;\n  margin: 5px;\n  padding: 5px;\n`;\n\nconst DismissButton = styled.button`\n  min-height: 2em;\n`","import Intro from \"./Intro\";\nexport default Intro;\n","import styled from \"styled-components\";\n\nconst LayoutContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: stretch;\n`;\nexport default LayoutContainer;\n","import styled from \"styled-components\";\n\nexport interface SidebarPanelProps {\n  width?: number;\n  height?: number;\n}\nconst SidebarPanel = styled<SidebarPanelProps, any>(\"div\")`\n  flex: none;\n  display: flex;\n  flex-direction: column;\n  box-sizing: border-box;\n  background: lightgrey;\n  border: 1 solid darkgray;\n  width: ${props => (props.width != null ? `${props.width}px` : undefined)};\n  height: ${props => (props.height != null ? `${props.height}px` : undefined)};\n`;\nexport default SidebarPanel;\n","import styled from \"styled-components\";\n\nconst ContentPanel = styled.div`\n  flex: 1 1 auto;\n  background: darkgray;\n  min-width: 10px;\n`;\nexport default ContentPanel;\n","import * as React from \"react\";\n\nimport styled from \"styled-components\";\n\nimport { DraggableCore, DraggableData } from \"react-draggable\";\n\nexport interface ResizeHandleProps {\n  onResize(delta: number): void;\n}\n\ntype Props = ResizeHandleProps;\nclass ResizeHandle extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props);\n\n    this._onDrag = this._onDrag.bind(this);\n  }\n\n  render() {\n    return (\n      <DraggableCore onDrag={this._onDrag}>\n        <DragHandleDiv />\n      </DraggableCore>\n    );\n  }\n\n  private _onDrag(e: MouseEvent, d: DraggableData) {\n    const { onResize } = this.props;\n    onResize(d.deltaX);\n  }\n}\nexport default ResizeHandle;\n\nconst DragHandleDiv = styled.div`\n  width: 5px;\n  height: 100%;\n  background: black;\n  flex: none;\n  cursor: ew-resize;\n`;\n","import * as React from \"react\";\n\nimport styled from \"styled-components\";\n\nclass ToolWindow extends React.Component {\n  render() {\n    return <ToolWindowDiv>{this.props.children}</ToolWindowDiv>;\n  }\n}\nexport default ToolWindow;\n\nconst ToolWindowDiv = styled.div`\n  box-sizing: border-box;\n  width: 100%;\n  max-height: 100%;\n  flex: none;\n  padding: 5px;\n  overflow: auto;\n`;\n","import EditorLayout from \"./EditorLayout\";\nexport default EditorLayout;\n\nimport ToolWindow from \"./ToolWindow\";\nexport { ToolWindow };\n","import * as React from \"react\";\n\nimport LayoutContainer from \"./components/LayoutContainer\";\nimport SidebarPanel from \"./components/SidebarPanel\";\nimport ContentPanel from \"./components/ContentPanel\";\n\nimport ResizeHandle from \"./components/ResizeHandle\";\n\nexport interface EditorPanelProps {\n  className?: string;\n  leftSidebar?: React.ReactNode;\n  rightSidebar?: React.ReactNode;\n  defaultLeftSidebarWidth?: number;\n  defaultRightSidebarWidth?: number;\n}\ntype Props = EditorPanelProps;\ninterface State {\n  leftSidebarSize: number;\n  rightSidebarSize: number;\n}\nclass EditorLayout extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      leftSidebarSize: props.defaultLeftSidebarWidth || 100,\n      rightSidebarSize: props.defaultRightSidebarWidth || 100\n    };\n\n    this._leftSidebarResize = this._leftSidebarResize.bind(this);\n    this._rightSidebarResize = this._rightSidebarResize.bind(this);\n  }\n\n  render() {\n    const { leftSidebar, rightSidebar, children } = this.props;\n    const { leftSidebarSize, rightSidebarSize } = this.state;\n\n    return (\n      <LayoutContainer className={this.props.className}>\n        {leftSidebar && (\n          <React.Fragment>\n            <SidebarPanel width={leftSidebarSize}>{leftSidebar}</SidebarPanel>\n            <ResizeHandle onResize={this._leftSidebarResize} />\n          </React.Fragment>\n        )}\n        <ContentPanel>{children}</ContentPanel>\n        {rightSidebar && (\n          <React.Fragment>\n            <ResizeHandle onResize={this._rightSidebarResize} />\n            <SidebarPanel width={rightSidebarSize}>{rightSidebar}</SidebarPanel>\n          </React.Fragment>\n        )}\n      </LayoutContainer>\n    );\n  }\n\n  private _leftSidebarResize(delta: number) {\n    this.setState(s => ({\n      leftSidebarSize: s.leftSidebarSize + delta\n    }));\n  }\n\n  private _rightSidebarResize(delta: number) {\n    this.setState(s => ({\n      rightSidebarSize: s.rightSidebarSize - delta\n    }));\n  }\n}\nexport default EditorLayout;\n","import * as React from \"react\";\n\nimport { ContainerConfig } from \"konva\";\n\nimport {\n  Path,\n  Group,\n  Rect,\n  KonvaNodeComponent,\n  KonvaNodeProps\n} from \"react-konva\";\n\nimport {\n  NodeVisualDefinition,\n  NodeVisualPath,\n  NodeType,\n  NodeTypes,\n  NodePinDefinition\n} from \"@/services/simulator/node-types\";\nimport { normalizeVisuals } from \"@/services/simulator/node-types/utils\";\nimport { NodePinDirection } from \"@/services/simulator/types\";\n\nexport interface RenderPinProps extends NodePinDefinition {\n  id: string;\n  direction: NodePinDirection;\n}\nexport interface NodeVisualProps extends ContainerConfig, KonvaNodeProps {\n  nodeType: NodeType;\n  nodeState: any;\n  renderPin?(props: RenderPinProps): React.ReactElement<any>;\n  onClick?(e: KonvaMouseEvent): void;\n}\n\ntype Props = NodeVisualProps;\nclass NodeVisual extends React.Component<Props> {\n  render() {\n    const {\n      nodeType,\n      nodeState,\n      renderPin,\n      onClick,\n      ...konvaProps\n    } = this.props;\n\n    const def = NodeTypes[nodeType];\n    if (!def) {\n      return <Rect width={50} height={50} fill=\"red\" />;\n    }\n    const { hitPath, shapePath } = def.visual;\n\n    const visualOnClick = hitPath ? undefined : onClick;\n    const visuals = normalizeVisuals(shapePath, nodeState);\n    const pathElements = visuals.map((v, i) => (\n      <Path\n        key={i}\n        data={v.path}\n        fill={v.fill}\n        stroke={v.stroke}\n        strokeWidth={v.strokeWidth}\n        onClick={visualOnClick}\n      />\n    ));\n\n    const inputs = def.inputs || [];\n    const outputs = def.outputs || [];\n\n    let inputPins: React.ReactNode = null;\n    let outputPins: React.ReactNode = null;\n\n    if (renderPin) {\n      inputPins = Object.keys(inputs).map(key => {\n        const input = inputs[key];\n        let element = renderPin({\n          direction: \"input\",\n          id: key,\n          ...input\n        });\n        return React.cloneElement(element, { key: `input-${key}` });\n      });\n\n      outputPins = Object.keys(outputs).map(key => {\n        const output = outputs[key];\n        let element = renderPin({\n          direction: \"output\",\n          id: key,\n          ...output\n        });\n        return React.cloneElement(element, { key: `output-${key}` });\n      });\n    }\n\n    return (\n      <Group {...konvaProps}>\n        {hitPath && (\n          <Path data={hitPath} fill=\"transparent\" onClick={onClick} />\n        )}\n        {pathElements}\n        {inputPins}\n        {outputPins}\n      </Group>\n    );\n  }\n}\nexport default NodeVisual;\n","import * as React from \"react\";\n\nimport styled from \"styled-components\";\n\nimport { connect } from \"react-redux\";\n\nimport { Stage, Layer } from \"react-konva\";\n\nimport { addNode } from \"@/services/simulator/actions\";\nimport { NodeTypes } from \"@/services/simulator/node-types\";\n\nimport { typedKeys } from \"@/utils\";\n\nimport NodeVisual from \"../components/NodeVisual\";\n\nconst mapDispatchToProps = {\n  addNode\n};\ntype DispatchProps = typeof mapDispatchToProps;\n\ntype Props = DispatchProps;\nclass CircuitTray extends React.Component<Props> {\n  render() {\n    const { addNode } = this.props;\n\n    const elements = typedKeys(NodeTypes).map(type => {\n      return (\n        <div key={type} onClick={() => addNode(type)}>\n          <Stage width={110} height={110}>\n            <Layer>\n              <NodeVisual nodeType={type} nodeState={{}} />\n            </Layer>\n          </Stage>\n        </div>\n      );\n    });\n\n    return <CircuitTrayContainer>{elements}</CircuitTrayContainer>;\n  }\n}\nexport default connect(null, mapDispatchToProps)(CircuitTray);\n\nconst CircuitTrayContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n`;\n","import * as React from \"react\";\n\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\n\nimport { AppState } from \"@/store\";\n\nimport { evolveSim } from \"@/services/simulator/actions\";\n\ninterface StateProps {\n  tick: number;\n}\n\nconst mapStateToProps = createStructuredSelector<AppState, StateProps>({\n  tick: s => s.services.simulator.tick\n});\n\nconst mapDispatchToProps = {\n  evolveSim\n};\ntype DispatchProps = typeof mapDispatchToProps;\n\ntype Props = StateProps & DispatchProps;\nclass TimingControls extends React.Component<Props> {\n  render() {\n    const { tick, evolveSim } = this.props;\n\n    return (\n      <div>\n        Ticks: {tick} <button onClick={evolveSim.bind(null, 1)}>Tick</button>\n      </div>\n    );\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(TimingControls);\n","import * as React from \"react\";\n\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector, createSelector } from \"reselect\";\n\nimport { mapValues } from \"lodash-es\";\n\nimport { AppState } from \"@/store\";\n\nconst mouseOverNode = createSelector(\n  (s: AppState) => s.ui.circuitEditor.mouseOverNodeId,\n  (s: AppState) => s.services.simulator.nodesById,\n  (id, nodesById) => (id ? nodesById[id] : null)\n);\n\nconst mouseOverNodeInputsSelector = createSelector(\n  mouseOverNode,\n  (s: AppState) => s.services.simulator.nodeOutputValuesByNodeId,\n  (node, outputsByNodeId) =>\n    node\n      ? mapValues(node.inputConnectionsByPin, (v, k) => {\n          if (!v) {\n            return null;\n          }\n          return outputsByNodeId[v.nodeId][v.pin];\n        })\n      : {}\n);\n\nconst mouseOverNodeOutputsSelector = createSelector(\n  (s: AppState) => s.services.simulator.nodeOutputValuesByNodeId,\n  (s: AppState) => s.ui.circuitEditor.mouseOverNodeId,\n  (outputs, nodeId) => (nodeId != null ? outputs[nodeId] : {})\n);\n\ninterface StateProps {\n  nodeInputValues: ReturnType<typeof mouseOverNodeInputsSelector>;\n  nodeOutputValues: ReturnType<typeof mouseOverNodeOutputsSelector>;\n}\n\nconst mapStateToProps = createStructuredSelector<AppState, StateProps>({\n  nodeInputValues: mouseOverNodeInputsSelector,\n  nodeOutputValues: mouseOverNodeOutputsSelector\n});\n\ntype Props = StateProps;\nclass NodeInfo extends React.Component<Props> {\n  render() {\n    const { nodeInputValues, nodeOutputValues } = this.props;\n    return (\n      <div>\n        <div>Node Inputs</div>\n        <pre>\n          <code>{JSON.stringify(nodeInputValues)}</code>\n        </pre>\n        <div>Node Outputs</div>\n        <pre>\n          <code>{JSON.stringify(nodeOutputValues, null, 2)}</code>\n        </pre>\n      </div>\n    );\n  }\n}\nexport default connect(mapStateToProps)(NodeInfo);\n","import * as React from \"react\";\n\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\n\nimport { AppState } from \"@/store\";\n\nconst transitionWindowsSelector = (s: AppState) =>\n  s.services.simulator.transitionWindows;\n\ninterface StateProps {\n  transitionWindows: ReturnType<typeof transitionWindowsSelector>;\n}\n\nconst mapStateToProps = createStructuredSelector<AppState, StateProps>({\n  transitionWindows: transitionWindowsSelector\n});\n\ntype Props = StateProps;\nclass PendingTransitions extends React.Component<Props> {\n  render() {\n    const { transitionWindows } = this.props;\n\n    return (\n      <div>\n        <div>Pending Transitions</div>\n        <pre>\n          <code>{JSON.stringify(transitionWindows, null, 2)}</code>\n        </pre>\n      </div>\n    );\n  }\n}\nexport default connect(mapStateToProps)(PendingTransitions);\n","import { os } from \"platform\";\n\nconst OS_MAC = /(Mac|iOS|OS\\ X)/;\n\nexport const keyboardIsMac = OS_MAC.test((os || \"undefined\").toString());\n\nexport const keyboardCommandModifier = keyboardIsMac ? \"command\" : \"ctrl\";\n","import { keyboardCommandModifier } from \"@/runtime-env\";\n\nexport const KEYMAP_SIM_STEP = \"keymap:CircuitEditor/SimStep\" as \"keymap:CircuitEditor/SimStep\";\nexport const KEYMAP_SIM_FASTFORWARD = \"keymap:CircuitEditor/SimFastForward\" as \"keymap:CircuitEditor/SimFastForward\";\nexport const KEYMAP_NODE_COPY = \"keymap:CircuitEditor/Copy\" as \"keymap:CircuitEditor/Copy\";\nexport const KEYMAP_NODE_PASTE = \"keymap:CircuitEditor/Paste\" as \"keymap:CircuitEditor/Paste\";\nexport const KEYMAP_NODE_DELETE = \"keymap:CircuitEditor/Delete\" as \"keymap:CircuitEditor/Delete\";\n\nconst keymap = {\n  [KEYMAP_SIM_STEP]: \"space\",\n  [KEYMAP_SIM_FASTFORWARD]: \"shift+space\",\n  [KEYMAP_NODE_COPY]: `${keyboardCommandModifier}+c`,\n  [KEYMAP_NODE_PASTE]: `${keyboardCommandModifier}+v`,\n  [KEYMAP_NODE_DELETE]: [\"backspace\", \"del\"]\n};\nexport default keymap;\n\nexport type KeymapKeys = keyof typeof keymap;\nexport type KeymapHandler = Record<KeymapKeys, HotkeyHandler>;\n","import styled from \"styled-components\";\n\nconst FieldContainer = styled.div`\n  overflow: hidden;\n`;\n\nexport default FieldContainer;\n","import { createSelector } from \"reselect\";\n\nimport { AppState } from \"@/store\";\nimport { normalizeRectangle, pointSubtract } from \"@/geometry\";\n\nimport { CircuitFieldState } from \"./state\";\n\nexport const circuitFieldState = (state: AppState) =>\n  state.ui.circuitEditor.circuitField;\n\nexport const selectionRect = createSelector(\n  circuitFieldState,\n  (s: CircuitFieldState) =>\n    s.dragMode === \"select\" && s.dragStart && s.dragEnd\n      ? normalizeRectangle(s.dragStart, s.dragEnd)\n      : null\n);\n\nexport const dragMoveOffset = createSelector(\n  circuitFieldState,\n  (s: CircuitFieldState) =>\n    s.dragMode === \"move-node\" && s.dragStart && s.dragEnd\n      ? pointSubtract(s.dragEnd, s.dragStart)\n      : null\n);\n\nexport const selectedPin = createSelector(\n  circuitFieldState,\n  (s: CircuitFieldState) => s.selectedPin\n);\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { pick, mapValues, values } from \"lodash-es\";\n\nimport { createStructuredSelector, createSelector } from \"reselect\";\n\nimport { Layer } from \"react-konva\";\n\nimport { AppState } from \"@/store\";\n\nimport { nodeTypesById, nodeStatesById } from \"@/services/simulator/selectors\";\n\nimport {\n  selectedNodeIds,\n  nodePositionsById\n} from \"@/pages/CircuitEditor/selectors\";\n\nimport NodeVisual from \"@/pages/CircuitEditor/components/NodeVisual\";\n\nimport { dragMoveOffset } from \"../selectors\";\n\nconst selectedNodePositionsById = createSelector(\n  selectedNodeIds,\n  nodePositionsById,\n  (selectedNodeIds, nodePositionsById) =>\n    pick(nodePositionsById, selectedNodeIds)\n);\n\nconst selectedNodeTypesById = createSelector(\n  selectedNodeIds,\n  nodeTypesById,\n  (selectedNodeIds, nodeTypesById) => pick(nodeTypesById, selectedNodeIds)\n);\n\nconst selectedNodeStatesById = createSelector(\n  selectedNodeIds,\n  nodeStatesById,\n  (selectedNodeIds, nodeStatesById) => pick(nodeStatesById, selectedNodeIds)\n);\n\nconst stateSelectors = {\n  selectedNodePositionsById,\n  selectedNodeTypesById,\n  selectedNodeStatesById,\n  dragMoveOffset\n};\ntype StateProps = ObjectValueReturnTypes<typeof stateSelectors>;\nconst mapStateToProps = createStructuredSelector<AppState, StateProps>(\n  stateSelectors\n);\n\ntype Props = StateProps;\nclass DragPreviewLayer extends React.Component<Props> {\n  render() {\n    const {\n      selectedNodePositionsById,\n      selectedNodeTypesById,\n      selectedNodeStatesById,\n      dragMoveOffset\n    } = this.props;\n\n    let elements: React.ReactNode | null = null;\n    if (dragMoveOffset) {\n      elements = values(\n        mapValues(selectedNodePositionsById, (p, nodeId) => (\n          <NodeVisual\n            key={nodeId}\n            nodeType={selectedNodeTypesById[nodeId]}\n            nodeState={selectedNodeStatesById[nodeId]}\n            x={p.x + dragMoveOffset.x}\n            y={p.y + dragMoveOffset.y}\n          />\n        ))\n      );\n    }\n    return <Layer>{elements}</Layer>;\n  }\n}\nexport default connect(mapStateToProps)(DragPreviewLayer);\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { FastLayer, Rect } from \"react-konva\";\n\nimport { AppState } from \"@/store\";\n\nimport { selectionRect } from \"../selectors\";\n\nfunction mapStateToProps(state: AppState) {\n  return {\n    selectionRect: selectionRect(state)\n  };\n}\ntype StateProps = ReturnType<typeof mapStateToProps>;\n\ntype Props = StateProps;\nclass DragSelectLayer extends React.Component<Props> {\n  render() {\n    const { selectionRect: rect } = this.props;\n    return (\n      <FastLayer>\n        {rect && (\n          <Rect\n            x={rect.p1.x}\n            y={rect.p1.y}\n            width={rect.p2.x - rect.p1.x}\n            height={rect.p2.y - rect.p1.y}\n            fill=\"blue\"\n          />\n        )}\n      </FastLayer>\n    );\n  }\n}\nexport default connect(mapStateToProps)(DragSelectLayer);\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { Line, Circle, Group } from \"react-konva\";\n\nimport { ZeroPoint, pointAdd } from \"@/geometry\";\nimport { AppState } from \"@/store\";\nimport { Point } from \"@/types\";\n\nimport { nodeDefsById } from \"@/services/simulator/selectors\";\nimport { NodePin } from \"@/services/simulator/types\";\n\nimport { nodePositionsById } from \"@/pages/CircuitEditor/selectors\";\n\nexport interface WireProps {\n  source: NodePin;\n  target: NodePin;\n}\n\nfunction mapStateToProps(state: AppState, props: WireProps) {\n  const {\n    source: { nodeId: sourceNodeId, pin: sourcePin },\n    target: { nodeId: targetNodeId, pin: targetPin }\n  } = props;\n\n  const sourceDef = nodeDefsById(state)[sourceNodeId];\n  const targetDef = nodeDefsById(state)[targetNodeId];\n  let sourceOffset = ZeroPoint;\n  let targetOffset = ZeroPoint;\n  let value = false;\n  if (sourceDef) {\n    if (sourceDef.outputs[sourcePin]) {\n      sourceOffset = sourceDef.outputs[sourcePin];\n    }\n    value =\n      state.services.simulator.nodeOutputValuesByNodeId[sourceNodeId][\n        sourcePin\n      ];\n  }\n  if (targetDef && targetDef.inputs[targetPin]) {\n    targetOffset = targetDef.inputs[targetPin];\n  }\n  return {\n    start: pointAdd(\n      nodePositionsById(state)[sourceNodeId] || ZeroPoint,\n      sourceOffset\n    ),\n    end: pointAdd(\n      nodePositionsById(state)[targetNodeId] || ZeroPoint,\n      targetOffset\n    ),\n    value\n  };\n}\ntype StateProps = ReturnType<typeof mapStateToProps>;\n\ntype Props = StateProps & WireProps;\ninterface State {\n  testPoint: Point | null;\n}\nclass Wire extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      testPoint: null\n    };\n\n    this._onTestMouseMove = this._onTestMouseMove.bind(this);\n    this._onTestMouseLeave = this._onTestMouseLeave.bind(this);\n  }\n\n  render() {\n    const { start, end, value } = this.props;\n    const { testPoint } = this.state;\n    const points = getWirePoints(start, end);\n    return (\n      <Group>\n        <Line points={points} stroke={value ? \"green\" : \"black\"} />\n        {/* {testPoint && (\n          <Circle x={testPoint.x} y={testPoint.y} radius={4} fill=\"yellow\" />\n        )}\n        <Line\n          points={points}\n          stroke=\"transparent\"\n          strokeWidth={5}\n          onMouseMove={this._onTestMouseMove}\n          onMouseLeave={this._onTestMouseLeave}\n        /> */}\n      </Group>\n    );\n  }\n\n  private _onTestMouseMove(e: KonvaMouseEvent) {\n    this.setState({\n      testPoint: {\n        x: e.evt.layerX,\n        y: e.evt.layerY\n      }\n    });\n  }\n\n  private _onTestMouseLeave() {\n    this.setState({\n      testPoint: null\n    });\n  }\n}\nexport default connect(mapStateToProps)(Wire);\n\nfunction getWirePoints(start: Point, end: Point): number[] {\n  if (Math.abs(start.x - end.x) > Math.abs(start.y - end.y)) {\n    return [\n      start.x,\n      start.y,\n\n      start.x + (end.x - start.x) / 2,\n      start.y,\n\n      start.x + (end.x - start.x) / 2,\n      end.y,\n\n      end.x,\n      end.y\n    ];\n  } else {\n    return [\n      start.x,\n      start.y,\n\n      start.x,\n      start.y + (end.y - start.y) / 2,\n\n      end.x,\n      start.y + (end.y - start.y) / 2,\n\n      end.x,\n      end.y\n    ];\n  }\n}\n","import * as React from \"react\";\nimport { createSelector, createStructuredSelector } from \"reselect\";\n\nimport { connect } from \"react-redux\";\n\nimport { Layer } from \"react-konva\";\n\nimport { Node, NodePin } from \"@/services/simulator/types\";\n\nimport { AppState } from \"@/store\";\n\nimport Wire from \"./Wire\";\n\nconst nodesSelector = (s: AppState) => s.services.simulator.nodesById;\nconst edgeSelector = createSelector(nodesSelector, nodes =>\n  aggregateOutputs(Object.keys(nodes).map(k => nodes[k]))\n);\n\ninterface StateProps {\n  edges: ReturnType<typeof edgeSelector>;\n}\nconst mapStateToProps = createStructuredSelector<AppState, StateProps>({\n  edges: edgeSelector\n});\n\ntype Props = StateProps;\nclass WiresLayer extends React.Component<Props> {\n  render() {\n    const { edges } = this.props;\n\n    const connectorElements = edges.map(edge => (\n      <Wire key={edgeKey(edge)} {...edge} />\n    ));\n\n    return <Layer>{connectorElements}</Layer>;\n  }\n}\nexport default connect(mapStateToProps)(WiresLayer);\n\nfunction edgeKey(edge: Edge): string {\n  const { source, target } = edge;\n  return `${source.nodeId}:${source.pin}-${target.nodeId}:${target.pin}`;\n}\n\ninterface Edge {\n  source: NodePin;\n  target: NodePin;\n}\nfunction aggregateOutputs(nodes: Node[]): Edge[] {\n  return nodes.reduce<Edge[]>((a, node) => {\n    for (const outputPin of Object.keys(node.outputConnectionsByPin)) {\n      const source = {\n        nodeId: node.id,\n        pin: outputPin\n      };\n      for (const outputConn of node.outputConnectionsByPin[outputPin]) {\n        a.push({\n          source,\n          target: outputConn\n        });\n      }\n    }\n    return a;\n  }, []);\n}\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { Group, Circle, KonvaNodeProps } from \"react-konva\";\n\nimport { ContainerConfig } from \"konva\";\n\nimport { AppState } from \"@/store\";\n\nimport { NodePinDirection } from \"@/services/simulator/types\";\nimport { selectedPin } from \"@/pages/CircuitEditor/ContentViews/CircuitField/selectors\";\nimport CircuitNode from \"@/pages/CircuitEditor/ContentViews/CircuitField/components/CircuitNode\";\n\nconst PIN_CIRCLE_RADIUS_UNSELECTED = 4;\nconst PIN_CIRCLE_RADIUS_SELECTED = 6;\n\nexport interface CircuitNodePinProps extends ContainerConfig, KonvaNodeProps {\n  nodeId: string;\n  pinId: string;\n  direction: NodePinDirection;\n  onPinMouseDown?(\n    direction: NodePinDirection,\n    pin: string,\n    e: KonvaMouseEvent\n  ): void;\n  onPinMouseUp?(\n    direction: NodePinDirection,\n    pin: string,\n    e: KonvaMouseEvent\n  ): void;\n}\n\nfunction mapStateToProps(state: AppState, props: CircuitNodePinProps) {\n  const selected = selectedPin(state);\n  const { nodeId, pinId, direction } = props;\n  return {\n    isSelected:\n      selected &&\n      selected.nodeId === nodeId &&\n      selected.direction === direction &&\n      selected.pin === pinId\n  };\n}\ntype StateProps = ReturnType<typeof mapStateToProps>;\n\ntype Props = CircuitNodePinProps & StateProps;\nclass CircuitNodePin extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props);\n\n    this._onMouseDown = this._onMouseDown.bind(this);\n    this._onMouseUp = this._onMouseUp.bind(this);\n  }\n\n  render() {\n    const {\n      // All of our props are pulled out to prevent them\n      //  being included in groupProps\n      nodeId,\n      pinId,\n      direction,\n      isSelected,\n      onClick,\n      ...groupProps\n    } = this.props;\n    return (\n      <Group {...groupProps}>\n        <Circle\n          x={0}\n          y={0}\n          radius={\n            isSelected\n              ? PIN_CIRCLE_RADIUS_SELECTED\n              : PIN_CIRCLE_RADIUS_UNSELECTED\n          }\n          fill={isSelected ? \"yellow\" : \"blue\"}\n          onMouseDown={this._onMouseDown}\n          onMouseUp={this._onMouseUp}\n        />\n      </Group>\n    );\n  }\n\n  private _onMouseDown(e: KonvaMouseEvent) {\n    const { direction, pinId, onMouseDown, onPinMouseDown } = this.props;\n    if (onPinMouseDown) {\n      onPinMouseDown(direction, pinId, e);\n    }\n    if (onMouseDown) {\n      onMouseDown(e);\n    }\n  }\n\n  private _onMouseUp(e: KonvaMouseEvent) {\n    const { direction, pinId, onMouseUp, onPinMouseUp } = this.props;\n    if (onPinMouseUp) {\n      onPinMouseUp(direction, pinId, e);\n    }\n    if (onMouseUp) {\n      onMouseUp(e);\n    }\n  }\n}\nexport default connect(mapStateToProps)(CircuitNodePin);\n","import * as React from \"react\";\n\nimport { connect } from \"react-redux\";\n\nimport { ContainerConfig } from \"konva\";\nimport { KonvaNodeProps, Group, Rect } from \"react-konva\";\n\nimport { AppState } from \"@/store\";\n\nimport { NodeType } from \"@/services/simulator/node-types\";\nimport { nodeTypesById, nodeStatesById } from \"@/services/simulator/selectors\";\nimport { NodePinDirection } from \"@/services/simulator/types\";\n\nimport { selectedNodeIds } from \"@/pages/CircuitEditor/selectors\";\nimport NodeVisual, {\n  RenderPinProps\n} from \"@/pages/CircuitEditor/components/NodeVisual\";\n\nimport CircuitNodePin from \"./CircuitNodePin\";\n\nexport interface CircuitNodeProps extends ContainerConfig, KonvaNodeProps {\n  nodeId: string;\n  onPinMouseDown?(\n    direction: NodePinDirection,\n    pin: string,\n    e: KonvaMouseEvent\n  ): void;\n  onPinMouseUp?(\n    direction: NodePinDirection,\n    pin: string,\n    e: KonvaMouseEvent\n  ): void;\n}\n\ninterface StateProps {\n  nodeType: NodeType;\n  nodeState: any;\n  isSelected: boolean;\n}\nfunction mapStateToProps(state: AppState, props: CircuitNodeProps): StateProps {\n  return {\n    nodeType: nodeTypesById(state)[props.nodeId],\n    nodeState: nodeStatesById(state)[props.nodeId],\n    isSelected: selectedNodeIds(state).indexOf(props.nodeId) !== -1\n  };\n}\n\ntype Props = CircuitNodeProps & StateProps;\nclass CircuitNode extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props);\n\n    this._renderPin = this._renderPin.bind(this);\n  }\n\n  render() {\n    const {\n      // Pull out all of our props to avoid passing them to group.\n      nodeId,\n      nodeType,\n      nodeState,\n      isSelected,\n      onClick,\n      onPinMouseDown,\n      onPinMouseUp,\n      ...groupProps\n    } = this.props;\n\n    return (\n      <Group {...groupProps}>\n        <NodeVisual\n          nodeType={nodeType}\n          nodeState={nodeState}\n          onClick={onClick}\n          renderPin={this._renderPin}\n        />\n        {isSelected && <Rect width={10} height={10} fill=\"yellow\" />}\n      </Group>\n    );\n  }\n\n  private _renderPin(props: RenderPinProps): React.ReactElement<any> {\n    const { onPinMouseDown, onPinMouseUp } = this.props;\n    return (\n      <CircuitNodePin\n        key={props.id}\n        nodeId={this.props.nodeId}\n        pinId={props.id}\n        onPinMouseDown={onPinMouseDown}\n        onPinMouseUp={onPinMouseUp}\n        {...props}\n      />\n    );\n  }\n}\nexport default connect(mapStateToProps)(CircuitNode);\n","import * as React from \"react\";\n\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\n\nimport { ContainerConfig } from \"konva\";\nimport { Layer } from \"react-konva\";\n\nimport { AppState } from \"@/store\";\n\nimport { NodePinDirection } from \"@/services/simulator/types\";\n\nimport { nodePositionsById } from \"@/pages/CircuitEditor/selectors\";\n\nimport CircuitNode from \"./CircuitNode\";\n\nexport interface NodesLayerProps {\n  onNodeMouseDown?(node: string, e: KonvaMouseEvent): void;\n  onNodeMouseUp?(node: string, e: KonvaMouseEvent): void;\n  onNodeMouseOver?(node: string, e: KonvaMouseEvent): void;\n  onNodeMouseLeave?(node: string, e: KonvaMouseEvent): void;\n  onNodePinMouseDown?(\n    nodeId: string,\n    pinDirection: NodePinDirection,\n    pinId: string,\n    e: KonvaMouseEvent\n  ): void;\n  onNodePinMouseUp?(\n    nodeId: string,\n    pinDirection: NodePinDirection,\n    pinId: string,\n    e: KonvaMouseEvent\n  ): void;\n}\n\nconst stateSelectors = {\n  nodePositionsById\n};\ntype StateProps = ObjectValueReturnTypes<typeof stateSelectors>;\nconst mapStateToProps = createStructuredSelector<AppState, StateProps>(\n  stateSelectors\n);\n\ntype Props = NodesLayerProps & StateProps;\nclass NodesLayer extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props);\n\n    this._onPinMouseDown = this._onPinMouseDown.bind(this);\n    this._onPinMouseUp = this._onPinMouseUp.bind(this);\n  }\n\n  render() {\n    const {\n      nodePositionsById,\n      onNodeMouseDown,\n      onNodeMouseUp,\n      onNodeMouseOver,\n      onNodeMouseLeave\n    } = this.props;\n\n    const nodeElements = Object.keys(nodePositionsById).map(key => {\n      const { x, y } = nodePositionsById[key];\n      return (\n        <BoundCicrcuitNode\n          key={key}\n          nodeId={key}\n          x={x}\n          y={y}\n          onMouseDown={onNodeMouseDown}\n          onMouseUp={onNodeMouseUp}\n          onMouseOver={onNodeMouseOver}\n          onMouseLeave={onNodeMouseLeave}\n          onPinMouseDown={this._onPinMouseDown}\n          onPinMouseUp={this._onPinMouseUp}\n        />\n      );\n    });\n\n    return <Layer>{nodeElements}</Layer>;\n  }\n\n  private _onPinMouseDown(\n    nodeId: string,\n    direction: NodePinDirection,\n    pin: string,\n    e: KonvaMouseEvent\n  ) {\n    e.evt.stopPropagation();\n\n    const { onNodePinMouseDown } = this.props;\n    if (onNodePinMouseDown) {\n      onNodePinMouseDown(nodeId, direction, pin, e);\n    }\n  }\n\n  private _onPinMouseUp(\n    nodeId: string,\n    direction: NodePinDirection,\n    pin: string,\n    e: KonvaMouseEvent\n  ) {\n    const { onNodePinMouseUp } = this.props;\n    if (onNodePinMouseUp) {\n      onNodePinMouseUp(nodeId, direction, pin, e);\n    }\n  }\n}\nexport default connect(mapStateToProps)(NodesLayer);\n\ninterface BoundCicrcuitNodeProps extends ContainerConfig {\n  nodeId: string;\n  // TODO: Passing these down the hierarchy is silly.\n  //  Some of them can be handled in their originating element\n  //  with their own event actions.\n  onMouseDown?(nodeId: string, e: KonvaMouseEvent): void;\n  onMouseUp?(nodeId: string, e: KonvaMouseEvent): void;\n  onMouseOver?(nodeId: string, e: KonvaMouseEvent): void;\n  onMouseLeave?(nodeId: string, e: KonvaMouseEvent): void;\n  onPinMouseDown?(\n    nodeId: string,\n    direction: NodePinDirection,\n    pin: string,\n    e: KonvaMouseEvent\n  ): void;\n  onPinMouseUp?(\n    nodeId: string,\n    direction: NodePinDirection,\n    pin: string,\n    e: KonvaMouseEvent\n  ): void;\n}\nclass BoundCicrcuitNode extends React.Component<BoundCicrcuitNodeProps> {\n  constructor(props: BoundCicrcuitNodeProps) {\n    super(props);\n\n    this._onMouseDown = this._onMouseDown.bind(this);\n    this._onMouseUp = this._onMouseUp.bind(this);\n    this._onMouseOver = this._onMouseOver.bind(this);\n    this._onMouseLeave = this._onMouseLeave.bind(this);\n    this._onPinMouseDown = this._onPinMouseDown.bind(this);\n    this._onPinMouseUp = this._onPinMouseUp.bind(this);\n  }\n\n  render() {\n    const {\n      onMouseDown,\n      onMouseUp,\n      onMouseOver,\n      onMouseLeave,\n      onPinMouseDown,\n      onPinMouseUp,\n      ...otherProps\n    } = this.props;\n    return (\n      <CircuitNode\n        {...otherProps}\n        onMouseDown={this._onMouseDown}\n        onMouseUp={this._onMouseUp}\n        onMouseOver={this._onMouseOver}\n        onMouseLeave={this._onMouseLeave}\n        onPinMouseDown={this._onPinMouseDown}\n        onPinMouseUp={this._onPinMouseUp}\n      />\n    );\n  }\n\n  private _onMouseDown(e: KonvaMouseEvent) {\n    const { nodeId, onMouseDown } = this.props;\n    if (onMouseDown) {\n      onMouseDown(nodeId, e);\n    }\n  }\n\n  private _onMouseUp(e: KonvaMouseEvent) {\n    const { nodeId, onMouseUp } = this.props;\n    if (onMouseUp) {\n      onMouseUp(nodeId, e);\n    }\n  }\n\n  private _onMouseOver(e: KonvaMouseEvent) {\n    const { nodeId, onMouseOver } = this.props;\n    if (onMouseOver) {\n      onMouseOver(nodeId, e);\n    }\n  }\n\n  private _onMouseLeave(e: KonvaMouseEvent) {\n    const { nodeId, onMouseLeave } = this.props;\n    if (onMouseLeave) {\n      onMouseLeave(nodeId, e);\n    }\n  }\n\n  private _onPinMouseDown(\n    direction: NodePinDirection,\n    pin: string,\n    e: KonvaMouseEvent\n  ) {\n    const { nodeId, onPinMouseDown } = this.props;\n    if (onPinMouseDown) {\n      onPinMouseDown(nodeId, direction, pin, e);\n    }\n  }\n\n  private _onPinMouseUp(\n    direction: NodePinDirection,\n    pin: string,\n    e: KonvaMouseEvent\n  ) {\n    const { nodeId, onPinMouseUp } = this.props;\n    if (onPinMouseUp) {\n      onPinMouseUp(nodeId, direction, pin, e);\n    }\n  }\n}\n","import { Dispatch } from \"redux\";\n\nimport { normalizeRectangle, calcSize, pointSubtract } from \"@/geometry\";\nimport { GetState } from \"@/store\";\nimport { Point } from \"@/types\";\n\nimport {\n  interactNode,\n  evolveSim,\n  fastForwardSim,\n  deleteNode,\n  toggleWireNode\n} from \"@/services/simulator/actions\";\n\nimport {\n  clearSelection,\n  hoverNode,\n  selectNodes,\n  selectRegion,\n  moveNodes,\n  copyNodes,\n  paste\n} from \"@/pages/CircuitEditor/actions\";\nimport { selectedNodeIds } from \"@/pages/CircuitEditor/selectors\";\nimport { SelectionMode } from \"@/pages/CircuitEditor/types\";\n\nimport { selectPin, startDrag, continueDrag, endDrag } from \"./actions\";\nimport { NodePinDirection } from \"@/services/simulator/types\";\n\nexport interface ModifierKeys {\n  ctrlMetaKey: boolean;\n  shiftKey: boolean;\n  altKey: boolean;\n}\n\nexport function onNodeClicked(nodeId: string, modifiers: ModifierKeys) {\n  if (modifiers.altKey) {\n    return interactNode(nodeId);\n  }\n\n  const mode = getSelectMode(modifiers);\n  return selectNodes(nodeId, mode);\n}\n\nexport function onNodePinClicked(\n  nodeId: string,\n  pinDirection: NodePinDirection,\n  pinId: string\n) {\n  return function(dispatch: Dispatch, getState: GetState) {\n    const state = getState();\n    const selectedPin = state.ui.circuitEditor.circuitField.selectedPin;\n    if (selectedPin && selectedPin.direction !== pinDirection) {\n      // TODO: We should not care about direction like this.\n      //  Make pins unambiguous on a node, and handle any order in toggleWire\n      if (selectedPin.direction === \"output\") {\n        dispatch(\n          toggleWireNode(selectedPin.nodeId, selectedPin.pin, nodeId, pinId)\n        );\n      } else {\n        dispatch(\n          toggleWireNode(nodeId, pinId, selectedPin.nodeId, selectedPin.pin)\n        );\n      }\n    } else {\n      dispatch(selectPin(nodeId, pinDirection, pinId));\n    }\n  };\n}\n\nexport function onFieldClicked(modifiers: ModifierKeys) {\n  return clearSelection();\n}\n\nexport function onNodeDragStart(\n  nodeId: string,\n  p: Point,\n  modifiers: ModifierKeys\n) {\n  return (dispatch: Dispatch, getState: GetState) => {\n    // TODO: Move logic into reducer.\n    const state = getState();\n    const isNodeSelected =\n      state.ui.circuitEditor.selectedNodeIds.indexOf(nodeId) !== -1;\n    if (!isNodeSelected) {\n      const mode = getSelectMode(modifiers);\n      dispatch(selectNodes(nodeId, mode));\n    }\n    dispatch(startDrag(p, \"move-node\"));\n  };\n}\n\nexport function onFieldDragStart(p: Point) {\n  return startDrag(p, \"select\");\n}\n\nexport function onDragMove(p: Point) {\n  return continueDrag(p);\n}\n\nexport function onDragEnd(p: Point, modifiers: ModifierKeys) {\n  return (dispatch: Dispatch, getState: GetState) => {\n    const state = getState();\n    const {\n      dragMode,\n      dragStart,\n      dragEnd\n    } = state.ui.circuitEditor.circuitField;\n    const { selectedNodeIds } = state.ui.circuitEditor;\n\n    if (dragStart && dragEnd) {\n      switch (dragMode) {\n        case \"select\": {\n          const rect = normalizeRectangle(dragStart, dragEnd);\n          const mode = getSelectMode(modifiers);\n          dispatch(selectRegion(rect, mode));\n          break;\n        }\n        case \"move-node\": {\n          const moveBy = pointSubtract(dragEnd, dragStart);\n          dispatch(moveNodes(selectedNodeIds, moveBy.x, moveBy.y));\n          break;\n        }\n      }\n    }\n    dispatch(endDrag());\n  };\n}\n\nexport function onNodeHover(nodeId: string | null) {\n  return hoverNode(nodeId);\n}\n\nexport function onHotkeyStep() {\n  return evolveSim(1);\n}\n\nexport function onHotkeyFastForward() {\n  return fastForwardSim();\n}\n\nexport function onHotkeyCopy() {\n  return (dispatch: Dispatch, getState: GetState) => {\n    const state = getState();\n    const selectedIds = selectedNodeIds(state);\n    if (selectedIds.length === 0) {\n      return;\n    }\n    dispatch(copyNodes(selectedIds));\n  };\n}\n\nexport function onHotkeyPaste() {\n  return paste();\n}\n\nexport function onHotkeyDelete() {\n  return (dispatch: Dispatch, getState: GetState) => {\n    const state = getState();\n    const selectedIds = selectedNodeIds(state);\n    if (selectedIds.length === 0) {\n      return;\n    }\n    dispatch(deleteNode(selectedIds));\n  };\n}\n\nfunction getSelectMode(modifiers: ModifierKeys): SelectionMode {\n  if (modifiers.shiftKey && modifiers.ctrlMetaKey) {\n    return \"remove\";\n  }\n  if (modifiers.shiftKey) {\n    return \"append\";\n  }\n  if (modifiers.ctrlMetaKey) {\n    return \"toggle\";\n  }\n  return \"set\";\n}\n","import * as React from \"react\";\n\nimport { connect } from \"react-redux\";\n\nimport { Stage } from \"react-konva\";\nimport sizeme, { SizeProps } from \"react-sizeme\";\nimport { HotKeys, FocusTrap } from \"react-hotkeys\";\n\nimport { Point } from \"@/types\";\nimport { bindFuncMap } from \"@/utils\";\n\nimport keymap, {\n  KeymapHandler,\n  KEYMAP_SIM_STEP,\n  KEYMAP_SIM_FASTFORWARD,\n  KEYMAP_NODE_COPY,\n  KEYMAP_NODE_PASTE,\n  KEYMAP_NODE_DELETE\n} from \"./keymap\";\n\nimport FieldContainer from \"./components/FieldContainer\";\nimport DragPreviewLayer from \"./components/DragPreviewLayer\";\nimport DragSelectLayer from \"./components/DragSelectLayer\";\nimport WiresLayer from \"./components/WiresLayer\";\nimport NodesLayer from \"./components/NodesLayer\";\n\nimport * as events from \"./events\";\nimport { keyboardIsMac } from \"@/runtime-env\";\nimport { NodePinDirection } from \"@/services/simulator/types\";\n\nexport interface CircuitFieldProps {\n  className?: string;\n}\n\nconst mapDispatchToProps = events;\ntype DispatchProps = typeof mapDispatchToProps;\n\nconst DRAG_THRESHOLD = 5;\n\ntype Props = CircuitFieldProps & SizeProps & DispatchProps;\nclass CircuitField extends React.Component<Props> {\n  // Instance props as we do not require a re-render when these change.\n  private _isDragging: boolean = false;\n  private _mouseDownNodeId: string | null = null;\n  private _mouseDownPinId: string | null = null;\n  private _startMousePos: Point | null = null;\n\n  private _hotkeysRef = React.createRef<HTMLDivElement>();\n\n  constructor(props: Props) {\n    super(props);\n\n    this._onNodeMouseDown = this._onNodeMouseDown.bind(this);\n    this._onNodeMouseOver = this._onNodeMouseOver.bind(this);\n    this._onNodeMouseLeave = this._onNodeMouseLeave.bind(this);\n    this._onNodePinMouseDown = this._onNodePinMouseDown.bind(this);\n    this._onNodePinMouseUp = this._onNodePinMouseUp.bind(this);\n\n    this._onMouseDown = this._onMouseDown.bind(this);\n    this._onMouseMove = this._onMouseMove.bind(this);\n    this._onMouseUp = this._onMouseUp.bind(this);\n\n    this._keyHandlers = bindFuncMap(this._keyHandlers, this);\n  }\n\n  render() {\n    const {\n      className,\n      size: { width, height }\n    } = this.props;\n\n    return (\n      <FieldContainer className={className}>\n        <HotKeys keyMap={keymap} handlers={this._keyHandlers}>\n          <div tabIndex={-1} ref={this._hotkeysRef}>\n            <Stage\n              width={width}\n              height={height}\n              onMouseDown={this._onMouseDown}\n              onMouseMove={this._onMouseMove}\n              onMouseUp={this._onMouseUp}\n            >\n              <DragSelectLayer />\n              <DragPreviewLayer />\n              <WiresLayer />\n              <NodesLayer\n                onNodeMouseDown={this._onNodeMouseDown}\n                onNodeMouseOver={this._onNodeMouseOver}\n                onNodeMouseLeave={this._onNodeMouseLeave}\n                onNodePinMouseDown={this._onNodePinMouseDown}\n                onNodePinMouseUp={this._onNodePinMouseUp}\n              />\n            </Stage>\n          </div>\n        </HotKeys>\n      </FieldContainer>\n    );\n  }\n\n  private _keyHandlers: KeymapHandler = {\n    [KEYMAP_SIM_STEP]: () => this.props.onHotkeyStep(),\n    [KEYMAP_SIM_FASTFORWARD]: () => this.props.onHotkeyFastForward(),\n    [KEYMAP_NODE_COPY]: () => this.props.onHotkeyCopy(),\n    [KEYMAP_NODE_PASTE]: () => this.props.onHotkeyPaste(),\n    [KEYMAP_NODE_DELETE]: () => this.props.onHotkeyDelete()\n  };\n\n  private _onNodeMouseOver(nodeId: string, e: KonvaMouseEvent) {\n    if (e.evt.defaultPrevented) {\n      return;\n    }\n\n    this.props.onNodeHover(nodeId);\n  }\n\n  private _onNodeMouseLeave(nodeId: string, e: KonvaMouseEvent) {\n    this.props.onNodeHover(null);\n  }\n\n  private _onNodeMouseDown(nodeId: string, e: KonvaMouseEvent) {\n    if (e.evt.defaultPrevented) {\n      return;\n    }\n\n    this._mouseDownNodeId = nodeId;\n  }\n\n  private _onNodePinMouseDown(\n    nodeId: string,\n    pinDirection: NodePinDirection,\n    pinId: string,\n    e: KonvaMouseEvent\n  ) {\n    if (e.evt.defaultPrevented) {\n      return;\n    }\n    this._mouseDownNodeId = nodeId;\n    this._mouseDownPinId = pinId;\n    e.evt.preventDefault();\n  }\n\n  private _onNodePinMouseUp(\n    nodeId: string,\n    pinDirection: NodePinDirection,\n    pinId: string,\n    e: KonvaMouseEvent\n  ) {\n    if (this._isDragging) {\n      return;\n    }\n\n    if (e.evt.defaultPrevented) {\n      this._resetMouseTracking();\n      return;\n    }\n\n    if (this._mouseDownNodeId !== nodeId || this._mouseDownPinId !== pinId) {\n      this._resetMouseTracking();\n      return;\n    }\n\n    const { onNodePinClicked } = this.props;\n    onNodePinClicked(nodeId, pinDirection, pinId);\n    this._resetMouseTracking();\n    e.evt.preventDefault();\n  }\n\n  private _onMouseDown(e: KonvaMouseEvent) {\n    if (e.evt.defaultPrevented) {\n      return;\n    }\n\n    if (this._hotkeysRef.current) {\n      this._hotkeysRef.current.focus();\n    }\n\n    this._startMousePos = {\n      x: e.evt.layerX,\n      y: e.evt.layerY\n    };\n  }\n\n  private _onMouseMove(e: KonvaMouseEvent) {\n    if (e.evt.defaultPrevented) {\n      return;\n    }\n\n    if (!this._startMousePos) {\n      return;\n    }\n\n    const { x: sx, y: sy } = this._startMousePos;\n\n    const { layerX: x, layerY: y, ctrlKey, altKey, shiftKey, metaKey } = e.evt;\n    const modifiers = {\n      ctrlMetaKey: keyboardIsMac ? metaKey : ctrlKey,\n      altKey: altKey,\n      shiftKey\n    };\n\n    if (!this._isDragging) {\n      if (\n        Math.abs(x - sx) < DRAG_THRESHOLD &&\n        Math.abs(y - sy) < DRAG_THRESHOLD\n      ) {\n        return;\n      }\n\n      this._isDragging = true;\n      if (this._mouseDownNodeId) {\n        this.props.onNodeDragStart(this._mouseDownNodeId, { x, y }, modifiers);\n      } else {\n        this.props.onFieldDragStart({ x, y });\n      }\n    } else {\n      this.props.onDragMove({ x, y });\n    }\n  }\n\n  private _onMouseUp(e: KonvaMouseEvent) {\n    if (e.evt.defaultPrevented) {\n      this._resetMouseTracking();\n      return;\n    }\n\n    const { layerX: x, layerY: y, ctrlKey, altKey, metaKey, shiftKey } = e.evt;\n    const modifiers = {\n      ctrlMetaKey: keyboardIsMac ? metaKey : ctrlKey,\n      altKey: altKey,\n      shiftKey\n    };\n\n    if (this._isDragging) {\n      this.props.onDragEnd({ x, y }, modifiers);\n    } else if (this._mouseDownNodeId) {\n      this.props.onNodeClicked(this._mouseDownNodeId, modifiers);\n    } else {\n      this.props.onFieldClicked(modifiers);\n    }\n\n    this._resetMouseTracking();\n  }\n\n  private _resetMouseTracking() {\n    this._isDragging = false;\n    this._mouseDownNodeId = null;\n    this._mouseDownPinId = null;\n    this._startMousePos = null;\n  }\n}\n\nexport default sizeme({\n  monitorWidth: true,\n  monitorHeight: true,\n  noPlaceholder: true\n})(connect(null, mapDispatchToProps)(CircuitField));\n","import CircuitField from \"./CircuitField\";\nexport default CircuitField;\n","import * as React from \"react\";\n\nimport styled from \"styled-components\";\n\nimport EditorLayout, { ToolWindow } from \"@/components/EditorLayout\";\n\nimport CircuitTray from \"./ToolWindows/CircuitTray\";\nimport TimingControls from \"./ToolWindows/TimingControls\";\nimport NodeInfo from \"./ToolWindows/NodeInfo\";\nimport PendingTransitions from \"./ToolWindows/PendingTransitions\";\nimport CircuitField from \"./ContentViews/CircuitField\";\n\nexport default class CircuitEditor extends React.Component {\n  render() {\n    return (\n      <FillParentEditorLayout\n        leftSidebar={\n          <ToolWindow>\n            <CircuitTray />\n          </ToolWindow>\n        }\n        defaultLeftSidebarWidth={100}\n        rightSidebar={\n          <React.Fragment>\n            <ToolWindow>\n              <TimingControls />\n            </ToolWindow>\n            <ToolWindow>\n              <NodeInfo />\n            </ToolWindow>\n            <ToolWindow>\n              <PendingTransitions />\n            </ToolWindow>\n          </React.Fragment>\n        }\n        defaultRightSidebarWidth={200}\n      >\n        <FillParentCircuitField />\n      </FillParentEditorLayout>\n    );\n  }\n}\n\nconst FillParentEditorLayout = styled(EditorLayout)`\n  width: 100%;\n  height: 100%;\n`;\n\nconst FillParentCircuitField = styled(CircuitField)`\n  width: 100%;\n  height: 100%;\n`;\n","import CircuitEditor from \"./CircuitEditor\";\nexport default CircuitEditor;\n","module.exports = \"# Discrelog / React-Logic / Working Title Logic Thing\\n\\nA discrete logic / circuit editor and simulator written in React and Redux.\\n\\n_This is a work in progress, and will be for some time. It is not suitable for use as of this time._\\n\\n## Live work-in-progress\\n\\n_The interface is very much a prototype. The current incarnation is under heavy development and is not final._\\n\\nhttp://robophred.github.io/discrelog\\n\\n### Usage:\\n\\nClick circuit elements on the left to create them. They will appear in the top-left corner.\\nClick an element to select it. Click-drag an element to move it, and click-drag the field to select multiple elements.\\n\\nSelected elements appear with a small yellow square in the top left.\\n\\nClick on pins to select them. While a pin is selected, click on other pins to connect them. Output pins can only connect to input pins, and that input pins can only have one connection. Output pins can connect to more than one input pin.\\n\\n### Controls:\\n\\n* Select element: `left-click`\\n* Toggle element in current selection: `ctrl + left-click`\\n* Add element to current selection: `shift + left-click`\\n* Activate Button: `alt + left-click` or `option + left-click`\\n* Delete Element: `backspace` or `delete`\\n* Copy Selected: `ctrl + c` or `command + c`\\n* Paste: `ctrl + v` or `command + v`\\n* Next tick: `spacebar`\\n* Fast forward to next transition: `shift + spacebar`\\n\\n## Circuit structure and Simulation\\n\\nCircuits are built by connecting component output pins to input pins on a one-to-many relationship. A single output pin can connect to many input pins, but an input pin can only have a single output pin.\\n\\nConnections and pins are represented by a binary state. A connection can be active (true) or inactive (false); there is no way to simulate analog concepts such as pull-low/pull-high, resistors, voltages, or currents.\\n\\nWhen an output pin changes, all connected components are updated. The update process involves passing the entire state of its input pins, as well as the component's internal state, and allowed to produce an immediately-applied internal state change and a delay-applied output change. Changes to output pins must occur at least one tick in the future, and it is not possible to schedule more than one transition on the same output pin. This assures that logic signals steadily flow through on ticks, and allows such constructs as vibrators, latches, and flip-flops.\\n\\nIt is not possible for a component to change its pin on the current tick. This ensures components function consistently and predictably through cyclic connections and regardless of the order in which they update.\\n\\n## Supported Logic Components\\n\\nAs of the time of this writing, the available logic components consist of:\\n\\n* Combinational logic (4 tick response)\\n  * AND\\n  * OR\\n  * NOR\\n* Negate / NOT (4 tick response)\\n* Toggle Switch (1 tick response)\\n* Buffer (2 tick response)\\n* 7 Segment Display (immediate visual response)\\n* LED (immediate visual response)\\n\\n_For more details on the implementation of logic components, and how to add your own, see [/services/simulator/node-types](https://github.com/RoboPhred/discrelog/tree/master/src/services/simulator/node-types)._\\n\\n## Upcomming features\\n\\nI am notorious for not getting back to things, so anything I write here would just be bad juju.\\n\\n## Development Philosophy\\n\\nWhile the inspiration for this project is a lack of high quality, easily extensible discrete logic simulators, this is a formost a learning exercise. This means progress will be slow and most of it will be rewritten many times over. Finding the best solution and gaining a deeper understanding of the underlying problem will take priority over bringing the software to a usable state. Do not expect fast progress or a user friendly editor for some time.\\n\\n## Technology\\n\\nThis application is written to be a browser-ran desktop-scale application. It has no server component, and performs all work in the client's browser.\\nThe UI renderer is React, with Redux providing the backing store.\\n\\n## License\\n\\nThis project is licenced under AGPL-3.0.\\n\\nSome logic symbol artwork has been provided by wikimedia commons under the public domain license.  These have been called out where used.\\n\\n## Alternatives\\n\\nThere are a few notable digital (and analog) circuit editors that I have come across and arbitrarily collected. Many more exist in the wild.\\n\\nOpen source:\\n\\n* http://www.cburch.com/logisim/ (desktop app, java)\\n* https://github.com/willymcallister/circuit-sandbox (online, javascript, analog)\\n\\nClosed source:\\n\\n* https://www.circuitlab.com/ (online)\\n* https://simulator.io/ (online)\\n\""],"sourceRoot":""}